import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.controller.api.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import static org.evomaster.client.java.controller.db.dsl.SqlDsl.sql;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto;
import  java.util.List;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
 * This file was automatically generated by EvoMaster on 2020-11-24T16:16:14.022+01:00[Europe/Paris]
 * <br>
 * The generated test suite contains 170 tests
 * <br>
 * Covered targets: 1296
 * <br>
 * Used time: 1h 0m 0s
 * <br>
 * Needed budget for current results: 81%
 * <br>
 * 
 */
public class EvoMasterTest_1h {

    
    private static final SutHandler controller = new org.heigit.ohsome.ohsomeapi.EMDriver();
    private static String baseUrlOfSut;
    
    
    @BeforeClass
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    @AfterClass
    public static void tearDown() {
        controller.stopSut();
    }
    
    
    @Before
    public void initTest() {
        controller.resetStateOfSUT();
    }
    
    
    
    
    @Test
    public void test_0() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/groupBy/tag?" + 
                    "filter=sqLETz8lR7pMlyH&" + 
                    "groupByKey=GM0F72&" + 
                    "showMetadata=xb3Iv6osYuf&" + 
                    "time=m368fN1bVhQ1C&" + 
                    "timeout=&" + 
                    "types=m9sb")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("You need to define one of the boundary parameters (bboxes, bcircles, bpolys)."));
    }
    
    
    @Test
    public void test_1() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/groupBy/key?" + 
                    "bcircles=Zx5x51QO7It&" + 
                    "filter=BKLecSI7F1jIDv&" + 
                    "format=7cswpli&" + 
                    "groupByKeys=Gb&" + 
                    "showMetadata=bLa8PrB0b6&" + 
                    "time=PIMnZWWHg9Rn&" + 
                    "types=28INhgi0O")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_2() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/density/groupBy/type?" + 
                    "bcircles=30_KMk0w5_JPyy&" + 
                    "filter=7sRFFxyaQ8wQlCNj&" + 
                    "format=&" + 
                    "keys=evomaster_4997_input&" + 
                    "showMetadata=Tu1eSGD9nbm&" + 
                    "time=o7J6OoO3wkE")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_3() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/density/groupBy/boundary?" + 
                    "bcircles=evomaster_955_input&" + 
                    "format=evomaster_956_input&" + 
                    "keys=SvNYl5XhAQeE3OA&" + 
                    "showMetadata=evomaster_957_input&" + 
                    "time=evomaster_936_input&" + 
                    "types=b7em&" + 
                    "values=Ml_m")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_4() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/density/groupBy/boundary?" + 
                    "bcircles=evomaster_26096_input&" + 
                    "filter=e8682zSvVrw&" + 
                    "format=evomaster_8621_input&" + 
                    "keys=Az2fQd1&" + 
                    "showMetadata=4VhjtDMgL93FK&" + 
                    "time=evomaster_26097_input&" + 
                    "types=evomaster_26098_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_5() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/density?" + 
                    "bboxes=du&" + 
                    "filter=DNvk7WPEWG&" + 
                    "time=48YsyHWD&" + 
                    "types=XRVQh9NcDkEamUS&" + 
                    "values=TU2mqYhOCx3w")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_6() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count?" + 
                    "bcircles=NzNPlf66Vy_o7IT9&" + 
                    "filter=ec3C&" + 
                    "format=5UOSjmk1BVy&" + 
                    "keys=dB7_DAB&" + 
                    "showMetadata=evomaster_10377_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_7() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/ratio?" + 
                    "bpolys=9eNG&" + 
                    "filter=uGijiIrPbBP&" + 
                    "format=wo5jE&" + 
                    "showMetadata=DGRmqQH9hTd&" + 
                    "time=cscsqfN&" + 
                    "types2=N2Shvj7wcfH")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_8() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/groupBy/type?" + 
                    "bcircles=evomaster_32882_input&" + 
                    "filter=ogVSV_cCla3&" + 
                    "format=n6yJgl0qPm&" + 
                    "keys=evomaster_32883_input&" + 
                    "showMetadata=evomaster_32884_input&" + 
                    "time=en&" + 
                    "types=J")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_9() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/groupBy/tag?" + 
                    "bcircles=BBTXMSUI_dKsxP&" + 
                    "filter=evomaster_5171_input&" + 
                    "format=GL9&" + 
                    "groupByKey=evomaster_5174_input&" + 
                    "groupByValues=evomaster_5172_input&" + 
                    "showMetadata=evomaster_5175_input&" + 
                    "time=evomaster_1364_input&" + 
                    "timeout=0.012668484514997025&" + 
                    "types=d&" + 
                    "values=WaV5ye")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_10() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/groupBy/key?" + 
                    "bcircles=OC7x54&" + 
                    "filter=evomaster_16473_input&" + 
                    "groupByKeys=evomaster_1709_hnput&" + 
                    "keys=ffID_wC7kPjSN&" + 
                    "showMetadata=6g2yVchD5qDLjbm&" + 
                    "time=evomaster_8364_input&" + 
                    "types=evomaster_10417_input&" + 
                    "values=evomaster_1711_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_11() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/groupBy/boundary/groupBy/tag?" + 
                    "bboxes=trbWpYsMav2&" + 
                    "filter=ivomaster_.369_input&" + 
                    "groupByKey=evomastev_6378_input&" + 
                    "keys=evomaster_6371_input&" + 
                    "showMetadata=HReRfGefW&" + 
                    "time=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_12() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/density/groupBy/type?" + 
                    "bcircles=W5DXKdpkS7gd&" + 
                    "filter=6e&" + 
                    "format=KtM1mlTGEwo&" + 
                    "keys=evomaster_23262_input&" + 
                    "showMetadata=0JcXsQ1DFIT&" + 
                    "time=evomaster_23261%5Dinput&" + 
                    "types=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_13() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/density/groupBy/type?" + 
                    "bcircles=Hv5tAI8_Cb&" + 
                    "filter=evomaster_1878_input&" + 
                    "format=kc4FHYpvZCo&" + 
                    "showMetadata=l_N6C&" + 
                    "time=evomaster_25100_input&" + 
                    "types=evomaster_1879_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_14() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/density/groupBy/tag?" + 
                    "bcircles=9tC8cq&" + 
                    "filter=m9btxgcwum&" + 
                    "format=ATtLG8EWd&" + 
                    "groupByKey=xZZj9Nt&" + 
                    "showMetadata=mkvc9blRLvVxToO&" + 
                    "time=Hx7Ro9S&" + 
                    "types=sC2idvi")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_15() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/density/groupBy/tag?" + 
                    "bboxes=&" + 
                    "bcircles=VrYbni&" + 
                    "filter=3jnbVbaYYSR&" + 
                    "format=hztJa9pX1glvi&" + 
                    "groupByKey=4Fq&" + 
                    "groupByValues=evomaster_5245_input&" + 
                    "keys=Ij3PJQMTMopqh4qp&" + 
                    "showMetadata=93PnFQsBQWiu&" + 
                    "types=evomaster_5246_input&" + 
                    "values=evomaster_5247_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_16() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/density/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=k9YqBvHw2MOcwa&" + 
                    "filter=evomaster_35540_input&" + 
                    "format=csV&" + 
                    "groupByKey=evomaster_26013_ipput&" + 
                    "groupByValues=evomastar_35539_input&" + 
                    "keys=evomaster_26016_input&" + 
                    "time=evomaster_26017_input&" + 
                    "timeout=96")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_17() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/density/groupBy/boundary/groupBy/tag?" + 
                    "bboxes=3WY8OPow&" + 
                    "format=evomaster_2695_input&" + 
                    "groupByKey=4HXUvUU3UK5yUKU7&" + 
                    "keys=evomaster_2696_input&" + 
                    "time=zqgUbmgoGap&" + 
                    "types=t2Yw1JN3&" + 
                    "values=evomaster_4478_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_18() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/density/groupBy/boundary?" + 
                    "bcircles=V57ystr5GeFZ&" + 
                    "format=xbsMwZt0C&" + 
                    "showMetadata=Qw&" + 
                    "time=PZoefn9T64")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_19() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/density?" + 
                    "bpolys=s&" + 
                    "filter=Ozh54NC&" + 
                    "format=CVOE3oSb2&" + 
                    "showMetadata=r&" + 
                    "time=oHYPFkaRyphX&" + 
                    "types=4FSCLZk4&" + 
                    "values=vj2irvkrdf7MFmp")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_20() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter?" + 
                    "bcircles=evomaster_1475_input&" + 
                    "filter=evomaster_10488_input&" + 
                    "format=qW6&" + 
                    "time=evomaster_10490_input&" + 
                    "timeout=0.024371510854747203&" + 
                    "types=evomaster_15406_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_21() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/ratio/groupBy/boundary?" + 
                    "bcircles=sgs6wiyRIHIGf5aQ&" + 
                    "filter2=ienRG0q&" + 
                    "keys2=evomaster_5331_input&" + 
                    "showMetadata=W3bkj52JN9f&" + 
                    "types=JVzaRQLv9Pq9FS4z&" + 
                    "types2=w3")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_22() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/ratio?" + 
                    "bcircles=KF5f0OUpqRYU&" + 
                    "filter2=_CNh1gEKRN7WrVui&" + 
                    "keys=nyLn&" + 
                    "types2=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_23() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/type?" + 
                    "bcircles=yj2ntZGi3Yc&" + 
                    "filter=&" + 
                    "format=evomaster_19750_input&" + 
                    "keys=CNuMfHFV&" + 
                    "showMetadata=3DE_2BfD2L2&" + 
                    "time=w&" + 
                    "types=cE")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_24() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/groupBy/type?" + 
                    "bcircles=0_mkzH5ICa&" + 
                    "keys=2oSc_owqzmHK&" + 
                    "showMetadata=xry6IKLQKMg3F&" + 
                    "time=&" + 
                    "types=5")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_25() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/tag?" + 
                    "bcircles=KhFPx6AYFnT&" + 
                    "filter=tw7hEfN9Un&" + 
                    "groupByKey=bQ3k6WYsC7Whms&" + 
                    "groupByValues=D8sTiJSxcT1&" + 
                    "time=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_26() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/groupBy/tag?" + 
                    "bcircles=uKCMVKiATo5l3nfO&" + 
                    "groupByKey=497Rre4yhbaDpDeA&" + 
                    "keys=0LF&" + 
                    "time=NmGKakBQj&" + 
                    "types=Fv8q3")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_27() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/key?" + 
                    "bcircles=by%7BU9ivl&" + 
                    "format=6hp2i4ttLdWh&" + 
                    "groupByKeys=evomaster_10015_input&" + 
                    "keys=Jkwd&" + 
                    "showMetadata=0G9Jnx&" + 
                    "timeout=0.21014640038477328&" + 
                    "types=pGllAhc6p6UXOCBI&" + 
                    "values=QGyhLCipO")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_28() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/groupBy/key?" + 
                    "bboxes=evomaster_10059_input&" + 
                    "filter=HJAI&" + 
                    "groupByKeys=9GmhmPczMj4KwX&" + 
                    "showMetadata=evomaster_10060_input&" + 
                    "time=evomaster_10061_input&" + 
                    "types=evomaster_10062_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_29() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=evomaster_5923_input&" + 
                    "filter=evomaster_5914_input&" + 
                    "format=QLFMgUtXj7&" + 
                    "groupByKey=gvKYv&" + 
                    "keys=&" + 
                    "showMetadata=7fJUj&" + 
                    "time=6djiBbTj&" + 
                    "timeout=0.49&" + 
                    "types=evo%7Daster_5918_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_30() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/groupBy/boundary?" + 
                    "bboxes=&" + 
                    "bcircles=FdDcws9A&" + 
                    "filter=AL")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_31() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density/groupBy/type?" + 
                    "bboxes=vt_80&" + 
                    "filter=evomaster_26645_input&" + 
                    "keys=wQ_9dQjtool&" + 
                    "time=evomaster_26643_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_32() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density/groupBy/tag?" + 
                    "bboxes=IU6cScB9y&" + 
                    "filter=RLwN7On_pMPRu&" + 
                    "format=evomaster_17338_input&" + 
                    "groupByKey=tkPFfUq&" + 
                    "groupByValues=Cc8CitQp&" + 
                    "keys=xR&" + 
                    "time=M&" + 
                    "types=_b0GhLvuklV&" + 
                    "values=6Z")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_33() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/density/groupBy/tag?" + 
                    "bcircles=DM1m7tAPR9QeA2&" + 
                    "filter=nIiR5D&" + 
                    "format=Tbv2iUELFFEx&" + 
                    "groupByKey=ie7mRQ3gYn7fYFH_&" + 
                    "showMetadata=kFp5Od3fOcl0R68t&" + 
                    "time=AsUBDd3o592&" + 
                    "timeout=&" + 
                    "types=Q9FooLLO0d8&" + 
                    "values=F8jrmTE1")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_34() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=Dgus6GXO&" + 
                    "format=P&" + 
                    "groupByKey=8YBYG&" + 
                    "groupByValues=&" + 
                    "showMetadata=IjIR7dvZr0b&" + 
                    "time=PFa4Ar2&" + 
                    "types=w7Mav_BvTm")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_35() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/density/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=J&" + 
                    "filter=VoZjz&" + 
                    "format=FCM5KJ&" + 
                    "groupByKey=doIarKT9Ih3FGsbh&" + 
                    "showMetadata=CfKfpQysAvkW&" + 
                    "time=R3vFroKEm6&" + 
                    "types=cuBR&" + 
                    "values=N2JSovmu0")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_36() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/density/groupBy/boundary?" + 
                    "bcircles=reG3mbzZdrFEP&" + 
                    "filter=evomqster_2436_input&" + 
                    "format=evomaster_2437_input&" + 
                    "keys=&" + 
                    "time=YsdTFooK0gMO&" + 
                    "types=pqTgNn5gsqwKjcke&" + 
                    "values=ge")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_37() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/density?" + 
                    "bboxes=JDhiCLTH8oH&" + 
                    "filter=evomaster_11779_input&" + 
                    "format=l&" + 
                    "keys=BCapfVYG3xTcYgM&" + 
                    "showMetadata=W6z4wx1jmWYT8P6&" + 
                    "types=evomaster_11780_input&" + 
                    "values=evomaster_2483_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_38() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length?" + 
                    "bboxes=X7YI&" + 
                    "filter=evomaster_15036_input&" + 
                    "format=KoEuk5vXq&" + 
                    "keys=evomaster_15037_input&" + 
                    "showMetadata=AxDvZ&" + 
                    "time=wCrBYJTAi9gnXE")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_39() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/ratio/groupBy/boundary?" + 
                    "bcircles=evomaster_12707_input&" + 
                    "bpolys=&" + 
                    "filter2=2gI9KmJo7oLC7&" + 
                    "format=uYMnEnuSo&" + 
                    "keys=iZ0EyeWrI9&" + 
                    "keys2=nBuY20hrNwSQwPax&" + 
                    "showMetadata=61lbHenz&" + 
                    "time=m7_Pmd3tdpKTJav&" + 
                    "types=evomaster_12709_input&" + 
                    "types2=evomaster_12710_input&" + 
                    "values=cg&" + 
                    "values2=PFhVU5e")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_40() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/ratio/groupBy/boundary?" + 
                    "bcircles=J&" + 
                    "keys2=czfdTINzk7AtpIE&" + 
                    "showMetadata=evomaster_2574_input&" + 
                    "time=evomaster_2575_input&" + 
                    "types2=pwl3LAtFO&" + 
                    "values=a%5CtL&" + 
                    "values2=aY3adijMR2KCFg")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_41() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/ratio?" + 
                    "bcircles=wyR&" + 
                    "keys2=&" + 
                    "showMetadata=AQ6&" + 
                    "time=uib3tV08lD8Jal&" + 
                    "types2=8Km9&" + 
                    "values=dm")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_42() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/groupBy/type?" + 
                    "bboxes=evomaster_6956_input&" + 
                    "format=vBqzunZ8eS7&" + 
                    "showMetadata=LBv6VbGop&" + 
                    "values=iSkrtIJ5U9zrE2V")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_43() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/tag?" + 
                    "bcircles=qvQW5GENFhSdTAD&" + 
                    "format=evomaster_16789_input&" + 
                    "groupByKey=evomaster_16787_input&" + 
                    "groupByValues=cpojWoWhk9&" + 
                    "showMetadata=FS0Q&" + 
                    "time=0&" + 
                    "types=mfLM5CjiHoTb1nSb")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_44() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/groupBy/tag?" + 
                    "bcircles=37X1nZCAlaVY&" + 
                    "filter=evomaster_2620_input&" + 
                    "format=evomaster_23494_input&" + 
                    "groupByKey=evomaster_23495_input&" + 
                    "groupByValues=evomaster_4212_input&" + 
                    "showMetadata=evomaster_23496_input&" + 
                    "time=hP87hDp5Wmh")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_45() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/groupBy/key?" + 
                    "bcircles=cJEVVC&" + 
                    "filter=kH5QTW7Zhjs0lO4I&" + 
                    "format=2tnfbYYxlxVgX&" + 
                    "groupByKeys=w&" + 
                    "time=O&" + 
                    "types=c1A")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_46() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=evomaster_15105_input&" + 
                    "format=sUSFiS3l&" + 
                    "groupByKey=evomauter_15106_input&" + 
                    "keys=evomaster_3796_input&" + 
                    "showMetadata=LfqiEf9m0fzmqpK&" + 
                    "time=evomaster_15107_input&" + 
                    "types=B")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_47() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=evomaster_13392_input&" + 
                    "bpolys=&" + 
                    "filter=evom_ster_6048_input&" + 
                    "groupByKey=qIiINhRnHy&" + 
                    "groupByValues=LayuRxD&" + 
                    "time=ZTfbUqIrBjo1&" + 
                    "values=evomaster_13395_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_48() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/groupBy/boundary?" + 
                    "bcircles=evomaster_34139_input&" + 
                    "filter=evomaster_2766_input&" + 
                    "format=evomaster_8117_input&" + 
                    "showMetadata=evomaster_34140_input&" + 
                    "time=evomaster_8118_input&" + 
                    "values=evomaster_13404oinpu")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_49() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/density/groupBy/type?" + 
                    "bboxes=bLXPSx&" + 
                    "keys=McrrcstPf3&" + 
                    "showMetadata=1rzikv_zTH8OS9&" + 
                    "time=y&" + 
                    "types=z5gJv")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_50() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/density/groupBy/type?" + 
                    "bcircles=0O0J9SYQ&" + 
                    "format=AaY29d9k_CmLkig&" + 
                    "keys=Ce1Pjablicz6")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_51() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/density/groupBy/tag?" + 
                    "bcircles=hU_UDU8ABSCS&" + 
                    "format=evomaster_10775_input&" + 
                    "groupByKey=gT7aNG&" + 
                    "groupByValues=evomaster_10776_input&" + 
                    "keys=pKzVc2&" + 
                    "showMetadata=evomaster_10777_input&" + 
                    "time=dkjU8ZOqE4&" + 
                    "types=7S3BLpx0QbBh&" + 
                    "values=Mb")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_52() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/density/groupBy/tag?" + 
                    "bcircles=OOTIgZhE&" + 
                    "format=Uaz&" + 
                    "groupByKey=Z&" + 
                    "groupByValues=FGK&" + 
                    "keys=dL&" + 
                    "showMetadata=evomaster_30416_input&" + 
                    "time=evomaster_30407_input&" + 
                    "types=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_53() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/density/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=evomaster_37008_input&" + 
                    "filter=UpkyQNT1kNpb&" + 
                    "format=rg4&" + 
                    "groupByKey=x8YNf2bLf0*Brr&" + 
                    "groupByValues=Kq&" + 
                    "showMetadata=evomaster_37009_input&" + 
                    "time=evomaster_37010_input&" + 
                    "timeout=0.07032248133716679&" + 
                    "types=i&" + 
                    "values=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_54() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/density/groupBy/boundary/groupBy/tag?" + 
                    "bboxes=Y58ucnFzHC8&" + 
                    "filter=gpEfVZ4f61&" + 
                    "groupByKey=Ba3iwxI&" + 
                    "showMetadata=Qd0xKBLWSTwo4CM&" + 
                    "time=&" + 
                    "types=8SRiDm3")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_55() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/density/groupBy/boundary?" + 
                    "bcircles=MjWAwRsy&" + 
                    "filter=evomaster_24400_input&" + 
                    "keys=evomaster_4894_%C2%89nput&" + 
                    "showMetadata=5PwmN&" + 
                    "time=rbe&" + 
                    "types=evomaster_4895_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_56() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/density?" + 
                    "bcircles=5Ethoxy81Bsy&" + 
                    "filter=yzcLx&" + 
                    "format=evomaster_12560_input&" + 
                    "showMetadata=d6&" + 
                    "time=evomaster_12561_input&" + 
                    "values=xaByGaj")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_57() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count?" + 
                    "bboxes=evomastUrW22954_input&" + 
                    "bcircles=&" + 
                    "filter=evomaster_2929_input&" + 
                    "format=csv&" + 
                    "keys=O&" + 
                    "showMetadata=&" + 
                    "time=evomaster_22953_input&" + 
                    "timeout=0.36833219256297045&" + 
                    "types=9hM%3BOV8mO6&" + 
                    "values=o")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_58() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/ratio/groupBy/boundary?" + 
                    "bboxes=evomaster_19304_input&" + 
                    "filter=6BTHUkt2C&" + 
                    "filter2=evomaster_2Y52_inpu&" + 
                    "format=SEjbf3z&" + 
                    "keys=evomaster_19305_input&" + 
                    "showMetadata=evomaster_2953_input&" + 
                    "time=evomaster_19302_input&" + 
                    "types=evomaster_19300_input&" + 
                    "types2=evomaster_19%2303_input&" + 
                    "values2=evomaster_5623_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_59() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/ratio?" + 
                    "bcircles=4A&" + 
                    "filter2=W_0ela&" + 
                    "format=c&" + 
                    "keys=evomaster_125_input&" + 
                    "keys2=evomaster_126_input&" + 
                    "showMetadata=&" + 
                    "time=evomaster_32_input&" + 
                    "types=evomaster_127_input&" + 
                    "types2=Sarw8nv&" + 
                    "values2=evomaster_128_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_60() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/type?" + 
                    "bcircles=0A9Y8U3JJodVBIT7&" + 
                    "filter=evomaster_8815_qnqut&" + 
                    "showMetadata=GI4ZrCq2x6B&" + 
                    "time=834aiH9R&" + 
                    "types=0aiLXuJNqs&" + 
                    "values=_ojHilkEd27J1")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_61() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/type?" + 
                    "bcircles=OylzpgklSdt2&" + 
                    "showMetadata=sitCzW3Cs5e55icT&" + 
                    "time=rUK0")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_62() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/tag?" + 
                    "bcircles=AG7iD&" + 
                    "bpolys=&" + 
                    "filter=evomaster_3066_input&" + 
                    "format=DKOfsEMoPq&" + 
                    "groupByKey=evomaster_3078_input&" + 
                    "groupByValues=xglsAvFsIhQ&" + 
                    "keys=&" + 
                    "showMetadata=v0HMuqEn7KFi&" + 
                    "time=evomaster_3079_input&" + 
                    "types=3JtI0D&" + 
                    "values=Q277bOGHK")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_63() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/key?" + 
                    "bboxes=CDKninPSDOb&" + 
                    "filter=evomaster_10876_input&" + 
                    "format=NzT&" + 
                    "groupByKeys=evomaster_29926_input&" + 
                    "keys=evomaster_10877_input&" + 
                    "showMetadata=evomaster_29927_input&" + 
                    "time=t06On&" + 
                    "types=evomaster_10762_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_64() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/key?" + 
                    "bcircles=bTgmjsH1Bgp0n&" + 
                    "format=evomaster_8279_input&" + 
                    "groupByKeys=UFeV%3AU&" + 
                    "showMetadata=CY7mmXaF&" + 
                    "time=evomaster_8280_input&" + 
                    "timeout=0.1567109951575787&" + 
                    "types=evomaster_4853_input&" + 
                    "values=LQwin")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_65() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/boundary/groupBy/tag?" + 
                    "bboxes=t06Fst4d4U9l6A&" + 
                    "filter=qemYk&" + 
                    "groupByKey=MHY&" + 
                    "time=e1D")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_66() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/boundary/groupBy/tag?" + 
                    "bboxes=evomaster_3951_input&" + 
                    "filter=VGnOCb1pi7Z2ciBl&" + 
                    "format=0pJXS8tipT9Dl&" + 
                    "groupByKey=1KddfAaXjpcU0L&" + 
                    "groupByValues=QdhNpTRna8&" + 
                    "showMetadata=KyiO3Y18N1GiTEVE&" + 
                    "time=evomaster_3950_input&" + 
                    "values=evomaster_3952_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_67() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/boundary?" + 
                    "bcircles=evomaster_109627_input&" + 
                    "format=my&" + 
                    "keys=evomaster_109896_input&" + 
                    "showMetadata=SN2N%40P&" + 
                    "time=dteiJWzFxhkrc&" + 
                    "timeout=-0.37019027859192843&" + 
                    "types=evomasver_19400_imrut&" + 
                    "values=SN2MDP")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_68() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density/groupBy/type?" + 
                    "bcircles=evomaster_18885_input&" + 
                    "filter=9xlm5K&" + 
                    "format=87rL&" + 
                    "showMetadata=4MSqpeW73&" + 
                    "time=z58_xN7s&" + 
                    "types=evomaster_18883_input&" + 
                    "values=7dixvB")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_69() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/density/groupBy/type?" + 
                    "bcircles=lBWMGU5zgr&" + 
                    "format=evomaster_3337_input&" + 
                    "keys=evomaster_5802_input&" + 
                    "time=A1f")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_70() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density/groupBy/tag?" + 
                    "bcircles=i8RI9&" + 
                    "filter=D&" + 
                    "groupByKey=R3&" + 
                    "groupByValues=jDa3DzO5WEPapRNy&" + 
                    "keys=f&" + 
                    "time=WTuff&" + 
                    "types=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_71() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density/groupBy/boundary/groupBy/tag?" + 
                    "bboxes=YOLbqcBq8NH7y&" + 
                    "format=&" + 
                    "groupByKey=DI06c0U&" + 
                    "groupByValues=iqE5wJYG&" + 
                    "keys=XDEjsM5GnV7kxJ&" + 
                    "showMetadata=sHU13OW2nie37U&" + 
                    "time=WpwUpao7ttK&" + 
                    "types=c8WpxExm")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_72() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/density/groupBy/boundary/groupBy/tag?" + 
                    "bboxes=evomaster_28311_input&" + 
                    "format=%3D&" + 
                    "groupByKey=evomaster_4045_input&" + 
                    "keys=F4u7&" + 
                    "showMetadata=HIYM1kN&" + 
                    "time=E&" + 
                    "types=evomaster_2048_input&" + 
                    "values=9ZJ")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_73() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density/groupBy/boundary?" + 
                    "bcircles=wYOFvsEw9ASPeh&" + 
                    "filter=evomaster_14599_input&" + 
                    "showMetadata=b20MGp&" + 
                    "time=evomaster_14600_input&" + 
                    "types=87D")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_74() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/density/groupBy/boundary?" + 
                    "bboxes=NO2PsbwGbYIRvHUn&" + 
                    "filter=EdU_ssI1yh&" + 
                    "format=Csv&" + 
                    "keys=ne&" + 
                    "showMetadata=JTiAi&" + 
                    "time=cvQml&" + 
                    "values=817DL1fRO3hXg")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_75() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/density?" + 
                    "bboxes=FySwdM&" + 
                    "filter=R&" + 
                    "format=evomaster_3364_input&" + 
                    "showMetadata=CE36oXBnEr&" + 
                    "types=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_76() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area?" + 
                    "bcircles=Rgb1DwR9&" + 
                    "filter=evomaster_15574_input&" + 
                    "keys=evomaster_15575_input&" + 
                    "showMetadata=ZFhnsoNAN_Da2&" + 
                    "time=evomaster_15576_input&" + 
                    "values=eUkyw6fk4jQ")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_77() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/boundary/groupBy/tag?" + 
                    "bboxes=3kc3IpJxO&" + 
                    "bcircles=VJMU&" + 
                    "bpolys=evomaster_72197_input&" + 
                    "filter=CJM6rY2&" + 
                    "format=evomaster_72198_input&" + 
                    "groupByKey=evomaster_72267_input&" + 
                    "groupByValues=euomaster_72268_input&" + 
                    "keys=evomasser_72212oinput&" + 
                    "time=TL%2F&" + 
                    "types=evomaster_72212_input&" + 
                    "values=evomaster_72213_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_78() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/density/groupBy/type?" + 
                    "bcircles=3VXgC2GI_gE&" + 
                    "bpolys=FvXBKIt5&" + 
                    "filter=evomaster_55_input&" + 
                    "keys=ODROBA9ypOnJw3X2&" + 
                    "showMetadata=WHbR8vis0bdnbgc&" + 
                    "time=evomaster_56_input&" + 
                    "timeout=0.19311294519606537&" + 
                    "types=evomaster_57_input&" + 
                    "values=02pegjrRi")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_79() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/groupBy/boundary?" + 
                    "bboxes=JU&" + 
                    "bpolys=q0ORuXspkQ5&" + 
                    "showMetadata=U7_xhIy")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_80() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/ratio/groupBy/boundary?" + 
                    "bboxes=evonaster_3%2C529_inpu&" + 
                    "filter=b5kZn%5DvfA8U&" + 
                    "filter2=&" + 
                    "format=evomaster_38235_input&" + 
                    "keys=fRkUaBksSpql&" + 
                    "keys2=w4mSqqO&" + 
                    "time=evomaster_38238_input&" + 
                    "types=fvomaster_30531_input&" + 
                    "types2=evomaster_38236_input&" + 
                    "values=HqJ6xQfb&" + 
                    "values2=evomaster_%238237_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Apart from the custom ids, the bboxeses array must contain double-parseable values in the following order: minLon, minLat, maxLon, maxLat."));
    }
    
    
    @Test
    public void test_81() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/ratio/groupBy/boundary?" + 
                    "bboxes=Y%3Fam%C2%8Er%3A4C&" + 
                    "bcircles=&" + 
                    "filter2=9cXitJPdpWVG&" + 
                    "format=5WyzS14DpQ_gH&" + 
                    "keys=evomaster_22802_input&" + 
                    "keys2=&" + 
                    "showMetadata=tXK&" + 
                    "time=my&" + 
                    "types=vhRW&" + 
                    "values2=RbSOoivrSPd28FQo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_82() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/ratio/groupBy/boundary?" + 
                    "bboxes=evonaster_3%2C529_inpu&" + 
                    "filter=b5kZn%5DvfA8U&" + 
                    "filter2=evomaster_38231_input&" + 
                    "format=evomaster_38235_input&" + 
                    "time=evomaster_38238_input&" + 
                    "types=fvomaster_30531_input&" + 
                    "types2=evomaster_38236_input&" + 
                    "values=HqJ6xQfb&" + 
                    "values2=evomaster_38237_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Apart from the custom ids, the bboxeses array must contain double-parseable values in the following order: minLon, minLat, maxLon, maxLat."));
    }
    
    
    @Test
    public void test_83() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/density/groupBy/type?" + 
                    "bboxes=F0csAtRMAHZE&" + 
                    "filter=gMoF2gD&" + 
                    "showMetadata=TlcFGjpHs8ne9&" + 
                    "time=1UY0tOsrWjwI&" + 
                    "values=DA36jDF")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_84() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/density/groupBy/tag?" + 
                    "bboxes=_TN0rExb&" + 
                    "bpolys=EBRZn2dYZm8fa17&" + 
                    "groupByKey=2cyt6YcNh4&" + 
                    "groupByValues=VxW8Q7ib8mT&" + 
                    "showMetadata=bSDbufBb&" + 
                    "time=OByuk&" + 
                    "values=vxoyZyokz")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_85() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/density/groupBy/boundary?" + 
                    "showMetadata=3hQ2YOSfg&" + 
                    "time=d&" + 
                    "types=b7em&" + 
                    "values=Ml_m")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("You need to define one of the boundary parameters (bboxes, bcircles, bpolys)."));
    }
    
    
    @Test
    public void test_86() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count?" + 
                    "bboxes=CHzmF8D3P&" + 
                    "bcircles=gjGO1pB7reS1W&" + 
                    "bpolys=UZSyHV2FdgaIMLn&" + 
                    "filter=jX6GmkcmP1ZImNPA&" + 
                    "keys=nPuMz7FA6d_CsGYM&" + 
                    "showMetadata=98jj9l4&" + 
                    "time=nbY3wb7XP3t&" + 
                    "types=9V")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_87() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/density/groupBy/tag?" + 
                    "bcircles=enomaster_2472%3A_input&" + 
                    "groupByKey=3BXB9NNnN9Kx6&" + 
                    "time=evomaster_4003_input&" + 
                    "types=evomaster_6271_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_88() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/ratio/groupBy/boundary?" + 
                    "filter=6BTHUkt2C&" + 
                    "filter2=Dhwn4J57hlJCM&" + 
                    "format=SEjbf3z&" + 
                    "keys=w2AqDHIReWeVo&" + 
                    "showMetadata=Fb_L&" + 
                    "types=yLH7EVIpYvN")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("You need to define one of the boundary parameters (bboxes, bcircles, bpolys)."));
    }
    
    
    @Test
    public void test_89() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/density/groupBy/type?" + 
                    "bboxes=U9m6N1jYDhAJAHt&" + 
                    "bpolys=GIzyEe7uPGzN4&" + 
                    "filter=9JTK7m&" + 
                    "format=TkEQX7Qo1&" + 
                    "keys=kx&" + 
                    "showMetadata=jyiXVRjRL&" + 
                    "time=20hlTmrW2rnOR&" + 
                    "timeout=yKtKSVTpPK9s&" + 
                    "values=52379jwX5JH3F7")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_90() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/density/groupBy/tag?" + 
                    "groupByKey=3XwA4OEvKc&" + 
                    "keys=s4IDj&" + 
                    "values=Y7CgoK8MyHz")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("You need to define one of the boundary parameters (bboxes, bcircles, bpolys)."));
    }
    
    
    @Test
    public void test_91() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/density/groupBy/boundary/groupBy/tag?" + 
                    "format=5qV&" + 
                    "groupByKey=_Wb&" + 
                    "keys=T9Se96_w&" + 
                    "timeout=ZHQcFP")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_92() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/ratio?" + 
                    "bpolys=&" + 
                    "filter=poa4YlJqO&" + 
                    "filter2=7bBMFjPq7DVs&" + 
                    "keys=3XaPeMFpSw1mz&" + 
                    "keys2=w6SttLq3zkX&" + 
                    "time=pD&" + 
                    "timeout=EFDK9VNIzL8tB&" + 
                    "values2=ngG")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_93() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/type?" + 
                    "bboxes=7o&" + 
                    "bpolys=jgqzREUBxL0uu&" + 
                    "filter=ECPu&" + 
                    "format=EVLrxbiPL&" + 
                    "keys=y2IwsTkahlQU&" + 
                    "time=Jn8EJSCtya&" + 
                    "types=GQe5")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_94() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/tag?" + 
                    "bboxes=YgyL&" + 
                    "bpolys=pFI_xyV_ApF&" + 
                    "groupByKey=ZnviJ9_ua2hqJ&" + 
                    "keys=3nH&" + 
                    "showMetadata=1xJJ3ihSyLjLWSoJ&" + 
                    "types=uqHx1rdfRgW0mq0F")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_95() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/key?" + 
                    "bboxes=d&" + 
                    "bcircles=NcoDIVEiR&" + 
                    "filter=d5Mp&" + 
                    "format=11yMReUsWcuv&" + 
                    "groupByKeys=dlxB1e64GG&" + 
                    "showMetadata=LtMQfG&" + 
                    "time=dYqHN&" + 
                    "values=77efdB7XTH")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_96() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/boundary/groupBy/tag?" + 
                    "bboxes=1ArHt_9ITtF&" + 
                    "filter=VUwK90N&" + 
                    "groupByKey=npd6bhv1sUmQIqxe&" + 
                    "time=zpsD&" + 
                    "types=5iVkAUz3")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_97() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density/groupBy/type?" + 
                    "bcircles=oyfV5DWMbO9&" + 
                    "bpolys=iCNVfopLs&" + 
                    "filter=NC_ND&" + 
                    "keys=j&" + 
                    "values=lYnMR3euJweCSQ")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_98() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density/groupBy/tag?" + 
                    "filter=dI9eU80mUgpYw&" + 
                    "groupByKey=mr2i&" + 
                    "groupByValues=XsKHNJXT31G&" + 
                    "showMetadata=lNS9Uc5mFhlYPOo&" + 
                    "timeout=an5e4TU&" + 
                    "values=UBRN")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_99() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density/groupBy/boundary/groupBy/tag?" + 
                    "filter=oo&" + 
                    "format=jvQN_OrKf7IYJ&" + 
                    "groupByKey=9&" + 
                    "groupByValues=TL17&" + 
                    "keys=9kF9eJs&" + 
                    "showMetadata=J")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("You need to define one of the boundary parameters (bboxes, bcircles, bpolys)."));
    }
    
    
    @Test
    public void test_100() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/ratio?" + 
                    "bboxes=s8jo2Ojs2EIbf&" + 
                    "filter=Tw26ebN&" + 
                    "format=SAMlXcH53uFxfTyn&" + 
                    "keys2=H3i74mSq&" + 
                    "time=&" + 
                    "types2=MdD6Uug")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_101() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/type?" + 
                    "bcircles=T&" + 
                    "filter=BnPjq6Qe45ndS&" + 
                    "format=U&" + 
                    "keys=MV7&" + 
                    "time=yty1K0BQNazRB&" + 
                    "types=z45&" + 
                    "values=dD")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_102() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/tag?" + 
                    "bcircles=vPXrswEtxn4E&" + 
                    "bpolys=&" + 
                    "groupByKey=8a&" + 
                    "groupByValues=TUG5&" + 
                    "keys=Em&" + 
                    "showMetadata=&" + 
                    "timeout=lh&" + 
                    "values=0_NbV1bl2V")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_103() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/key?" + 
                    "bpolys=gOV&" + 
                    "format=7CA&" + 
                    "groupByKeys=Jmf_o&" + 
                    "time=BccS7KHanWo_&" + 
                    "types=V2AcKwt")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_104() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=2owvP&" + 
                    "bpolys=ENLxiafQPC8&" + 
                    "format=&" + 
                    "groupByKey=Pt&" + 
                    "keys=txwdMWP")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_105() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/density/groupBy/type?" + 
                    "filter=l80yZ8ioDFG170O&" + 
                    "keys=5CzC&" + 
                    "timeout=9XTxiKtJ4b7&" + 
                    "values=iDe")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_106() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/density/groupBy/tag?" + 
                    "bboxes=YBMRP1LUU&" + 
                    "bpolys=SR&" + 
                    "filter=Y&" + 
                    "groupByKey=tvAOICx97fp_f&" + 
                    "groupByValues=1rCP6N1N6Wi76us&" + 
                    "keys=2Bis&" + 
                    "timeout=&" + 
                    "types=c75JREpMZRpdH")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_107() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/density/groupBy/boundary/groupBy/tag?" + 
                    "bboxes=BzSEYHe5TZSm9&" + 
                    "bpolys=8zlDUQ5QRV32tqh&" + 
                    "filter=khlerqg7Wpiypa6&" + 
                    "groupByKey=UhbwaRdP_DiASR&" + 
                    "showMetadata=rFyevzQ2&" + 
                    "time=G8M3kMeEo2o_6SbG&" + 
                    "timeout=vLleE_tZJv&" + 
                    "types=GbJkavn&" + 
                    "values=H0kLqE")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_108() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/ratio?" + 
                    "bboxes=ea8uAvp6o3urrda&" + 
                    "filter=&" + 
                    "format=c&" + 
                    "keys2=nZqeVS&" + 
                    "showMetadata=&" + 
                    "time=xaEyDz073eKAdSmd&" + 
                    "values=jocuSL0wyT7zXyg")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_109() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/type?" + 
                    "bboxes=rk&" + 
                    "bcircles=xjajFa6EXfs&" + 
                    "bpolys=VD0uaY&" + 
                    "filter=UR3_&" + 
                    "keys=&" + 
                    "showMetadata=7&" + 
                    "time=5VZqEJuRCe&" + 
                    "types=&" + 
                    "values=D8xUCs9yY_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_110() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/tag?" + 
                    "bcircles=MdDH&" + 
                    "format=826R8O&" + 
                    "groupByKey=iJFbrq&" + 
                    "groupByValues=N_&" + 
                    "timeout=nbMBCkfmAMD3fEgw&" + 
                    "values=T")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_111() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/key?" + 
                    "format=VsLTPfhmNXH&" + 
                    "groupByKeys=SzK_z54&" + 
                    "keys=_0H&" + 
                    "showMetadata=LLK7GxtD&" + 
                    "timeout=&" + 
                    "types=8K5Ecnqd2BGiP")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("You need to define one of the boundary parameters (bboxes, bcircles, bpolys)."));
    }
    
    
    @Test
    public void test_112() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/boundary/groupBy/tag?" + 
                    "bboxes=WX8lRs8V4vEM&" + 
                    "filter=Wf1K&" + 
                    "groupByKey=e1Q6FYwQebKCfL&" + 
                    "keys=mmpk4la&" + 
                    "timeout=PILi2&" + 
                    "values=wQ8qjTU1L")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_113() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density/groupBy/type?" + 
                    "bboxes=ism87aAzGIzTHdMI&" + 
                    "bpolys=wfFuXWN77i&" + 
                    "filter=B2S4RzRhzv4h&" + 
                    "showMetadata=aNbEcbQ&" + 
                    "time=XPq&" + 
                    "timeout=QVRf5ZY&" + 
                    "types=GC_0BjaHZ58a&" + 
                    "values=mRsDdI4U5TBr1Te")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_114() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density/groupBy/tag?" + 
                    "bpolys=RGVmvCDu&" + 
                    "format=5&" + 
                    "groupByKey=nKEUvol5DlxQhT&" + 
                    "keys=uuMM6cJ46Gv&" + 
                    "timeout=BEc9U7mPs8mLpdV&" + 
                    "values=Vu3Py7H1VFzEZC")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_115() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density/groupBy/boundary/groupBy/tag?" + 
                    "bboxes=bJb&" + 
                    "bpolys=LMUox&" + 
                    "format=&" + 
                    "groupByKey=_&" + 
                    "timeout=ixVCHwxug8O&" + 
                    "types=rwGIpnn")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_116() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/ratio/groupBy/boundary?" + 
                    "bboxes=v4fK0rC9U6uk4qgG&" + 
                    "bcircles=8vDY2wx&" + 
                    "bpolys=7rR2&" + 
                    "format=3akPlYDUS&" + 
                    "timeout=mNeEz&" + 
                    "types=64VOcGIH3fbdji1&" + 
                    "types2=vm&" + 
                    "values2=WkaSeag")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_117() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/ratio/groupBy/boundary?" + 
                    "bboxes=VENLC4&" + 
                    "bcircles=lt0zVF0h64ACp&" + 
                    "bpolys=0uQbaqbE1&" + 
                    "filter=X4EpX5N&" + 
                    "filter2=v8NrCdF89X8Y&" + 
                    "keys=zVb&" + 
                    "keys2=8hFPacK2HUTotIm&" + 
                    "time=08r&" + 
                    "timeout=sO9Ko4cNj3&" + 
                    "types2=0_w5SVhoTFiY&" + 
                    "values2=cKsqlHtrgW")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_118() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/density?" + 
                    "bboxes=5&" + 
                    "bpolys=PKTkUCXnsLdlu4dd&" + 
                    "format=TluhPj&" + 
                    "keys=vc8KWjRVmvr&" + 
                    "timeout=NKo1l2&" + 
                    "values=1yW1K4JEG1T9")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/density?" + 
                    "bboxes=_eUhBkA6Y&" + 
                    "bcircles=xHOn&" + 
                    "format=7&" + 
                    "showMetadata=0Vf&" + 
                    "time=86IrgzW&" + 
                    "types=kSHwG6s8&" + 
                    "values=cSNzLk5gpRDOf")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/density?" + 
                    "bcircles=GVy8J_&" + 
                    "filter=Ult8hXAq&" + 
                    "format=iFRbhuRpHBNH4n&" + 
                    "keys=MOZ1UHGEYV6EG3&" + 
                    "timeout=658&" + 
                    "types=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout is too long. It has to be shorter than 100.0 seconds"));
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/density?" + 
                    "bpolys=9nfYliJd8GhLQ&" + 
                    "format=9&" + 
                    "types=c5dtPGES")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/density?" + 
                    "bboxes=3rn06rvWiPpd&" + 
                    "bpolys=EsGWfg&" + 
                    "values=FWiP8")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/density?" + 
                    "bboxes=GhkTduvgVHTCrmLy&" + 
                    "keys=n3GXtN8a6xzop&" + 
                    "showMetadata=jMzjQXou3bDEhKlU")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/density?" + 
                    "bcircles=N63Z0JMEZa_&" + 
                    "bpolys=hhgmc0R3x&" + 
                    "filter=Ema1hV&" + 
                    "format=6&" + 
                    "keys=rHdKVtaL8i&" + 
                    "showMetadata=mJHvxrb&" + 
                    "time=6&" + 
                    "timeout=IljWoUUa7kGZN")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/density?" + 
                    "bcircles=&" + 
                    "bpolys=5m9yep&" + 
                    "filter=&" + 
                    "format=nt9HjThFo&" + 
                    "showMetadata=AJj3M7C3XiF&" + 
                    "time=oLSkeJp0&" + 
                    "timeout=h")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_119() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/density/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=yXnDOvtU6JLKJ&" + 
                    "bpolys=tU4WvZyQaf&" + 
                    "format=Y5k&" + 
                    "groupByKey=%2CIXmvrN3YK5yzKo7&" + 
                    "groupByValues=GlC2x&" + 
                    "showMetadata=iJ_IAyts4&" + 
                    "time=zqgUbmgoGap&" + 
                    "timeout=pspmhgTlwt0nrE&" + 
                    "types=t2Yw1JN3&" + 
                    "values=15TNcgegmZ")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("You need to give one groupByKey parameter, if you want to use groupBy/tag."));
    }
    
    
    @Test
    public void test_120() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/density/groupBy/tag?" + 
                    "bcircles=evomaster_24728_input&" + 
                    "bpolys=evomaster_10303_input&" + 
                    "format=csv&" + 
                    "groupByKey=4uO%2C20ey3&" + 
                    "groupByValues=evomaster_28750_input&" + 
                    "keys=evomaster_28604_input&" + 
                    "types=evomaster_6271_knput")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("You need to give one groupByKey parameter, if you want to use groupBy/tag."));
    }
    
    
    @Test
    public void test_121() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/groupBy/tag?" + 
                    "bcircles=J4sltVCQJ&" + 
                    "bpolys=bSBINaj9r&" + 
                    "filter=BUZOKFKDXyZfi&" + 
                    "format=bXiW3ZZDIP1dE&" + 
                    "groupByKey=evomaster_29%2C17_input&" + 
                    "groupByValues=Da&" + 
                    "keys=evomaster_42388_input&" + 
                    "showMetadata=evomaster_42389_input&" + 
                    "time=evomaster_42390_input&" + 
                    "types=Fv8q3")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("You need to give one groupByKey parameter, if you want to use groupBy/tag."));
    }
    
    
    @Test
    public void test_122() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/type?" + 
                    "bpolys=evomaster_108_input&" + 
                    "filter=evomaster_93_input&" + 
                    "format=CSv&" + 
                    "keys=3Z&" + 
                    "time=idAZt&" + 
                    "timeout=se&" + 
                    "types=IGu")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_123() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/ratio?" + 
                    "bpolys=evomas%7Cer_11783_input&" + 
                    "filter=WZcDu8s1yqWTTb2E&" + 
                    "filter2=PBgWcAvX2yhdRUtR&" + 
                    "format=Qt1WjOHZvR&" + 
                    "keys=hjyV&" + 
                    "showMetadata=evomaster_11786_input&" + 
                    "time=uib3tV08lD8Jal&" + 
                    "values2=ZO7y")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_124() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/ratio/groupBy/boundary?" + 
                    "bboxes=KejohWwsM0B0j&" + 
                    "bcircles=VT&" + 
                    "keys=IRtPdmb&" + 
                    "time=sO2UYBinPO6&" + 
                    "values=kd5uoXBwEwa")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_125() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/key?" + 
                    "bboxes=oub_&" + 
                    "bpolys=aiVc9UEnL2&" + 
                    "filter=ozSpi5ok8PAJ&" + 
                    "format=2TAmK38b8iw9N9uT&" + 
                    "groupByKeys=%2C&" + 
                    "time=_AS&" + 
                    "values=6dMmwY")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("You need to give one groupByKeys parameter, if you want to use groupBy/key."));
    }
    
    
    @Test
    public void test_126() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/density/groupBy/boundary?" + 
                    "bboxes=UPi97i_c49PS51ON&" + 
                    "bcircles=_O&" + 
                    "filter=Gx&" + 
                    "format=yIn0gx&" + 
                    "keys=MkBR4u5X&" + 
                    "timeout=byCnsLZ6KxS4bD5&" + 
                    "types=WGBEwiP9R9_YBgHY&" + 
                    "values=ivHpGqk2u5z")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_127() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter?" + 
                    "bpolys=&" + 
                    "filter=4lNOy3cAivGN&" + 
                    "format=5hLl8v087iJmMJH&" + 
                    "keys=d15_Ut509&" + 
                    "timeout=Lwg")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_128() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/boundary?" + 
                    "bboxes=Yzktaknt25rG&" + 
                    "bcircles=zugJmTJhiu2&" + 
                    "filter=_Leh&" + 
                    "format=VqNoaot5Kvv&" + 
                    "keys=C0fShB8m&" + 
                    "showMetadata=uyrFS97KN9ghB&" + 
                    "timeout=RMpgMvt1ur&" + 
                    "types=&" + 
                    "values=neaYromSF8bS9tf")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_129() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density/groupBy/boundary?" + 
                    "bboxes=PyWvkcRyXxWtXLWU&" + 
                    "bcircles=SQzMkEeK1&" + 
                    "bpolys=26Wh&" + 
                    "filter=1CPmKnN0QqXM&" + 
                    "timeout=ishZFsscSEQmD")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_130() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density?" + 
                    "bcircles=hEqMG3RABEW3pn&" + 
                    "filter=SkWS_AjCldL&" + 
                    "keys=&" + 
                    "showMetadata=yg_yHt&" + 
                    "timeout=emZO7WKf5Ds1&" + 
                    "types=lnZJaORvFnR&" + 
                    "values=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_131() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length?" + 
                    "bboxes=7BREFN5Y&" + 
                    "bcircles=2v8OPGE&" + 
                    "bpolys=&" + 
                    "filter=r6h&" + 
                    "format=xwAFM3rJ&" + 
                    "timeout=K_HHhUWMUmQL0Vk")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_132() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/boundary?" + 
                    "bboxes=F3jtfzHsOA&" + 
                    "format=fiqqW&" + 
                    "keys=lDJLHNnk6&" + 
                    "showMetadata=t&" + 
                    "timeout=n1Cpbk2kAkLxy4Nj")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_133() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/density/groupBy/boundary?" + 
                    "bpolys=C0XEYAAsiO0e&" + 
                    "filter=oAmLRufQHOF2oLx&" + 
                    "format=IfbG&" + 
                    "time=KIgmTkjN&" + 
                    "types=WHr&" + 
                    "values=XxK9jom")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_134() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/density?" + 
                    "bboxes=F4YluX&" + 
                    "bcircles=UciiYyCL5G8G1&" + 
                    "filter=y&" + 
                    "format=LAQs3N5mG55ypd&" + 
                    "showMetadata=fdHjj&" + 
                    "timeout=_&" + 
                    "values=S5aE5f9IZA2gmR51")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_135() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count?" + 
                    "bpolys=zch&" + 
                    "filter=aACR5IE&" + 
                    "format=Ati&" + 
                    "keys=tiYaXfM&" + 
                    "time=Lz9CX")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_136() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/boundary?" + 
                    "filter=QLdGR5E1MZ&" + 
                    "format=6&" + 
                    "keys=LEYjZ&" + 
                    "showMetadata=_oTEFN&" + 
                    "time=dyR8B2C&" + 
                    "timeout=&" + 
                    "types=_oAe9lOb84")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("You need to define one of the boundary parameters (bboxes, bcircles, bpolys)."));
    }
    
    
    @Test
    public void test_137() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density/groupBy/boundary?" + 
                    "bboxes=5UJFHw&" + 
                    "bpolys=E2eel&" + 
                    "filter=aUqMydo&" + 
                    "format=S5_g1CTN1zJ0Spa&" + 
                    "time=DCRF4qpu8j")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_138() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density?" + 
                    "bboxes=H7&" + 
                    "bpolys=EX_qYxb&" + 
                    "format=XcJvaJbj&" + 
                    "timeout=nE3&" + 
                    "types=fCunMqX7vgMP")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_139() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area?" + 
                    "bboxes=KKZegp&" + 
                    "filter=BDqcJrYw8h&" + 
                    "format=vO1aQqt5w&" + 
                    "timeout=&" + 
                    "values=7jyJHos2oUj")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_140() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/boundary?" + 
                    "bboxes=evomaster_2289_input&" + 
                    "bcircles=zugJmTJhiu2&" + 
                    "bpolys=mEg&" + 
                    "filter=_Leh&" + 
                    "format=VqNoaot5Kvv&" + 
                    "keys=C%2CfShB8m&" + 
                    "showMetadata=uyrFS97KN9ghB&" + 
                    "time=IQ7&" + 
                    "types=&" + 
                    "values=neaYromSF8bS9tf")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_141() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/density?bpolys=uJbO")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_142() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/density/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=pdqDwdtMrvkYnbLh&" + 
                    "filter=hX&" + 
                    "format=rfTxp&" + 
                    "groupByKey=siaWJD6F&" + 
                    "keys=evomaster_219_input&" + 
                    "time=ouj08QGeFSzzAG&" + 
                    "timeout=x&" + 
                    "types=h7EOedH6&" + 
                    "values=evomaster_220_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/type?" + 
                    "bboxes=DO3XJEzIv&" + 
                    "bpolys=_7Sgouz&" + 
                    "format=evomaster_221_input&" + 
                    "keys=AiFiqv&" + 
                    "time=XlRlcI&" + 
                    "timeout=nZy93L3ji&" + 
                    "types=HdDArcLV0QHV&" + 
                    "values=Hx")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count?" + 
                    "bcircles=Ck&" + 
                    "bpolys=NkFR4bb&" + 
                    "filter=G886ZDHgXwp&" + 
                    "format=UqzsfTYjcYuFKPnV&" + 
                    "keys=k5c2D3o&" + 
                    "showMetadata=9gMC7wQZ4CF&" + 
                    "time=evomaster_222_input&" + 
                    "timeout=evomaster_223_input&" + 
                    "values=i0wZWdPY0Vgb")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/key?" + 
                    "bboxes=H06Wzqccvo0ZZ3&" + 
                    "bpolys=W41trFBbNEsIcVCE&" + 
                    "format=OfMGlQyEw5FAeyy&" + 
                    "groupByKeys=evomaster_224_input&" + 
                    "keys=UKK142wvcnCc&" + 
                    "showMetadata=evomaster_225_input&" + 
                    "time=evomaster_226_input&" + 
                    "timeout=9")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/groupBy/tag?" + 
                    "bcircles=evomaster_227_input&" + 
                    "format=Vgf015d&" + 
                    "groupByKey=TN4WklBx8unx&" + 
                    "time=e")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density?" + 
                    "bboxes=5wgX&" + 
                    "bcircles=J&" + 
                    "bpolys=WgB_wNxjEdniHyG&" + 
                    "filter=uHjVJMA&" + 
                    "format=evomaster_228_input&" + 
                    "keys=qe1M&" + 
                    "timeout=seDSz4V&" + 
                    "types=95&" + 
                    "values=BQZ")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_143() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/ratio?" + 
                    "bboxes=FHitDYxC16t&" + 
                    "bcircles=OJeikWHojkqwK&" + 
                    "filter2=GFUAl2I&" + 
                    "keys2=uWWt5CV0wOx&" + 
                    "showMetadata=v_5Dt6wmy2IX&" + 
                    "time=ujveh&" + 
                    "timeout=rBTFb&" + 
                    "types2=gGJJ7&" + 
                    "values2=qAAHdG")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_144() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/density/groupBy/type?" + 
                    "bcircles=3VXgC2GI_gE&" + 
                    "filter=BKBlylyFmjJB&" + 
                    "format=ngfXdgZd&" + 
                    "showMetadata=WHbR8vis0bdnbgc&" + 
                    "time=evomaster_14_input&" + 
                    "timeout=0.19311294519606537&" + 
                    "types=sX_j8chZ2Ai&" + 
                    "values=02pegjrRi")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_145() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/density/groupBy/tag?" + 
                    "bpolys=Ra%3A39W&" + 
                    "format=&" + 
                    "groupByKey=evomaster_42936_input&" + 
                    "groupByValues=T&" + 
                    "showMetadata=2fs50foDjqVQ_&" + 
                    "types=vc")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_146() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/density?" + 
                    "time=3Y1joXhDSZ4xi0M&" + 
                    "timeout=ueHy38Egmw&" + 
                    "types=oORX4sWndjC3gr0f")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_147() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/density/groupBy/type?" + 
                    "bcircles=NwkC0zMFSQHto&" + 
                    "bpolys=b_WkCLi540JJ&" + 
                    "filter=zIZXR&" + 
                    "keys=&" + 
                    "values=15p4lOQvs3rx")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/key?" + 
                    "bpolys=cSx88dRhUF4W&" + 
                    "filter=3UwoAs&" + 
                    "format=XUf6SUDjxbZa4uL&" + 
                    "groupByKeys=t5ejjo86bnh&" + 
                    "keys=UuNAiHt&" + 
                    "time=m&" + 
                    "timeout=f2D&" + 
                    "values=DQjAVC")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/type?" + 
                    "bpolys=6vqQFQOUjwGtb6&" + 
                    "filter=6W&" + 
                    "timeout=My2mBvcQ2")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area?" + 
                    "bcircles=hIhKdwkAJWS5C&" + 
                    "bpolys=zDPJT9ip&" + 
                    "keys=2&" + 
                    "values=z66Dg8Oq4RgK")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/boundary/groupBy/tag?" + 
                    "bboxes=mS&" + 
                    "groupByKey=2bDtxrJbOf9MZK&" + 
                    "showMetadata=O&" + 
                    "timeout=XDUS&" + 
                    "types=3SB&" + 
                    "values=Ts68ur")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/type")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("You need to define one of the boundary parameters (bboxes, bcircles, bpolys)."));
    }
    
    
    @Test
    public void test_148() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/groupBy/type?" + 
                    "filter=cYrg9MZPiz3ircLQ&" + 
                    "format=kReutIZL&" + 
                    "showMetadata=eCyjGU3VKF2E7IsR")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("You need to define one of the boundary parameters (bboxes, bcircles, bpolys)."));
    }
    
    
    @Test
    public void test_149() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/density/groupBy/tag?" + 
                    "bcircles=evomaster_2472%3A_input&" + 
                    "format=evomaster_1030Q_input&" + 
                    "groupByKey=evomatter_590%5EYnpu&" + 
                    "keys=evomaster_10304_input&" + 
                    "showMetadata=XIQhMd&" + 
                    "time=evomaster_4003_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_150() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/ratio?" + 
                    "format=lts&" + 
                    "keys=c6xBcK&" + 
                    "showMetadata=F_Zr&" + 
                    "timeout=gjf")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_151() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/ratio/groupBy/boundary?" + 
                    "bboxes=Y_amnr%3A4C&" + 
                    "bcircles=&" + 
                    "filter=evomaster_22752_input&" + 
                    "keys2=D&" + 
                    "showMetadata=tXK&" + 
                    "types=vhRW&" + 
                    "types2=FbA98ao68y6jdW&" + 
                    "values=evnmaster_22751_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_152() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/type?" + 
                    "bcircles=R1f&" + 
                    "bpolys=Nxxg&" + 
                    "format=Ql&" + 
                    "showMetadata=qX2x5IVJIU1c&" + 
                    "time=JuQkJjCeC3&" + 
                    "types=EcWsnUkz")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_153() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/tag?" + 
                    "bpolys=%7Bs&" + 
                    "format=evomaster_107635_input&" + 
                    "groupByKey=5A4obDJRhKe2k&" + 
                    "keys=&" + 
                    "showMetadata=7h%3Fn3_V&" + 
                    "time=yUsuNXg&" + 
                    "timeout=&" + 
                    "values=evomaster_8806_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in reading of the given GeoJSON."));
    }
    
    
    @Test
    public void test_154() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count?" + 
                    "bpolys=%3A&" + 
                    "format=evomaster_71235_input&" + 
                    "keys=OLU&" + 
                    "showMetadata=S4_9rP2CAl1hB&" + 
                    "types=evomaster_71234_input&" + 
                    "values=xp")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_155() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/groupBy/type?" + 
                    "keys=7Jofrs_mBFxWDV&" + 
                    "timeout=Js3a1QCQxbZn3d3")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/key?" + 
                    "bboxes=eyHyZ&" + 
                    "bpolys=969FbmKwfxePtC&" + 
                    "filter=oQ6iAYf&" + 
                    "format=woJA&" + 
                    "groupByKeys=S&" + 
                    "keys=UK5zjgHOe&" + 
                    "showMetadata=Mz&" + 
                    "time=bnrYH&" + 
                    "timeout=1RGvulQ&" + 
                    "types=u3pyWtmEkeuVB")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/tag?" + 
                    "bboxes=CY02PwJoVpCLhwE&" + 
                    "bpolys=922c&" + 
                    "filter=edfn0CwUSir&" + 
                    "format=E5DOa9ot&" + 
                    "groupByKey=cPolWF9Drod&" + 
                    "groupByValues=40d&" + 
                    "showMetadata=PeUA&" + 
                    "timeout=QEB6l&" + 
                    "types=_mM8&" + 
                    "values=6D")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/density/groupBy/tag?" + 
                    "bpolys=KfoxtSrFa6&" + 
                    "filter=TQ&" + 
                    "groupByKey=bbnhjlHD&" + 
                    "showMetadata=&" + 
                    "time=d53g&" + 
                    "timeout=9838F&" + 
                    "values=SJGYq33ZRL")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout is too long. It has to be shorter than 100.0 seconds"));
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/density/groupBy/tag?" + 
                    "bcircles=U16LRSYF6daT&" + 
                    "format=rWpPsy&" + 
                    "groupByKey=4x8M40U&" + 
                    "groupByValues=iT&" + 
                    "keys=CVlF8Se&" + 
                    "showMetadata=0LrcjYuYH4P3&" + 
                    "time=QvE9jg_h08&" + 
                    "timeout=9k3&" + 
                    "values=5mKCv5d")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/key?" + 
                    "bboxes=V9voT1lokc&" + 
                    "bcircles=4mABGuf3mK7qUMT&" + 
                    "bpolys=LBDUCmromiFjX&" + 
                    "format=scQzOXj&" + 
                    "groupByKeys=LCkVtsA_p6lxcj&" + 
                    "keys=&" + 
                    "timeout=qiei&" + 
                    "types=eRv&" + 
                    "values=tByheod")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/boundary?" + 
                    "bboxes=NX6D&" + 
                    "bpolys=2xWsez4YXXi6X3g_&" + 
                    "filter=hJChC&" + 
                    "format=29FXXOs1mW&" + 
                    "keys=j&" + 
                    "showMetadata=YjCEmpBtIODRPo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/ratio/groupBy/boundary?" + 
                    "bboxes=NuAUckSESiVc&" + 
                    "bcircles=m44N7ukIw8&" + 
                    "filter=YSZavXwcqJ2YnL&" + 
                    "filter2=12bUGZqAlalXQxL1&" + 
                    "keys2=jy&" + 
                    "time=n4nwhJ&" + 
                    "timeout=rZriEKMGO&" + 
                    "types2=ajBOSzAy&" + 
                    "values2=e9fBPL8F")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/density?" + 
                    "bcircles=xUAN8a6Ya&" + 
                    "filter=lPM7Kn_&" + 
                    "keys=tAbI1F7VDtg&" + 
                    "showMetadata=heur4v&" + 
                    "time=TOfQ18aBx")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density/groupBy/type?" + 
                    "bpolys=RnbYDO&" + 
                    "keys=0CvTq6POwctHUPb&" + 
                    "types=PZ9rVjser")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_156() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/ratio?" + 
                    "bboxes=6YlwiJ__s&" + 
                    "bcircles=FyF7St&" + 
                    "filter=T35Z9jpvVOJWwE&" + 
                    "filter2=mC&" + 
                    "format=iI&" + 
                    "keys=MffztuzyJEwLo&" + 
                    "keys2=cnf&" + 
                    "showMetadata=s2jE50_Jqv&" + 
                    "types=Cye9cy3q3lzs&" + 
                    "values2=9KBS86tKEe9h")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_157() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/key?" + 
                    "bcircles=ZHBjw&" + 
                    "filter=4Lpj7w7pek&" + 
                    "format=9bm7w&" + 
                    "groupByKeys=7Lciv&" + 
                    "time=qdb&" + 
                    "types=UdZ&" + 
                    "values=GXQ8Bo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_158() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/ratio/groupBy/boundary?" + 
                    "bcircles=2JdwLLVOxX_IAd&" + 
                    "bpolys=MetWKUdC0uCbKo&" + 
                    "filter=E&" + 
                    "filter2=DhjsYw72L4gPhzE3&" + 
                    "format=4O_VsQxACouh&" + 
                    "time=80JFL2L&" + 
                    "types=YcBpXx&" + 
                    "values=Tj")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_159() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=U_reGTWjTf55cjZW&" + 
                    "groupByKey=bp&" + 
                    "groupByValues=UKqVVXNNjYR3_&" + 
                    "showMetadata=YXS5&" + 
                    "types=JJZdjzi&" + 
                    "values=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_160() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/tag?" + 
                    "bboxes=C2z&" + 
                    "bcircles=vT8i&" + 
                    "bpolys=2AmYdr&" + 
                    "format=BN&" + 
                    "groupByKey=4klY&" + 
                    "time=F&" + 
                    "values=sqDg")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_161() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/ratio/groupBy/boundary?" + 
                    "bboxes=evomaster_3%2C529_inpu&" + 
                    "filter=b5kZn%5DvfA8U&" + 
                    "filter2=evomaster_38231_input&" + 
                    "format=Q&" + 
                    "keys=fRkUaBksSpsl&" + 
                    "time=EP3g&" + 
                    "timeout=7&" + 
                    "types=fvomaster_30532_input&" + 
                    "types2=h1JzUDngcpKh&" + 
                    "values2=vog1vH")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Apart from the custom ids, the bboxeses array must contain double-parseable values in the following order: minLon, minLat, maxLon, maxLat."));
    }
    
    
    @Test
    public void test_162() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/key?" + 
                    "bboxes=aukk&" + 
                    "bcircles=k6qab&" + 
                    "bpolys=J5ySnf_T8aooq5R&" + 
                    "groupByKeys=V9UJw_8G8re&" + 
                    "keys=6798r0&" + 
                    "showMetadata=g&" + 
                    "timeout=Z41O9cqXMcbpfC5z&" + 
                    "types=sWF5CFGAM2&" + 
                    "values=Xr7jLdoLlkpeGLqv")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_163() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/boundary?" + 
                    "bboxes=5b&" + 
                    "bcircles=w7oNA&" + 
                    "keys=b7CmoJJe6pX&" + 
                    "showMetadata=wROk17smo17z&" + 
                    "values=O4fWAthgcZ7")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_164() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/groupBy/boundary?" + 
                    "bpolys=evomaster_3%2C08_input&" + 
                    "filter=evomaster_1839_input&" + 
                    "format=CSv&" + 
                    "showMetadata=evomaster_65773_input&" + 
                    "time=S&" + 
                    "types=evomaster_1742_input&" + 
                    "values=evomaster_37720_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The bpolys parameter must contain double-parseable values in form of lon/lat coordinate pairs."));
    }
    
    
    @Test
    public void test_165() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count?" + 
                    "bcircles=3IuT0&" + 
                    "format=f6gFGGquTuf1oxi&" + 
                    "time=8")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_166() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/tag?" + 
                    "bpolys=CCsP3ytzKAPtmoE&" + 
                    "filter=GXvKx0V&" + 
                    "groupByKey=dP3EA2au8lzx&" + 
                    "keys=&" + 
                    "showMetadata=nEUtA35bMaT2NJY1&" + 
                    "time=dcbhHG5VIKjHkH&" + 
                    "timeout=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_167() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/ratio/groupBy/boundary?" + 
                    "bboxes=Xytv9C_5NnJG5&" + 
                    "keys=&" + 
                    "showMetadata=dV1xRfcVuSP&" + 
                    "types=2eePEjNjfz6It&" + 
                    "types2=&" + 
                    "values=r2CZszIDD8cAey")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_168() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/boundary?" + 
                    "bboxes=BtzoATkB9Zb9I8L&" + 
                    "format=PT0VxFkyFQ1ACa1&" + 
                    "showMetadata=XQK&" + 
                    "time=SdiDXacXuQB")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_169() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/type?" + 
                    "bboxes=zj&" + 
                    "bcircles=at9gru6T&" + 
                    "bpolys=BOUI0emYGt&" + 
                    "filter=KYqW0X&" + 
                    "format=G2F&" + 
                    "keys=&" + 
                    "time=c7JNKE0No6cZJpd")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }


}
