import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.controller.api.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import static org.evomaster.client.java.controller.db.dsl.SqlDsl.sql;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto;
import  java.util.List;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
 * This file was automatically generated by EvoMaster on 2020-11-24T20:28:43.405+01:00[Europe/Paris]
 * <br>
 * The generated test suite contains 589 tests
 * <br>
 * Covered targets: 6389
 * <br>
 * Used time: 1h 0m 0s
 * <br>
 * Needed budget for current results: 98%
 * <br>
 * 
 */
public class EvoMasterTest_1h_seed_10_per_op {

    
    private static final SutHandler controller = new org.heigit.ohsome.ohsomeapi.EMDriver();
    private static String baseUrlOfSut;
    
    
    @BeforeClass
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    @AfterClass
    public static void tearDown() {
        controller.stopSut();
    }
    
    
    @Before
    public void initTest() {
        controller.resetStateOfSUT();
    }
    
    
    
    
    @Test
    public void test_0() throws Exception {
        
        try{
            given().accept("*/*")
                    .get(baseUrlOfSut + "/users/count/groupBy/boundary?" + 
                        "bcircles=8.72865%2C49.4050%2C7%7C8.7076%2C49.434%2C9&" + 
                        "filter=oneway%21%3D*+or+not+id%3A%281+..+9999%29&" + 
                        "time=%2F%2FP11M17D&" + 
                        "timeout=62")
                    .then();
        } catch(Exception e){
        }
    }
    
    
    @Test
    public void test_1() throws Exception {
        
        try{
            given().accept("*/*")
                    .get(baseUrlOfSut + "/users/count/density/groupBy/type?" + 
                        "bcircles=8.736%2C49.436%2C5%7C8.74378%2C49.409888%2C83%7C8.707%2C49.413232%2C4&" + 
                        "showMetadata=yes&" + 
                        "timeout=23")
                    .then();
        } catch(Exception e){
        }
    }
    
    
    @Test
    public void test_2() throws Exception {
        
        try{
            given().accept("*/*")
                    .post(baseUrlOfSut + "/users/count/density/groupBy/tag?" + 
                        "bcircles=8.737%2C49.403%2C3%7C8.716%2C49.4225%2C6%7C8.7336%2C49.43004%2C6&" + 
                        "format=csv&" + 
                        "groupByKey=building&" + 
                        "groupByValues=path&" + 
                        "timeout=45")
                    .then();
        } catch(Exception e){
        }
    }
    
    
    @Test
    public void test_3() throws Exception {
        
        try{
            given().accept("*/*")
                    .get(baseUrlOfSut + "/users/count/density/groupBy/tag?" + 
                        "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22G%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7360%2C49.429%5D%2C%5B8.74666%2C49.439%5D%2C%5B8.709%2C49.419%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                        "filter=barrier%21%3D*+or+geometry%3Apolygon&" + 
                        "format=json&" + 
                        "groupByKey=highway&" + 
                        "groupByValues=tower%2Cstation&" + 
                        "showMetadata=no&" + 
                        "time=%2F%2FP2Y2M17D&" + 
                        "timeout=79")
                    .then();
        } catch(Exception e){
        }
    }
    
    
    @Test
    public void test_4() throws Exception {
        
        try{
            given().accept("*/*")
                    .post(baseUrlOfSut + "/users/count/density/groupBy/boundary?" + 
                        "bcircles=HylR%3A8.7258%2C49.4062%2C3&" + 
                        "format=csv&" + 
                        "time=%2F%2FP6M2D")
                    .then();
        } catch(Exception e){
        }
    }
    
    
    @Test
    public void test_5() throws Exception {
        
        try{
            given().accept("*/*")
                    .get(baseUrlOfSut + "/users/count/density/groupBy/boundary?" + 
                        "bcircles=NeR%3A8.717%2C49.4235%2C9&" + 
                        "filter=smoothness%21%3D*+or+length%3A%28+..+100%29&" + 
                        "time=%2F%2FP10M25D")
                    .then();
        } catch(Exception e){
        }
    }
    
    
    @Test
    public void test_6() throws Exception {
        
        try{
            given().accept("*/*")
                    .get(baseUrlOfSut + "/users/count/density?" + 
                        "bcircles=hO%3A8.709%2C49.410%2C73&" + 
                        "format=csv&" + 
                        "showMetadata=true")
                    .then();
        } catch(Exception e){
        }
    }
    
    
    @Test
    public void test_7() throws Exception {
        
        try{
            given().accept("*/*")
                    .get(baseUrlOfSut + "/users/count?" + 
                        "bcircles=U%3A8.748%2C49.4146%2C6%7CHgvIu%3A8.7256%2C49.411%2C50%7CPdsZ%3A8.7194%2C49.4209%2C2%7Ctu%3A8.743%2C49.403%2C540&" + 
                        "filter=destination%21%3D*+or+area%3A%281.0+..+1E6%29&" + 
                        "timeout=22")
                    .then();
        } catch(Exception e){
        }
    }
    
    
    @Test
    public void test_8() throws Exception {
        
        try{
            given().accept("*/*")
                    .get(baseUrlOfSut + "/users/count/groupBy/tag?" + 
                        "bboxes=ZaU%3A8.660%2C49.4237%2C8.743%2C49.381%7CLb%3A8.66430%2C49.410399%2C8.700%2C49.394&" + 
                        "groupByKey=highway&" + 
                        "groupByValues=elevator%2Cprimary&" + 
                        "showMetadata=false&" + 
                        "time=%2F%2FP2Y12D")
                    .then();
        } catch(Exception e){
        }
    }
    
    
    @Test
    public void test_9_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/type?" + 
                    "bpolys=be%3A8.704561%2C49.403252%2C8.7248%2C49.402%2C8.727%2C49.414%2C8.7473%2C49.404%2C8.704561%2C49.403252%7CH%3A8.704561%2C49.403252%2C8.740%2C49.424%2C8.700%2C49.439456%2C8.70494%2C49.42393%2C8.704561%2C49.403252%7CKq%3A8.704561%2C49.403252%2C8.717%2C49.418%2C8.704504%2C49.418%2C8.708%2C49.415%2C8.704561%2C49.403252&" + 
                    "filter=addr%3Astreet%3D*+and+length%3A%28+..+100%29&" + 
                    "format=geojson&" + 
                    "showMetadata=false&" + 
                    "time=%2F%2FP8M13D&" + 
                    "timeout=46&" + 
                    "values=stop_line")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.7248 49.402 ) and LINESTRING ( 8.70494 49.42393, 8.704561 49.403252 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/users/count/groupBy/type"));
    }
    
    
    @Test
    public void test_10_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/groupBy/type?" + 
                    "bcircles=8.70.%2C49.403%2C4%7C8.70075%2C49.436%2C1%7C8.747%2C49.4015%2C6%7C8.717%2C49.427260%2C23&" + 
                    "filter=highway+in+%28secondary%2Cpath%2Cunclassified%2Ctrack%2Cprimary%2Cresidential%2Ccycleway%2Cservice%2Cfootway%29+and+area%3A%281.0+..+1E6%29&" + 
                    "keys=higlsay&" + 
                    "showMetadata=no&" + 
                    "time=%2F0R1&" + 
                    "timeout=24")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_114_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/users/count/groupBy/type"));
    }
    
    
    @Test
    public void test_11_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/tag?" + 
                    "bcircles=JVMkv%3A8.7112%2C49.402%2C1%7CDaLrr%3A8.744455%2C49.403%2C6%7CmL%3A8.714%2C49.424%2C73%7Cqcj%3A8.737488%2C49.418%2C278779930285&" + 
                    "groupByKey=highway&" + 
                    "keys=highway&" + 
                    "values=traffic_mirror")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El ángulo 392.585.669.869.129.800.000.000.000.000.000.000.000 es demasiado grande."))
                .body("'path'", containsString("/users/count/groupBy/tag"));
    }
    
    
    @Test
    public void test_12_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/tag?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22Ik%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.713676%2C49.410%5D%2C%5B8.703057%2C49.4314%5D%2C%5B8.7015%2C49.437%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22qPW%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.721%2C49.4018%5D%2C%5B8.7186%2C49.420682%5D%2C%5B8.7121%2C49.401650%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22V%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.731869%2C49.4249%5D%2C%5B8.70485%2C49.417136%5D%2C%5B8.7039%2C49.423%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "groupByKey=highway&" + 
                    "keys=highway&" + 
                    "showMetadata=false&" + 
                    "time=%2F%2FP3M16D&" + 
                    "timeout=83&" + 
                    "values=platform")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.721 49.4018 ) and LINESTRING ( 8.715649173600662 49.41204198030274, 8.7121 49.40165 ) [ (8.712410346442356, 49.40255869438322, NaN) ]"))
                .body("'path'", containsString("/users/count/groupBy/tag"));
    }
    
    
    @Test
    public void test_13_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/tag?" + 
                    "bpolys=lTRdf%3A8.704561%2C49.403252%2C8.741271%2C49.4361%2C8.7425%2C49.417%2C8.747%2C49.4309%2C8.704561%2C49.403252&" + 
                    "format=csv&" + 
                    "groupByKey=building&" + 
                    "groupByValues=emergency_access_point%2Cyes%2Cresidential&" + 
                    "showMetadata=true")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.741271 49.4361, 8.7425 49.417 ) and LINESTRING ( 8.747 49.4309, 8.704561 49.403252 ) [ (8.741822630115529, 49.4275270665528, NaN) ]"))
                .body("'path'", containsString("/users/count/groupBy/tag"));
    }
    
    
    @Test
    public void test_14_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/groupBy/tag?" + 
                    "bcircles=V%3A8.740%2C49.423%2C178675627&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=service%2Chospital&" + 
                    "timeout=34")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/executor/ExecutionUtils_565_extractContributionTags
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El ángulo 11.165.726.790.989,361 es demasiado grande."))
                .body("'path'", containsString("/users/count/groupBy/tag"));
    }
    
    
    @Test
    public void test_15_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/groupBy/tag?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22r%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.728%2C49.403%5D%2C%5B8.70456%2C49.4007%5D%2C%5B8.748%2C49.417%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22U%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.744%2C49.40775%5D%2C%5B8.7045%2C49.4386%5D%2C%5B8.707%2C49.408%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22n%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.722%2C49.423%5D%2C%5B8.749%2C49.437%5D%2C%5B8.729793%2C49.432%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=turn%3D*+or+geometry%3Apolygon+or+area%3A%281.0+..+1E6%29&" + 
                    "format=json&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=turning_circle%2Cbus_stop&" + 
                    "showMetadata=true")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.728 49.403 ) and LINESTRING ( 8.70456 49.4007, 8.714330577855252 49.404366215907935 ) [ (8.711171743452676, 49.403180925835144, NaN) ]"))
                .body("'path'", containsString("/users/count/groupBy/tag"));
    }
    
    
    @Test
    public void test_16_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/key?" + 
                    "bpolys=8.704561%2C49.403252%2C8.707917%2C49.42540%2C8.708%2C49.40687%2C8.7053%2C49.410%2C8.704561%2C49.403252&" + 
                    "groupByKeys=smoothness%2Cturn%2Cnetwork&" + 
                    "keys=highway&" + 
                    "time=%2F%2FP7M2D&" + 
                    "timeout=44&" + 
                    "values=street_lamp")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.707917 49.4254 ) and LINESTRING ( 8.708 49.40687, 8.7053 49.41 ) [ (8.705541139937084, 49.409720456295155, NaN) ]"))
                .body("'path'", containsString("/users/count/groupBy/key"));
    }
    
    
    @Test
    public void test_17_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/groupBy/key?" + 
                    "bcircles=m%3A8.7047%2C49.427%2C5%7ClEvc%3A8.703%2C49.4099%2C8%7CavI%3A8.74344%2C49.423%2C6%7CZh%3A8.733%2C49.413%2C934633767&" + 
                    "format=geojson&" + 
                    "groupByKeys=surface%2Csidewalk&" + 
                    "keys=highway&" + 
                    "values=secondary_link")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/executor/ExecutionUtils_554_extractContributionTags
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El ángulo 6.259.446.071.653.792.800 es demasiado grande."))
                .body("'path'", containsString("/users/count/groupBy/key"));
    }
    
    
    @Test
    public void test_18_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/groupBy/key?" + 
                    "bpolys=GKT%3A8.704561%2C49.403252%2C8.747%2C49.429970%2C8.719%2C49.400%2C8.70442%2C49.4316%2C8.704561%2C49.403252%7CdUY%3A8.704561%2C49.403252%2C8.748%2C49.435%2C8.723%2C49.402%2C8.739%2C49.432%2C8.704561%2C49.403252&" + 
                    "filter=ref%3D*+or+type%3Away+and+length%3A%28+..+100%29&" + 
                    "format=geojson&" + 
                    "groupByKeys=lit%2Clanes%3Abackward%2Csidewalk&" + 
                    "showMetadata=no&" + 
                    "timeout=81")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.747 49.42997 ) and LINESTRING ( 8.719 49.4, 8.70442 49.4316 ) [ (8.714587190859552, 49.40956411308903, NaN) ]"))
                .body("'path'", containsString("/users/count/groupBy/key"));
    }
    
    
    @Test
    public void test_19() throws Exception {
        
        try{
            given().accept("*/*")
                    .post(baseUrlOfSut + "/users/count/groupBy/boundary?" + 
                        "bboxes=N%3A8.671828%2C49.4231%2C8.7144%2C49.3882&" + 
                        "showMetadata=yes")
                    .then();
        } catch(Exception e){
        }
    }
    
    
    @Test
    public void test_20_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/boundary?" + 
                    "bpolys=8.704561%2C49.403252%2C8.74015%2C49.412%2C8.748%2C49.435%2C8.704%2C49.408%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.737%2C49.439%2C8.703%2C49.4239%2C8.748%2C49.419%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.7155%2C49.434625%2C8.713015%2C49.4190%2C8.70456%2C49.4281%2C8.704561%2C49.403252&" + 
                    "format=csv&" + 
                    "keys=highway&" + 
                    "time=%2F%2FP6M26D&" + 
                    "timeout=69&" + 
                    "values=secondary_link")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/executor/ExecutionUtils_565_extractContributionTags
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.74015 49.412 ) and LINESTRING ( 8.704 49.408, 8.704561 49.403252 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/users/count/groupBy/boundary"));
    }
    
    
    @Test
    public void test_21_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/groupBy/boundary?" + 
                    "bpolys=8.704561%2C49.403252%2C8.74262%2C49.401041%2C8.741%2C49.438%2C8.704%2C49.420%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.720052%2C49.430%2C8.704536%2C49.41345%2C8.7086%2C49.4386%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.72459%2C49.434%2C8.736%2C49.433153%2C8.748%2C49.439%2C8.704561%2C49.403252&" + 
                    "keys=highway&" + 
                    "showMetadata=no&" + 
                    "time=%2F%2FP2Y1M27D&" + 
                    "timeout=76")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.74262 49.401041 ) and LINESTRING ( 8.704 49.42, 8.704561 49.403252 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/users/count/groupBy/boundary"));
    }
    
    
    @Test
    public void test_22_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/density/groupBy/type?" + 
                    "bpolys=J%3A8.704561%2C49.403252%2C8.740%2C49.426%2C8.713%2C49.400%2C8.702%2C49.438%2C8.704561%2C49.403252&" + 
                    "keys=highway&" + 
                    "showMetadata=false")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.74 49.426 ) and LINESTRING ( 8.713 49.4, 8.702 49.438 ) [ (8.71088378931812, 49.40731054599195, NaN) ]"))
                .body("'path'", containsString("/users/count/density/groupBy/type"));
    }
    
    
    @Test
    public void test_23() throws Exception {
        
        try{
            given().accept("*/*")
                    .post(baseUrlOfSut + "/users/count/density/groupBy/type?" + 
                        "bcircles=esyAF%3A8.7105%2C49.426%2C9&" + 
                        "filter=foot%21%3D*+or+not+area%3A%281.0+..+1E6%29&" + 
                        "time=%2F%2FP1Y27D")
                    .then();
        } catch(Exception e){
        }
    }
    
    
    @Test
    public void test_24_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/density/groupBy/type?" + 
                    "bpolys=8.704561%2C49.403252%2C8.708%2C49.414%2C8.712%2C49.4230%2C8.7258%2C49.435%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.726902%2C49.427%2C8.7047%2C49.417%2C8.717813%2C49.436361%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.718%2C49.413%2C8.70299%2C49.41914%2C8.7042%2C49.42809%2C8.704561%2C49.403252&" + 
                    "showMetadata=false&" + 
                    "time=%2F%2FP12D")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.708 49.414, 8.712 49.423 ) and LINESTRING ( 8.718 49.413, 8.70299 49.41914 ) [ (8.709162292514876, 49.41661515815847, NaN) ]"))
                .body("'path'", containsString("/users/count/density/groupBy/type"));
    }
    
    
    @Test
    public void test_25_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/density/groupBy/tag?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22CwDjd%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.738%2C49.432%5D%2C%5B8.749708%2C49.404%5D%2C%5B8.704561%2C49.420%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22bE%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.73329%2C49.403%5D%2C%5B8.747%2C49.43818%5D%2C%5B8.70709%2C49.428%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22eY%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.707%2C49.431%5D%2C%5B8.733%2C49.409%5D%2C%5B8.7177%2C49.415%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "format=geojson&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=hut%2Cship%2Ctraffic_mirror&" + 
                    "showMetadata=no&" + 
                    "time=%2F%2FP3Y7M7D&" + 
                    "values=primary")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.738 49.432 ) and LINESTRING ( 8.735624777825787 49.40899106374261, 8.706212662862832 49.419414654222756 ) [ (8.718355437639405, 49.41511128087735, NaN) ]"))
                .body("'path'", containsString("/users/count/density/groupBy/tag"));
    }
    
    
    @Test
    public void test_26_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/density/groupBy/tag?" + 
                    "bpolys=tWfJ%3A8.704561%2C49.403252%2C8.71090%2C49.4317%2C8.7158%2C49.4048%2C8.7064%2C49.401%2C8.704561%2C49.403252%7CzEqqs%3A8.704561%2C49.403252%2C8.7309%2C49.41486%2C8.726%2C49.424%2C8.7381%2C49.4053%2C8.704561%2C49.403252%7CG%3A8.704561%2C49.403252%2C8.7071%2C49.406%2C8.7015%2C49.4159%2C8.720%2C49.410%2C8.704561%2C49.403252&" + 
                    "groupByKey=building&" + 
                    "groupByValues=stop%2Ccrossing&" + 
                    "keys=highway&" + 
                    "showMetadata=no&" + 
                    "values=speed_camera")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.7109 49.4317 ) and LINESTRING ( 8.7064 49.401, 8.704561 49.403252 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/users/count/density/groupBy/tag"));
    }
    
    
    @Test
    public void test_27_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/density/groupBy/tag?" + 
                    "bpolys=dHo%3A8.704561%2C49.403252%2C8.739%2C49.4014%2C8.708%2C49.433043%2C8.717%2C49.421%2C8.704561%2C49.403252%7Ct%3A8.704561%2C49.403252%2C8.717%2C49.436430%2C8.7172%2C49.4048%2C8.7139%2C49.415%2C8.704561%2C49.403252&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=hut%2Cpublic%2Csecondary_link&" + 
                    "showMetadata=false&" + 
                    "time=%2F%2FP3Y2M1D&" + 
                    "timeout=80")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.739 49.4014 ) and LINESTRING ( 8.717 49.421, 8.704561 49.403252 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/users/count/density/groupBy/tag"));
    }
    
    
    @Test
    public void test_28_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/density/groupBy/boundary?" + 
                    "bpolys=8.704561%2C49.403252%2C8.7475%2C49.4131%2C8.7020%2C49.438%2C8.706%2C49.415%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.742%2C49.420%2C8.712%2C49.433%2C8.706%2C49.436%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.708583%2C49.435%2C8.720781%2C49.4301%2C8.71955%2C49.429%2C8.704561%2C49.403252&" + 
                    "keys=highway&" + 
                    "showMetadata=no&" + 
                    "timeout=60&" + 
                    "values=primary_link")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.7475 49.4131 ) and LINESTRING ( 8.706 49.415, 8.704561 49.403252 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/users/count/density/groupBy/boundary"));
    }
    
    
    @Test
    public void test_29_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/density/groupBy/boundary?" + 
                    "bpolys=rA%3A8.704561%2C49.403252%2C8.703%2C49.4240%2C8.70415%2C49.433%2C8.7108%2C49.412802%2C8.704561%2C49.403252%7CXtbdQ%3A8.704561%2C49.403252%2C8.7385%2C49.404%2C8.724%2C49.438%2C8.736%2C49.43216%2C8.704561%2C49.403252%7CuZiK%3A8.704561%2C49.403252%2C8.700639%2C49.411%2C8.706%2C49.436%2C8.704561%2C49.430%2C8.704561%2C49.403252&" + 
                    "filter=network%21%3D*+and+length%3A%28+..+100%29&" + 
                    "keys=highway&" + 
                    "showMetadata=true&" + 
                    "timeout=88")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.703 49.424 ) and LINESTRING ( 8.704561 49.403252, 8.700639 49.411 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/users/count/density/groupBy/boundary"));
    }
    
    
    @Test
    public void test_30_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/density?" + 
                    "bcircles=Ov%3A8.703%2C49.4248%2C59%7CKP%3A8.705%2C49.429848%2C6%7CDzx%3A8.73369%2C49.430%2C1%7CYJOcb%3A8.7329%2C49.4175%2C69464884965&" + 
                    "filter=foot%3D*+or+type%3Anode+or+not+length%3A%28+..+100%29&" + 
                    "timeout=49")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El ángulo 5.833.509.857.623.816.000.000.000.000.000.000 es demasiado grande."))
                .body("'path'", containsString("/users/count/density"));
    }
    
    
    @Test
    public void test_31_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/density?" + 
                    "bpolys=8.704561%2C49.403252%2C8.7022%2C49.408%2C8.705%2C49.429%2C8.709%2C49.4086%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.7045%2C49.432%2C8.7446%2C49.4309%2C8.711%2C49.436%2C8.704561%2C49.403252&" + 
                    "keys=highway&" + 
                    "time=%2F%2FP7M3D")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.7022 49.408 ) and LINESTRING ( 8.704561 49.403252, 8.7045 49.432 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/users/count/density"));
    }
    
    
    @Test
    public void test_32_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/density?" + 
                    "bpolys=8.704561%2C49.403252%2C8.7173%2C49.428%2C8.70474%2C49.405%2C8.744%2C49.400%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.732%2C49.427%2C8.728%2C49.4028%2C8.7094%2C49.43831%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.7138%2C49.400%2C8.72166%2C49.4024%2C8.707%2C49.439%2C8.704561%2C49.403252&" + 
                    "filter=ref%3D*+or+area%3A%281.0+..+1E6%29&" + 
                    "timeout=35")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.7173 49.428 ) and LINESTRING ( 8.704561 49.403252, 8.7138 49.4 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/users/count/density"));
    }
    
    
    @Test
    public void test_33_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/density?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22h%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.73367%2C49.414%5D%2C%5B8.708%2C49.4059%5D%2C%5B8.707%2C49.427%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22Y%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.74894%2C49.407325%5D%2C%5B8.702744%2C49.400%5D%2C%5B8.7424%2C49.4120%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "keys=highway&" + 
                    "values=traffic_mirror")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.74894 49.407325 ) and LINESTRING ( 8.702744 49.4, 8.7424 49.412 ) [ (8.717378146136102, 49.40442832745696, NaN) ]"))
                .body("'path'", containsString("/users/count/density"));
    }
    
    
    @Test
    public void test_34() throws Exception {
        
        try{
            given().accept("*/*")
                    .post(baseUrlOfSut + "/users/count?" + 
                        "bcircles=8.7345%2C49.412%2C93%7C8.735%2C49.410%2C2&" + 
                        "filter=landuse%21%3D*+and+not+id%3A%281+..+9999%29&" + 
                        "format=geojson")
                    .then();
        } catch(Exception e){
        }
    }
    
    
    @Test
    public void test_35_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count?" + 
                    "bcircles=8.720689%2C49.414%2C87%7C8.7208%2C49.410%2C9%7C8.7366%2C49.410761%2C2%7C8.726812%2C49.4394%2C7330359472&" + 
                    "showMetadata=true&" + 
                    "time=%2F%2FP7M4D&" + 
                    "timeout=37")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El ángulo 90.019.548.510.887.510.000.000.000 es demasiado grande."))
                .body("'path'", containsString("/users/count"));
    }
    
    
    @Test
    public void test_36_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count?" + 
                    "bpolys=8.704561%2C49.403252%2C8.71380%2C49.411%2C8.704%2C49.43748%2C8.717%2C49.420%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.701%2C49.405533%2C8.70182%2C49.413%2C8.748%2C49.4254%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.722%2C49.415%2C8.70440%2C49.400%2C8.733056%2C49.4199%2C8.704561%2C49.403252&" + 
                    "filter=ref%21%3D*+and+geometry%3Aline+or+id%3A%281+..+9999%29&" + 
                    "showMetadata=no&" + 
                    "time=%2F%2FP2Y22D")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.7138 49.411 ) and LINESTRING ( 8.704561 49.403252, 8.701 49.405533 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/users/count"));
    }
    
    
    @Test
    public void test_37_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22O%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.734%2C49.43657%5D%2C%5B8.7043%2C49.4213%5D%2C%5B8.729%2C49.4244%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22fi%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7108%2C49.424692%5D%2C%5B8.7017%2C49.411%5D%2C%5B8.721%2C49.415746%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22x%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.733%2C49.433089%5D%2C%5B8.7033%2C49.41749%5D%2C%5B8.704453%2C49.414%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "format=csv&" + 
                    "keys=highway&" + 
                    "time=%2F%2FP9D&" + 
                    "timeout=59&" + 
                    "values=traffic_signals")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.72912685702661 49.43105475228142 ) and LINESTRING ( 8.712517853643597 49.42233139053827, 8.724136296230652 49.423789575640285 ) [ (8.722529312933812, 49.423587889477524, NaN) ]"))
                .body("'path'", containsString("/users/count"));
    }
    
    
    @Test
    public void test_38_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count?" + 
                    "bcircles=IV%3A8.7270%2C49.432%2C7%7CVKs%3A8.7222%2C49.418%2C9%7Ca%3A8.717%2C49.4059%2C135685769326%7Cv%3A8.7198%2C49.439%2C836&" + 
                    "keys=highway&" + 
                    "showMetadata=false&" + 
                    "timeout=89&" + 
                    "values=platform")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El ángulo 1.233.878.014.669.802.200.000.000.000.000.000.000 es demasiado grande."))
                .body("'path'", containsString("/users/count"));
    }
    
    
    @Test
    public void test_39_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22I%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.739%2C49.42514%5D%2C%5B8.728%2C49.4021%5D%2C%5B8.701%2C49.431%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22G%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.71171%2C49.4216%5D%2C%5B8.746%2C49.412%5D%2C%5B8.70481%2C49.420%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22gXwgT%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.744%2C49.411%5D%2C%5B8.708%2C49.4399%5D%2C%5B8.7047%2C49.4297%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "keys=highway&" + 
                    "showMetadata=false&" + 
                    "time=%2F%2FP6M27D&" + 
                    "values=path")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.731959844578604 49.42066556921329 ) and LINESTRING ( 8.72345579503553 49.40696398235085, 8.70468609638231 49.42705451165004 ) [ (8.71859230645912, 49.412169716419676, NaN) ]"))
                .body("'path'", containsString("/users/count"));
    }
    
    
    @Test
    public void test_40_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/ratio/groupBy/boundary?" + 
                    "bpolys=u%3A8.704561%2C49.403252%2C8.708%2C49.422007%2C8.718782%2C49.415132%2C8.700845%2C49.438%2C8.704561%2C49.403252%7CEfi%3A8.704561%2C49.403252%2C8.709%2C49.426%2C8.708143%2C49.438%2C8.7479%2C49.4275%2C8.704561%2C49.403252%7Cz%3A8.704561%2C49.403252%2C8.7361%2C49.43453%2C8.72379%2C49.423664%2C8.7329%2C49.433411%2C8.704561%2C49.403252&" + 
                    "format=geojson&" + 
                    "keys=highway&" + 
                    "time=2015-09-02&" + 
                    "timeout=34&" + 
                    "types2=line%2Cother&" + 
                    "values=steps")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.708 49.422007 ) and LINESTRING ( 8.704561 49.403252, 8.709 49.426 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/perimeter/ratio/groupBy/boundary"));
    }
    
    
    @Test
    public void test_41_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/ratio?" + 
                    "bcircles=Lq%3A8.746425%2C49.430%2C2946567274&" + 
                    "format=geojson&" + 
                    "keys=highway&" + 
                    "showMetadata=false&" + 
                    "time=2015-07-26&" + 
                    "timeout=36&" + 
                    "types2=point%2Cpolygon%2C&" + 
                    "values=primary_link")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El ángulo 61.261.795.978.749.235.000.000 es demasiado grande."))
                .body("'path'", containsString("/elements/perimeter/ratio"));
    }
    
    
    @Test
    public void test_42_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/ratio?" + 
                    "bcircles=cVfa%3A8.70942%2C49.406%2C879402276&" + 
                    "filter2=ref%3D*+or+type%3Arelation+or+length%3A%28+..+100%29&" + 
                    "keys2=highway&" + 
                    "showMetadata=true")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El ángulo 3.840.652.213.809.142.300 es demasiado grande."))
                .body("'path'", containsString("/elements/perimeter/ratio"));
    }
    
    
    @Test
    public void test_43_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/ratio?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22XU%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.742%2C49.41787%5D%2C%5B8.734%2C49.4336%5D%2C%5B8.7413%2C49.43130%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter2=foot%21%3D*+or+not+id%3A%281+..+9999%29&" + 
                    "format=json&" + 
                    "keys=highway&" + 
                    "time=2009-04-02&" + 
                    "types2=line%2C&" + 
                    "values=path")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.742 49.41787, 8.734 49.4336 ) and LINESTRING ( 8.7413 49.4313, 8.704561 49.403252 ) [ (8.736884250349503, 49.42792884275029, NaN) ]"))
                .body("'path'", containsString("/elements/perimeter/ratio"));
    }
    
    
    @Test
    public void test_44_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/type?" + 
                    "bpolys=8.704561%2C49.403252%2C8.724112%2C49.433%2C8.7016%2C49.435%2C8.72685%2C49.402%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.703806%2C49.4002%2C8.7031%2C49.428%2C8.70516%2C49.410%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.7001%2C49.421%2C8.7289%2C49.420%2C8.70389%2C49.42287%2C8.704561%2C49.403252&" + 
                    "filter=maxspeed%3D*&" + 
                    "showMetadata=true&" + 
                    "timeout=58")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.724112 49.433 ) and LINESTRING ( 8.704561 49.403252, 8.703806 49.4002 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/perimeter/groupBy/type"));
    }
    
    
    @Test
    public void test_45_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/groupBy/type?" + 
                    "bcircles=W%3A8.7166%2C49.422727%2C269342060%7CxMUm%3A8.711%2C49.4264%2C9%7CoDIk%3A8.720%2C49.432491%2C4%7Cc%3A8.731%2C49.400%2C957475595&" + 
                    "format=geojson&" + 
                    "keys=highway")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El ángulo 297.949.368.285.895,9 es demasiado grande."))
                .body("'path'", containsString("/elements/perimeter/groupBy/type"));
    }
    
    
    @Test
    public void test_46_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/groupBy/type?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22TTGRc%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.704%2C49.4084%5D%2C%5B8.721%2C49.410%5D%2C%5B8.70492%2C49.428%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "showMetadata=yes&" + 
                    "timeout=68")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704 49.4084, 8.721 49.41 ) and LINESTRING ( 8.70492 49.428, 8.704561 49.403252 ) [ (8.704636547106976, 49.40845991031595, NaN) ]"))
                .body("'path'", containsString("/elements/perimeter/groupBy/type"));
    }
    
    
    @Test
    public void test_47_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/tag?" + 
                    "bpolys=8.704561%2C49.403252%2C8.700%2C49.41146%2C8.712%2C49.40010%2C8.700%2C49.4292%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.728%2C49.414%2C8.71693%2C49.413%2C8.7252%2C49.408%2C8.704561%2C49.403252&" + 
                    "format=csv&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=apartments%2Chouse&" + 
                    "keys=highway&" + 
                    "timeout=63&" + 
                    "values=emergency_access_point")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.7 49.41146 ) and LINESTRING ( 8.7 49.4292, 8.704561 49.403252 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/perimeter/groupBy/tag"));
    }
    
    
    @Test
    public void test_48_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/groupBy/tag?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22qWrIB%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.729%2C49.4065%5D%2C%5B8.7017%2C49.406%5D%2C%5B8.748%2C49.432%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "format=geojson&" + 
                    "groupByKey=highway&" + 
                    "keys=highway&" + 
                    "showMetadata=false&" + 
                    "time=2012-01-13&" + 
                    "timeout=69")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.729 49.4065, 8.7017 49.406 ) and LINESTRING ( 8.748 49.432, 8.704561 49.403252 ) [ (8.708912915513528, 49.406132104679735, NaN) ]"))
                .body("'path'", containsString("/elements/perimeter/groupBy/tag"));
    }
    
    
    @Test
    public void test_49_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/groupBy/tag?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22BCyqy%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.749%2C49.435589%5D%2C%5B8.707707%2C49.4168%5D%2C%5B8.736767%2C49.417%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22YLExV%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.702%2C49.432%5D%2C%5B8.7218%2C49.416876%5D%2C%5B8.72162%2C49.4069%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "format=csv&" + 
                    "groupByKey=highway&" + 
                    "showMetadata=false")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.721780260033396 49.41578196718423, 8.749 49.435589 ) and LINESTRING ( 8.721772762597972 49.41689680497315, 8.736767 49.417 ) [ (8.72332702182128, 49.41690750187076, NaN) ]"))
                .body("'path'", containsString("/elements/perimeter/groupBy/tag"));
    }
    
    
    @Test
    public void test_50_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/key?" + 
                    "bpolys=QAb%3A8.704561%2C49.403252%2C8.71765%2C49.40209%2C8.747%2C49.405%2C8.744773%2C49.412267%2C8.704561%2C49.403252%7CmaJsJ%3A8.704561%2C49.403252%2C8.705214%2C49.430%2C8.7434%2C49.4389%2C8.7011%2C49.434%2C8.704561%2C49.403252%7CLzD%3A8.704561%2C49.403252%2C8.719395%2C49.433%2C8.70460%2C49.438%2C8.736321%2C49.436168%2C8.704561%2C49.403252&" + 
                    "groupByKeys=foot%2Chighway%2Clit&" + 
                    "keys=highway&" + 
                    "showMetadata=true&" + 
                    "time=2008-07-22&" + 
                    "timeout=95&" + 
                    "values=footway")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.71765 49.40209 ) and LINESTRING ( 8.704561 49.403252, 8.719395 49.433 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/perimeter/groupBy/key"));
    }
    
    
    @Test
    public void test_51_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/groupBy/key?" + 
                    "bcircles=i%3A8.72146%2C49.439%2C9%7Cz%3A8.731%2C49.406%2C8%7CLAM%3A8.7033%2C49.4022%2C6907074782%7CtLs%3A8.741%2C49.408%2C1&" + 
                    "filter=natural%3Dwood+and+length%3A%28+..+100%29&" + 
                    "format=json&" + 
                    "groupByKeys=addr%3Apostcode%2Caddr%3Acountry%2Ctracktype&" + 
                    "showMetadata=no&" + 
                    "time=2015-10-24&" + 
                    "timeout=42")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El ángulo 55.601.143.621.104.610.000.000.000 es demasiado grande."))
                .body("'path'", containsString("/elements/perimeter/groupBy/key"));
    }
    
    
    @Test
    public void test_52_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/groupBy/key?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22UQp%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7113%2C49.417%5D%2C%5B8.701%2C49.41911%5D%2C%5B8.706%2C49.4023%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22u%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.705%2C49.4020%5D%2C%5B8.708%2C49.439%5D%2C%5B8.7002%2C49.415164%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "groupByKeys=lanes%3Abackward%2Ctype&" + 
                    "keys=highway&" + 
                    "time=2011-05-28&" + 
                    "values=secondary")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.705208640118405 49.404573228127, 8.7113 49.417 ) and LINESTRING ( 8.705233317758994 49.40487758569426, 8.706 49.4023 ) [ (8.705280339324915, 49.40471949918963, NaN) ]"))
                .body("'path'", containsString("/elements/perimeter/groupBy/key"));
    }
    
    
    @Test
    public void test_53_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=8.748%2C49.412%2C7%7C8.734%2C49.43609%2C7%7C8.728167%2C49.425%2C6%7C8.73854%2C49.403%2C289398560342&" + 
                    "format=csv&" + 
                    "groupByKey=highway&" + 
                    "keys=highway")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El ángulo 528.156.188.077.235.100.000.000.000.000.000.000.000 es demasiado grande."))
                .body("'path'", containsString("/elements/perimeter/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_54_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22O%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7191%2C49.402%5D%2C%5B8.707%2C49.401%5D%2C%5B8.7177%2C49.404%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "format=csv&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=track%2Chouse%2Coffice&" + 
                    "keys=highway&" + 
                    "showMetadata=true&" + 
                    "time=2012-07-06&" + 
                    "timeout=64&" + 
                    "values=secondary")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.7191 49.402 ) and LINESTRING ( 8.707 49.401, 8.7177 49.404 ) [ (8.71257173822294, 49.40256216959522, NaN) ]"))
                .body("'path'", containsString("/elements/perimeter/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_55_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22h%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.745%2C49.424%5D%2C%5B8.727%2C49.428%5D%2C%5B8.70472%2C49.43394%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22y%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.700%2C49.4294%5D%2C%5B8.708%2C49.421%5D%2C%5B8.704%2C49.437%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22rWJ%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.748%2C49.420%5D%2C%5B8.730228%2C49.4238%5D%2C%5B8.710%2C49.4320%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=highway+in+%28secondary%2Cpath%2Cunclassified%2Ctrack%2Cprimary%2Cresidential%2Ccycleway%2Cservice%2Cfootway%29+and+area%3A%281.0+..+1E6%29&" + 
                    "groupByKey=building&" + 
                    "groupByValues=street_lamp%2Chospital&" + 
                    "time=2018-04-30&" + 
                    "timeout=37")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.7 49.4294, 8.70467106574472 49.42449538096805 ) and LINESTRING ( 8.704 49.437, 8.704561 49.403252 ) [ (8.704199638408333, 49.42499037967125, NaN) ]"))
                .body("'path'", containsString("/elements/perimeter/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_56_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=n%3A8.704561%2C49.403252%2C8.703%2C49.433653%2C8.7007%2C49.4107%2C8.71952%2C49.40613%2C8.704561%2C49.403252%7CTlEw%3A8.704561%2C49.403252%2C8.738%2C49.41270%2C8.709%2C49.412%2C8.70459%2C49.405%2C8.704561%2C49.403252%7Cu%3A8.704561%2C49.403252%2C8.727%2C49.404%2C8.74950%2C49.429%2C8.707%2C49.40367%2C8.704561%2C49.403252&" + 
                    "format=geojson&" + 
                    "groupByKey=building&" + 
                    "keys=highway&" + 
                    "showMetadata=yes&" + 
                    "time=2010-11-02&" + 
                    "values=give_way")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.703 49.433653 ) and LINESTRING ( 8.7007 49.4107, 8.71952 49.40613 ) [ (8.704222487452387, 49.40984464571427, NaN) ]"))
                .body("'path'", containsString("/elements/perimeter/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_57_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=8.719%2C49.424%2C454252843&" + 
                    "groupByKey=building&" + 
                    "keys=highway&" + 
                    "showMetadata=yes&" + 
                    "timeout=100&" + 
                    "values=service")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El ángulo 19.517.314.968.471.536 es demasiado grande."))
                .body("'path'", containsString("/elements/perimeter/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_58_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/boundary?" + 
                    "bpolys=%7B%22twpe%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22n%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.744902%2C49.416%5D%2C%5B8.7071%2C49.432%5D%2C%5B8.709%2C49.409%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "keys=highway&" + 
                    "timeout=63")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_233_createGeometryFromGeoJson
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/elements/perimeter/groupBy/boundary"));
    }
    
    
    @Test
    public void test_59_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/groupBy/boundary?" + 
                    "bpolys=L%3A8.704561%2C49.403252%2C8.7205%2C49.435%2C8.70459%2C49.407%2C8.70461%2C49.4163%2C8.704561%2C49.403252%7Cv%3A8.704561%2C49.403252%2C8.7444%2C49.427%2C8.701%2C49.4023%2C8.716%2C49.438%2C8.704561%2C49.403252%7CLy%3A8.704561%2C49.403252%2C8.7017%2C49.4334%2C8.70261%2C49.4319%2C8.718%2C49.420%2C8.704561%2C49.403252&" + 
                    "format=json&" + 
                    "keys=highway&" + 
                    "timeout=100")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.7205 49.435 ) and LINESTRING ( 8.70461 49.4163, 8.704561 49.403252 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/perimeter/groupBy/boundary"));
    }
    
    
    @Test
    public void test_60_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/density/groupBy/type?" + 
                    "bpolys=Qmjo%3A8.704561%2C49.403252%2C8.7304%2C49.41871%2C8.723%2C49.40880%2C8.745775%2C49.42141%2C8.704561%2C49.403252%7CIP%3A8.704561%2C49.403252%2C8.704%2C49.4375%2C8.712%2C49.4315%2C8.7130%2C49.430429%2C8.704561%2C49.403252%7CGf%3A8.704561%2C49.403252%2C8.711%2C49.4325%2C8.7048%2C49.438469%2C8.720%2C49.438%2C8.704561%2C49.403252&" + 
                    "keys=highway&" + 
                    "showMetadata=yes")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.7304 49.41871 ) and LINESTRING ( 8.704561 49.403252, 8.711 49.4325 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/perimeter/density/groupBy/type"));
    }
    
    
    @Test
    public void test_61_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/density/groupBy/type?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22G%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.725%2C49.439%5D%2C%5B8.7343%2C49.4093%5D%2C%5B8.705%2C49.4197%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "format=csv&" + 
                    "timeout=79")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.725 49.439 ) and LINESTRING ( 8.7343 49.4093, 8.705 49.4197 ) [ (8.712452707967255, 49.41705467020957, NaN) ]"))
                .body("'path'", containsString("/elements/perimeter/density/groupBy/type"));
    }
    
    
    @Test
    public void test_62_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/density/groupBy/tag?" + 
                    "bcircles=LTq%3A8.7326%2C49.428%2C7348741542&" + 
                    "groupByKey=highway&" + 
                    "keys=highway&" + 
                    "timeout=59&" + 
                    "values=give_way")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El ángulo 91.672.391.391.976.420.000.000.000 es demasiado grande."))
                .body("'path'", containsString("/elements/perimeter/density/groupBy/tag"));
    }
    
    
    @Test
    public void test_63_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/density/groupBy/tag?" + 
                    "bpolys=qXt%3A8.704561%2C49.403252%2C8.747%2C49.426647%2C8.734%2C49.401%2C8.7008%2C49.42781%2C8.704561%2C49.403252&" + 
                    "format=json&" + 
                    "groupByKey=building&" + 
                    "groupByValues=track%2Cschool%2Cstation&" + 
                    "keys=highway&" + 
                    "time=2009-07-28&" + 
                    "timeout=42")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.747 49.426647 ) and LINESTRING ( 8.734 49.401, 8.7008 49.42781 ) [ (8.720399244779896, 49.41198301950154, NaN) ]"))
                .body("'path'", containsString("/elements/perimeter/density/groupBy/tag"));
    }
    
    
    @Test
    public void test_64_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/density/groupBy/tag?" + 
                    "bpolys=8.704561%2C49.403252%2C8.743%2C49.406%2C8.72938%2C49.4141%2C8.723346%2C49.4180%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.72807%2C49.420%2C8.7047%2C49.410%2C8.706%2C49.416%2C8.704561%2C49.403252&" + 
                    "groupByKey=foo&" + 
                    "keys=highway&" + 
                    "time=2016-03-11&" + 
                    "timeout=100")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.743 49.406 ) and LINESTRING ( 8.723346 49.418, 8.704561 49.403252 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/perimeter/density/groupBy/tag"));
    }
    
    
    @Test
    public void test_65_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/density/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=8.725749%2C49.431%2C3%7C8.730%2C49.403%2C410484699&" + 
                    "filter=lanes%3D*+and+type%3Arelation+and+id%3A%281+..+9999%29&" + 
                    "groupByKey=highway")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El ángulo 8.647.995.650.604.746 es demasiado grande."))
                .body("'path'", containsString("/elements/perimeter/density/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_66_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/density/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=l%3A8.704561%2C49.403252%2C8.721%2C49.4311%2C8.704591%2C49.411985%2C8.7278%2C49.4378%2C8.704561%2C49.403252%7Ch%3A8.704561%2C49.403252%2C8.742%2C49.4012%2C8.704%2C49.410%2C8.703581%2C49.4298%2C8.704561%2C49.403252%7CO%3A8.704561%2C49.403252%2C8.7216%2C49.435%2C8.703%2C49.407105%2C8.709%2C49.423%2C8.704561%2C49.403252&" + 
                    "filter=addr%3Apostcode%21%3D*+and+type%3Away+and+not+length%3A%28+..+100%29&" + 
                    "groupByKey=building&" + 
                    "time=2013-04-03&" + 
                    "timeout=22")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.721 49.4311 ) and LINESTRING ( 8.703581 49.4298, 8.704561 49.403252 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/perimeter/density/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_67_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/density/groupBy/boundary?" + 
                    "bcircles=ll%3A8.700026%2C49.424069%2C649159249%7CqIkaU%3A8.713%2C49.411%2C6%7Cnup%3A8.742%2C49.411%2C9&" + 
                    "format=csv&" + 
                    "showMetadata=yes&" + 
                    "time=2016-09-01")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El ángulo 339.572.798.587.540.030 es demasiado grande."))
                .body("'path'", containsString("/elements/perimeter/density/groupBy/boundary"));
    }
    
    
    @Test
    public void test_68_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/density/groupBy/boundary?" + 
                    "bpolys=VvH%3A8.704561%2C49.403252%2C8.735%2C49.417%2C8.738%2C49.413%2C8.703%2C49.437516%2C8.704561%2C49.403252&" + 
                    "format=csv&" + 
                    "keys=highway&" + 
                    "showMetadata=true&" + 
                    "timeout=83")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.735 49.417 ) and LINESTRING ( 8.738 49.413, 8.703 49.437516 ) [ (8.733352048794565, 49.4162556906215, NaN) ]"))
                .body("'path'", containsString("/elements/perimeter/density/groupBy/boundary"));
    }
    
    
    @Test
    public void test_69_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/density/groupBy/boundary?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22vk%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.711%2C49.4128%5D%2C%5B8.7290%2C49.405885%5D%2C%5B8.704465%2C49.405%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22G%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.719%2C49.420%5D%2C%5B8.735%2C49.415%5D%2C%5B8.7296%2C49.41133%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22M%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7077%2C49.4186%5D%2C%5B8.709%2C49.4357%5D%2C%5B8.7223%2C49.436%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "format=json")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.711 49.4128 ) and LINESTRING ( 8.706119458337 49.405059677832824, 8.705528642495743 49.40503836656241 ) [ (8.705771603753083, 49.405047130398266, NaN) ]"))
                .body("'path'", containsString("/elements/perimeter/density/groupBy/boundary"));
    }
    
    
    @Test
    public void test_70_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/density/groupBy/boundary?" + 
                    "bpolys=HDL%3A8.704561%2C49.403252%2C8.744%2C49.40150%2C8.713%2C49.41139%2C8.706%2C49.4048%2C8.704561%2C49.403252%7CMSD%3A8.704561%2C49.403252%2C8.734%2C49.414407%2C8.7022%2C49.412%2C8.7040%2C49.4026%2C8.704561%2C49.403252%7CPugp%3A8.704561%2C49.403252%2C8.715%2C49.429%2C8.726%2C49.409%2C8.709%2C49.414%2C8.704561%2C49.403252&" + 
                    "format=csv&" + 
                    "showMetadata=false&" + 
                    "time=2017-07-05")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.744 49.4015 ) and LINESTRING ( 8.706 49.4048, 8.704561 49.403252 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/perimeter/density/groupBy/boundary"));
    }
    
    
    @Test
    public void test_71_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/density?" + 
                    "bcircles=8.7366%2C49.4389%2C5%7C8.728%2C49.400%2C5%7C8.728837%2C49.4055%2C8%7C8.7280%2C49.436%2C711045861051&" + 
                    "filter=addr%3Apostcode%21%3D*&" + 
                    "format=geojson&" + 
                    "timeout=30")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El ángulo 705.158.184.292.950.000.000.000.000.000.000.000.000.000 es demasiado grande."))
                .body("'path'", containsString("/elements/perimeter/density"));
    }
    
    
    @Test
    public void test_72_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/density?" + 
                    "bpolys=e%3A8.704561%2C49.403252%2C8.73062%2C49.4352%2C8.7035%2C49.409649%2C8.74427%2C49.42441%2C8.704561%2C49.403252%7CrUTK%3A8.704561%2C49.403252%2C8.7305%2C49.4189%2C8.726%2C49.4283%2C8.7075%2C49.4292%2C8.704561%2C49.403252%7CNTZiO%3A8.704561%2C49.403252%2C8.737%2C49.426%2C8.70460%2C49.4003%2C8.70463%2C49.432%2C8.704561%2C49.403252&" + 
                    "filter=lit%3D*+and+type%3Anode+and+length%3A%28+..+100%29&" + 
                    "showMetadata=yes&" + 
                    "time=2015-04-02&" + 
                    "timeout=73")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.73062 49.4352 ) and LINESTRING ( 8.7046 49.4003, 8.70463 49.432 ) [ (8.704602842237898, 49.40330329804737, NaN) ]"))
                .body("'path'", containsString("/elements/perimeter/density"));
    }
    
    
    @Test
    public void test_73_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/density?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22xZShb%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.726%2C49.4204%5D%2C%5B8.701290%2C49.43352%5D%2C%5B8.739%2C49.4243%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22f%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.737%2C49.405%5D%2C%5B8.7237%2C49.431%5D%2C%5B8.744%2C49.427%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "format=geojson&" + 
                    "keys=highway&" + 
                    "showMetadata=no&" + 
                    "values=primary")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.737 49.405, 8.729955074486595 49.418772034838234 ) and LINESTRING ( 8.744 49.427, 8.704561 49.403252 ) [ (8.730044677462068, 49.41859687112678, NaN) ]"))
                .body("'path'", containsString("/elements/perimeter/density"));
    }
    
    
    @Test
    public void test_74_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/density?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22XKYPU%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.719%2C49.435457%5D%2C%5B8.730%2C49.41709%5D%2C%5B8.704860%2C49.407%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22y%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7216%2C49.413%5D%2C%5B8.7428%2C49.42722%5D%2C%5B8.735890%2C49.4103%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22UYN%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.747%2C49.414%5D%2C%5B8.717214%2C49.437%5D%2C%5B8.7045%2C49.424%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "format=geojson&" + 
                    "keys=highway&" + 
                    "time=2007-10-31&" + 
                    "timeout=51&" + 
                    "values=street_lamp")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.719 49.435457 ) and LINESTRING ( 8.73 49.41709, 8.70486 49.407 ) [ (8.706544524501643, 49.40767608799608, NaN) ]"))
                .body("'path'", containsString("/elements/perimeter/density"));
    }
    
    
    @Test
    public void test_75_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/density?" + 
                    "bpolys=8.704561%2C49.403252%2C8.7070%2C49.404%2C8.704566%2C49.414%2C8.7273%2C49.4356%2C8.704561%2C49.403252&" + 
                    "format=geojson&" + 
                    "showMetadata=true&" + 
                    "time=2008-08-30")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.707 49.404, 8.704566 49.414 ) and LINESTRING ( 8.7273 49.4356, 8.704561 49.403252 ) [ (8.706507928538167, 49.40602165760819, NaN) ]"))
                .body("'path'", containsString("/elements/perimeter/density"));
    }
    
    
    @Test
    public void test_76_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22O%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.70410%2C49.439%5D%2C%5B8.709%2C49.4351%5D%2C%5B8.7014%2C49.4105%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=ref%21%3D*+or+type%3Arelation+and+id%3A%281+..+9999%29&" + 
                    "format=json&" + 
                    "showMetadata=yes&" + 
                    "time=2013-01-04&" + 
                    "timeout=20")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.7041 49.439 ) and LINESTRING ( 8.709 49.4351, 8.7014 49.4105 ) [ (8.704344617550227, 49.420031262070474, NaN) ]"))
                .body("'path'", containsString("/elements/perimeter"));
    }
    
    
    @Test
    public void test_77_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/ratio/groupBy/boundary?" + 
                    "bcircles=8.731%2C49.437%2C55%7C8.733623%2C49.4115%2C4%7C8.72662%2C49.4152%2C681034811%7C8.7279%2C49.401569%2C6&" + 
                    "filter=lit%21%3D*+and+geometry%3Apoint+and+length%3A%28+..+100%29&" + 
                    "keys2=highway&" + 
                    "time=2017-06-21&" + 
                    "timeout=93&" + 
                    "types2=point%2Cline%2Cother")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El ángulo 497.587.836.464.224.960 es demasiado grande."))
                .body("'path'", containsString("/elements/length/ratio/groupBy/boundary"));
    }
    
    
    @Test
    public void test_78_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/ratio/groupBy/boundary?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22d%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.739%2C49.409%5D%2C%5B8.742%2C49.417%5D%2C%5B8.738024%2C49.4064%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22G%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.715%2C49.418%5D%2C%5B8.703%2C49.404%5D%2C%5B8.728%2C49.41065%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=destination%21%3D*+or+id%3A%281+..+9999%29&" + 
                    "keys2=highway&" + 
                    "time=2011-08-14&" + 
                    "timeout=72&" + 
                    "types2=node%2Crelation")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.739 49.409 ) and LINESTRING ( 8.742 49.417, 8.738024 49.4064 ) [ (8.738999194878662, 49.408999865622185, NaN) ]"))
                .body("'path'", containsString("/elements/length/ratio/groupBy/boundary"));
    }
    
    
    @Test
    public void test_79_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/ratio/groupBy/boundary?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22tK%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7169%2C49.412%5D%2C%5B8.701%2C49.4132%5D%2C%5B8.727%2C49.4004%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=maxspeed%3D*+and+id%3A%281+..+9999%29&" + 
                    "filter2=sidewalk%3D*+and+type%3Away&" + 
                    "format=csv&" + 
                    "keys2=highway&" + 
                    "showMetadata=yes&" + 
                    "timeout=95&" + 
                    "values2=path")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.7169 49.412 ) and LINESTRING ( 8.701 49.4132, 8.727 49.4004 ) [ (8.711382804618317, 49.40808846541868, NaN) ]"))
                .body("'path'", containsString("/elements/length/ratio/groupBy/boundary"));
    }
    
    
    @Test
    public void test_80_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/ratio?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22p%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.736101%2C49.4284%5D%2C%5B8.71591%2C49.424%5D%2C%5B8.7048%2C49.4270%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22lm%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.729%2C49.424%5D%2C%5B8.701%2C49.40476%5D%2C%5B8.73250%2C49.4184%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22IHTpM%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7165%2C49.4126%5D%2C%5B8.734182%2C49.404579%5D%2C%5B8.7021%2C49.408718%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=building%21%3D*+or+id%3A%281+..+9999%29&" + 
                    "format=geojson&" + 
                    "keys2=highway&" + 
                    "showMetadata=false&" + 
                    "timeout=61")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.729 49.424 ) and LINESTRING ( 8.704591829259758 49.406315319082644, 8.712932658082572 49.409927030357025 ) [ (8.711893450081076, 49.409477036797014, NaN) ]"))
                .body("'path'", containsString("/elements/length/ratio"));
    }
    
    
    @Test
    public void test_81_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/ratio?" + 
                    "bcircles=8.73602%2C49.401%2C656750879%7C8.736%2C49.429%2C2%7C8.7486%2C49.423%2C45%7C8.728%2C49.4382%2C848&" + 
                    "filter=turn%21%3D*+or+length%3A%28+..+100%29&" + 
                    "time=2011-08-27&" + 
                    "timeout=24")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El ángulo 371.297.276.940.686.400 es demasiado grande."))
                .body("'path'", containsString("/elements/length/ratio"));
    }
    
    
    @Test
    public void test_82_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/ratio?" + 
                    "bpolys=D%3A8.704561%2C49.403252%2C8.72245%2C49.403941%2C8.71386%2C49.40789%2C8.709%2C49.4100%2C8.704561%2C49.403252%7CN%3A8.704561%2C49.403252%2C8.733%2C49.429%2C8.70469%2C49.4330%2C8.742909%2C49.4133%2C8.704561%2C49.403252&" + 
                    "filter=ref%21%3D*+or+type%3Away+and+id%3A%281+..+9999%29&" + 
                    "format=json&" + 
                    "keys=highway&" + 
                    "keys2=highway&" + 
                    "time=2016-01-25&" + 
                    "timeout=40&" + 
                    "types2=node%2C&" + 
                    "values2=unclassified")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.72245 49.403941 ) and LINESTRING ( 8.709 49.41, 8.704561 49.403252 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/length/ratio"));
    }
    
    
    @Test
    public void test_83_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/groupBy/type?" + 
                    "bpolys=8.704561%2C49.403252%2C8.722%2C49.40418%2C8.70660%2C49.416%2C8.716%2C49.415%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.719%2C49.413%2C8.709%2C49.407%2C8.702%2C49.4115%2C8.704561%2C49.403252&" + 
                    "filter=tracktype%3D*+or+length%3A%28+..+100%29&" + 
                    "format=geojson&" + 
                    "time=2008-03-17&" + 
                    "timeout=44")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.722 49.40418 ) and LINESTRING ( 8.716 49.415, 8.704561 49.403252 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/length/groupBy/type"));
    }
    
    
    @Test
    public void test_84_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/tag?" + 
                    "bpolys=TGQ%3A8.704561%2C49.403252%2C8.70637%2C49.423%2C8.7041%2C49.427%2C8.745764%2C49.430914%2C8.704561%2C49.403252%7CY%3A8.704561%2C49.403252%2C8.7201%2C49.409768%2C8.73839%2C49.401%2C8.707089%2C49.4200%2C8.704561%2C49.403252&" + 
                    "format=csv&" + 
                    "groupByKey=building&" + 
                    "groupByValues=service%2Cship&" + 
                    "keys=highway&" + 
                    "showMetadata=no&" + 
                    "time=2009-12-14&" + 
                    "timeout=58&" + 
                    "values=turning_circle")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.70637 49.423 ) and LINESTRING ( 8.704561 49.403252, 8.7201 49.409768 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/length/groupBy/tag"));
    }
    
    
    @Test
    public void test_85_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/groupBy/tag?" + 
                    "bcircles=hmtV%3A8.74246%2C49.4250%2C9%7Cq%3A8.7172%2C49.4336%2C8%7CiGPEv%3A8.7210%2C49.42044%2C3%7CArM%3A8.73196%2C49.420%2C548595579&" + 
                    "groupByKey=building&" + 
                    "keys=highway&" + 
                    "showMetadata=yes&" + 
                    "time=2011-04-30&" + 
                    "values=unclassified")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El ángulo 88.273.428.249.134.656 es demasiado grande."))
                .body("'path'", containsString("/elements/length/groupBy/tag"));
    }
    
    
    @Test
    public void test_86_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/groupBy/tag?" + 
                    "bpolys=AA%3A8.704561%2C49.403252%2C8.708%2C49.420016%2C8.702%2C49.406%2C8.724%2C49.416%2C8.704561%2C49.403252%7CpSd%3A8.704561%2C49.403252%2C8.744%2C49.436%2C8.748%2C49.422%2C8.7027%2C49.411%2C8.704561%2C49.403252%7CWD%3A8.704561%2C49.403252%2C8.705324%2C49.411%2C8.7097%2C49.419%2C8.71956%2C49.418%2C8.704561%2C49.403252&" + 
                    "filter=bicycle%3D*+or+length%3A%28+..+100%29&" + 
                    "groupByKey=building&" + 
                    "groupByValues=church%2Cresidential%2Cdemolished&" + 
                    "time=2010-11-15")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.708 49.420016 ) and LINESTRING ( 8.7027 49.411, 8.704561 49.403252 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/length/groupBy/tag"));
    }
    
    
    @Test
    public void test_87_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/groupBy/key?" + 
                    "bpolys=uA%3A8.704561%2C49.403252%2C8.707%2C49.404054%2C8.741008%2C49.4146%2C8.703617%2C49.40875%2C8.704561%2C49.403252%7CwIL%3A8.704561%2C49.403252%2C8.7153%2C49.4128%2C8.73907%2C49.424%2C8.7485%2C49.4314%2C8.704561%2C49.403252&" + 
                    "format=csv&" + 
                    "groupByKeys=network%2Clanes%3Aforward&" + 
                    "keys=highway&" + 
                    "showMetadata=true&" + 
                    "values=tertiary")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.707 49.404054 ) and LINESTRING ( 8.703617 49.40875, 8.704561 49.403252 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/length/groupBy/key"));
    }
    
    
    @Test
    public void test_88_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=Q%3A8.704561%2C49.403252%2C8.719%2C49.42724%2C8.7064%2C49.4164%2C8.7348%2C49.41943%2C8.704561%2C49.403252%7CuLq%3A8.704561%2C49.403252%2C8.7349%2C49.406%2C8.716%2C49.424%2C8.704502%2C49.4042%2C8.704561%2C49.403252&" + 
                    "format=json&" + 
                    "groupByKey=building&" + 
                    "groupByValues=emergency_access_point%2Cyes%2Cplatform&" + 
                    "timeout=69")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.719 49.42724 ) and LINESTRING ( 8.704561 49.403252, 8.7349 49.406 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/length/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_89_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22zskbQ%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.704%2C49.4208%5D%2C%5B8.700%2C49.430%5D%2C%5B8.725%2C49.42820%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22FfRT%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.718306%2C49.423%5D%2C%5B8.74581%2C49.42967%5D%2C%5B8.70456%2C49.4267%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "format=geojson&" + 
                    "groupByKey=building&" + 
                    "keys=highway&" + 
                    "time=2018-01-13&" + 
                    "values=give_way")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/utils/GroupByBoundaryGeoJsonGenerator_75_generateGroupByResultGeoJson
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Index 0 out of bounds for length 0"))
                .body("'path'", containsString("/elements/length/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_90_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=kUHxq%3A8.704561%2C49.403252%2C8.740596%2C49.4243%2C8.708%2C49.40137%2C8.714%2C49.433522%2C8.704561%2C49.403252%7Ce%3A8.704561%2C49.403252%2C8.703%2C49.4114%2C8.7379%2C49.403785%2C8.7370%2C49.4316%2C8.704561%2C49.403252%7Ch%3A8.704561%2C49.403252%2C8.731%2C49.433%2C8.7336%2C49.4073%2C8.704%2C49.407%2C8.704561%2C49.403252&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=roof%2Cliving_street&" + 
                    "time=2010-07-08&" + 
                    "timeout=43")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.740596 49.4243 ) and LINESTRING ( 8.704561 49.403252, 8.703 49.4114 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/length/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_91_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/boundary?" + 
                    "bpolys=U%3A8.704561%2C49.403252%2C8.7362%2C49.404309%2C8.7303%2C49.400797%2C8.737%2C49.422%2C8.704561%2C49.403252%7CMys%3A8.704561%2C49.403252%2C8.7003%2C49.416%2C8.706%2C49.412%2C8.7056%2C49.4260%2C8.704561%2C49.403252&" + 
                    "filter=building%3D*&" + 
                    "showMetadata=no&" + 
                    "time=2012-09-11&" + 
                    "timeout=86")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.7362 49.404309 ) and LINESTRING ( 8.704561 49.403252, 8.7003 49.416 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/length/groupBy/boundary"));
    }
    
    
    @Test
    public void test_92_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/groupBy/boundary?" + 
                    "bpolys=V%3A8.704561%2C49.403252%2C8.715%2C49.408%2C8.70477%2C49.432%2C8.737%2C49.415886%2C8.704561%2C49.403252%7CSY%3A8.704561%2C49.403252%2C8.736577%2C49.407%2C8.709%2C49.41451%2C8.7433%2C49.421%2C8.704561%2C49.403252%7CyMzM%3A8.704561%2C49.403252%2C8.7378%2C49.408%2C8.718%2C49.435%2C8.707%2C49.421%2C8.704561%2C49.403252&" + 
                    "time=2015-09-20&" + 
                    "timeout=85")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.715 49.408 ) and LINESTRING ( 8.704561 49.403252, 8.736577 49.407 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/length/groupBy/boundary"));
    }
    
    
    @Test
    public void test_93_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density/groupBy/type?" + 
                    "bpolys=mjijF%3A8.704561%2C49.403252%2C8.717%2C49.4337%2C8.7053%2C49.40730%2C8.7017%2C49.4226%2C8.704561%2C49.403252%7CdqHtb%3A8.704561%2C49.403252%2C8.72535%2C49.42407%2C8.7062%2C49.425%2C8.7336%2C49.40605%2C8.704561%2C49.403252%7CFS%3A8.704561%2C49.403252%2C8.74819%2C49.434%2C8.7025%2C49.407552%2C8.705%2C49.415%2C8.704561%2C49.403252&" + 
                    "format=csv&" + 
                    "keys=highway&" + 
                    "time=2017-06-30&" + 
                    "timeout=24")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.717 49.4337 ) and LINESTRING ( 8.7017 49.4226, 8.704561 49.403252 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/length/density/groupBy/type"));
    }
    
    
    @Test
    public void test_94_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/density/groupBy/type?" + 
                    "bcircles=zRTD%3A8.731832%2C49.409%2C11%7Cf%3A8.709817%2C49..2445%2C2&" + 
                    "format=CsV&" + 
                    "time=2017-04%2F16&" + 
                    "types=evomaster_3761_input&" + 
                    "values=fpo")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_114_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/length/density/groupBy/type"));
    }
    
    
    @Test
    public void test_95_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/density/groupBy/type?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22sZ%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.732%2C49.427%5D%2C%5B8.717937%2C49.4225%5D%2C%5B8.70833%2C49.40460%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "keys=highway&" + 
                    "time=2014-12-08&" + 
                    "timeout=94&" + 
                    "values=pedestrian")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.732 49.427 ) and LINESTRING ( 8.717937 49.4225, 8.70833 49.4046 ) [ (8.71024834003257, 49.408174298593, NaN) ]"))
                .body("'path'", containsString("/elements/length/density/groupBy/type"));
    }
    
    
    @Test
    public void test_96_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/density/groupBy/tag?" + 
                    "bpolys=ux%3A8.704561%2C49.403252%2C8.7092%2C49.4303%2C8.708%2C49.4293%2C8.72325%2C49.41224%2C8.704561%2C49.403252&" + 
                    "format=geojson&" + 
                    "groupByKey=building&" + 
                    "groupByValues=garage%2Cunclassified%2Cschool&" + 
                    "time=2015-12-27")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.7092 49.4303 ) and LINESTRING ( 8.708 49.4293, 8.72325 49.41224 ) [ (8.708862924144324, 49.42833465666215, NaN) ]"))
                .body("'path'", containsString("/elements/length/density/groupBy/tag"));
    }
    
    
    @Test
    public void test_97_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=SxKrL%3A8.704561%2C49.403252%2C8.738%2C49.4170%2C8.70421%2C49.41472%2C8.749%2C49.417%2C8.704561%2C49.403252&" + 
                    "format=geojson&" + 
                    "groupByKey=building&" + 
                    "groupByValues=secondary%2Celevator%2Cstop&" + 
                    "keys=highway&" + 
                    "time=2008-06-25&" + 
                    "timeout=60&" + 
                    "values=footway")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.738 49.417 ) and LINESTRING ( 8.70421 49.41472, 8.749 49.417 ) [ (8.736445597073018, 49.416360927915306, NaN) ]"))
                .body("'path'", containsString("/elements/length/density/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_98_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/density/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=W%3A8.742%2C49.430%2C9&" + 
                    "filter=ref%21%3D*+and+geometry%3Aline+or+not+area%3A%281.0+..+1E6%29&" + 
                    "format=geojson&" + 
                    "groupByKey=building&" + 
                    "timeout=45")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/utils/GroupByBoundaryGeoJsonGenerator_75_generateGroupByResultGeoJson
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Index 0 out of bounds for length 0"))
                .body("'path'", containsString("/elements/length/density/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_99_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/density/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=m%3A8.715%2C49.402%2C3%7CSQ%3A8.728869%2C49.415%2C972%7Cg%3A8.724%2C49.40732%2C674719387&" + 
                    "filter=building%3D*+or+area%3A%281.0+..+1E6%29&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=hut%2Cservice%2Ctraffic_signals&" + 
                    "timeout=69")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El ángulo 461.260.883.481.071.360 es demasiado grande."))
                .body("'path'", containsString("/elements/length/density/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_100_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/density/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=MobR%3A8.704561%2C49.403252%2C8.707262%2C49.422%2C8.700%2C49.437%2C8.712%2C49.406%2C8.704561%2C49.403252&" + 
                    "filter=ref%3D*+or+length%3A%28+..+100%29&" + 
                    "groupByKey=foo&" + 
                    "groupByValues=stop_line%2Cgive_way&" + 
                    "keys=highway&" + 
                    "showMetadata=no&" + 
                    "timeout=33&" + 
                    "values=residential")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.707262 49.422 ) and LINESTRING ( 8.7 49.437, 8.712 49.406 ) [ (8.706867209723136, 49.41925970821523, NaN) ]"))
                .body("'path'", containsString("/elements/length/density/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_101_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density/groupBy/boundary?" + 
                    "bpolys=8.704561%2C49.403252%2C8.714035%2C49.4302%2C8.711%2C49.4238%2C8.7443%2C49.4372%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.732668%2C49.431%2C8.70042%2C49.415%2C8.729%2C49.425%2C8.704561%2C49.403252&" + 
                    "keys=highway&" + 
                    "time=2010-02-14&" + 
                    "timeout=84&" + 
                    "values=primary")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.714035 49.4302 ) and LINESTRING ( 8.70042 49.415, 8.729 49.425 ) [ (8.709851359920611, 49.41829998597642, NaN) ]"))
                .body("'path'", containsString("/elements/length/density/groupBy/boundary"));
    }
    
    
    @Test
    public void test_102_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/density/groupBy/boundary?" + 
                    "bpolys=VHYy%3A8.704561%2C49.403252%2C8.718%2C49.424%2C8.7333%2C49.42672%2C8.702%2C49.421%2C8.704561%2C49.403252%7CseSWZ%3A8.704561%2C49.403252%2C8.743%2C49.4386%2C8.704703%2C49.427%2C8.7480%2C49.415%2C8.704561%2C49.403252&" + 
                    "format=geojson&" + 
                    "keys=highway&" + 
                    "showMetadata=yes&" + 
                    "time=2017-01-06&" + 
                    "timeout=65&" + 
                    "values=primary_link")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.718 49.424 ) and LINESTRING ( 8.702 49.421, 8.704561 49.403252 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/length/density/groupBy/boundary"));
    }
    
    
    @Test
    public void test_103_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/density/groupBy/boundary?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22qYspP%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7212%2C49.414%5D%2C%5B8.706523%2C49.424%5D%2C%5B8.704%2C49.4067%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22qv%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7325%2C49.417904%5D%2C%5B8.712%2C49.437%5D%2C%5B8.739667%2C49.425%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "format=csv&" + 
                    "keys=highway&" + 
                    "showMetadata=no&" + 
                    "time=2008-12-26&" + 
                    "values=platform")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.7325 49.417904, 8.712 49.437 ) and LINESTRING ( 8.739667 49.425, 8.704561 49.403252 ) [ (8.730787514599657, 49.41949920103439, NaN) ]"))
                .body("'path'", containsString("/elements/length/density/groupBy/boundary"));
    }
    
    
    @Test
    public void test_104_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22OhdTl%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7463%2C49.409%5D%2C%5B8.748%2C49.425%5D%2C%5B8.7162%2C49.404%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22wnF%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.714787%2C49.433677%5D%2C%5B8.710442%2C49.429%5D%2C%5B8.726%2C49.40234%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22cOM%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7007%2C49.4240%5D%2C%5B8.705%2C49.41743%5D%2C%5B8.704%2C49.437%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=building%21%3D*+or+id%3A%281+..+9999%29&" + 
                    "time=2012-05-30&" + 
                    "timeout=22")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.714787 49.433677 ) and LINESTRING ( 8.710442 49.429, 8.726 49.40234 ) [ (8.712201601233225, 49.425984768679925, NaN) ]"))
                .body("'path'", containsString("/elements/length/density"));
    }
    
    
    @Test
    public void test_105_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density?" + 
                    "bpolys=qUldf%3A8.704561%2C49.403252%2C8.747%2C49.410%2C8.73724%2C49.4320%2C8.742%2C49.407%2C8.704561%2C49.403252%7CE%3A8.704561%2C49.403252%2C8.739928%2C49.406%2C8.717%2C49.41445%2C8.724%2C49.426%2C8.704561%2C49.403252%7CM%3A8.704561%2C49.403252%2C8.7184%2C49.4362%2C8.7091%2C49.4269%2C8.703%2C49.428%2C8.704561%2C49.403252&" + 
                    "format=csv&" + 
                    "keys=highway&" + 
                    "showMetadata=no&" + 
                    "time=2014-01-31&" + 
                    "values=elevator")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.747 49.41 ) and LINESTRING ( 8.724 49.426, 8.704561 49.403252 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/length/density"));
    }
    
    
    @Test
    public void test_106_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/density?" + 
                    "bcircles=XK%3A8.7279%2C49.4318%2C771468174&" + 
                    "filter=oneway%21%3D*+or+geometry%3Aline+or+length%3A%28+..+100%29&" + 
                    "showMetadata=true")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El ángulo 1.352.825.688.369.035.780 es demasiado grande."))
                .body("'path'", containsString("/elements/length/density"));
    }
    
    
    @Test
    public void test_107_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/density?" + 
                    "bpolys=8.704561%2C49.403252%2C8.747%2C49.404%2C8.7042%2C49.400%2C8.7363%2C49.40826%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.745%2C49.427%2C8.70696%2C49.425%2C8.707%2C49.420%2C8.704561%2C49.403252&" + 
                    "filter=destination%3D*+and+geometry%3Apoint&" + 
                    "time=2010-12-26&" + 
                    "timeout=59")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.747 49.404 ) and LINESTRING ( 8.7042 49.4, 8.7363 49.40826 ) [ (8.717740664113126, 49.40348429550076, NaN) ]"))
                .body("'path'", containsString("/elements/length/density"));
    }
    
    
    @Test
    public void test_108_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22GHDmi%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.702%2C49.41256%5D%2C%5B8.7046%2C49.40577%5D%2C%5B8.7076%2C49.415%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22vTM%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7307%2C49.438%5D%2C%5B8.720%2C49.4135%5D%2C%5B8.707%2C49.433%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "keys=highway&" + 
                    "showMetadata=true&" + 
                    "time=2009-09-10&" + 
                    "values=footway")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.7307 49.438 ) and LINESTRING ( 8.72 49.4135, 8.707 49.433 ) [ (8.716368109632013, 49.41894783555198, NaN) ]"))
                .body("'path'", containsString("/elements/length"));
    }
    
    
    @Test
    public void test_109_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22XM%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.733%2C49.426%5D%2C%5B8.7008%2C49.406564%5D%2C%5B8.737%2C49.418%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22ebK%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.714%2C49.408%5D%2C%5B8.7059%2C49.419%5D%2C%5B8.705532%2C49.439%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22Gu%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.705%2C49.42106%5D%2C%5B8.731%2C49.439%5D%2C%5B8.7019%2C49.426%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "keys=highway&" + 
                    "time=2013-10-07&" + 
                    "timeout=49&" + 
                    "values=stop")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.712701458776497 49.40976345104426, 8.733 49.426 ) and LINESTRING ( 8.71236670418123 49.410218056050184, 8.737 49.418 ) [ (8.713859280672077, 49.41068957828083, NaN) ]"))
                .body("'path'", containsString("/elements/length"));
    }
    
    
    @Test
    public void test_110_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length?" + 
                    "bpolys=bgw%3A8.704561%2C49.403252%2C8.7284%2C49.428%2C8.7166%2C49.437%2C8.745%2C49.425%2C8.704561%2C49.403252%7CnBf%3A8.704561%2C49.403252%2C8.7048%2C49.427%2C8.702%2C49.411%2C8.718%2C49.421%2C8.704561%2C49.403252&" + 
                    "keys=highway&" + 
                    "showMetadata=yes&" + 
                    "timeout=25")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.7284 49.428 ) and LINESTRING ( 8.704561 49.403252, 8.7048 49.427 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/length"));
    }
    
    
    @Test
    public void test_111_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/ratio/groupBy/boundary?" + 
                    "bpolys=8.704561%2C49.403252%2C8.707%2C49.4395%2C8.704590%2C49.404988%2C8.7045%2C49.437%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.71907%2C49.426%2C8.7078%2C49.405%2C8.729%2C49.420%2C8.704561%2C49.403252&" + 
                    "keys=highway&" + 
                    "timeout=66&" + 
                    "values=living_street")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.707 49.4395 ) and LINESTRING ( 8.7045 49.437, 8.704561 49.403252 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/count/ratio/groupBy/boundary"));
    }
    
    
    @Test
    public void test_112_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/ratio/groupBy/boundary?" + 
                    "bpolys=8.704561%2C49.403252%2C8.714126%2C49.4321%2C8.746%2C49.4045%2C8.733%2C49.425%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.726889%2C49.414%2C8.731%2C49.409273%2C8.7204%2C49.420%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.748358%2C49.42739%2C8.711%2C49.40271%2C8.746%2C49.422%2C8.704561%2C49.403252&" + 
                    "filter2=ref%21%3D*+and+geometry%3Aline&" + 
                    "format=csv&" + 
                    "keys2=highway&" + 
                    "time=2011-12-28&" + 
                    "types2=polygon%2C")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.714126 49.4321 ) and LINESTRING ( 8.704561 49.403252, 8.726889 49.414 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/count/ratio/groupBy/boundary"));
    }
    
    
    @Test
    public void test_113_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/ratio?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22Wx%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7137%2C49.4299%5D%2C%5B8.703%2C49.433%5D%2C%5B8.7485%2C49.412%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=highway%3D*+and+type%3Anode+or+area%3A%281.0+..+1E6%29&" + 
                    "filter2=building%21%3D*+or+not+length%3A%28+..+100%29&" + 
                    "keys2=highway&" + 
                    "timeout=84&" + 
                    "types2=way%2Crelation")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.7137 49.4299 ) and LINESTRING ( 8.703 49.433, 8.7485 49.412 ) [ (8.713155656709647, 49.42831277382631, NaN) ]"))
                .body("'path'", containsString("/elements/count/ratio"));
    }
    
    
    @Test
    public void test_114_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/type?" + 
                    "bpolys=f%3A8.704561%2C49.403252%2C8.705%2C49.424%2C8.7429%2C49.408%2C8.7096%2C49.406%2C8.704561%2C49.403252%7Ck%3A8.704561%2C49.403252%2C8.721%2C49.4279%2C8.741957%2C49.418%2C8.7033%2C49.430%2C8.704561%2C49.403252%7CWYMZZ%3A8.704561%2C49.403252%2C8.739958%2C49.4362%2C8.714%2C49.4103%2C8.70339%2C49.4060%2C8.704561%2C49.403252&" + 
                    "format=json&" + 
                    "keys=highway&" + 
                    "time=2017-12-16&" + 
                    "timeout=80&" + 
                    "values=primary_link")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.705 49.424 ) and LINESTRING ( 8.704561 49.403252, 8.721 49.4279 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/count/groupBy/type"));
    }
    
    
    @Test
    public void test_115_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/groupBy/type?" + 
                    "bpolys=QqYW%3A8.704561%2C49.403252%2C8.737382%2C49.4220%2C8.726741%2C49.402672%2C8.704%2C49.436202%2C8.704561%2C49.403252%7CX%3A8.704561%2C49.403252%2C8.732%2C49.4280%2C8.702%2C49.417%2C8.7059%2C49.4395%2C8.704561%2C49.403252&" + 
                    "keys=highway&" + 
                    "timeout=66&" + 
                    "values=traffic_signals")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.737382 49.422 ) and LINESTRING ( 8.704 49.436202, 8.704561 49.403252 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/count/groupBy/type"));
    }
    
    
    @Test
    public void test_116_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/tag?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22I%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.718%2C49.428%5D%2C%5B8.706%2C49.401533%5D%2C%5B8.725%2C49.41162%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22JYf%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.705%2C49.413%5D%2C%5B8.709279%2C49.43822%5D%2C%5B8.73700%2C49.431%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=ref%3D*+and+geometry%3Apoint+and+id%3A%281+..+9999%29&" + 
                    "groupByKey=building&" + 
                    "showMetadata=true&" + 
                    "time=2008-07-12&" + 
                    "timeout=36")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.708184803139343 49.40635176539075, 8.706 49.401533 ) and LINESTRING ( 8.725 49.41162, 8.704561 49.403252 ) [ (8.707285037554323, 49.404367257412524, NaN) ]"))
                .body("'path'", containsString("/elements/count/groupBy/tag"));
    }
    
    
    @Test
    public void test_117_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/groupBy/tag?" + 
                    "bboxes=NArj%3A8.65146%2C49.4.09%2C8.712%2C49.394&" + 
                    "format=foo&" + 
                    "groupByKey=building&" + 
                    "groupByValues=dormitory%2Cresidentia&" + 
                    "keys=highway&" + 
                    "showMetadata=trwe&" + 
                    "values=stop_lioe")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_64_createBboxes
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/count/groupBy/tag"));
    }
    
    
    @Test
    public void test_118_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/groupBy/key?" + 
                    "bpolys=sBbKS%3A8.704561%2C49.403252%2C8.724%2C49.415486%2C8.704560%2C49.410907%2C8.7206%2C49.4285%2C8.704561%2C49.403252&" + 
                    "format=geojson&" + 
                    "groupByKeys=surface%2Cbicycle%2Cturn&" + 
                    "showMetadata=true&" + 
                    "time=2017-01-13&" + 
                    "timeout=72")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.724 49.415486, 8.70456 49.410907 ) and LINESTRING ( 8.7206 49.4285, 8.704561 49.403252 ) [ (8.710279761590138, 49.41225426277373, NaN) ]"))
                .body("'path'", containsString("/elements/count/groupBy/key"));
    }
    
    
    @Test
    public void test_119_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/groupBy/key?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22szRDF%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.72434%2C49.425%5D%2C%5B8.700%2C49.411%5D%2C%5B8.7200%2C49.4139%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22NRXgq%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.721%2C49.4085%5D%2C%5B8.702%2C49.405369%5D%2C%5B8.737%2C49.41449%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "format=csv&" + 
                    "groupByKeys=addr%3Apostcode%2Csmoothness&" + 
                    "timeout=59")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.721 49.4085, 8.709398230174761 49.40658815045669 ) and LINESTRING ( 8.737 49.41449, 8.704561 49.403252 ) [ (8.718538927411762, 49.40809444114348, NaN) ]"))
                .body("'path'", containsString("/elements/count/groupBy/key"));
    }
    
    
    @Test
    public void test_120_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=qHF%3A8.704561%2C49.403252%2C8.748%2C49.43550%2C8.70834%2C49.430912%2C8.717487%2C49.415%2C8.704561%2C49.403252%7CufdiJ%3A8.704561%2C49.403252%2C8.7362%2C49.4016%2C8.728%2C49.4065%2C8.717%2C49.402%2C8.704561%2C49.403252&" + 
                    "groupByKey=highway&" + 
                    "showMetadata=yes")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.748 49.4355 ) and LINESTRING ( 8.717487 49.415, 8.704561 49.403252 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/count/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_121_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=8.732%2C49.4363%2C5&" + 
                    "format=geojson&" + 
                    "groupByKey=highway&" + 
                    "keys=highway&" + 
                    "timeout=54&" + 
                    "values=pedestrian")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/utils/GroupByBoundaryGeoJsonGenerator_75_generateGroupByResultGeoJson
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Index 0 out of bounds for length 0"))
                .body("'path'", containsString("/elements/count/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_122_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=8.704561%2C49.403252%2C8.7491%2C49.431%2C8.7014%2C49.419%2C8.734%2C49.403%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.732%2C49.412%2C8.70441%2C49.4163%2C8.738%2C49.410%2C8.704561%2C49.403252&" + 
                    "format=geojson&" + 
                    "groupByKey=building&" + 
                    "groupByValues=traffic_signals%2Csecondary_link&" + 
                    "keys=highway&" + 
                    "time=2014-11-17&" + 
                    "timeout=94&" + 
                    "values=street_lamp")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.7491 49.431 ) and LINESTRING ( 8.704561 49.403252, 8.732 49.412 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/count/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_123_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/boundary?" + 
                    "bpolys=Rj%3A8.704561%2C49.403252%2C8.715%2C49.403%2C8.700%2C49.439922%2C8.706%2C49.4231%2C8.704561%2C49.403252%7CnCk%3A8.704561%2C49.403252%2C8.719%2C49.415%2C8.70019%2C49.438%2C8.701528%2C49.427%2C8.704561%2C49.403252%7ChjAs%3A8.704561%2C49.403252%2C8.747%2C49.4242%2C8.7087%2C49.434%2C8.72786%2C49.4221%2C8.704561%2C49.403252&" + 
                    "filter=surface%3D*+and+length%3A%28+..+100%29&" + 
                    "format=csv&" + 
                    "showMetadata=true&" + 
                    "time=2015-07-31&" + 
                    "timeout=57")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.715 49.403 ) and LINESTRING ( 8.706 49.4231, 8.704561 49.403252 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/count/groupBy/boundary"));
    }
    
    
    @Test
    public void test_124_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/groupBy/boundary?" + 
                    "bpolys=SxBE%3A8.704561%2C49.403252%2C8.7008%2C49.429%2C8.712%2C49.42635%2C8.701%2C49.427%2C8.704561%2C49.403252%7CbjPvz%3A8.704561%2C49.403252%2C8.7249%2C49.414%2C8.70470%2C49.417%2C8.706112%2C49.419%2C8.704561%2C49.403252&" + 
                    "filter=destination%3D*+and+type%3Anode&" + 
                    "showMetadata=true&" + 
                    "time=2009-04-13&" + 
                    "timeout=53")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.7008 49.429 ) and LINESTRING ( 8.701 49.427, 8.704561 49.403252 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/count/groupBy/boundary"));
    }
    
    
    @Test
    public void test_125_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/density/groupBy/type?" + 
                    "bcircles=8.71663%2C49.4379%2C749920686%7C8.730%2C49.405%2C3%7C8.70530%2C49.40057%2C1&" + 
                    "showMetadata=no")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El ángulo 1.079.548.498.904.840.700 es demasiado grande."))
                .body("'path'", containsString("/elements/count/density/groupBy/type"));
    }
    
    
    @Test
    public void test_126_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/density/groupBy/type?" + 
                    "bpolys=yZ%3A8.704561%2C49.403252%2C8.73430%2C49.439%2C8.701%2C49.403%2C8.709055%2C49.424457%2C8.704561%2C49.403252%7CNF%3A8.704561%2C49.403252%2C8.7126%2C49.404%2C8.710%2C49.414004%2C8.740%2C49.43054%2C8.704561%2C49.403252%7CQwO%3A8.704561%2C49.403252%2C8.7125%2C49.408%2C8.70842%2C49.432%2C8.704599%2C49.401%2C8.704561%2C49.403252&" + 
                    "format=csv&" + 
                    "showMetadata=no")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.7343 49.439 ) and LINESTRING ( 8.704561 49.403252, 8.7125 49.408 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/count/density/groupBy/type"));
    }
    
    
    @Test
    public void test_127_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/density/groupBy/type?" + 
                    "bpolys=8.704561%2C49.403252%2C8.73734%2C49.424%2C8.73123%2C49.400%2C8.704%2C49.431%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.724100%2C49.4095%2C8.70497%2C49.42384%2C8.74841%2C49.425356%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.712%2C49.439%2C8.70081%2C49.423%2C8.737%2C49.437%2C8.704561%2C49.403252&" + 
                    "timeout=42")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.73734 49.424 ) and LINESTRING ( 8.704561 49.403252, 8.7241 49.4095 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/count/density/groupBy/type"));
    }
    
    
    @Test
    public void test_128_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/density/groupBy/type?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22l%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.710%2C49.41996%5D%2C%5B8.735300%2C49.433101%5D%2C%5B8.734%2C49.411%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22aKHZ%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7177%2C49.412557%5D%2C%5B8.706%2C49.408%5D%2C%5B8.703%2C49.427%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22qgNrD%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.710482%2C49.438%5D%2C%5B8.704689%2C49.404%5D%2C%5B8.7047%2C49.4377%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "format=geojson&" + 
                    "keys=highway&" + 
                    "showMetadata=yes&" + 
                    "time=2012-11-17&" + 
                    "values=steps")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.710482 49.438 ) and LINESTRING ( 8.704689 49.404, 8.7047 49.4377 ) [ (8.704689001040373, 49.404003187324925, NaN) ]"))
                .body("'path'", containsString("/elements/count/density/groupBy/type"));
    }
    
    
    @Test
    public void test_129_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/density/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=SmJFK%3A8.704561%2C49.403252%2C8.7092%2C49.400%2C8.72662%2C49.436%2C8.700%2C49.434%2C8.704561%2C49.403252%7CyhW%3A8.704561%2C49.403252%2C8.71052%2C49.435%2C8.70453%2C49.42094%2C8.704%2C49.428%2C8.704561%2C49.403252%7CDKrf%3A8.704561%2C49.403252%2C8.731%2C49.406909%2C8.730917%2C49.405871%2C8.70933%2C49.419175%2C8.704561%2C49.403252&" + 
                    "groupByKey=highway&" + 
                    "showMetadata=true&" + 
                    "time=2013-06-04&" + 
                    "timeout=40")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.7092 49.4 ) and LINESTRING ( 8.704 49.428, 8.704561 49.403252 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/count/density/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_130_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/density/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22c%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.73854%2C49.434%5D%2C%5B8.727%2C49.418%5D%2C%5B8.705%2C49.4355%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22sz%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7180%2C49.42758%5D%2C%5B8.7098%2C49.402799%5D%2C%5B8.718%2C49.429%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=building%3D*+or+not+area%3A%281.0+..+1E6%29&" + 
                    "groupByKey=building&" + 
                    "showMetadata=true&" + 
                    "time=2015-10-21")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.717070920906517 49.425898131097085 ) and LINESTRING ( 8.712067720626619 49.410044920504646, 8.717037534621806 49.425924688369015 ) [ (8.71697472196005, 49.42572398659455, NaN) ]"))
                .body("'path'", containsString("/elements/count/density/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_131_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/density/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=oYS%3A8.748%2C49.4204%2C4175800597%7CDF%3A8.7368%2C49.43054%2C9&" + 
                    "filter=highway%3D*&" + 
                    "groupByKey=building&" + 
                    "showMetadata=false&" + 
                    "time=2008-03-14")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El ángulo 995.201.761.591.619.300.000.000 es demasiado grande."))
                .body("'path'", containsString("/elements/count/density/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_132_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/density/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=XYDey%3A8.704561%2C49.403252%2C8.705%2C49.4164%2C8.704080%2C49.434%2C8.717797%2C49.421%2C8.704561%2C49.403252%7CRz%3A8.704561%2C49.403252%2C8.7264%2C49.420%2C8.703%2C49.4393%2C8.727%2C49.427%2C8.704561%2C49.403252%7CYqo%3A8.704561%2C49.403252%2C8.734%2C49.413157%2C8.709%2C49.426%2C8.70931%2C49.405%2C8.704561%2C49.403252&" + 
                    "filter=foo&" + 
                    "groupByKey=evomaUter_37_ilput&" + 
                    "groupByValues=speed_camera%2Cstop_line%2Cdemolished&" + 
                    "showMetadata=tjue&" + 
                    "time=foo&" + 
                    "timeout=85")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.705 49.4164 ) and LINESTRING ( 8.704561 49.403252, 8.734 49.413157 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/count/density/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_133_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/density/groupBy/boundary?" + 
                    "bpolys=f%3A8.704561%2C49.403252%2C8.7210%2C49.439%2C8.724%2C49.415%2C8.705%2C49.4298%2C8.704561%2C49.403252%7CvRXqM%3A8.704561%2C49.403252%2C8.700%2C49.4191%2C8.706%2C49.420786%2C8.700%2C49.430%2C8.704561%2C49.403252%7CRuNd%3A8.704561%2C49.403252%2C8.704%2C49.419%2C8.704091%2C49.406%2C8.70128%2C49.436%2C8.704561%2C49.403252&" + 
                    "filter=ref%3D*+and+length%3A%28+..+100%29&" + 
                    "format=json&" + 
                    "showMetadata=yes")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.721 49.439 ) and LINESTRING ( 8.704561 49.403252, 8.7 49.4191 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/count/density/groupBy/boundary"));
    }
    
    
    @Test
    public void test_134_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/density/groupBy/boundary?" + 
                    "bpolys=y%3A8.704561%2C49.403252%2C8.713576%2C49.434%2C8.7045%2C49.425%2C8.70237%2C49.401%2C8.704561%2C49.403252%7CM%3A8.704561%2C49.403252%2C8.748%2C49.42186%2C8.7082%2C49.4124%2C8.708522%2C49.419841%2C8.704561%2C49.403252%7CV%3A8.704561%2C49.403252%2C8.7146%2C49.4211%2C8.7406%2C49.412%2C8.746%2C49.4135%2C8.704561%2C49.403252&" + 
                    "keys=highway&" + 
                    "showMetadata=false&" + 
                    "time=2017-03-05&" + 
                    "timeout=81&" + 
                    "values=primary_link")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.713576 49.434 ) and LINESTRING ( 8.708522 49.419841, 8.704561 49.403252 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/count/density/groupBy/boundary"));
    }
    
    
    @Test
    public void test_135_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/density?" + 
                    "bcircles=XHDCn%3A8.746%2C49.419%2C186082966&" + 
                    "format=geojson&" + 
                    "timeout=94")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El ángulo 15.445.244.901.231,016 es demasiado grande."))
                .body("'path'", containsString("/elements/count/density"));
    }
    
    
    @Test
    public void test_136_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/density?" + 
                    "bpolys=F%3A8.704561%2C49.403252%2C8.70486%2C49.4168%2C8.716207%2C49.40296%2C8.704%2C49.429%2C8.704561%2C49.403252%7Ct%3A8.704561%2C49.403252%2C8.717%2C49.437559%2C8.70382%2C49.414%2C8.70833%2C49.4093%2C8.704561%2C49.403252%7CUOr%3A8.704561%2C49.403252%2C8.701%2C49.425662%2C8.7022%2C49.42144%2C8.709%2C49.403%2C8.704561%2C49.403252&" + 
                    "filter=type%3D*+and+area%3A%281.0+..+1E6%29&" + 
                    "format=json&" + 
                    "showMetadata=no&" + 
                    "time=2010-06-20&" + 
                    "timeout=47")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.70486 49.4168 ) and LINESTRING ( 8.7022 49.42144, 8.709 49.403 ) [ (8.70480641516035, 49.414372015359284, NaN) ]"))
                .body("'path'", containsString("/elements/count/density"));
    }
    
    
    @Test
    public void test_137_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/density?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22iVfT%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.705%2C49.4025%5D%2C%5B8.702859%2C49.4074%5D%2C%5B8.741%2C49.4122%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=ref%21%3D*+and+not+geometry%3Apolygon+and+length%3A%28+..+100%29&" + 
                    "showMetadata=false&" + 
                    "time=2009-06-24&" + 
                    "timeout=61")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.705 49.4025, 8.702859 49.4074 ) and LINESTRING ( 8.741 49.4122, 8.704561 49.403252 ) [ (8.704660722319105, 49.40327648791985, NaN) ]"))
                .body("'path'", containsString("/elements/count/density"));
    }
    
    
    @Test
    public void test_138_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count?" + 
                    "bpolys=8.704561%2C49.403252%2C8.749%2C49.4298%2C8.7156%2C49.401060%2C8.70882%2C49.41132%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.7124%2C49.408%2C8.704560%2C49.43554%2C8.704588%2C49.4399%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.735%2C49.401%2C8.71256%2C49.4377%2C8.727%2C49.4074%2C8.704561%2C49.403252&" + 
                    "filter=addr%3Acountry%3D*+and+area%3A%281.0+..+1E6%29&" + 
                    "format=csv&" + 
                    "showMetadata=false&" + 
                    "time=2015-05-24&" + 
                    "timeout=56")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.749 49.4298 ) and LINESTRING ( 8.704561 49.403252, 8.7124 49.408 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/count"));
    }
    
    
    @Test
    public void test_139_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count?" + 
                    "bpolys=8.704561%2C49.403252%2C8.7385%2C49.439%2C8.707%2C49.428940%2C8.72808%2C49.436%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.7140%2C49.415%2C8.7094%2C49.43533%2C8.719306%2C49.4117%2C8.704561%2C49.403252&" + 
                    "format=json&" + 
                    "keys=highway&" + 
                    "showMetadata=false&" + 
                    "time=2008-06-14&" + 
                    "timeout=56&" + 
                    "values=track")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.7385 49.439 ) and LINESTRING ( 8.704561 49.403252, 8.714 49.415 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/count"));
    }
    
    
    @Test
    public void test_140_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/ratio/groupBy/boundary?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22lEFgp%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.743%2C49.4132%5D%2C%5B8.700%2C49.4315%5D%2C%5B8.723010%2C49.4071%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "format=geojson&" + 
                    "time=2013-06-17&" + 
                    "timeout=63")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.743 49.4132 ) and LINESTRING ( 8.7 49.4315, 8.72301 49.4071 ) [ (8.722307612854127, 49.407844817312444, NaN) ]"))
                .body("'path'", containsString("/elements/area/ratio/groupBy/boundary"));
    }
    
    
    @Test
    public void test_141_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/ratio?" + 
                    "bpolys=mPcHE%3A8.704561%2C49.403252%2C8.722552%2C49.4385%2C8.707%2C49.403711%2C8.728%2C49.42353%2C8.704561%2C49.403252&" + 
                    "format=csv&" + 
                    "keys2=highway&" + 
                    "showMetadata=false&" + 
                    "time=2011-12-26&" + 
                    "timeout=21&" + 
                    "types2=way%2Crelation")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.722552 49.4385, 8.707 49.403711 ) and LINESTRING ( 8.728 49.42353, 8.704561 49.403252 ) [ (8.708203575927369, 49.40640333557981, NaN) ]"))
                .body("'path'", containsString("/elements/area/ratio"));
    }
    
    
    @Test
    public void test_142_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/type?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22f%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.733%2C49.4314%5D%2C%5B8.731%2C49.400%5D%2C%5B8.7065%2C49.4264%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22CBv%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.73065%2C49.435%5D%2C%5B8.704%2C49.41221%5D%2C%5B8.704590%2C49.4040%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22k%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.730%2C49.4021%5D%2C%5B8.71670%2C49.412%5D%2C%5B8.71467%2C49.430%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "keys=highway&" + 
                    "showMetadata=true&" + 
                    "timeout=100&" + 
                    "values=traffic_signals")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.716368573883523 49.41493875374216, 8.733 49.4314 ) and LINESTRING ( 8.726931334622828 49.40438419452887, 8.716262359063313 49.415880560029734 ) [ (8.716768780413098, 49.41533486518752, NaN) ]"))
                .body("'path'", containsString("/elements/area/groupBy/type"));
    }
    
    
    @Test
    public void test_143_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/type?" + 
                    "bpolys=8.704561%2C49.403252%2C8.719%2C49.423%2C8.704840%2C49.428%2C8.70490%2C49.4158%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.709%2C49.428%2C8.737523%2C49.438%2C8.7159%2C49.40357%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.733%2C49.429080%2C8.703%2C49.412907%2C8.739%2C49.413%2C8.704561%2C49.403252&" + 
                    "format=geojson&" + 
                    "keys=highway&" + 
                    "time=2014-09-02&" + 
                    "timeout=33")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.719 49.423 ) and LINESTRING ( 8.7049 49.4158, 8.704561 49.403252 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/area/groupBy/type"));
    }
    
    
    @Test
    public void test_144_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/tag?" + 
                    "bcircles=8.721%2C49.400733%2C3%7C8.730%2C49.436%2C6%7C8.703%2C49.425%2C7%7C8.718%2C49.416%2C81975822278&" + 
                    "format=csv&" + 
                    "groupByKey=highway&" + 
                    "keys=highway&" + 
                    "time=2012-02-03&" + 
                    "timeout=46&" + 
                    "values=path")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El ángulo 21.937.700.582.572.370.000.000.000.000.000.000 es demasiado grande."))
                .body("'path'", containsString("/elements/area/groupBy/tag"));
    }
    
    
    @Test
    public void test_145_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/tag?" + 
                    "bpolys=Pc%3A8.704561%2C49.403252%2C8.700818%2C49.4263%2C8.745%2C49.40137%2C8.70461%2C49.42985%2C8.704561%2C49.403252%7CtKrA%3A8.704561%2C49.403252%2C8.736%2C49.43582%2C8.70446%2C49.407%2C8.7075%2C49.4025%2C8.704561%2C49.403252&" + 
                    "groupByKey=highway&" + 
                    "showMetadata=no&" + 
                    "time=2014-10-31&" + 
                    "timeout=65")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.700818 49.4263 ) and LINESTRING ( 8.70461 49.42985, 8.704561 49.403252 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/area/groupBy/tag"));
    }
    
    
    @Test
    public void test_146_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/tag?" + 
                    "bpolys=8.704561%2C49.403252%2C8.72793%2C49.403%2C8.708%2C49.416581%2C8.714%2C49.433172%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.735%2C49.428655%2C8.705%2C49.416158%2C8.7475%2C49.4322%2C8.704561%2C49.403252&" + 
                    "format=json&" + 
                    "groupByKey=building&" + 
                    "keys=highway&" + 
                    "time=2009-12-21&" + 
                    "timeout=26&" + 
                    "values=track")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.72793 49.403 ) and LINESTRING ( 8.714 49.433172, 8.704561 49.403252 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/area/groupBy/tag"));
    }
    
    
    @Test
    public void test_147_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/key?" + 
                    "bcircles=V%3A8.746379%2C49.4074%2C533578404&" + 
                    "filter=oneway%3D*+or+geometry%3Apoint+and+not+area%3A%281.0+..+1E6%29&" + 
                    "groupByKeys=name%2Cbicycle&" + 
                    "timeout=61")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El ángulo 70.552.590.769.684.304 es demasiado grande."))
                .body("'path'", containsString("/elements/area/groupBy/key"));
    }
    
    
    @Test
    public void test_148_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/key?" + 
                    "bpolys=Q%3A8.704561%2C49.403252%2C8.732%2C49.4088%2C8.7040%2C49.429%2C8.704599%2C49.431%2C8.704561%2C49.403252%7CjoA%3A8.704561%2C49.403252%2C8.7185%2C49.438%2C8.703%2C49.4170%2C8.710%2C49.41824%2C8.704561%2C49.403252&" + 
                    "filter=maxspeed%3D*+and+geometry%3Aline+and+id%3A%281+..+9999%29&" + 
                    "format=json&" + 
                    "groupByKeys=landuse%2Cmaxspeed%2Coneway&" + 
                    "showMetadata=false&" + 
                    "timeout=52")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.732 49.4088 ) and LINESTRING ( 8.704599 49.431, 8.704561 49.403252 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/area/groupBy/key"));
    }
    
    
    @Test
    public void test_149_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/key?" + 
                    "bcircles=b%3A8.736%2C49.420%2C641230767%7CXUyuh%3A8.740%2C49.420%2C42&" + 
                    "groupByKeys=barrier%2Caddr%3Apostcode%2Cturn%3Alanes&" + 
                    "keys=highway&" + 
                    "timeout=23")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El ángulo 307.580.102.110.433.090 es demasiado grande."))
                .body("'path'", containsString("/elements/area/groupBy/key"));
    }
    
    
    @Test
    public void test_150_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/key?" + 
                    "bpolys=8.704561%2C49.403252%2C8.7062%2C49.4243%2C8.700%2C49.4354%2C8.72757%2C49.4302%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.7048%2C49.41250%2C8.724%2C49.43117%2C8.718%2C49.406%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.707%2C49.4292%2C8.723081%2C49.42177%2C8.742%2C49.411%2C8.704561%2C49.403252&" + 
                    "groupByKeys=lanes%2Clanduse&" + 
                    "showMetadata=false")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.7062 49.4243 ) and LINESTRING ( 8.704561 49.403252, 8.707 49.4292 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/area/groupBy/key"));
    }
    
    
    @Test
    public void test_151_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22Uo%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.732%2C49.4128%5D%2C%5B8.718822%2C49.422%5D%2C%5B8.70456%2C49.4204%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22IT%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.745%2C49.438%5D%2C%5B8.7009%2C49.422%5D%2C%5B8.713%2C49.401%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22h%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.735%2C49.4052%5D%2C%5B8.7057%2C49.4335%5D%2C%5B8.70067%2C49.424%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "format=csv&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=school%2Cspeed_camera&" + 
                    "keys=highway&" + 
                    "showMetadata=yes&" + 
                    "timeout=66&" + 
                    "values=pedestrian")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.721736739559187 49.41801058943601 ) and LINESTRING ( 8.701115073573963 49.42162673181378, 8.71144844869369 49.403692774994425 ) [ (8.709337540122636, 49.40735633532435, NaN) ]"))
                .body("'path'", containsString("/elements/area/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_152_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=8.704561%2C49.403252%2C8.705568%2C49.417%2C8.716%2C49.417%2C8.706%2C49.40041%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.73195%2C49.428531%2C8.72778%2C49.414%2C8.7186%2C49.427910%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.711%2C49.410%2C8.747%2C49.42066%2C8.7051%2C49.4361%2C8.704561%2C49.403252&" + 
                    "format=csv&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=living_street%2Csynagogue%2Cdemolished&" + 
                    "keys=highway&" + 
                    "showMetadata=false&" + 
                    "time=2011-04-07&" + 
                    "values=traffic_mirror")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.705568 49.417 ) and LINESTRING ( 8.706 49.40041, 8.704561 49.403252 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/area/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_153_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=8.710%2C49.418144%2C6%7C8.7440%2C49.42516%2C2&" + 
                    "format=geojson&" + 
                    "groupByKey=highway&" + 
                    "keys=highway&" + 
                    "time=2009-01-20&" + 
                    "values=unclassified")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/utils/GroupByBoundaryGeoJsonGenerator_75_generateGroupByResultGeoJson
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Index 0 out of bounds for length 0"))
                .body("'path'", containsString("/elements/area/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_154_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=J%3A8.704561%2C49.403252%2C8.71982%2C49.433%2C8.704523%2C49.428595%2C8.723%2C49.4047%2C8.704561%2C49.403252%7Ci%3A8.704561%2C49.403252%2C8.70093%2C49.4063%2C8.74657%2C49.42727%2C8.701%2C49.406%2C8.704561%2C49.403252%7CS%3A8.704561%2C49.403252%2C8.713%2C49.408%2C8.707%2C49.426%2C8.702%2C49.4069%2C8.704561%2C49.403252&" + 
                    "filter=bicycle%21%3D*+and+not+area%3A%281.0+..+1E6%29&" + 
                    "format=csv&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=give_way%2Ctrack%2Cplatform&" + 
                    "showMetadata=yes&" + 
                    "time=2009-12-27&" + 
                    "timeout=90")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.71982 49.433 ) and LINESTRING ( 8.701 49.406, 8.704561 49.403252 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/area/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_155_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/boundary?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22kV%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.741554%2C49.418%5D%2C%5B8.733%2C49.407%5D%2C%5B8.703%2C49.43112%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "keys=highway&" + 
                    "showMetadata=false&" + 
                    "timeout=95&" + 
                    "values=footway")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.741554 49.418 ) and LINESTRING ( 8.733 49.407, 8.703 49.43112 ) [ (8.726689227682787, 49.41207386094304, NaN) ]"))
                .body("'path'", containsString("/elements/area/groupBy/boundary"));
    }
    
    
    @Test
    public void test_156_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/boundary?" + 
                    "bpolys=8.704561%2C49.403252%2C8.734%2C49.421%2C8.705%2C49.430%2C8.734%2C49.403%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.703%2C49.407%2C8.743072%2C49.437%2C8.720%2C49.4054%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.733%2C49.4347%2C8.7164%2C49.438%2C8.74411%2C49.425806%2C8.704561%2C49.403252&" + 
                    "format=csv&" + 
                    "keys=highway&" + 
                    "showMetadata=false&" + 
                    "timeout=58&" + 
                    "values=stop")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.734 49.421 ) and LINESTRING ( 8.734 49.403, 8.704561 49.403252 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/area/groupBy/boundary"));
    }
    
    
    @Test
    public void test_157_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density/groupBy/type?" + 
                    "bpolys=8.704561%2C49.403252%2C8.727%2C49.413%2C8.72165%2C49.434%2C8.7440%2C49.438%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.7216%2C49.4130%2C8.7054%2C49.423%2C8.721%2C49.4226%2C8.704561%2C49.403252&" + 
                    "keys=highway&" + 
                    "time=2010-01-09&" + 
                    "timeout=99&" + 
                    "values=traffic_mirror")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.727 49.413 ) and LINESTRING ( 8.704561 49.403252, 8.7216 49.413 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/area/density/groupBy/type"));
    }
    
    
    @Test
    public void test_158_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/density/groupBy/type?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22v%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.704%2C49.409%5D%2C%5B8.735%2C49.4168%5D%2C%5B8.716%2C49.424%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22waURy%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.727%2C49.415%5D%2C%5B8.704%2C49.432%5D%2C%5B8.705%2C49.414261%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=smoothness%3D*+or+id%3A%281+..+9999%29&" + 
                    "format=geojson&" + 
                    "time=2013-01-11&" + 
                    "timeout=61")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704798218793991 49.40920084214817, 8.726217094391219 49.41459010762102 ) and LINESTRING ( 8.715659384784425 49.42338219385499, 8.704561 49.403252 ) [ (8.708330826310311, 49.4100896917813, NaN) ]"))
                .body("'path'", containsString("/elements/area/density/groupBy/type"));
    }
    
    
    @Test
    public void test_159_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/density/groupBy/type?" + 
                    "bpolys=Jf%3A8.704561%2C49.403252%2C8.7356%2C49.421%2C8.729994%2C49.401%2C8.728271%2C49.4312%2C8.704561%2C49.403252%7CU%3A8.704561%2C49.403252%2C8.721%2C49.4182%2C8.716%2C49.420165%2C8.70278%2C49.421%2C8.704561%2C49.403252%7CWDk%3A8.704561%2C49.403252%2C8.73062%2C49.4275%2C8.706%2C49.4306%2C8.702%2C49.4042%2C8.704561%2C49.403252&" + 
                    "format=json&" + 
                    "keys=highway&" + 
                    "showMetadata=yes&" + 
                    "time=2008-05-30&" + 
                    "values=cycleway")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.7356 49.421 ) and LINESTRING ( 8.70278 49.421, 8.704561 49.403252 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/area/density/groupBy/type"));
    }
    
    
    @Test
    public void test_160_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density/groupBy/tag?" + 
                    "bpolys=8.704561%2C49.403252%2C8.717151%2C49.4227%2C8.723%2C49.421%2C8.708%2C49.419%2C8.704561%2C49.403252&" + 
                    "format=json&" + 
                    "groupByKey=highway&" + 
                    "keys=highway&" + 
                    "showMetadata=false&" + 
                    "values=stop")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.717151 49.4227 ) and LINESTRING ( 8.723 49.421, 8.708 49.419 ) [ (8.715393954828542, 49.419985860643806, NaN) ]"))
                .body("'path'", containsString("/elements/area/density/groupBy/tag"));
    }
    
    
    @Test
    public void test_161_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/density/groupBy/tag?" + 
                    "bpolys=qG%3A8.704561%2C49.403252%2C8.706%2C49.40265%2C8.7149%2C49.407%2C8.702760%2C49.427%2C8.704561%2C49.403252%7CFsa%3A8.704561%2C49.403252%2C8.74871%2C49.40610%2C8.702%2C49.415%2C8.7039%2C49.426373%2C8.704561%2C49.403252%7CPsnPO%3A8.704561%2C49.403252%2C8.713%2C49.43596%2C8.723%2C49.4340%2C8.706683%2C49.410%2C8.704561%2C49.403252&" + 
                    "format=json&" + 
                    "groupByKey=building&" + 
                    "groupByValues=secondary_link%2Cgive_way%2Cstop&" + 
                    "keys=highway&" + 
                    "showMetadata=no&" + 
                    "time=2018-03-20&" + 
                    "values=steps")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.706 49.40265 ) and LINESTRING ( 8.7039 49.426373, 8.704561 49.403252 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/area/density/groupBy/tag"));
    }
    
    
    @Test
    public void test_162_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/density/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=8.733%2C49.438%2C7598330737&" + 
                    "filter=surface%3D*+or+area%3A%281.0+..+1E6%29&" + 
                    "groupByKey=highway&" + 
                    "timeout=35&" + 
                    "values=traffic_mirror")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El ángulo 119.944.844.146.101.840.000.000.000 es demasiado grande."))
                .body("'path'", containsString("/elements/area/density/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_163_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/density/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22qLKbB%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.745051%2C49.41581%5D%2C%5B8.717%2C49.426%5D%2C%5B8.704281%2C49.431%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22i%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.713434%2C49.41936%5D%2C%5B8.716374%2C49.40018%5D%2C%5B8.7331%2C49.42543%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22jFxKq%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.712443%2C49.438%5D%2C%5B8.709%2C49.4159%5D%2C%5B8.72436%2C49.42648%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "groupByKey=building&" + 
                    "showMetadata=false")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.713434 49.41936, 8.715388362169858 49.4066101134633 ) and LINESTRING ( 8.728471190168097 49.42183289623141, 8.704561 49.403252 ) [ (8.714695852352406, 49.411127915605725, NaN) ]"))
                .body("'path'", containsString("/elements/area/density/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_164_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/density/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=EDN%3A8.704561%2C49.403252%2C8.702807%2C49.42004%2C8.709%2C49.431%2C8.7499%2C49.401%2C8.704561%2C49.403252%7Cv%3A8.704561%2C49.403252%2C8.724%2C49.4207%2C8.724%2C49.405%2C8.730%2C49.428%2C8.704561%2C49.403252&" + 
                    "filter=name%21%3D*&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=hotel&" + 
                    "showMetadata=true&" + 
                    "timeout=55")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.702807 49.42004 ) and LINESTRING ( 8.704561 49.403252, 8.724 49.4207 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/area/density/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_165_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density/groupBy/boundary?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22EJ%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.736%2C49.404%5D%2C%5B8.708%2C49.403%5D%2C%5B8.7343%2C49.426%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "format=geojson&" + 
                    "keys=highway&" + 
                    "timeout=29")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.736 49.404 ) and LINESTRING ( 8.708 49.403, 8.7343 49.426 ) [ (8.7083923924469, 49.403343156892724, NaN) ]"))
                .body("'path'", containsString("/elements/area/density/groupBy/boundary"));
    }
    
    
    @Test
    public void test_166_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/density/groupBy/boundary?" + 
                    "bpolys=OQ%3A8.704561%2C49.403252%2C8.7440%2C49.4023%2C8.738%2C49.416%2C8.703970%2C49.438%2C8.704561%2C49.403252%7Cyj%3A8.704561%2C49.403252%2C8.705%2C49.4221%2C8.736%2C49.435%2C8.7015%2C49.406%2C8.704561%2C49.403252&" + 
                    "keys=highway&" + 
                    "showMetadata=no&" + 
                    "time=2017-09-15&" + 
                    "timeout=82&" + 
                    "values=give_way")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.744 49.4023 ) and LINESTRING ( 8.704561 49.403252, 8.705 49.4221 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/area/density/groupBy/boundary"));
    }
    
    
    @Test
    public void test_167_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22nc%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7482%2C49.431%5D%2C%5B8.723%2C49.41253%5D%2C%5B8.7045%2C49.418%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=natural%3Dwood+or+not+geometry%3Aline&" + 
                    "format=json&" + 
                    "timeout=31")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.7482 49.431 ) and LINESTRING ( 8.723 49.41253, 8.7045 49.418 ) [ (8.720373674592656, 49.41330654053936, NaN) ]"))
                .body("'path'", containsString("/elements/area/density"));
    }
    
    
    @Test
    public void test_168_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/density?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22wDB%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.719%2C49.42799%5D%2C%5B8.706%2C49.429669%5D%2C%5B8.748%2C49.416%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "format=csv&" + 
                    "keys=highway&" + 
                    "time=2012-08-21&" + 
                    "timeout=20&" + 
                    "values=stop_line")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.719 49.42799 ) and LINESTRING ( 8.706 49.429669, 8.748 49.416 ) [ (8.717748298058273, 49.42584548842479, NaN) ]"))
                .body("'path'", containsString("/elements/area/density"));
    }
    
    
    @Test
    public void test_169_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area?" + 
                    "bpolys=vWXkX%3A8.704561%2C49.403252%2C8.735339%2C49.422%2C8.7316%2C49.40980%2C8.74986%2C49.4026%2C8.704561%2C49.403252%7CcdR%3A8.704561%2C49.403252%2C8.715%2C49.403%2C8.717000%2C49.4300%2C8.704%2C49.422849%2C8.704561%2C49.403252%7CX%3A8.704561%2C49.403252%2C8.7160%2C49.416%2C8.702%2C49.421%2C8.7171%2C49.4143%2C8.704561%2C49.403252&" + 
                    "filter=maxspeed%3D*+or+geometry%3Apoint+and+area%3A%281.0+..+1E6%29&" + 
                    "showMetadata=false&" + 
                    "timeout=53")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.735339 49.422 ) and LINESTRING ( 8.704561 49.403252, 8.715 49.403 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/area"));
    }
    
    
    @Test
    public void test_170_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area?" + 
                    "bpolys=8.704561%2C49.403252%2C8.707252%2C49.406%2C8.704%2C49.423%2C8.738%2C49.42701%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.708%2C49.405%2C8.710%2C49.406%2C8.70512%2C49.424%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.740%2C49.402%2C8.7266%2C49.434%2C8.700%2C49.403%2C8.704561%2C49.403252&" + 
                    "format=geojson&" + 
                    "keys=highway&" + 
                    "timeout=55&" + 
                    "values=stop_line")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.707252 49.406 ) and LINESTRING ( 8.70512 49.424, 8.704561 49.403252 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/area"));
    }
    
    
    @Test
    public void test_171_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/key?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22xUT%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.738%2C49.42611%5D%2C%5B8.714%2C49.423%5D%2C%5B8.746%2C49.433732%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22tPPqK%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7000%2C49.414%5D%2C%5B8.746%2C49.424%5D%2C%5B8.704078%2C49.43666%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22cxhy%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7236%2C49.4111%5D%2C%5B8.700%2C49.41657%5D%2C%5B8.7055%2C49.429475%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=service%3Ddriveway+and+type%3Away+and+length%3A%28+..+100%29&" + 
                    "format=json&" + 
                    "groupByKeys=evomaster_149_inpu&" + 
                    "keys=highvay&" + 
                    "showMetadata=falre&" + 
                    "time=2015-01-2%3B&" + 
                    "values=foo")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.738 49.42611, 8.714 49.423 ) and LINESTRING ( 8.736620015744085 49.42683265590096, 8.727217710002126 49.41991689347872 ) [ (8.735132317992136, 49.425738396206484, NaN) ]"))
                .body("'path'", containsString("/elements/area/groupBy/key"));
    }
    
    
    @Test
    public void test_172_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count?" + 
                    "bpolys=HRvcQ%3A8.704561%2C49.403252%2C8.74918%2C49.43253%2C8.700%2C49.404071%2C8.722712%2C49.411%2C8.704561%2C49.4.3252&" + 
                    "filter=foo&" + 
                    "keys=foo&" + 
                    "time=foo&" + 
                    "timeout=0.6326425919313938")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_176_createBpolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/count"));
    }
    
    
    @Test
    public void test_173_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density/groupBy/tag?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22g%22%7D%2C%22geometry%22%3A%7B%22lype%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7295%2C49.429%5D%2C%5B8.706%2C49.439%5D%2C%5B8.703387%2C49.4063%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22D%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polyhon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.702%2C49.4216%5D%2C%5B8.7031%2C49.4057%5D%2C%5B8.7080%2C49.429%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=network%21%3D*+or+geometry%3Apoint+and+id%3A%281+..+9999%29&" + 
                    "groupByKey=evomaster_146_inp&" + 
                    "groupByValues=secondary_link%2Ccivic&" + 
                    "time=2014-11-05")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_343_checkGeometryTypeOfFeature
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/elements/area/density/groupBy/tag"));
    }
    
    
    @Test
    public void test_174_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/density?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22wDB%22%7D%2C%22geometry%22%3A%7B%22tyqe%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.719%2C49.42799%5D%2C%5B8.706%2C49.429669%5D%2C%5B8.748%2C49.416%5D%2C%5B8.7%2C4561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "time=2012-08-61&" + 
                    "timeout=2.&" + 
                    "types=foo&" + 
                    "values=stop_line")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_343_checkGeometryTypeOfFeature
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/elements/area/density"));
    }
    
    
    @Test
    public void test_175_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/density/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=f%3A8.704561%2C49.403252%2C8.7354%2C49.424%2C8.704590%2C49.407%2C8.7357.%2C49.4044%2C8.704561%2C49.403252&" + 
                    "format=foo&" + 
                    "groupByKey=10fub_SrxNfPW_s_&" + 
                    "showMetadata=false&" + 
                    "time=2014-06-%3A0&" + 
                    "types=foo")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_161_createBpolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/count/density/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_176_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area?" + 
                    "bcircles=8.7.7%2C49.42846%2C8&" + 
                    "filter=foo&" + 
                    "keys=hiehway&" + 
                    "types=point%2C")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_114_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/area"));
    }
    
    
    @Test
    public void test_177_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/density/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=TRPgx%3A8.714.%2C49.40885%2C8&" + 
                    "filter=foo&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=foo&" + 
                    "keys=hqighway&" + 
                    "types=boo")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_114_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/length/density/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_178_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/groupBy/key?" + 
                    "bcircles=8.709%2C09.4.15%2C4&" + 
                    "filter=evomaster_14032_input&" + 
                    "groupByKeys=evomaster_14042_input&" + 
                    "keys=evomastera14027%5Binpu&" + 
                    "showMetadata=foo&" + 
                    "time=H&" + 
                    "timeout=30&" + 
                    "values=foi")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_114_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/users/count/groupBy/key"));
    }
    
    
    @Test
    public void test_179_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density/groupBy/tag?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22featureu%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22g%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7295%2C49.429%5D%2C%5B8.706%2C49.439%5D%2C%5B8.703387%2C49.4063%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22D%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polyion%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.702%2C49.4216%5D%2C%5B8.7031%2C49.4057%5D%2C%5B8.7080%2C49.429%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "groupByKey=evomaster_3206_inpu&" + 
                    "keys=fno&" + 
                    "types=foo&" + 
                    "values=foo")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_237_createGeometryFromGeoJson
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/elements/area/density/groupBy/tag"));
    }
    
    
    @Test
    public void test_180_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/density?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22featuves%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22wDB%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.719%2C49.42799%5D%2C%5B8.706%2C49.429669%5D%2C%5B8.748%2C49.416%5D%2C%5B8.7%2C4561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=foo&" + 
                    "format=csv&" + 
                    "time=2012-08-21&" + 
                    "timeout=20&" + 
                    "types=foo&" + 
                    "values=stop_line")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_237_createGeometryFromGeoJson
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/elements/area/density"));
    }
    
    
    @Test
    public void test_181_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/ratio/groupBy/boundary?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22E%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.740%2C49.4377%5D%2C%5B8.741%2C49.402%5D%2C%5B8.718%2C49.413%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22TJG%22%7D%2C%22geomerry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7119%2C49.40696%5D%2C%5B8.704%2C49.42679%5D%2C%5B8.704521%2C49.4020%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter2=highway%21%3D*&" + 
                    "keys=highway&" + 
                    "keys2=highway&" + 
                    "time=2014-01-24&" + 
                    "timeout=85")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_343_checkGeometryTypeOfFeature
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/elements/area/ratio/groupBy/boundary"));
    }
    
    
    @Test
    public void test_182_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/boundary?" + 
                    "bcircles=8.719.31%2C49.628%2C7&" + 
                    "filter=addr%3Ahousenumber%21%3D*+avd+type%3Anode+and+not+area%3A%28%2F.0+..+1E6%29&" + 
                    "format=json&" + 
                    "keys=foo&" + 
                    "time=%2F%2FP2Y9M2E&" + 
                    "timeout=41&" + 
                    "types=doos&" + 
                    "values=foob")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_114_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/users/count/groupBy/boundary"));
    }
    
    
    @Test
    public void test_183_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/groupBy/key?" + 
                    "bpolys=8.704561%2C49.403252%2C8.734%2C49.4049%2C8.7234%2C49.408%2C8.710%2C49.4188%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.731411%2C49.416%2C8.7014%2C49.427%2C8.718%2C49.433%2C8.704561%2C49.403252&" + 
                    "groupByKeys=addr%3Acountry%2Chighway&" + 
                    "keys=highway&" + 
                    "showMetadata=false&" + 
                    "timeout=100&" + 
                    "values=turning_circle")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.734 49.4049 ) and LINESTRING ( 8.704561 49.403252, 8.731411 49.416 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/perimeter/groupBy/key"));
    }
    
    
    @Test
    public void test_184_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/type?" + 
                    "bpolys=sGv%3A8.704561%2C49.403252%2C8.7220%2C49.412%2C8.7064%2C49.411280%2C8.730%2C49.403454%2C8.704561%2C49.403252&" + 
                    "filter=addr%3Ahousenumber%3D*+or+not+id%3A%281+..+9999%29&" + 
                    "format=csv&" + 
                    "timeout=27")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.722 49.412 ) and LINESTRING ( 8.7064 49.41128, 8.73 49.403454 ) [ (8.714927503168616, 49.40845219322892, NaN) ]"))
                .body("'path'", containsString("/users/count/groupBy/type"));
    }
    
    
    @Test
    public void test_185_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density/groupBy/tag?" + 
                    "bpolys=frEx%3A8.704561%2C49.403252%2C8.73675%2C49.4080%2C8.735%2C49.4149%2C8.7205%2C49.41478%2C8.704561%2C49.403252%7CA%3A8.704561%2C49.403252%2C8.704374%2C49.439034%2C8.704537%2C49.439%2C8.723305%2C49.439%2C8.704561%2C49.403252%7CH%3A8.704561%2C49.403252%2C8.721%2C49.4046%2C8.73302%2C49.408%2C8.704560%2C49.40329%2C8.704561%2C49.403252&" + 
                    "format=json&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=office%2Ctertiary&" + 
                    "keys=highway&" + 
                    "time=2009-10-26&" + 
                    "values=residential")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.73675 49.408 ) and LINESTRING ( 8.704561 49.403252, 8.704374 49.439034 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/length/density/groupBy/tag"));
    }
    
    
    @Test
    public void test_186_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/tag?" + 
                    "bpolys=8.704561%2C49.403252%2C8.712%2C49.429%2C8.709%2C49.43893%2C8.745619%2C49.4386%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.748674%2C49.4027%2C8.720%2C49.432386%2C8.704%2C49.430%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.721%2C49.43175%2C8.701%2C49.400241%2C8.7045%2C49.42253%2C8.704561%2C49.403252&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=unclassified&" + 
                    "showMetadata=yes&" + 
                    "time=2013-08-14")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.712 49.429 ) and LINESTRING ( 8.704 49.43, 8.704561 49.403252 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/count/groupBy/tag"));
    }
    
    
    @Test
    public void test_187_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/key?" + 
                    "bpolys=8.704561%2C49.403252%2C8.737%2C49.4369%2C8.728%2C49.4232%2C8.70476%2C49.418%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.729954%2C49.4191%2C8.70454%2C49.434%2C8.748%2C49.434%2C8.704561%2C49.403252&" + 
                    "filter=network%21%3D*+or+type%3Arelation+and+length%3A%28+..+100%29&" + 
                    "groupByKeys=highway%2Coneway%2Cbuilding&" + 
                    "time=2011-01-07")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.737 49.4369 ) and LINESTRING ( 8.704561 49.403252, 8.729954 49.4191 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/count/groupBy/key"));
    }
    
    
    @Test
    public void test_188_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/type?" + 
                    "bpolys=NbTK%3A8.704561%2C49.403252%2C8.732%2C49.421%2C8.749347%2C49.4161%2C8.7083%2C49.4216%2C8.704561%2C49.403252&" + 
                    "format=csv&" + 
                    "keys=highway&" + 
                    "showMetadata=yes&" + 
                    "time=2014-01-01&" + 
                    "timeout=63&" + 
                    "values=path")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.732 49.421 ) and LINESTRING ( 8.749347 49.4161, 8.7083 49.4216 ) [ (8.72870133553827, 49.41886636915096, NaN) ]"))
                .body("'path'", containsString("/elements/area/groupBy/type"));
    }
    
    
    @Test
    public void test_189_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density/groupBy/type?" + 
                    "bcircles=r%3A8.720%2C49.423%2C68%7ClY%3A8.72699%2C49.4232%2C132665390&" + 
                    "filter=landuse%21%3D*+and+area%3A%281.0+..+1E6%29&" + 
                    "format=csv&" + 
                    "showMetadata=false")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El ángulo 1.030.183.725.176,044 es demasiado grande."))
                .body("'path'", containsString("/elements/area/density/groupBy/type"));
    }
    
    
    @Test
    public void test_190_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=n%3A8.704561%2C49.403252%2C8.7068%2C49.439%2C8.729768%2C49.409%2C8.736%2C49.4237%2C8.704561%2C49.403252%7Ck%3A8.704561%2C49.403252%2C8.7395%2C49.430%2C8.704%2C49.4000%2C8.709843%2C49.406%2C8.704561%2C49.403252&" + 
                    "groupByKey=building&" + 
                    "showMetadata=false")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.7068 49.439 ) and LINESTRING ( 8.736 49.4237, 8.704561 49.403252 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/area/density/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_191_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density/groupBy/tag?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22jd%22%3A%22g%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7295%2C49.429%5D%2C%5B8.706%2C49.439%5D%2C%5B8.703387%2C49.4063%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22D%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.702%2C49.4216%5D%2C%5B8.7031%2C49.4057%5D%2C%5B8.7080%2C49.429%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "groupByKey=evom_ssUr_148_inp&" + 
                    "groupByValues=secondary_link%2Ccivic&" + 
                    "keys=fok&" + 
                    "time=2014-11-05")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.703659527230814 49.40971050151076 ) and LINESTRING ( 8.703485555189834 49.407533354270036, 8.708 49.429 ) [ (8.70377277807677, 49.40889912840587, NaN) ]"))
                .body("'path'", containsString("/elements/area/density/groupBy/tag"));
    }
    
    
    @Test
    public void test_192() throws Exception {
        
        try{
            given().accept("*/*")
                    .get(baseUrlOfSut + "/users/count/groupBy/boundary?" + 
                        "bboxes=8.6533%2C49.419%2C8.748%2C49.391&" + 
                        "filter=maxspeed%21%3D*+or+geometry%3Aline&" + 
                        "time=%2F%2FP1Y10D")
                    .then();
        } catch(Exception e){
        }
    }
    
    
    @Test
    public void test_193() throws Exception {
        
        try{
            given().accept("*/*")
                    .get(baseUrlOfSut + "/users/count/groupBy/type?" + 
                        "bboxes=8.67902%2C49.402%2C8.7327%2C49.397%7C8.671%2C49.408%2C8.741%2C49.397%7C8.6660%2C49.406%2C8.70807%2C49.381&" + 
                        "showMetadata=yes")
                    .then();
        } catch(Exception e){
        }
    }
    
    
    @Test
    public void test_194_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/ratio/groupBy/boundary?" + 
                    "bpolys=bWD%3A8.704561%2C49.403252%2C8.739%2C49.41351%2C8.708%2C49.410%2C8.701739%2C49.428%2C8.704561%2C49.403252%7CbTdu%3A8.704561%2C49.403252%2C8.703%2C49.4385%2C8.716%2C49.42643%2C8.712%2C49.428%2C8.704561%2C49.403252%7Cr%3A8.704561%2C49.403252%2C8.74778%2C49.4299%2C8.747%2C49.422508%2C8.74189%2C49.40720%2C8.704561%2C49.403252&" + 
                    "keys=highway&" + 
                    "keys2=highway&" + 
                    "showMetadata=true&" + 
                    "time=2016-11-19&" + 
                    "types2=point%2Cother&" + 
                    "values=service")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.739 49.41351 ) and LINESTRING ( 8.701739 49.428, 8.704561 49.403252 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/length/ratio/groupBy/boundary"));
    }
    
    
    @Test
    public void test_195_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/ratio/groupBy/boundary?" + 
                    "bpolys=8.704561%2C49.403252%2C8.745%2C49.433060%2C8.73198%2C49.424%2C8.708160%2C49.4140%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.712%2C49.420%2C8.718%2C49.425%2C8.714%2C49.43592%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.7466%2C49.4282%2C8.70651%2C49.416%2C8.7031%2C49.403%2C8.704561%2C49.403252&" + 
                    "filter2=highway%21%3D*+and+geometry%3Aline&" + 
                    "keys=highway&" + 
                    "keys2=highway&" + 
                    "time=2017-09-03&" + 
                    "types2=line%2Cpolygon%2C&" + 
                    "values=primary&" + 
                    "values2=track")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.745 49.43306 ) and LINESTRING ( 8.704561 49.403252, 8.712 49.42 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/area/ratio/groupBy/boundary"));
    }
    
    
    @Test
    public void test_196_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22qS%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.737%2C49.4181%5D%2C%5B8.70096%2C49.415%5D%2C%5B8.7043%2C49.426%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "keys=highway&" + 
                    "showMetadata=true&" + 
                    "values=bus_stop")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.737 49.4181, 8.70096 49.415 ) and LINESTRING ( 8.7043 49.426, 8.704561 49.403252 ) [ (8.704422791460328, 49.41529785387145, NaN) ]"))
                .body("'path'", containsString("/elements/perimeter"));
    }
    
    
    @Test
    public void test_197_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density/groupBy/boundary?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22PoABB%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.73989%2C49.403413%5D%2C%5B8.712%2C49.4141%5D%2C%5B8.7404%2C49.401%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22WH%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7147%2C49.4179%5D%2C%5B8.709982%2C49.418%5D%2C%5B8.7066%2C49.412%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "keys=highway&" + 
                    "timeout=75&" + 
                    "values=cycleway")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.73989 49.403413 ) and LINESTRING ( 8.71205285438449 49.414075619984615, 8.7404 49.401 ) [ (8.735214951206327, 49.40339169504215, NaN) ]"))
                .body("'path'", containsString("/elements/length/density/groupBy/boundary"));
    }
    
    
    @Test
    public void test_198_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length?" + 
                    "bpolys=XIjJ%3A8.704561%2C49.403252%2C8.7239%2C49.40497%2C8.702%2C49.4198%2C8.7270%2C49.407%2C8.704561%2C49.403252%7CNq%3A8.704561%2C49.403252%2C8.745%2C49.4395%2C8.722%2C49.422%2C8.741%2C49.411%2C8.704561%2C49.403252&" + 
                    "keys=highway&" + 
                    "timeout=73&" + 
                    "values=turning_circle")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.7239 49.40497 ) and LINESTRING ( 8.727 49.407, 8.704561 49.403252 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/length"));
    }
    
    
    @Test
    public void test_199_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/density/groupBy/boundary?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22H%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.749%2C49.429%5D%2C%5B8.704%2C49.409380%5D%2C%5B8.738%2C49.41376%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22kB%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.707%2C49.418%5D%2C%5B8.7322%2C49.430%5D%2C%5B8.704%2C49.42007%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "format=csv&" + 
                    "keys=highway&" + 
                    "showMetadata=false&" + 
                    "time=2012-04-12")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.749 49.429 ) and LINESTRING ( 8.705608711562187 49.40958723990124, 8.738 49.41376 ) [ (8.71832171980171, 49.4112249744921, NaN) ]"))
                .body("'path'", containsString("/elements/count/density/groupBy/boundary"));
    }
    
    
    @Test
    public void test_200_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/boundary?" + 
                    "bcircles=vvcxa%3A8.713%2C49.4230%2C366620340%7CEEVN%3A8.735%2C49.426507%2C80%7CFkEg%3A8.747%2C49.415%2C4&" + 
                    "format=geojson&" + 
                    "keys=highway&" + 
                    "timeout=88&" + 
                    "values=secondary")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El ángulo 3.512.550.871.459.940,5 es demasiado grande."))
                .body("'path'", containsString("/elements/area/groupBy/boundary"));
    }
    
    
    @Test
    public void test_201_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=8.7493%2C49.422%2C3&" + 
                    "format=geojson&" + 
                    "groupByKey=building&" + 
                    "keys=highway&" + 
                    "showMetadata=no&" + 
                    "time=2010-01-01")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/utils/GroupByBoundaryGeoJsonGenerator_75_generateGroupByResultGeoJson
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Index 0 out of bounds for length 0"))
                .body("'path'", containsString("/elements/perimeter/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_202_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/key?" + 
                    "bpolys=8.704561%2C49.403252%2C8.731667%2C49.4330%2C8.745%2C49.400%2C8.71823%2C49.436%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.726%2C49.4018%2C8.704526%2C49.405%2C8.728%2C49.438%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.72991%2C49.4110%2C8.703%2C49.412%2C8.724%2C49.401%2C8.704561%2C49.403252&" + 
                    "format=geojson&" + 
                    "groupByKeys=smoothness%2Clanduse&" + 
                    "showMetadata=true&" + 
                    "time=%2F%2FP10M2D&" + 
                    "timeout=77")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/executor/ExecutionUtils_565_extractContributionTags
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.731667 49.433 ) and LINESTRING ( 8.704561 49.403252, 8.726 49.4018 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/users/count/groupBy/key"));
    }
    
    
    @Test
    public void test_203_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/boundary?" + 
                    "bpolys=ta%3A8.704561%2C49.403252%2C8.7100%2C49.4143%2C8.7030%2C49.4162%2C8.707%2C49.423%2C8.704561%2C49.403252%7CZ%3A8.704561%2C49.403252%2C8.7251%2C49.401%2C8.731208%2C49.42427%2C8.743258%2C49.424%2C8.704561%2C49.403252%7CTlIn%3A8.704561%2C49.403252%2C8.7166%2C49.4339%2C8.723%2C49.415%2C8.710%2C49.436%2C8.704561%2C49.403252&" + 
                    "format=json&" + 
                    "keys=highway&" + 
                    "values=secondary_link")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.71 49.4143 ) and LINESTRING ( 8.707 49.423, 8.704561 49.403252 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/users/count/groupBy/boundary"));
    }
    
    
    @Test
    public void test_204() throws Exception {
        
        try{
            given().accept("*/*")
                    .post(baseUrlOfSut + "/users/count/density?" + 
                        "bcircles=I%3A8.72903%2C49.41233%2C6%7Ci%3A8.7351%2C49.410%2C5&" + 
                        "filter=source%3Amaxspeed%21%3D*+or+type%3Away&" + 
                        "format=json&" + 
                        "time=%2F%2FP3Y5M1D&" + 
                        "timeout=88")
                    .then();
        } catch(Exception e){
        }
    }
    
    
    @Test
    public void test_205() throws Exception {
        
        try{
            given().accept("*/*")
                    .post(baseUrlOfSut + "/users/count/density?" + 
                        "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22Db%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.714%2C49.414520%5D%2C%5B8.7034%2C49.433%5D%2C%5B8.730%2C49.417%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                        "format=csv&" + 
                        "showMetadata=yes&" + 
                        "timeout=42")
                    .then();
        } catch(Exception e){
        }
    }
    
    
    @Test
    public void test_206() throws Exception {
        
        try{
            given().accept("*/*")
                    .get(baseUrlOfSut + "/users/count/groupBy/type?" + 
                        "bboxes=ceXH%3A8.67513%2C49.4203%2C8.728729%2C49.392%7ChpuYH%3A8.662589%2C49.416%2C8.711%2C49.397&" + 
                        "filter=oneway%21%3D*+or+type%3Arelation+or+not+length%3A%28+..+100%29&" + 
                        "format=geojson&" + 
                        "time=%2F%2FP3Y4M12D")
                    .then();
        } catch(Exception e){
        }
    }
    
    
    @Test
    public void test_207() throws Exception {
        
        try{
            given().accept("*/*")
                    .post(baseUrlOfSut + "/users/count/groupBy/tag?" + 
                        "bboxes=N%3A8.650%2C49.412%2C8.739010%2C49.388&" + 
                        "filter=network%21%3D*+and+length%3A%28+..+100%29&" + 
                        "groupByKey=building&" + 
                        "groupByValues=crossing%2Ctrack&" + 
                        "showMetadata=no&" + 
                        "timeout=77")
                    .then();
        } catch(Exception e){
        }
    }
    
    
    @Test
    public void test_208() throws Exception {
        
        try{
            given().accept("*/*")
                    .get(baseUrlOfSut + "/users/count/groupBy/type?" + 
                        "bboxes=K%3A8.660%2C49.419%2C8.705%2C49.3980&" + 
                        "format=csv&" + 
                        "showMetadata=no&" + 
                        "timeout=80")
                    .then();
        } catch(Exception e){
        }
    }
    
    
    @Test
    public void test_209() throws Exception {
        
        try{
            given().accept("*/*")
                    .post(baseUrlOfSut + "/users/count/groupBy/key?" + 
                        "bboxes=mbnHm%3A8.6701%2C49.414464%2C8.711536%2C49.3850%7Cp%3A8.65230%2C49.4074%2C8.705%2C49.392&" + 
                        "filter=network%3D*+and+area%3A%281.0+..+1E6%29&" + 
                        "format=csv&" + 
                        "groupByKeys=bicycle%2Cfoot&" + 
                        "showMetadata=true&" + 
                        "timeout=75")
                    .then();
        } catch(Exception e){
        }
    }
    
    
    @Test
    public void test_210_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/ratio/groupBy/boundary?" + 
                    "bpolys=DkAdZ%3A8.704561%2C49.403252%2C8.716668%2C49.423%2C8.707%2C49.405%2C8.70381%2C49.42502%2C8.704561%2C49.403252%7Cx%3A8.704561%2C49.403252%2C8.749%2C49.404781%2C8.707000%2C49.415135%2C8.704%2C49.4131%2C8.704561%2C49.403252%7CVZh%3A8.704561%2C49.403252%2C8.704%2C49.4167%2C8.713%2C49.4171%2C8.739%2C49.436%2C8.704561%2C49.403252&" + 
                    "filter=service%3Ddriveway+and+area%3A%281.0+..+1E6%29&" + 
                    "format=geojson&" + 
                    "keys2=highway&" + 
                    "showMetadata=false&" + 
                    "time=2016-01-22&" + 
                    "timeout=77&" + 
                    "values2=traffic_signals")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.716668 49.423 ) and LINESTRING ( 8.704 49.4131, 8.704561 49.403252 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/perimeter/ratio/groupBy/boundary"));
    }
    
    
    @Test
    public void test_211() throws Exception {
        
        try{
            given().accept("*/*")
                    .post(baseUrlOfSut + "/users/count/groupBy/key?" + 
                        "bcircles=8.739%2C49.4182%2C7%7C8.747%2C49.424%2C6&" + 
                        "filter=destination%3D*+or+area%3A%281.0+..+1E6%29&" + 
                        "groupByKeys=lanes%2Cfoot%2Cturn%3Alanes&" + 
                        "time=%2F%2FP3Y9D")
                    .then();
        } catch(Exception e){
        }
    }
    
    
    @Test
    public void test_212() throws Exception {
        
        try{
            given().accept("*/*")
                    .post(baseUrlOfSut + "/users/count/density/groupBy/type?" + 
                        "bcircles=8.747%2C49.4358%2C2%7C8.707%2C49.42859%2C5&" + 
                        "filter=destination%21%3D*&" + 
                        "format=json&" + 
                        "timeout=21")
                    .then();
        } catch(Exception e){
        }
    }
    
    
    @Test
    public void test_213() throws Exception {
        
        try{
            given().accept("*/*")
                    .post(baseUrlOfSut + "/users/count/groupBy/type?" + 
                        "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22GByt%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.709%2C49.424285%5D%2C%5B8.7102%2C49.431%5D%2C%5B8.701%2C49.422%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22Guoki%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.70020%2C49.413%5D%2C%5B8.7242%2C49.41613%5D%2C%5B8.720%2C49.401679%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                        "filter=network%3D*+or+area%3A%281.0+..+1E6%29&" + 
                        "timeout=65")
                    .then();
        } catch(Exception e){
        }
    }
    
    
    @Test
    public void test_214() throws Exception {
        
        try{
            given().accept("*/*")
                    .post(baseUrlOfSut + "/users/count/groupBy/type?" + 
                        "bpolys=J%3A8.704561%2C49.403252%2C8.741%2C49.400%2C8.747%2C49.425%2C8.7046%2C49.419177%2C8.704561%2C49.403252&" + 
                        "filter=highway%21%3D*+or+id%3A%281+..+9999%29&" + 
                        "time=%2F%2FP3Y7M1D")
                    .then();
        } catch(Exception e){
        }
    }
    
    
    @Test
    public void test_215() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/key?" + 
                    "bpolys=8.704561%2C49.403252%2C8.707917%2C49.42540%2C8.708%2C49.40687%2C8.7253%2C49.410%2C8.704561%2C49.403252&" + 
                    "groupByKeys=evsmastev_1786_input&" + 
                    "keys=hmghsb%7B&" + 
                    "timeout=4&" + 
                    "values=evmmaster_2606_inpus")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_216() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/density/groupBy/type?" + 
                    "bpolys=8.704561%2C49.403252%2C8.729%2C49.4370%2C8.732%2C49.439%2C8.7122%2C49.40147%2C8.704561%2C49.403252&" + 
                    "format=json&" + 
                    "keys=highway&" + 
                    "time=%2F%2FP2Y2M20D&" + 
                    "timeout=28")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_217() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/density/groupBy/tag?" + 
                    "bcircles=8.724%2C49.406%2C7&" + 
                    "format=geojson&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=elevator%2Csecondary_link&" + 
                    "keys=highway&" + 
                    "showMetadata=no&" + 
                    "time=%2F%2FP11M11D&" + 
                    "timeout=72&" + 
                    "values=traffic_signals")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_218() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/density/groupBy/tag?" + 
                    "bcircles=kh%3A8.719550%2C49.4149%2C8&" + 
                    "format=geojson&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=service%2Cgarage&" + 
                    "keys=highway&" + 
                    "time=%2F%2FP3M16D&" + 
                    "timeout=27&" + 
                    "values=street_lamp")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_219() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/density/groupBy/boundary?" + 
                    "bcircles=8.717%2C49.4025%2C6%7C8.718%2C49.411%2C9%7C8.707985%2C49.426%2C4%7C8.744298%2C49.415%2C9&" + 
                    "filter=maxspeed%3D*+and+id%3A%281+..+9999%29&" + 
                    "time=%2F%2FP2M13D")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_220() throws Exception {
        
        given().accept("text/csv")
                .post(baseUrlOfSut + "/users/count?" + 
                    "bcircles=8.709%2C49.413%2C6%7C8.732%2C49.418%2C33&" + 
                    "format=csv&" + 
                    "keys=highway&" + 
                    "time=%2F%2FP26D&" + 
                    "timeout=95")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_221() throws Exception {
        
        given().accept("text/csv")
                .get(baseUrlOfSut + "/users/count?" + 
                    "bboxes=8.662%2C49.4291%2C8.72805%2C49.385&" + 
                    "format=csv&" + 
                    "keys=highway&" + 
                    "time=%2F%2FP2Y27D&" + 
                    "values=unclassified")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_222() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/groupBy/type?" + 
                    "bcircles=8.740%2C49.4196%2C2&" + 
                    "format=geojson&" + 
                    "time=2013-09-30&" + 
                    "timeout=52")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_223() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/groupBy/key?" + 
                    "bboxes=xOCcs%3A8.6573%2C49.41544%2C8.71612%2C49.38682&" + 
                    "format=json&" + 
                    "groupByKeys=highway%2Clanduse&" + 
                    "keys=highway&" + 
                    "values=path")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_224() throws Exception {
        
        given().accept("text/csv")
                .get(baseUrlOfSut + "/elements/perimeter/density/groupBy/type?" + 
                    "bboxes=8.655%2C49.426%2C8.737%2C49.39971%7C8.668%2C49.4263%2C8.71019%2C49.3861%7C8.664%2C49.419%2C8.749818%2C49.397&" + 
                    "format=csv&" + 
                    "time=2011-05-19")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_225() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/density/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=Y%3A8.7411%2C49.429%2C3%7Cp%3A8.704%2C49.434%2C23%7CD%3A8.705987%2C49.438182%2C3%7CZ%3A8.740%2C49.4109%2C6&" + 
                    "groupByKey=foo&" + 
                    "groupByValues=ship&" + 
                    "keys=highway&" + 
                    "showMetadata=false&" + 
                    "time=2008-04-29&" + 
                    "timeout=54")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_226() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/density/groupBy/boundary?" + 
                    "bcircles=HP%3A8.721%2C49.432%2C3%7CUaZ%3A8.744%2C49.405%2C71%7ClNUcc%3A8.717%2C49.43073%2C8&" + 
                    "keys=highway&" + 
                    "time=2009-04-11&" + 
                    "values=residential")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_227() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter?" + 
                    "bcircles=8.709%2C49.404%2C4%7C8.74496%2C49.428%2C5&" + 
                    "keys=highway&" + 
                    "showMetadata=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(557.0))
                .body("'metadata'.'description'", containsString("Total perimeter of items in meters."));
    }
    
    
    @Test
    public void test_228() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter?" + 
                    "bcircles=UK%3A8.7218%2C49.4211%2C3&" + 
                    "keys=highway&" + 
                    "time=2016-04-18&" + 
                    "values=stop")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_229() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/ratio/groupBy/boundary?" + 
                    "bboxes=o%3A8.653379%2C49.410%2C8.729023%2C49.392%7CZ%3A8.696%2C49.42244%2C8.725%2C49.398&" + 
                    "filter2=destination%21%3D*+and+type%3Arelation&" + 
                    "format=json&" + 
                    "keys=highway&" + 
                    "showMetadata=true&" + 
                    "time=2013-03-26")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(1967.0))
                .body("'metadata'.'description'", containsString("Total length of items in meters satisfying types2, keys2, values2 parameters (= value2 output), as well as items selected by types, keys, values parameters (= value output) and ratio of value2:value, aggregated on the boundary objects."));
    }
    
    
    @Test
    public void test_230() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/groupBy/type?" + 
                    "bcircles=Gs%3A8.723%2C49.4131%2C3&" + 
                    "format=geojson&" + 
                    "keys=highway&" + 
                    "values=stop")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_231() throws Exception {
        
        given().accept("text/csv")
                .get(baseUrlOfSut + "/elements/length/groupBy/tag?" + 
                    "bcircles=8.704059%2C49.430%2C59%7C8.7266%2C49.413%2C44&" + 
                    "filter=ref%3D*+and+type%3Anode+or+area%3A%281.0+..+1E6%29&" + 
                    "format=csv&" + 
                    "groupByKey=building&" + 
                    "showMetadata=false&" + 
                    "time=2008-10-15&" + 
                    "timeout=25")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_232() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/groupBy/key?" + 
                    "bcircles=T%3A8.736%2C49.402899%2C4%7CIcv%3A8.7252%2C49.435%2C6&" + 
                    "groupByKeys=foot%2Cmaxspeed&" + 
                    "keys=highway&" + 
                    "showMetadata=true&" + 
                    "time=2010-06-14&" + 
                    "values=secondary_link")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(467.0))
                .body("'metadata'.'description'", containsString("Total length of items in meters, aggregated on the key."));
    }
    
    
    @Test
    public void test_233() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=8.728056%2C49.4192%2C2%7C8.74082%2C49.427545%2C7&" + 
                    "groupByKey=highway&" + 
                    "keys=highway&" + 
                    "time=2012-02-15&" + 
                    "timeout=41&" + 
                    "values=turning_circle")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'groupByResult'", hasItems());
    }
    
    
    @Test
    public void test_234() throws Exception {
        
        given().accept("text/csv")
                .get(baseUrlOfSut + "/elements/length/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=8.7129%2C49.43175%2C6&" + 
                    "filter=surface%3D*+and+area%3A%281.0+..+1E6%29&" + 
                    "format=csv&" + 
                    "groupByKey=building&" + 
                    "timeout=45")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_235() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/groupBy/boundary?" + 
                    "bcircles=8.731%2C49.401%2C14&" + 
                    "keys=highway&" + 
                    "timeout=71&" + 
                    "values=stop")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_236() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density/groupBy/type?" + 
                    "bboxes=pg%3A8.686968%2C49.40845%2C8.755%2C49.384%7CN%3A8.656%2C49.419670%2C8.737%2C49.389%7CnS%3A8.671%2C49.401043%2C8.714762%2C49.3894%7CEi%3A8.66446%2C49.405%2C8.700%2C49.389861&" + 
                    "format=geojson&" + 
                    "keys=highway&" + 
                    "time=2014-12-13&" + 
                    "values=living_street")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_237() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/density/groupBy/type?" + 
                    "bcircles=zRTD%3A8.731832%2C49.409%2C11%7Cf%3A8.709817%2C49.42445%2C2&" + 
                    "format=json&" + 
                    "showMetadata=true&" + 
                    "time=2018-04-16")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(881.0))
                .body("'metadata'.'description'", containsString("Density of selected items (length of items in meters divided by the area in square kilometers), aggregated on the type."));
    }
    
    
    @Test
    public void test_238() throws Exception {
        
        given().accept("text/csv")
                .post(baseUrlOfSut + "/elements/length/density/groupBy/tag?" + 
                    "bcircles=vsRja%3A8.704%2C49.413%2C2&" + 
                    "format=csv&" + 
                    "groupByKey=highway&" + 
                    "keys=highway&" + 
                    "showMetadata=no&" + 
                    "time=2017-08-16&" + 
                    "timeout=35")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_239() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/density/groupBy/tag?" + 
                    "bcircles=dV%3A8.7030%2C49.420%2C4%7Ckrlx%3A8.73328%2C49.4317%2C3%7CJH%3A8.749%2C49.429%2C9%7Cl%3A8.7010%2C49.425%2C702&" + 
                    "format=json&" + 
                    "groupByKey=highway")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_240() throws Exception {
        
        given().accept("text/csv")
                .post(baseUrlOfSut + "/elements/length/density/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22qbU%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7347%2C49.4276%5D%2C%5B8.711%2C49.4060%5D%2C%5B8.741%2C49.403%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "format=csv&" + 
                    "groupByKey=highway&" + 
                    "showMetadata=false&" + 
                    "time=2012-04-12&" + 
                    "timeout=100")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_241() throws Exception {
        
        given().accept("text/csv")
                .get(baseUrlOfSut + "/elements/length/density/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=lJ%3A8.728%2C49.411%2C6%7CORx%3A8.7278%2C49.412%2C616&" + 
                    "filter=tracktype%3D*&" + 
                    "format=csv&" + 
                    "groupByKey=building&" + 
                    "groupByValues=path&" + 
                    "showMetadata=false&" + 
                    "time=2009-12-13")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_242() throws Exception {
        
        given().accept("text/csv")
                .post(baseUrlOfSut + "/elements/length/density/groupBy/boundary?" + 
                    "bcircles=8.7273%2C49.4276%2C6%7C8.712%2C49.438%2C5&" + 
                    "format=csv&" + 
                    "keys=highway&" + 
                    "time=2014-11-26")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_243() throws Exception {
        
        given().accept("text/csv")
                .get(baseUrlOfSut + "/elements/length/density/groupBy/boundary?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22p%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7407%2C49.414%5D%2C%5B8.70530%2C49.42040%5D%2C%5B8.70459%2C49.43847%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22D%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.707%2C49.410%5D%2C%5B8.7045%2C49.420243%5D%2C%5B8.718%2C49.427%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "format=csv&" + 
                    "keys=highway&" + 
                    "time=2010-06-20")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_244() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density?" + 
                    "bcircles=xqPuf%3A8.736%2C49.43097%2C44%7Ch%3A8.704%2C49.4159%2C3&" + 
                    "format=geojson&" + 
                    "keys=highway&" + 
                    "showMetadata=no&" + 
                    "time=2015-01-03&" + 
                    "timeout=61")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_245() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/density?" + 
                    "bcircles=8.726%2C49.410%2C2&" + 
                    "keys=highway&" + 
                    "showMetadata=yes&" + 
                    "time=2016-10-01&" + 
                    "values=stop_line")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(222.0))
                .body("'metadata'.'description'", containsString("Density of selected items (length of items in meters divided by the area in square kilometers)."));
    }
    
    
    @Test
    public void test_246() throws Exception {
        
        given().accept("text/csv")
                .post(baseUrlOfSut + "/elements/length?" + 
                    "bcircles=jR%3A8.700%2C49.40427%2C24%7Cbg%3A8.704%2C49.429%2C8%7Cr%3A8.7446%2C49.431334%2C4&" + 
                    "format=csv&" + 
                    "showMetadata=false&" + 
                    "time=2010-04-21")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_247() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length?" + 
                    "bcircles=8.701828%2C49.411%2C7%7C8.743%2C49.4210%2C5&" + 
                    "filter=type%21%3D*+and+type%3Anode+and+not+area%3A%281.0+..+1E6%29&" + 
                    "format=geojson&" + 
                    "time=2008-08-18&" + 
                    "timeout=56")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_248() throws Exception {
        
        given().accept("text/csv")
                .post(baseUrlOfSut + "/elements/count/ratio?" + 
                    "bcircles=T%3A8.701839%2C49.4294%2C4&" + 
                    "filter2=foot%21%3D*+and+type%3Arelation+and+area%3A%281.0+..+1E6%29&" + 
                    "format=csv&" + 
                    "keys=highway&" + 
                    "time=2012-05-30&" + 
                    "types2=line%2Cother")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_249() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/ratio?" + 
                    "bcircles=UuoZX%3A8.74051%2C49.435%2C28&" + 
                    "format=geojson&" + 
                    "keys=foo&" + 
                    "showMetadata=no&" + 
                    "time=2012-03-30")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_250() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/type?" + 
                    "bcircles=cLw%3A8.742%2C49.402%2C9&" + 
                    "keys=highway&" + 
                    "showMetadata=yes&" + 
                    "timeout=36")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(240.0))
                .body("'metadata'.'description'", containsString("Total count of items in absolute values, aggregated on the type."));
    }
    
    
    @Test
    public void test_251() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/groupBy/type?" + 
                    "bcircles=8.734%2C49.430116%2C6&" + 
                    "filter=destination%3D*+or+geometry%3Apolygon+or+length%3A%28+..+100%29&" + 
                    "format=json&" + 
                    "showMetadata=true&" + 
                    "time=2009-10-16&" + 
                    "timeout=99")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(401.0))
                .body("'metadata'.'description'", containsString("Total count of items in absolute values, aggregated on the type."));
    }
    
    
    @Test
    public void test_252() throws Exception {
        
        given().accept("text/csv")
                .post(baseUrlOfSut + "/elements/count/groupBy/tag?" + 
                    "bcircles=vyg%3A8.721%2C49.430%2C4%7Ck%3A8.7022%2C49.407%2C2%7CLcJw%3A8.71072%2C49.411845%2C8&" + 
                    "format=csv&" + 
                    "groupByKey=building&" + 
                    "groupByValues=secondary_link%2Cspeed_camera%2Cprimary&" + 
                    "keys=highway&" + 
                    "timeout=88&" + 
                    "values=living_street")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_253() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/groupBy/tag?" + 
                    "bcircles=8.7339%2C49.4284%2C80&" + 
                    "groupByKey=highway&" + 
                    "keys=highway&" + 
                    "showMetadata=false&" + 
                    "time=2016-06-18&" + 
                    "timeout=49&" + 
                    "values=speed_camera")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'groupByResult'", hasItems());
    }
    
    
    @Test
    public void test_254() throws Exception {
        
        given().accept("text/csv")
                .post(baseUrlOfSut + "/elements/count/groupBy/key?" + 
                    "bcircles=H%3A8.713725%2C49.43932%2C7&" + 
                    "filter=lanes%3D*&" + 
                    "format=csv&" + 
                    "groupByKeys=surface%2Ctype%2Cref&" + 
                    "time=2010-01-17&" + 
                    "timeout=84")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_255() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/groupBy/key?" + 
                    "bcircles=UmfF%3A8.7469%2C49.4171%2C5&" + 
                    "filter=foot%21%3D*+or+id%3A%281+..+9999%29&" + 
                    "groupByKeys=oneway&" + 
                    "time=2013-09-03")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_256() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=TxwW%3A8.714%2C49.4105%2C1%7CBM%3A8.7378%2C49.402%2C1%7CLUU%3A8.74880%2C49.434%2C261&" + 
                    "groupByKey=building&" + 
                    "groupByValues=traffic_mirror%2Csecondary_link%2Cpath&" + 
                    "keys=highway")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_257() throws Exception {
        
        given().accept("text/csv")
                .post(baseUrlOfSut + "/elements/count/groupBy/boundary?" + 
                    "bcircles=meU%3A8.7167%2C49.4398%2C2%7COC%3A8.702%2C49.4368%2C68&" + 
                    "format=csv&" + 
                    "keys=highway&" + 
                    "showMetadata=no&" + 
                    "time=2012-02-18&" + 
                    "timeout=100&" + 
                    "values=cycleway")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_258() throws Exception {
        
        given().accept("text/csv")
                .get(baseUrlOfSut + "/elements/count/groupBy/boundary?" + 
                    "bcircles=8.738%2C49.4083%2C4%7C8.7195%2C49.423%2C9&" + 
                    "format=csv&" + 
                    "keys=highway&" + 
                    "time=2010-09-27&" + 
                    "timeout=91&" + 
                    "values=bus_stop")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_259() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/density/groupBy/type?" + 
                    "bcircles=8.72292%2C49.405%2C7&" + 
                    "format=geojson&" + 
                    "keys=highway&" + 
                    "time=2015-09-08&" + 
                    "timeout=57&" + 
                    "values=residential")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_260() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/density/groupBy/type?" + 
                    "bboxes=8.693156%2C49.426%2C8.736867%2C49.3803&" + 
                    "filter=ref%21%3D*+or+length%3A%28+..+100%29&" + 
                    "format=geojson&" + 
                    "showMetadata=no&" + 
                    "time=2015-01-30&" + 
                    "timeout=72")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_261() throws Exception {
        
        given().accept("text/csv")
                .post(baseUrlOfSut + "/elements/count/density/groupBy/tag?" + 
                    "bcircles=lYOmS%3A8.74695%2C49.425060%2C45%7Cv%3A8.736%2C49.407%2C5&" + 
                    "format=csv&" + 
                    "groupByKey=building&" + 
                    "groupByValues=garage&" + 
                    "keys=highway&" + 
                    "time=2011-06-02&" + 
                    "timeout=26&" + 
                    "values=street_lamp")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_262() throws Exception {
        
        given().accept("text/csv")
                .get(baseUrlOfSut + "/elements/count/density/groupBy/tag?" + 
                    "bcircles=Y%3A8.710%2C49.402918%2C2%7CNVH%3A8.718%2C49.4366%2C343&" + 
                    "format=csv&" + 
                    "groupByKey=building&" + 
                    "groupByValues=footway%2Cpath%2Cdemolished&" + 
                    "time=2008-05-01")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_263() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/density/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=8.733%2C49.4156%2C97%7C8.701%2C49.402%2C36%7C8.7215%2C49.419573%2C37&" + 
                    "filter=name%3D*+and+geometry%3Aline+or+length%3A%28+..+100%29&" + 
                    "groupByKey=building&" + 
                    "time=2013-10-25&" + 
                    "timeout=38")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_264() throws Exception {
        
        given().accept("text/csv")
                .post(baseUrlOfSut + "/elements/count/density/groupBy/boundary?" + 
                    "bcircles=YFa%3A8.705%2C49.415%2C504&" + 
                    "filter=turn%3D*+or+length%3A%28+..+100%29&" + 
                    "format=csv")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_265() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/density/groupBy/boundary?" + 
                    "bcircles=uIKtD%3A8.70416%2C49.43550%2C49&" + 
                    "filter=bicycle%3D*+and+area%3A%281.0+..+1E6%29&" + 
                    "time=2017-03-24&" + 
                    "timeout=59")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_266() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/density?" + 
                    "bcircles=t%3A8.718%2C49.408%2C40%7CtC%3A8.725%2C49.437%2C91&" + 
                    "keys=highway&" + 
                    "showMetadata=false&" + 
                    "time=2009-11-08&" + 
                    "timeout=21&" + 
                    "values=emergency_access_point")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_267() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count?" + 
                    "bcircles=j%3A8.702%2C49.419%2C8%7CcIh%3A8.7326%2C49.415%2C9&" + 
                    "format=json&" + 
                    "keys=highway&" + 
                    "showMetadata=yes&" + 
                    "time=2008-07-29&" + 
                    "timeout=72")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(291.0))
                .body("'metadata'.'description'", containsString("Total count of items in absolute values."));
    }
    
    
    @Test
    public void test_268() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count?" + 
                    "bboxes=boV%3A8.6857%2C49.4043%2C8.739%2C49.3865%7Cl%3A8.6602%2C49.4047%2C8.708%2C49.393%7Cfg%3A8.679%2C49.4271%2C8.72458%2C49.383&" + 
                    "format=json&" + 
                    "time=2010-09-01&" + 
                    "timeout=47")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_269() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/ratio?" + 
                    "bcircles=8.705%2C49.408%2C3%7C8.728%2C49.401%2C59&" + 
                    "filter2=lit%21%3D*+and+area%3A%281.0+..+1E6%29&" + 
                    "format=json&" + 
                    "keys=highway&" + 
                    "timeout=69&" + 
                    "types2=polygon%2Cother")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_270() throws Exception {
        
        given().accept("text/csv")
                .post(baseUrlOfSut + "/elements/area/groupBy/type?" + 
                    "bcircles=VuW%3A8.740%2C49.439%2C1%7CZ%3A8.74952%2C49.404%2C9%7CTf%3A8.710274%2C49.404%2C812&" + 
                    "format=csv&" + 
                    "keys=highway&" + 
                    "time=2011-06-16&" + 
                    "timeout=61")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_271() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/type?" + 
                    "bcircles=Go%3A8.7028%2C49.426%2C60&" + 
                    "keys=highway&" + 
                    "time=2016-05-29&" + 
                    "values=unclassified")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_272() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/tag?" + 
                    "bcircles=z%3A8.741%2C49.421%2C5&" + 
                    "filter=oneway%21%3D*+or+geometry%3Aline+or+id%3A%281+..+9999%29&" + 
                    "format=json&" + 
                    "groupByKey=building&" + 
                    "time=2016-11-03&" + 
                    "timeout=25")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_273() throws Exception {
        
        given().accept("text/csv")
                .get(baseUrlOfSut + "/elements/area/groupBy/tag?" + 
                    "bcircles=MrJ%3A8.742%2C49.4033%2C37%7CRvHlE%3A8.722%2C49.427967%2C8&" + 
                    "filter=highway%21%3D*+and+type%3Away+and+id%3A%281+..+9999%29&" + 
                    "format=csv&" + 
                    "groupByKey=building&" + 
                    "time=2014-07-03&" + 
                    "timeout=24")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_274() throws Exception {
        
        given().accept("text/csv")
                .post(baseUrlOfSut + "/elements/area/groupBy/key?" + 
                    "bcircles=8.743%2C49.42579%2C2&" + 
                    "filter=foot%3D*+or+geometry%3Aline+and+length%3A%28+..+100%29&" + 
                    "format=csv&" + 
                    "groupByKeys=name%2Caddr%3Acountry%2Clanes%3Aforward&" + 
                    "showMetadata=no&" + 
                    "timeout=38")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_275() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/key?" + 
                    "bcircles=8.734%2C49.414%2C1%7C8.7242%2C49.414%2C71&" + 
                    "filter=sidewalk%3D*+and+length%3A%28+..+100%29&" + 
                    "format=geojson&" + 
                    "groupByKeys=landuse%2Cbicycle&" + 
                    "showMetadata=yes&" + 
                    "time=2014-02-12&" + 
                    "timeout=79")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(548.0))
                .body("'metadata'.'description'", containsString("Total area of items in square meters, aggregated on the key."));
    }
    
    
    @Test
    public void test_276() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=Y%3A8.704561%2C49.403252%2C8.72388%2C49.42055%2C8.709%2C49.4335%2C8.703%2C49.408%2C8.704561%2C49.403252&" + 
                    "groupByKey=highway&" + 
                    "keys=highway&" + 
                    "time=2009-02-08&" + 
                    "timeout=57")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_277() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/boundary?" + 
                    "bcircles=u%3A8.717%2C49.426%2C4&" + 
                    "time=2013-09-29")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_278() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/boundary?" + 
                    "bcircles=aDMu%3A8.734%2C49.4352%2C6%7Cdc%3A8.7233%2C49.401323%2C7%7Cw%3A8.72821%2C49.417234%2C8&" + 
                    "keys=highway&" + 
                    "time=2015-06-09&" + 
                    "timeout=30&" + 
                    "values=footway")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_279() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/density/groupBy/type?" + 
                    "bcircles=NTxAR%3A8.7179%2C49.4129%2C9&" + 
                    "filter=destination%21%3D*+and+geometry%3Apolygon&" + 
                    "format=json&" + 
                    "showMetadata=yes&" + 
                    "time=2009-04-06&" + 
                    "timeout=97")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(280.0))
                .body("'metadata'.'description'", containsString("Density of selected items (area of items in square meters divided by the area in square kilometers), aggregated on the type."));
    }
    
    
    @Test
    public void test_280() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density/groupBy/tag?" + 
                    "bcircles=OvNL%3A8.734%2C49.43988%2C2&" + 
                    "groupByKey=building&" + 
                    "groupByValues=demolished%2Ccivic&" + 
                    "keys=highway&" + 
                    "showMetadata=true&" + 
                    "time=2012-12-22&" + 
                    "values=living_street")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(221.0))
                .body("'metadata'.'description'", containsString("Density of selected items (area of items in square meters divided by the area in square kilometers), aggregated on the tag."));
    }
    
    
    @Test
    public void test_281() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/density/groupBy/tag?" + 
                    "bcircles=X%3A8.73976%2C49.431580%2C4&" + 
                    "format=json&" + 
                    "groupByKey=building&" + 
                    "groupByValues=ship%2Cuniversity&" + 
                    "showMetadata=true&" + 
                    "time=2012-02-20&" + 
                    "timeout=69")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(609.0))
                .body("'metadata'.'description'", containsString("Density of selected items (area of items in square meters divided by the area in square kilometers), aggregated on the tag."));
    }
    
    
    @Test
    public void test_282() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=q%3A8.72908%2C49.412%2C2%7Cb%3A8.709%2C49.403%2C861%7Cp%3A8.7192%2C49.4213%2C6&" + 
                    "format=json&" + 
                    "groupByKey=building&" + 
                    "keys=highway&" + 
                    "time=2008-09-09")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_283() throws Exception {
        
        given().accept("text/csv")
                .get(baseUrlOfSut + "/elements/area/density/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=8.73619%2C49.421%2C7&" + 
                    "format=csv&" + 
                    "groupByKey=highway&" + 
                    "keys=highway&" + 
                    "time=2007-11-19")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_284() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density/groupBy/boundary?" + 
                    "bcircles=j%3A8.742%2C49.416%2C6%7CGBCP%3A8.718%2C49.424%2C174&" + 
                    "format=json&" + 
                    "keys=highway&" + 
                    "time=2016-03-09&" + 
                    "timeout=75")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_285() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/density/groupBy/boundary?" + 
                    "bcircles=8.7023%2C49.408%2C2%7C8.70522%2C49.437268%2C7&" + 
                    "keys=highway&" + 
                    "timeout=41")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_286() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/density?" + 
                    "bcircles=N%3A8.747%2C49.43169%2C70%7Cq%3A8.739%2C49.412%2C3%7CdofrD%3A8.748%2C49.41856%2C9%7CDSPri%3A8.7438%2C49.416%2C82&" + 
                    "filter=addr%3Astreet%3D*+and+area%3A%281.0+..+1E6%29&" + 
                    "time=2015-03-16&" + 
                    "timeout=93")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_287() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area?" + 
                    "bcircles=z%3A8.72442%2C49.411%2C85&" + 
                    "showMetadata=false&" + 
                    "time=2012-02-20")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_288() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/groupBy/type?" + 
                    "bboxes=ui%3A8.677%2C49.416881%2C8.722%2C49.382&" + 
                    "keys=highway&" + 
                    "showMetadata=true&" + 
                    "timeout=92")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(502.0))
                .body("'metadata'.'description'", containsString("Number of distinct active users per time interval aggregated on the type."));
    }
    
    
    @Test
    public void test_289() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/groupBy/type?" + 
                    "bboxes=Dm%3A8.665%2C49.421%2C8.7474%2C49.3979&" + 
                    "format=json&" + 
                    "keys=highway&" + 
                    "showMetadata=no&" + 
                    "values=path")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_290() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count?" + 
                    "bcircles=Xxwjf%3A8.74379%2C49.407%2C2&" + 
                    "keys=highway&" + 
                    "showMetadata=no&" + 
                    "time=%2F%2FP8M4D&" + 
                    "values=secondary")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_291() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/ratio?" + 
                    "bpolys=yjq%3A8.704561%2C49.403252%2C8.7007%2C49.4014%2C8.742%2C49.421%2C8.70367%2C49.4315%2C8.704561%2C49.403252&" + 
                    "keys=highway&" + 
                    "keys2=highway&" + 
                    "time=2012-12-01&" + 
                    "types2=way%2C&" + 
                    "values=turning_circle&" + 
                    "values2=steps")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_292() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/ratio/groupBy/boundary?" + 
                    "bboxes=8.66042%2C49.41820%2C8.743%2C49.386%7C8.661%2C49.411%2C8.724%2C49.3805&" + 
                    "filter2=bicycle%3D*+and+area%3A%281.0+..+1E6%29&" + 
                    "keys=highway&" + 
                    "showMetadata=yes&" + 
                    "types2=relation&" + 
                    "values=living_street")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(1776.0))
                .body("'metadata'.'description'", containsString("Total length of items in meters satisfying types2, keys2, values2 parameters (= value2 output), as well as items selected by types, keys, values parameters (= value output) and ratio of value2:value, aggregated on the boundary objects."));
    }
    
    
    @Test
    public void test_293() throws Exception {
        
        given().accept("text/csv")
                .get(baseUrlOfSut + "/elements/perimeter/ratio?" + 
                    "bpolys=8.704561%2C49.403252%2C8.726%2C49.424%2C8.74049%2C49.4220%2C8.705%2C49.432423%2C8.704561%2C49.403252&" + 
                    "filter2=highway%21%3D*+or+not+length%3A%28+..+100%29&" + 
                    "format=csv&" + 
                    "keys=highway&" + 
                    "keys2=highway&" + 
                    "time=2011-07-17&" + 
                    "types2=node%2Crelation&" + 
                    "values=traffic_signals&" + 
                    "values2=traffic_mirror")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_294() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/ratio/groupBy/boundary?" + 
                    "bboxes=P%3A8.65734%2C49.40391%2C8.71051%2C49.382&" + 
                    "filter2=oneway%21%3D*+and+length%3A%28+..+100%29&" + 
                    "keys=highway&" + 
                    "timeout=60&" + 
                    "types2=point%2Cpolygon%2Cother&" + 
                    "values=cycleway")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_295() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/ratio?" + 
                    "bboxes=8.665%2C49.418%2C8.738%2C49.384&" + 
                    "format=json&" + 
                    "keys=highway&" + 
                    "showMetadata=yes&" + 
                    "time=2010-08-25&" + 
                    "values=street_lamp")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(1485.0))
                .body("'metadata'.'description'", containsString("Total perimeter of items in meters satisfying types2, keys2, values2 parameters (= value2 output), as well as items selected by types, keys, values parameters (= value output) and ratio of value2:value."));
    }
    
    
    @Test
    public void test_296() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/density/groupBy/tag?" + 
                    "bboxes=aK%3A8.669749%2C49.42419%2C8.734%2C49.3937%7CwMWzg%3A8.6955%2C49.418%2C8.7050%2C49.397&" + 
                    "format=json&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=demolished%2Cturning_circle&" + 
                    "keys=highway&" + 
                    "showMetadata=yes&" + 
                    "timeout=89")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(3465.0))
                .body("'metadata'.'description'", containsString("Density of selected items (perimeter of items in meters divided by the area in square kilometers), aggregated on the tag."));
    }
    
    
    @Test
    public void test_297() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter?" + 
                    "bboxes=eL%3A8.685%2C49.4167%2C8.7188%2C49.386%7CfVCi%3A8.6600%2C49.4270%2C8.722%2C49.391%7CcRB%3A8.680%2C49.409%2C8.754%2C49.3888&" + 
                    "format=json&" + 
                    "keys=highway&" + 
                    "time=2010-01-18&" + 
                    "values=traffic_mirror")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_298() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/ratio?" + 
                    "bboxes=e%3A8.6923%2C49.4181%2C8.745%2C49.383966%7CYhL%3A8.664%2C49.4106%2C8.728387%2C49.381&" + 
                    "filter2=type%3D*+and+geometry%3Apolygon+or+length%3A%28+..+100%29&" + 
                    "keys2=highway&" + 
                    "showMetadata=false&" + 
                    "time=2013-03-01&" + 
                    "types2=way%2C")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_299() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density/groupBy/tag?" + 
                    "bboxes=8.654%2C49.41399%2C8.719%2C49.383&" + 
                    "groupByKey=building&" + 
                    "keys=highway&" + 
                    "showMetadata=true&" + 
                    "timeout=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(484.0))
                .body("'metadata'.'description'", containsString("Density of selected items (length of items in meters divided by the area in square kilometers), aggregated on the tag."));
    }
    
    
    @Test
    public void test_300() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density/groupBy/boundary?" + 
                    "bboxes=B%3A8.675%2C49.4246%2C8.737%2C49.392%7Cb%3A8.694%2C49.410752%2C8.703%2C49.399%7CcZ%3A8.658%2C49.410%2C8.708%2C49.3856%7CD%3A8.67788%2C49.41612%2C8.7512%2C49.39632&" + 
                    "showMetadata=yes&" + 
                    "timeout=55")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(1787.0))
                .body("'metadata'.'description'", containsString("Density of selected items (length of items in meters divided by the area in square kilometers)."));
    }
    
    
    @Test
    public void test_301() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length?" + 
                    "bboxes=QL%3A8.677%2C49.425%2C8.728892%2C49.380%7CJy%3A8.684%2C49.4160%2C8.731%2C49.3896&" + 
                    "showMetadata=true&" + 
                    "time=2007-12-18&" + 
                    "timeout=24")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(1246.0))
                .body("'metadata'.'description'", containsString("Total length of items in meters."));
    }
    
    
    @Test
    public void test_302() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/tag?" + 
                    "bboxes=x%3A8.653038%2C49.400%2C8.716%2C49.388%7CnkaNE%3A8.685%2C49.419%2C8.7407%2C49.39799%7CH%3A8.656%2C49.419%2C8.718877%2C49.383&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=pedestrian%2Cresidential%2Ctrack&" + 
                    "timeout=43")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_303() throws Exception {
        
        given().accept("text/csv")
                .post(baseUrlOfSut + "/elements/count/groupBy/key?" + 
                    "bboxes=8.6722%2C49.427%2C8.75452%2C49.382&" + 
                    "format=csv&" + 
                    "groupByKeys=source%3Amaxspeed%2Cnetwork%2Cname&" + 
                    "timeout=70")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_304() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/density/groupBy/boundary?" + 
                    "bboxes=Ou%3A8.6882%2C49.427%2C8.712674%2C49.391&" + 
                    "filter=maxspeed%3D*+and+geometry%3Aline&" + 
                    "showMetadata=false&" + 
                    "time=2016-03-07&" + 
                    "timeout=33")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_305() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/type?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22KlyE%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.711%2C49.420%5D%2C%5B8.7091%2C49.419%5D%2C%5B8.706037%2C49.4363%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "format=json&" + 
                    "keys=highway&" + 
                    "timeout=85&" + 
                    "values=service")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_306() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density/groupBy/type?" + 
                    "bcircles=O%3A8.74425%2C49.41995%2C3&" + 
                    "format=geojson&" + 
                    "keys=highway&" + 
                    "timeout=40&" + 
                    "values=elevator")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_307() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=dx%3A8.741%2C49.4296%2C519&" + 
                    "groupByKey=building&" + 
                    "groupByValues=hotel%2Cdormitory&" + 
                    "timeout=96")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_308() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/density/groupBy/tag?" + 
                    "bboxes=RG%3A8.666%2C49.4281%2C8.72830%2C49.397%7CwpHyb%3A8.65279%2C49.418%2C8.7199%2C49.3968%7ClRGJ%3A8.668%2C49.411187%2C8.7410%2C49.396%7Ch%3A8.668%2C49.406%2C8.724%2C49.386&" + 
                    "format=json&" + 
                    "groupByKey=building&" + 
                    "groupByValues=turning_circle%2Cchapel&" + 
                    "keys=highway&" + 
                    "time=%2F%2FP1Y7D")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_309() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/density/groupBy/boundary?" + 
                    "bboxes=8.658019%2C49.404%2C8.700%2C49.39627&" + 
                    "keys=highway&" + 
                    "timeout=30&" + 
                    "values=unclassified")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_310() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count?" + 
                    "bcircles=8.701%2C49.431%2C2%7C8.721%2C49.408%2C8%7C8.738%2C49.437%2C768&" + 
                    "keys=highway&" + 
                    "showMetadata=true&" + 
                    "timeout=33&" + 
                    "values=primary")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(1076.0))
                .body("'metadata'.'description'", containsString("Number of distinct active users per time interval."));
    }
    
    
    @Test
    public void test_311() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/groupBy/type?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22a%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.712%2C49.437%5D%2C%5B8.737%2C49.4164%5D%2C%5B8.716%2C49.42573%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=addr%3Apostcode%3D*+and+not+geometry%3Aline+and+length%3A%28+..+100%29&" + 
                    "showMetadata=yes&" + 
                    "timeout=22")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(524.0))
                .body("'metadata'.'description'", containsString("Total length of items in meters, aggregated on the type."));
    }
    
    
    @Test
    public void test_312() throws Exception {
        
        given().accept("text/csv")
                .post(baseUrlOfSut + "/elements/perimeter/density/groupBy/tag?" + 
                    "bpolys=nB%3A8.704561%2C49.403252%2C8.713839%2C49.42821%2C8.70004%2C49.421%2C8.7063%2C49.417431%2C8.704561%2C49.403252&" + 
                    "format=csv&" + 
                    "groupByKey=building&" + 
                    "groupByValues=hotel%2Ctower%2Cresidential&" + 
                    "keys=highway&" + 
                    "time=2015-01-27&" + 
                    "values=elevator")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_313() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/type?" + 
                    "bcircles=ErEUG%3A8.722%2C49.411%2C9%7Cn%3A8.7231%2C49.42213%2C8%7CIf%3A8.735%2C49.4335%2C5&" + 
                    "format=json&" + 
                    "keys=highway&" + 
                    "showMetadata=no&" + 
                    "time=2017-11-09&" + 
                    "timeout=97")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_314() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/tag?" + 
                    "bcircles=y%3A8.7069%2C49.4071%2C95%7CWKx%3A8.7354%2C49.413%2C6%7CrtN%3A8.7344%2C49.4160%2C1%7CZf%3A8.712615%2C49.4097%2C717&" + 
                    "filter=smoothness%21%3D*&" + 
                    "format=json&" + 
                    "groupByKey=building&" + 
                    "groupByValues=construction%2Cdormitory%2Cstation&" + 
                    "showMetadata=yes&" + 
                    "time=2012-12-31&" + 
                    "timeout=43")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(873.0))
                .body("'metadata'.'description'", containsString("Total length of items in meters, aggregated on the tag."));
    }
    
    
    @Test
    public void test_315() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/key?" + 
                    "bboxes=8.676192%2C49.4050%2C8.72488%2C49.381%7C8.679543%2C49.401%2C8.7240%2C49.391%7C8.684%2C49.41852%2C8.700%2C49.3882&" + 
                    "format=json&" + 
                    "groupByKeys=addr%3Acity%2Clit&" + 
                    "timeout=65")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_316() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density/groupBy/type?" + 
                    "bboxes=UAdYa%3A8.685%2C49.401%2C8.743018%2C49.395%7CSs%3A8.695%2C49.415%2C8.742122%2C49.382%7CG%3A8.658%2C49.42134%2C8.752%2C49.3957&" + 
                    "format=geojson&" + 
                    "keys=highway&" + 
                    "showMetadata=true&" + 
                    "values=living_street")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(373.0))
                .body("'metadata'.'description'", containsString("Density of selected items (length of items in meters divided by the area in square kilometers), aggregated on the type."));
    }
    
    
    @Test
    public void test_317() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22LF%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7236%2C49.438%5D%2C%5B8.728%2C49.428512%5D%2C%5B8.719%2C49.4294%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=stop_line%2Cunclassified&" + 
                    "keys=highway&" + 
                    "values=speed_camera")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_318() throws Exception {
        
        given().accept("text/csv")
                .post(baseUrlOfSut + "/elements/count/groupBy/type?" + 
                    "bboxes=MTJt%3A8.656%2C49.408%2C8.708%2C49.388&" + 
                    "format=csv&" + 
                    "timeout=48")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_319() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/density/groupBy/type?" + 
                    "bboxes=EWUid%3A8.696%2C49.418%2C8.7432%2C49.3958%7CshhM%3A8.655%2C49.41981%2C8.748%2C49.3916&" + 
                    "format=geojson&" + 
                    "keys=highway&" + 
                    "showMetadata=true&" + 
                    "values=residential")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(513.0))
                .body("'metadata'.'description'", containsString("Density of selected items (count of items in absolute values divided by the area in square kilometers), aggregated on the type."));
    }
    
    
    @Test
    public void test_320() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/density/groupBy/tag?" + 
                    "bpolys=8.704561%2C49.403252%2C8.74844%2C49.421%2C8.70456%2C49.41492%2C8.7131%2C49.410%2C8.704561%2C49.403252&" + 
                    "groupByKey=highway&" + 
                    "keys=highway&" + 
                    "values=street_lamp")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_321() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/density/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=8.714%2C49.4032%2C8&" + 
                    "format=json&" + 
                    "groupByKey=building&" + 
                    "keys=highway&" + 
                    "showMetadata=no&" + 
                    "time=2014-07-23&" + 
                    "values=secondary")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'groupByResult'", hasItems());
    }
    
    
    @Test
    public void test_322() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/ratio/groupBy/boundary?" + 
                    "bcircles=8.744712%2C49.43141%2C6&" + 
                    "filter2=sidewalk%21%3D*+or+id%3A%281+..+9999%29&" + 
                    "format=json&" + 
                    "keys=highway&" + 
                    "keys2=highway&" + 
                    "time=2008-08-26&" + 
                    "timeout=84")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_323() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/tag?" + 
                    "bboxes=EGL%3A8.672%2C49.405%2C8.724%2C49.387%7CoOxHA%3A8.6814%2C49.404%2C8.75786%2C49.381&" + 
                    "groupByKey=building&" + 
                    "groupByValues=demolished%2Ccycleway&" + 
                    "timeout=97")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_324() throws Exception {
        
        given().accept("text/csv")
                .post(baseUrlOfSut + "/elements/area/groupBy/key?" + 
                    "bboxes=Xdod%3A8.68147%2C49.404%2C8.722%2C49.384&" + 
                    "filter=ref%3D*+or+type%3Arelation+or+area%3A%281.0+..+1E6%29&" + 
                    "format=csv&" + 
                    "groupByKeys=smoothness%2Cbuilding%2Clit")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_325() throws Exception {
        
        given().accept("text/csv")
                .post(baseUrlOfSut + "/elements/area/density/groupBy/tag?" + 
                    "bboxes=8.657072%2C49.406572%2C8.75847%2C49.382&" + 
                    "format=csv&" + 
                    "groupByKey=building&" + 
                    "groupByValues=school%2Ctower%2Cresidential&" + 
                    "keys=highway")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_326() throws Exception {
        
        given().accept("text/csv")
                .get(baseUrlOfSut + "/users/count/groupBy/key?" + 
                    "bboxes=8.6977%2C49.404%2C8.7551%2C49.388&" + 
                    "format=csv&" + 
                    "groupByKeys=maxspeed%2Cbuilding&" + 
                    "keys=highway&" + 
                    "showMetadata=yes&" + 
                    "timeout=89")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_327() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/boundary?" + 
                    "bcircles=8.719231%2C49.428%2C7&" + 
                    "filter=addr%3Ahousenumber%21%3D*+and+type%3Anode+and+not+area%3A%281.0+..+1E6%29&" + 
                    "format=json&" + 
                    "showMetadata=false&" + 
                    "time=%2F%2FP2Y9M2D&" + 
                    "timeout=31")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_328() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/ratio/groupBy/boundary?" + 
                    "bboxes=8.6690%2C49.4113%2C8.754%2C49.382%7C8.685%2C49.4012%2C8.759%2C49.3985&" + 
                    "filter=oneway%3D*+or+not+geometry%3Apoint&" + 
                    "filter2=network%3D*+or+not+type%3Anode&" + 
                    "keys2=highway&" + 
                    "time=2014-08-03&" + 
                    "timeout=62&" + 
                    "types2=point%2Cline%2Cpolygon%2C&" + 
                    "values2=steps")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_329() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/boundary/groupBy/tag?" + 
                    "bboxes=8.6507%2C49.412%2C8.710%2C49.391%7C8.661%2C49.403%2C8.754%2C49.393%7C8.693%2C49.411%2C8.734%2C49.39142%7C8.669%2C49.410%2C8.725100%2C49.3976&" + 
                    "filter=lit%3D*+or+geometry%3Apoint&" + 
                    "groupByKey=building&" + 
                    "groupByValues=tertiary%2Cdormitory&" + 
                    "time=2009-11-21")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_330() throws Exception {
        
        given().accept("text/csv")
                .get(baseUrlOfSut + "/elements/perimeter/groupBy/boundary?" + 
                    "bcircles=8.714%2C49.4244%2C9&" + 
                    "format=csv&" + 
                    "time=2010-05-31")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_331() throws Exception {
        
        given().accept("text/csv")
                .post(baseUrlOfSut + "/elements/perimeter/density/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=8.7167%2C49.40539%2C110&" + 
                    "format=csv&" + 
                    "groupByKey=building&" + 
                    "groupByValues=track%2Cemergency_access_point%2Capartments&" + 
                    "showMetadata=yes")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_332() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/ratio?" + 
                    "bcircles=8.7283%2C49.4238%2C66%7C8.7268%2C49.405%2C8&" + 
                    "keys=highway&" + 
                    "keys2=highway&" + 
                    "showMetadata=true&" + 
                    "timeout=24&" + 
                    "types2=line%2C")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(305.0))
                .body("'metadata'.'description'", containsString("Total length of items in meters satisfying types2, keys2, values2 parameters (= value2 output), as well as items selected by types, keys, values parameters (= value output) and ratio of value2:value."));
    }
    
    
    @Test
    public void test_333() throws Exception {
        
        given().accept("text/csv")
                .get(baseUrlOfSut + "/elements/length?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22fhQ%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.723%2C49.425%5D%2C%5B8.7043%2C49.4372%5D%2C%5B8.70440%2C49.43251%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=highway%21%3D*+and+length%3A%28+..+100%29&" + 
                    "format=csv&" + 
                    "showMetadata=true&" + 
                    "timeout=54")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_334() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/ratio/groupBy/boundary?" + 
                    "bboxes=j%3A8.698%2C49.4094%2C8.707944%2C49.380&" + 
                    "filter2=addr%3Apostcode%3D*+or+length%3A%28+..+100%29&" + 
                    "format=geojson&" + 
                    "keys2=highway&" + 
                    "time=2012-03-09&" + 
                    "timeout=42&" + 
                    "values2=pedestrian")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'type'", containsString("FeatureCollection"));
    }
    
    
    @Test
    public void test_335() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/ratio?" + 
                    "bcircles=t%3A8.703616%2C49.409%2C6%7Cs%3A8.7462%2C49.439%2C9&" + 
                    "filter=lanes%3D*+or+type%3Away+and+area%3A%281.0+..+1E6%29&" + 
                    "filter2=lanes%3Abackward%21%3D*&" + 
                    "format=geojson&" + 
                    "showMetadata=no&" + 
                    "timeout=93")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_336() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/boundary?" + 
                    "bboxes=Xdydc%3A8.6546%2C49.4234%2C8.715%2C49.399%7CQ%3A8.679%2C49.412%2C8.7512%2C49.394&" + 
                    "keys=highway&" + 
                    "showMetadata=true&" + 
                    "time=2012-01-15&" + 
                    "values=unclassified")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(508.0))
                .body("'metadata'.'description'", containsString("Total area of items in square meters."));
    }
    
    
    @Test
    public void test_337() throws Exception {
        
        given().accept("text/csv")
                .post(baseUrlOfSut + "/elements/perimeter/ratio?" + 
                    "bcircles=D%3A8.732%2C49.4326%2C9%7CgTI%3A8.739%2C49.412%2C432&" + 
                    "format=csv&" + 
                    "keys=highway&" + 
                    "keys2=highway&" + 
                    "time=2014-01-17&" + 
                    "timeout=84&" + 
                    "types2=line%2Cpolygon%2C&" + 
                    "values=footway")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_338() throws Exception {
        
        given().accept("text/csv")
                .post(baseUrlOfSut + "/elements/perimeter/density/groupBy/boundary?" + 
                    "bcircles=k%3A8.740%2C49.435%2C7%7CUg%3A8.735101%2C49.432%2C2&" + 
                    "filter=network%21%3D*+or+type%3Arelation+and+length%3A%28+..+100%29&" + 
                    "format=csv&" + 
                    "showMetadata=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_339() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/ratio/groupBy/boundary?" + 
                    "bcircles=ct%3A8.7209%2C49.429%2C7&" + 
                    "filter2=ref%3D*+or+type%3Anode+or+length%3A%28+..+100%29&" + 
                    "format=geojson&" + 
                    "keys=highway&" + 
                    "keys2=highway&" + 
                    "showMetadata=yes&" + 
                    "timeout=56&" + 
                    "types2=other&" + 
                    "values=elevator&" + 
                    "values2=platform")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(690.0))
                .body("'metadata'.'description'", containsString("Total count of items in absolute values satisfying types2, keys2, values2 parameters (= value2 output), as well as items selected by types, keys, values parameters (= value output) and ratio of value2:value, aggregated on the boundary objects."))
                .body("'type'", containsString("FeatureCollection"));
    }
    
    
    @Test
    public void test_340() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count?" + 
                    "bboxes=GE%3A8.659%2C49.4061%2C8.736%2C49.385&" + 
                    "keys=highway&" + 
                    "time=2011-11-17&" + 
                    "values=stop")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_341() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/ratio/groupBy/boundary?" + 
                    "bcircles=rP%3A8.738%2C49.408%2C795&" + 
                    "filter=ref%21%3D*+or+geometry%3Aline+and+length%3A%28+..+100%29&" + 
                    "filter2=lit%3D*+and+not+area%3A%281.0+..+1E6%29&" + 
                    "keys2=highway&" + 
                    "showMetadata=true&" + 
                    "types2=point%2Cpolygon%2Cother")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(427.0))
                .body("'metadata'.'description'", containsString("Total area of items in square meters satisfying types2, keys2, values2 parameters (= value2 output), as well as items selected by types, keys, values parameters (= value output) and ratio of value2:value, aggregated on the boundary objects."));
    }
    
    
    @Test
    public void test_342() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density/groupBy/boundary?" + 
                    "bboxes=HLvzQ%3A8.681898%2C49.407881%2C8.741%2C49.38993&" + 
                    "filter=foot%3D*+and+id%3A%281+..+9999%29&" + 
                    "format=json&" + 
                    "time=2007-12-02&" + 
                    "timeout=38")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_343() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area?" + 
                    "bboxes=8.683%2C49.4175%2C8.74419%2C49.3862%7C8.684218%2C49.425759%2C8.703220%2C49.382&" + 
                    "filter=tracktype%21%3D*&" + 
                    "format=geojson&" + 
                    "showMetadata=true&" + 
                    "timeout=76")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(1555.0))
                .body("'metadata'.'description'", containsString("Total area of items in square meters."));
    }
    
    
    @Test
    public void test_344() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/groupBy/key?" + 
                    "bcircles=8.709%2C49.4225%2C4&" + 
                    "groupByKeys=foot%2Caddr%3Astreet%2Csmoothness&" + 
                    "keys=highway&" + 
                    "time=%2F%2FP28D&" + 
                    "timeout=30")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_345() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/ratio/groupBy/boundary?" + 
                    "bcircles=A%3A8.747%2C49.4156%2C76&" + 
                    "filter2=maxspeed%21%3D*+and+type%3Away+and+area%3A%281.0+..+1E6%29&" + 
                    "keys=highway&" + 
                    "keys2=highway&" + 
                    "time=2009-09-18&" + 
                    "values=secondary&" + 
                    "values2=platform")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_346() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=lHV%3A8.704561%2C49.403252%2C8.707%2C49.4209%2C8.703%2C49.426%2C8.704%2C49.402%2C8.704561%2C49.403252&" + 
                    "filter=type%3D*+or+geometry%3Aline&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=church%2Cservice%2Cservice&" + 
                    "timeout=96")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_347() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=8.729064%2C49.421%2C3%7C8.7326%2C49.4166%2C7&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=dormitory%2Cdemolished%2Cresidential")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_348() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/ratio/groupBy/boundary?" + 
                    "bcircles=ei%3A8.7194%2C49.425%2C6%7CEb%3A8.7476%2C49.419110%2C7%7CdlRVQ%3A8.720%2C49.403%2C9%7CK%3A8.730695%2C49.404%2C108&" + 
                    "filter2=destination%21%3D*+and+geometry%3Aline&" + 
                    "keys=highway&" + 
                    "keys2=highway&" + 
                    "showMetadata=yes&" + 
                    "timeout=44&" + 
                    "types2=line%2C&" + 
                    "values=path")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(924.0))
                .body("'metadata'.'description'", containsString("Total area of items in square meters satisfying types2, keys2, values2 parameters (= value2 output), as well as items selected by types, keys, values parameters (= value output) and ratio of value2:value, aggregated on the boundary objects."));
    }
    
    
    @Test
    public void test_349() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/ratio?" + 
                    "bcircles=WI%3A8.733%2C49.4022%2C89&" + 
                    "keys=highway&" + 
                    "keys2=highway&" + 
                    "showMetadata=false&" + 
                    "time=2011-03-16")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_350() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/boundary/groupBy/tag?" + 
                    "bboxes=RZ%3A8.654%2C49.41696%2C8.728%2C49.389&" + 
                    "groupByKey=building&" + 
                    "groupByValues=cycleway%2Ctraffic_signals&" + 
                    "keys=highway")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_351() throws Exception {
        
        given().accept("text/csv")
                .get(baseUrlOfSut + "/elements/perimeter/density/groupBy/tag?" + 
                    "bcircles=YGx%3A8.730652%2C49.41459%2C198&" + 
                    "format=csv&" + 
                    "groupByKey=building&" + 
                    "keys=highway&" + 
                    "timeout=83&" + 
                    "values=primary_link")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_352() throws Exception {
        
        given().accept("text/csv")
                .post(baseUrlOfSut + "/users/count/density/groupBy/boundary?" + 
                    "bpolys=ypTld%3A8.704561%2C49.403252%2C8.714%2C49.404%2C8.741%2C49.4237%2C8.712609%2C49.425%2C8.704561%2C49.403252&" + 
                    "format=csv&" + 
                    "keys=highway&" + 
                    "time=%2F%2FP3Y1M1D")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_353() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/density/groupBy/boundary?" + 
                    "bboxes=mhq%3A8.671%2C49.427%2C8.7014%2C49.382&" + 
                    "filter=natural%3Dwood+and+not+id%3A%281+..+9999%29&" + 
                    "format=json&" + 
                    "showMetadata=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(564.0))
                .body("'metadata'.'description'", containsString("Density of distinct active users per time interval (number of users per square-kilometer) aggregated on the boundary."));
    }
    
    
    @Test
    public void test_354() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/ratio/groupBy/boundary?" + 
                    "bcircles=yIGvA%3A8.739%2C49.413%2C4&" + 
                    "keys=highway&" + 
                    "time=2014-02-25")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_355() throws Exception {
        
        given().accept("text/csv")
                .post(baseUrlOfSut + "/elements/length/groupBy/key?" + 
                    "bboxes=dV%3A8.6880%2C49.4021%2C8.7305%2C49.384&" + 
                    "format=csv&" + 
                    "groupByKeys=lanes%2Ctype%2Caddr%3Acountry&" + 
                    "keys=highway&" + 
                    "showMetadata=no&" + 
                    "time=2010-08-08")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_356() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/boundary?" + 
                    "bboxes=Wh%3A8.662376%2C49.415%2C8.713%2C49.387&" + 
                    "format=json&" + 
                    "time=2016-06-15")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_357() throws Exception {
        
        given().accept("text/csv")
                .post(baseUrlOfSut + "/users/count/density/groupBy/tag?" + 
                    "bboxes=8.6636%2C49.418%2C8.734901%2C49.392%7C8.688%2C49.417%2C8.756%2C49.3956&" + 
                    "format=csv&" + 
                    "groupByKey=highway&" + 
                    "keys=highway&" + 
                    "showMetadata=yes&" + 
                    "timeout=99")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_358() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/ratio?" + 
                    "bboxes=8.69769%2C49.421322%2C8.7436%2C49.393&" + 
                    "filter2=highway+in+%28secondary%2Cpath%2Cunclassified%2Ctrack%2Cprimary%2Cresidential%2Ccycleway%2Cservice%2Cfootway%29+and+type%3Anode+or+length%3A%28+..+100%29&" + 
                    "keys=highway&" + 
                    "keys2=highway&" + 
                    "showMetadata=true&" + 
                    "time=2015-08-11&" + 
                    "types2=relation")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(491.0))
                .body("'metadata'.'description'", containsString("Total length of items in meters satisfying types2, keys2, values2 parameters (= value2 output), as well as items selected by types, keys, values parameters (= value output) and ratio of value2:value."));
    }
    
    
    @Test
    public void test_359() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/density?" + 
                    "bboxes=8.685%2C49.404%2C8.737%2C49.384%7C8.6892%2C49.4236%2C8.718%2C49.395&" + 
                    "format=json&" + 
                    "keys=highway&" + 
                    "time=2010-12-03&" + 
                    "timeout=63")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_360() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/boundary?" + 
                    "bboxes=8.652077%2C49.416%2C8.719%2C49.386%7C8.65123%2C49.425%2C8.750318%2C49.39651%7C8.657208%2C49.409%2C8.7558%2C49.396%7C8.6694%2C49.414%2C8.7546%2C49.39646&" + 
                    "filter=addr%3Acountry%21%3D*+or+id%3A%281+..+9999%29&" + 
                    "format=geojson&" + 
                    "timeout=28")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'type'", containsString("FeatureCollection"));
    }
    
    
    @Test
    public void test_361() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density?" + 
                    "bboxes=8.691%2C49.408%2C8.7476%2C49.396&" + 
                    "keys=highway&" + 
                    "showMetadata=yes&" + 
                    "timeout=85&" + 
                    "values=give_way")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(732.0))
                .body("'metadata'.'description'", containsString("Density of selected items (length of items in meters divided by the area in square kilometers)."));
    }
    
    
    @Test
    public void test_362() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density?" + 
                    "bcircles=8.740%2C49.418%2C85&" + 
                    "filter=turn%3Alanes%21%3D*+and+length%3A%28+..+100%29&" + 
                    "format=geojson&" + 
                    "showMetadata=yes")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(929.0))
                .body("'metadata'.'description'", containsString("Density of selected items (area of items in square meters divided by the area in square kilometers)."));
    }
    
    
    @Test
    public void test_363() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/boundary?" + 
                    "bboxes=ZnqBW%3A8.684%2C49.418016%2C8.7117%2C49.3953&" + 
                    "filter=landuse%3D*+or+geometry%3Apolygon&" + 
                    "showMetadata=yes&" + 
                    "time=2007-11-10&" + 
                    "timeout=56")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(740.0))
                .body("'metadata'.'description'", containsString("Total length of items in meters."));
    }
    
    
    @Test
    public void test_364() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/groupBy/tag?" + 
                    "bcircles=fwzdD%3A8.7282%2C49.4005%2C4%7CBLXR%3A8.7045%2C49.436595%2C1&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=service%2Cdemolished%2Ccrossing&" + 
                    "keys=highway&" + 
                    "showMetadata=true&" + 
                    "time=%2F%2FP3Y22D")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(1337.0))
                .body("'metadata'.'description'", containsString("Number of distinct active users per time interval aggregated on the tag."));
    }
    
    
    @Test
    public void test_365() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/groupBy/boundary?" + 
                    "bboxes=nA%3A8.694%2C49.4213%2C8.722344%2C49.386&" + 
                    "filter=maxspeed%21%3D*+and+not+type%3Arelation+or+id%3A%281+..+9999%29&" + 
                    "format=json&" + 
                    "showMetadata=true&" + 
                    "timeout=48")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(5591.0))
                .body("'metadata'.'description'", containsString("Number of distinct active users per time interval aggregated on the boundary."));
    }
    
    
    @Test
    public void test_366() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/ratio/groupBy/boundary?" + 
                    "bboxes=CWqOu%3A8.653%2C49.406%2C8.740%2C49.399%7CkZT%3A8.6764%2C49.412%2C8.759%2C49.392%7CLmrYL%3A8.698198%2C49.42907%2C8.724%2C49.382%7CGI%3A8.6544%2C49.40380%2C8.704%2C49.3824&" + 
                    "filter2=natural%3Dwood+and+not+area%3A%281.0+..+1E6%29&" + 
                    "format=geojson&" + 
                    "keys=highway&" + 
                    "showMetadata=yes&" + 
                    "time=2013-05-20&" + 
                    "values=bus_stop")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(1908.0))
                .body("'metadata'.'description'", containsString("Total perimeter of items in meters satisfying types2, keys2, values2 parameters (= value2 output), as well as items selected by types, keys, values parameters (= value output) and ratio of value2:value, aggregated on the boundary objects."))
                .body("'type'", containsString("FeatureCollection"));
    }
    
    
    @Test
    public void test_367() throws Exception {
        
        given().accept("text/csv")
                .get(baseUrlOfSut + "/elements/perimeter/groupBy/tag?" + 
                    "bboxes=8.675%2C49.400255%2C8.72095%2C49.397%7C8.694%2C49.4118%2C8.75607%2C49.3922&" + 
                    "filter=destination%3D*+or+type%3Arelation+or+area%3A%281.0+..+1E6%29&" + 
                    "format=csv&" + 
                    "groupByKey=highway&" + 
                    "timeout=66")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_368() throws Exception {
        
        given().accept("text/csv")
                .get(baseUrlOfSut + "/elements/perimeter/groupBy/boundary/groupBy/tag?" + 
                    "bboxes=G%3A8.668%2C49.409%2C8.719%2C49.387%7CV%3A8.664%2C49.41907%2C8.7453%2C49.383&" + 
                    "format=csv&" + 
                    "groupByKey=building&" + 
                    "time=2010-10-04&" + 
                    "timeout=59")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_369() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/density/groupBy/type?" + 
                    "bboxes=kq%3A8.6580%2C49.424909%2C8.706%2C49.381&" + 
                    "keys=highway&" + 
                    "time=2013-02-23&" + 
                    "timeout=39&" + 
                    "values=bus_stop")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_370() throws Exception {
        
        given().accept("text/csv")
                .get(baseUrlOfSut + "/elements/count/ratio/groupBy/boundary?" + 
                    "bcircles=8.730%2C49.418%2C682%7C8.703%2C49.413509%2C7%7C8.741%2C49.415%2C3%7C8.74974%2C49.423%2C626&" + 
                    "filter2=type%3D*&" + 
                    "format=csv&" + 
                    "keys=highway")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_371() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/groupBy/tag?" + 
                    "bboxes=pim%3A8.653%2C49.4257%2C8.755%2C49.380184%7CC%3A8.662%2C49.428%2C8.7326%2C49.380%7CLx%3A8.6646%2C49.406%2C8.745%2C49.394&" + 
                    "filter=landuse%21%3D*+and+id%3A%281+..+9999%29&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=footway%2Cdormitory%2Coffice&" + 
                    "showMetadata=yes&" + 
                    "time=2007-12-05&" + 
                    "timeout=84")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(640.0))
                .body("'metadata'.'description'", containsString("Total perimeter of items in meters, aggregated on the tag."));
    }
    
    
    @Test
    public void test_372() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/key?" + 
                    "bboxes=8.673%2C49.417%2C8.710%2C49.394%7C8.697%2C49.416%2C8.750%2C49.385&" + 
                    "groupByKeys=bicycle%2Csmoothness&" + 
                    "keys=highway&" + 
                    "showMetadata=yes&" + 
                    "time=2012-06-29&" + 
                    "values=primary_link")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(321.0))
                .body("'metadata'.'description'", containsString("Total perimeter of items in meters, aggregated on the key."));
    }
    
    
    @Test
    public void test_373() throws Exception {
        
        given().accept("text/csv")
                .post(baseUrlOfSut + "/elements/perimeter/density/groupBy/type?" + 
                    "bboxes=zWbQ%3A8.6710%2C49.4214%2C8.701%2C49.393&" + 
                    "format=csv&" + 
                    "keys=highway&" + 
                    "showMetadata=yes&" + 
                    "timeout=48")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_374() throws Exception {
        
        given().accept("text/csv")
                .post(baseUrlOfSut + "/users/count/density/groupBy/type?" + 
                    "bcircles=8.711%2C49.4338%2C9%7C8.735%2C49.407%2C63%7C8.727%2C49.43220%2C3%7C8.719%2C49.418%2C1&" + 
                    "filter=building%3D*+and+type%3Arelation+and+not+id%3A%281+..+9999%29&" + 
                    "format=csv&" + 
                    "time=%2F%2FP2Y2M28D&" + 
                    "timeout=73")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_375() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/density/groupBy/boundary?" + 
                    "bcircles=YKD%3A8.7345%2C49.422%2C651&" + 
                    "filter=service%3Ddriveway+and+type%3Arelation&" + 
                    "format=json&" + 
                    "showMetadata=yes&" + 
                    "time=2011-11-08")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(208.0))
                .body("'metadata'.'description'", containsString("Density of selected items (perimeter of items in meters divided by the area in square kilometers)."));
    }
    
    
    @Test
    public void test_376() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/boundary/groupBy/tag?" + 
                    "bboxes=8.692%2C49.42675%2C8.70927%2C49.39616&" + 
                    "groupByKey=building&" + 
                    "groupByValues=residential%2Cturning_circle&" + 
                    "keys=highway&" + 
                    "showMetadata=false&" + 
                    "time=2012-05-28&" + 
                    "values=traffic_signals")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_377() throws Exception {
        
        given().accept("text/csv")
                .get(baseUrlOfSut + "/elements/perimeter/density?" + 
                    "bboxes=q%3A8.6697%2C49.4005%2C8.712%2C49.386&" + 
                    "format=csv&" + 
                    "showMetadata=no&" + 
                    "timeout=45")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_378() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/groupBy/type?" + 
                    "bcircles=8.700%2C49.403%2C4%7C8.70075%2C49.436%2C1%7C8.747%2C49.4015%2C6%7C8.717%2C49.427260%2C23&" + 
                    "format=geojson&" + 
                    "keys=higlsay&" + 
                    "time=%2F&" + 
                    "timeout=27")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_379() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area?" + 
                    "bcircles=8.727%2C49.42846%2C8&" + 
                    "keys=highway&" + 
                    "time=2010-09-06&" + 
                    "timeout=96&" + 
                    "types=point%2C&" + 
                    "values=traffic_mirror")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_380() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=kyD%3A8.71924%2C49.435%2C3&" + 
                    "format=geojson&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=house%2Chotel%2Coffice&" + 
                    "timeout=26")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'type'", containsString("FeatureCollection"));
    }
    
    
    @Test
    public void test_381() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/ratio/groupBy/boundary?" + 
                    "bboxes=8.657%2C49.428940%2C8.7474%2C49.3951&" + 
                    "keys=highway&" + 
                    "keys2=highway&" + 
                    "time=2010-08-04&" + 
                    "types2=point%2Cline%2Cother&" + 
                    "values=speed_camera")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_382() throws Exception {
        
        given().accept("text/csv")
                .get(baseUrlOfSut + "/users/count/density?" + 
                    "bboxes=U%3A8.6705%2C49.41217%2C8.737%2C49.3943%7CJxpxx%3A8.6897%2C49.40044%2C8.7219%2C49.39173&" + 
                    "format=csv&" + 
                    "keys=highway&" + 
                    "showMetadata=false&" + 
                    "time=%2F%2FP3Y22D&" + 
                    "timeout=25")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_383() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/ratio?" + 
                    "bcircles=Ez%3A8.710653%2C49.417%2C9&" + 
                    "keys=highway&" + 
                    "showMetadata=yes&" + 
                    "timeout=69&" + 
                    "types2=line%2C&" + 
                    "values=crossing")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(1120.0))
                .body("'metadata'.'description'", containsString("Total perimeter of items in meters satisfying types2, keys2, values2 parameters (= value2 output), as well as items selected by types, keys, values parameters (= value output) and ratio of value2:value."));
    }
    
    
    @Test
    public void test_384() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/ratio/groupBy/boundary?" + 
                    "bboxes=8.65877%2C49.408%2C8.738%2C49.39099&" + 
                    "format=json&" + 
                    "keys=highway&" + 
                    "time=2012-07-14&" + 
                    "timeout=99&" + 
                    "values=street_lamp")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_385() throws Exception {
        
        given().accept("text/csv")
                .post(baseUrlOfSut + "/users/count/groupBy/type?" + 
                    "bboxes=yB%3A8.682%2C49.424705%2C8.7037%2C49.383&" + 
                    "format=csv&" + 
                    "keys=highway&" + 
                    "time=%2F%2FP5M26D&" + 
                    "timeout=94&" + 
                    "values=crossing")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_386() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/density?" + 
                    "bcircles=Qfy%3A8.712%2C49.421%2C15%7Ck%3A8.716%2C49.430%2C98&" + 
                    "format=geojson&" + 
                    "time=2008-04-05&" + 
                    "timeout=75")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_387() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/tag?" + 
                    "bboxes=8.663%2C49.416%2C8.722%2C49.397&" + 
                    "groupByKey=building&" + 
                    "groupByValues=ship&" + 
                    "keys=highway")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_388() throws Exception {
        
        given().accept("text/csv")
                .post(baseUrlOfSut + "/users/count/groupBy/type?" + 
                    "bcircles=s%3A8.701%2C49.429%2C71&" + 
                    "format=csv&" + 
                    "showMetadata=no&" + 
                    "time=%2F%2FP1Y23D&" + 
                    "timeout=44")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_389() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/density?" + 
                    "bcircles=Ky%3A8.72608%2C49.412%2C138%7CkHEjr%3A8.73364%2C49.403%2C7%7CPBR%3A8.708290%2C49.4378%2C94%7CuX%3A8.7061%2C49.410%2C8&" + 
                    "keys=highway&" + 
                    "showMetadata=false&" + 
                    "time=%2F%2FP5M12D")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_390() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/type?" + 
                    "bcircles=NsLRT%3A8.713%2C49.429573%2C4&" + 
                    "keys=highway&" + 
                    "showMetadata=yes&" + 
                    "timeout=25")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(434.0))
                .body("'metadata'.'description'", containsString("Number of distinct active users per time interval aggregated on the type."));
    }
    
    
    @Test
    public void test_391() throws Exception {
        
        given().accept("text/csv")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/type?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22CVr%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.744%2C49.427%5D%2C%5B8.727%2C49.417%5D%2C%5B8.70964%2C49.42521%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "format=csv&" + 
                    "keys=highway&" + 
                    "showMetadata=false&" + 
                    "time=2011-10-24&" + 
                    "timeout=68")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_392() throws Exception {
        
        given().accept("text/csv")
                .post(baseUrlOfSut + "/elements/perimeter/ratio/groupBy/boundary?" + 
                    "bboxes=8.693020%2C49.415%2C8.7417%2C49.38956&" + 
                    "format=csv&" + 
                    "keys=highway&" + 
                    "showMetadata=no&" + 
                    "values=steps")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_393() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/tag?" + 
                    "bpolys=HH%3A8.704561%2C49.403252%2C8.7155%2C49.4398%2C8.700%2C49.419%2C8.705512%2C49.41311%2C8.704561%2C49.403252&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=turning_circle%2Ccommercial%2Cpedestrian&" + 
                    "keys=highway")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_394() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/tag?" + 
                    "bboxes=8.6806%2C49.4017%2C8.735%2C49.382%7C8.685%2C49.408129%2C8.7072%2C49.390&" + 
                    "filter=network%21%3D*+and+id%3A%281+..+9999%29&" + 
                    "format=json&" + 
                    "groupByKey=highway&" + 
                    "time=2014-09-18")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'groupByResult'", hasItems());
    }
    
    
    @Test
    public void test_395() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/boundary?" + 
                    "bboxes=y%3A8.657%2C49.403682%2C8.7203%2C49.386%7Cq%3A8.6851%2C49.427760%2C8.7525%2C49.3812&" + 
                    "filter=smoothness%3D*+or+not+area%3A%281.0+..+1E6%29&" + 
                    "timeout=32")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_396() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/tag?" + 
                    "bcircles=8.7421%2C49.433%2C1%7C8.714%2C49.404%2C512%7C8.7437%2C49.433%2C6&" + 
                    "filter=tracktype%21%3D*+and+not+area%3A%281.0+..+1E6%29&" + 
                    "format=json&" + 
                    "groupByKey=building")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'groupByResult'", hasItems());
    }
    
    
    @Test
    public void test_397() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/key?" + 
                    "bcircles=tI%3A8.72123%2C49.415%2C98%7CnQhKH%3A8.731375%2C49.410%2C33&" + 
                    "format=geojson&" + 
                    "groupByKeys=highway&" + 
                    "keys=highway")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_398() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/type?" + 
                    "bcircles=Z%3A8.714%2C49.428%2C9&" + 
                    "filter=name%3D*+or+area%3A%281.0+..+1E6%29&" + 
                    "time=2013-03-07")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_399() throws Exception {
        
        given().accept("text/csv")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/boundary?" + 
                    "bboxes=wdoW%3A8.668949%2C49.423561%2C8.705682%2C49.394&" + 
                    "format=csv&" + 
                    "keys=highway&" + 
                    "showMetadata=true&" + 
                    "timeout=84")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_400() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/ratio?" + 
                    "bcircles=bXu%3A8.725%2C49.40527%2C5%7CiBCtL%3A8.732%2C49.423%2C2%7CFH%3A8.7002%2C49.401%2C91&" + 
                    "filter=foot%21%3D*+and+geometry%3Apolygon&" + 
                    "filter2=source%3Amaxspeed%21%3D*+or+not+type%3Anode+and+not+length%3A%28+..+100%29&" + 
                    "showMetadata=true&" + 
                    "time=2010-01-06&" + 
                    "timeout=88")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(685.0))
                .body("'metadata'.'description'", containsString("Total perimeter of items in meters satisfying types2, keys2, values2 parameters (= value2 output), as well as items selected by types, keys, values parameters (= value output) and ratio of value2:value."));
    }
    
    
    @Test
    public void test_401() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/type?" + 
                    "bboxes=8.671%2C49.404%2C8.726359%2C49.3901%7C8.652%2C49.4249%2C8.713%2C49.385&" + 
                    "filter=highway+in+%28secondary%2Cpath%2Cunclassified%2Ctrack%2Cprimary%2Cresidential%2Ccycleway%2Cservice%2Cfootway%29+or+geometry%3Apoint+and+not+area%3A%281.0+..+1E6%29&" + 
                    "time=%2F%2FP3Y2M1D&" + 
                    "timeout=71")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_402() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/boundary?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22OwJn%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.731%2C49.4246%5D%2C%5B8.704%2C49.4376%5D%2C%5B8.7044%2C49.4047%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "showMetadata=yes&" + 
                    "time=2008-03-09&" + 
                    "timeout=83")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(1158.0))
                .body("'metadata'.'description'", containsString("Total perimeter of items in meters."));
    }
    
    
    @Test
    public void test_403() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/boundary/groupBy/tag?" + 
                    "bboxes=8.65851%2C49.421%2C8.700413%2C49.3852%7C8.6973%2C49.410%2C8.714%2C49.3962%7C8.681%2C49.420%2C8.740%2C49.382&" + 
                    "filter=foot%3D*+and+type%3Away+and+area%3A%281.0+..+1E6%29&" + 
                    "groupByKey=building&" + 
                    "showMetadata=yes")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(79.0))
                .body("'metadata'.'description'", containsString("Total perimeter of items in meters, aggregated on the boundary and on the tag."));
    }
    
    
    @Test
    public void test_404() throws Exception {
        
        given().accept("text/csv")
                .post(baseUrlOfSut + "/elements/perimeter/ratio?" + 
                    "bcircles=8.749%2C49.423%2C6%7C8.7474%2C49.420%2C57&" + 
                    "format=csv&" + 
                    "keys=highway&" + 
                    "keys2=highway&" + 
                    "showMetadata=no&" + 
                    "timeout=62&" + 
                    "types2=point%2Cpolygon%2Cother&" + 
                    "values=service&" + 
                    "values2=pedestrian")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_405() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/ratio/groupBy/boundary?" + 
                    "bcircles=e%3A8.737%2C49.428%2C9&" + 
                    "filter=addr%3Ahousenumber%3D*+and+id%3A%281+..+9999%29&" + 
                    "filter2=tracktype%3D*&" + 
                    "format=geojson&" + 
                    "keys2=highway&" + 
                    "timeout=70&" + 
                    "values2=track")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'type'", containsString("FeatureCollection"));
    }
    
    
    @Test
    public void test_406() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/ratio/groupBy/boundary?" + 
                    "bboxes=8.654%2C49.41812%2C8.717636%2C49.384%7C8.659%2C49.40296%2C8.707%2C49.390%7C8.688%2C49.412%2C8.756%2C49.392%7C8.677%2C49.402%2C8.756%2C49.385&" + 
                    "keys=highway&" + 
                    "timeout=92&" + 
                    "types2=line%2Cpolygon%2Cother&" + 
                    "values=emergency_access_point")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_407() throws Exception {
        
        given().accept("text/csv")
                .post(baseUrlOfSut + "/users/count/groupBy/type?" + 
                    "bcircles=8.74718%2C49.413%2C14%7C8.729%2C49.426%2C452%7C8.7158%2C49.43422%2C9%7C8.71707%2C49.439437%2C350&" + 
                    "format=csv&" + 
                    "keys=highway&" + 
                    "showMetadata=false&" + 
                    "time=%2F%2FP7M14D&" + 
                    "values=street_lamp")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_408() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/groupBy/boundary?" + 
                    "bboxes=z%3A8.678%2C49.408%2C8.756%2C49.393&" + 
                    "bcircles=GoU%3A8.7323%2C49.400%2C799328731&" + 
                    "filter=type%3D*+or+length%3A%28+..+100%29&" + 
                    "format=json&" + 
                    "keys=highway&" + 
                    "timeout=43")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_409() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/density/groupBy/type?" + 
                    "format=geojson&" + 
                    "keys=highway&" + 
                    "time=%2F%2FP1Y7D&" + 
                    "timeout=77")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("You need to define one of the boundary parameters (bboxes, bcircles, bpolys)."));
    }
    
    
    @Test
    public void test_410() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/density/groupBy/type?" + 
                    "bboxes=Z%3A8.681%2C49.4106%2C8.75786%2C49.394%7Cw%3A8.68064%2C49.40668%2C8.70336%2C49.3855%7CW%3A8.6549%2C49.410780%2C8.713%2C49.3989&" + 
                    "bcircles=8.722%2C49.4070%2C6%7C8.743629%2C49.43189%2C17&" + 
                    "bpolys=f%3A8.704561%2C49.403252%2C8.735%2C49.430130%2C8.70415%2C49.42609%2C8.704569%2C49.4000%2C8.704561%2C49.403252%7COHI%3A8.704561%2C49.403252%2C8.741%2C49.405%2C8.710%2C49.409%2C8.708%2C49.406%2C8.704561%2C49.403252%7CoaKAm%3A8.704561%2C49.403252%2C8.714%2C49.421%2C8.720%2C49.409%2C8.722%2C49.407%2C8.704561%2C49.403252&" + 
                    "format=json&" + 
                    "keys=highway")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_411() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/density/groupBy/boundary?" + 
                    "bcircles=eFpV%3A8.705%2C49.413%2C3%7CnT%3A8.725%2C49.4388%2C4%7CacGDI%3A8.702672%2C49.410%2C3%7Ce%3A8.71625%2C49.400%2C52&" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22RHGl%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.72595%2C49.401%5D%2C%5B8.715%2C49.406588%5D%2C%5B8.708%2C49.412%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=destination%3D*+or+not+type%3Anode&" + 
                    "format=geojson&" + 
                    "keys=highway&" + 
                    "showMetadata=true")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_412() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/density?" + 
                    "bcircles=VDPaW%3A8.727%2C49.4324%2C98&" + 
                    "bpolys=V%3A8.704561%2C49.403252%2C8.731%2C49.4150%2C8.748%2C49.413%2C8.732%2C49.41548%2C8.704561%2C49.403252&" + 
                    "format=csv&" + 
                    "keys=highway&" + 
                    "values=street_lamp")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_413() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/density?" + 
                    "bboxes=BmC%3A8.678%2C49.4006%2C8.75228%2C49.398&" + 
                    "filter=barrier%21%3D*+and+not+length%3A%28+..+100%29&" + 
                    "format=csv&" + 
                    "keys=highway&" + 
                    "showMetadata=no&" + 
                    "time=%2F%2FP5M26D")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The keys, values and types parameters must be empty, when you set the filter parameter."));
    }
    
    
    @Test
    public void test_414() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count?" + 
                    "bboxes=p%3A8.662%2C49.41463%2C8.731%2C49.398%7Cg%3A8.6843%2C49.412%2C8.7121%2C49.3818&" + 
                    "bcircles=I%3A8.716%2C49.414%2C3&" + 
                    "bpolys=O%3A8.704561%2C49.403252%2C8.707%2C49.431%2C8.713%2C49.4267%2C8.70333%2C49.43421%2C8.704561%2C49.403252%7CFbN%3A8.704561%2C49.403252%2C8.714%2C49.4307%2C8.70452%2C49.402%2C8.709%2C49.427%2C8.704561%2C49.403252&" + 
                    "format=json&" + 
                    "keys=highway&" + 
                    "timeout=72&" + 
                    "values=tertiary")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_415() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count?" + 
                    "filter=natural%3Dwood+or+geometry%3Aline+or+area%3A%281.0+..+1E6%29&" + 
                    "format=json")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("You need to define one of the boundary parameters (bboxes, bcircles, bpolys)."));
    }
    
    
    @Test
    public void test_416() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/ratio/groupBy/boundary?" + 
                    "bcircles=y%3A8.741%2C49.414%2C4%7CG%3A8.7050%2C49.4097%2C8%7CQnUOM%3A8.700%2C49.437719%2C8%7CjJq%3A8.733%2C49.4056%2C8&" + 
                    "filter=addr%3Apostcode%21%3D*+and+length%3A%28+..+100%29&" + 
                    "showMetadata=true&" + 
                    "time=2013-07-03&" + 
                    "timeout=60&" + 
                    "types2=line%2Cpolygon%2C")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The filter2 parameter has to be defined when using a /ratio endpoint."));
    }
    
    
    @Test
    public void test_417() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/groupBy/type?" + 
                    "bboxes=SKAqS%3A8.663%2C49.415955%2C8.7460%2C49.392&" + 
                    "bcircles=xpuU%3A8.738%2C49.4314%2C50&" + 
                    "filter=turn%3Alanes%3D*+or+geometry%3Apoint&" + 
                    "keys=highway&" + 
                    "timeout=74&" + 
                    "values=service")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_418() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/tag?" + 
                    "filter=oneway%3D*+and+type%3Arelation+and+area%3A%281.0+..+1E6%29&" + 
                    "format=json&" + 
                    "groupByKey=building&" + 
                    "keys=highway&" + 
                    "timeout=84")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("You need to define one of the boundary parameters (bboxes, bcircles, bpolys)."));
    }
    
    
    @Test
    public void test_419() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/groupBy/tag?" + 
                    "bboxes=8.6811%2C49.4209%2C8.719%2C49.384&" + 
                    "bpolys=ff%3A8.704561%2C49.403252%2C8.7247%2C49.4061%2C8.717%2C49.42017%2C8.704%2C49.4032%2C8.704561%2C49.403252%7CQ%3A8.704561%2C49.403252%2C8.703%2C49.435032%2C8.720%2C49.402%2C8.700%2C49.4345%2C8.704561%2C49.403252&" + 
                    "filter=ref%21%3D*+or+type%3Arelation+and+id%3A%281+..+9999%29&" + 
                    "groupByKey=foo&" + 
                    "groupByValues=track&" + 
                    "keys=highway&" + 
                    "timeout=90&" + 
                    "values=cycleway")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_420() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/key?" + 
                    "bcircles=j%3A8.736%2C49.439641%2C710%7COd%3A8.724%2C49.4042%2C697%7CrpJHp%3A8.702%2C49.41678%2C8&" + 
                    "groupByKeys=evomaster_938_input&" + 
                    "keys=fqo&" + 
                    "time=evomaster_939_input&" + 
                    "types=eoo&" + 
                    "values=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Parameter 'types' (and 'types2') can only have 'node' and/or 'way' and/or 'relation' OR 'point' and/or 'line' and/or 'polygon' and/or 'other'"));
    }
    
    
    @Test
    public void test_421() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/groupBy/key?" + 
                    "bboxes=foo&" + 
                    "bpolys=8.704561%2C49.403252%2C8.736%2C49.4049%2C8.7234%2C49.408%2C8.710%2C49.4188%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.731411%2C49.416%2C8.7014%2C49.427%2C8.718%2C49.433%2C8.704561%2C49.403252&" + 
                    "groupByKeys=addr%3Acountry%2Chighway&" + 
                    "keys=highway&" + 
                    "time=foo&" + 
                    "timeout=100&" + 
                    "types=foo&" + 
                    "values=turning_circle")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_422() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/boundary/groupBy/tag?" + 
                    "filter=sidewalk%21%3D*&" + 
                    "groupByKey=foo&" + 
                    "timeout=65&" + 
                    "values=cycleway")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("You need to define one of the boundary parameters (bboxes, bcircles, bpolys)."));
    }
    
    
    @Test
    public void test_423() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/groupBy/boundary/groupBy/tag?" + 
                    "bboxes=d%3A8.692%2C49.428%2C8.755%2C49.384%7CIAY%3A8.675%2C49.421%2C8.728%2C49.396%7Cp%3A8.675%2C49.413%2C8.721%2C49.394%7CneM%3A8.676%2C49.406747%2C8.722%2C49.382662&" + 
                    "bcircles=Jg%3A8.7435%2C49.438664%2C1&" + 
                    "bpolys=K%3A8.704561%2C49.403252%2C8.747%2C49.4347%2C8.703%2C49.428%2C8.744%2C49.431%2C8.704561%2C49.403252%7CxrYb%3A8.704561%2C49.403252%2C8.730%2C49.417835%2C8.724%2C49.434%2C8.7195%2C49.4035%2C8.704561%2C49.403252&" + 
                    "filter=name%3D*+or+type%3Anode+or+not+length%3A%28+..+100%29&" + 
                    "format=geojson&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=unclassified&" + 
                    "keys=highway&" + 
                    "time=2012-02-05&" + 
                    "timeout=43")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_424() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/boundary?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22n%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.744902%2C49.416%5D%2C%5B8.7071%2C49.432%5D%2C%5B8.709%2C49.409%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "keys=highway&" + 
                    "time=foo&" + 
                    "timeout=63")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_425() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/groupBy/boundary?" + 
                    "bboxes=W%60&" + 
                    "bcircles=pPmWzRAu9&" + 
                    "bpolys=UWuxZ08NPAjn&" + 
                    "filter=VIQ&" + 
                    "time=evomaster_262Wimpu&" + 
                    "timeout=wp&" + 
                    "values=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_426() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/density/groupBy/type?" + 
                    "bboxes=8.675038%2C49.420%2C8.756%2C49.383%7C8.6670%2C49.4104%2C8.75316%2C49.384&" + 
                    "bpolys=qNy%3A8.704561%2C49.403252%2C8.714%2C49.414%2C8.7163%2C49.42860%2C8.733%2C49.432%2C8.704561%2C49.403252%7CxY%3A8.704561%2C49.403252%2C8.711%2C49.420%2C8.702424%2C49.4234%2C8.704292%2C49.415%2C8.704561%2C49.403252%7CBo%3A8.704561%2C49.403252%2C8.720%2C49.416%2C8.731259%2C49.40802%2C8.712%2C49.425%2C8.704561%2C49.403252&" + 
                    "filter=type%21%3D*+or+geometry%3Apoint&" + 
                    "keys=highway&" + 
                    "time=2008-11-04&" + 
                    "timeout=69")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_427() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/density/groupBy/type?" + 
                    "bboxes=U&" + 
                    "bcircles=4dW&" + 
                    "filter=JFuAyHnBccmGM&" + 
                    "types=0RnS0fwWuri0URd9")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_428() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/density/groupBy/tag?" + 
                    "bboxes=8.6578%2C49.429%2C8.7100%2C49.396%7C8.682%2C49.41555%2C8.7534%2C49.387&" + 
                    "bcircles=8.710%2C49.404014%2C6%7C8.716%2C49.41160%2C40&" + 
                    "filter=destination%21%3D*&" + 
                    "format=geojson&" + 
                    "groupByKey=foo&" + 
                    "groupByValues=residential&" + 
                    "keys=highway&" + 
                    "timeout=69&" + 
                    "values=footway")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_429() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/density/groupBy/tag?" + 
                    "bboxes=8.657%2C49.41750%2C8.720037%2C49.391&" + 
                    "bcircles=8.72299%2C49.408%2C5&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=stop%2Ccrossing%2Cgarage")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_430() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/density/groupBy/boundary/groupBy/tag?" + 
                    "bboxes=8.676137%2C49.410%2C8.7236%2C49.387%7C8.65673%2C49.412%2C8.754%2C49.392879&" + 
                    "bcircles=XX%3A8.7337%2C49.4126%2C9&" + 
                    "filter=addr%3Apostcode%21%3D*+and+length%3A%28+..+100%29&" + 
                    "groupByKey=building&" + 
                    "showMetadata=true&" + 
                    "time=2013-01-04&" + 
                    "timeout=49&" + 
                    "values=primary")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_431() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/density/groupBy/boundary/groupBy/tag?" + 
                    "bboxes=K%3A8.6547%2C49.4179%2C8.706%2C49.390&" + 
                    "bcircles=A%3A8.720628%2C49.423%2C8&" + 
                    "filter=highway%21%3D*+and+not+id%3A%281+..+9999%29&" + 
                    "format=geojson&" + 
                    "groupByKey=building&" + 
                    "groupByValues=track%2Cdormitory%2Chouse&" + 
                    "keys=highway&" + 
                    "showMetadata=no&" + 
                    "timeout=87")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_432() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/density/groupBy/boundary?" + 
                    "bpolys=zOYrK%3A8.704561%2C49.403252%2C8.708%2C49.4034%2C8.72415%2C49.439%2C8.704535%2C49.435%2C8.704561%2C49.403252&" + 
                    "filter=lanes%3Abackward%21%3D*&" + 
                    "format=geojson&" + 
                    "keys=highway")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The keys, values and types parameters must be empty, when you set the filter parameter."));
    }
    
    
    @Test
    public void test_433() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/density/groupBy/boundary?" + 
                    "bboxes=hAvgb%3A8.6707%2C49.429%2C8.734%2C49.3865%7Cn%3A8.6732%2C49.4067%2C8.712%2C49.3918&" + 
                    "bcircles=XE%3A8.728%2C49.420%2C5&" + 
                    "bpolys=aVyd%3A8.704561%2C49.403252%2C8.702%2C49.402%2C8.70462%2C49.407%2C8.7448%2C49.418%2C8.704561%2C49.403252%7Cn%3A8.704561%2C49.403252%2C8.73896%2C49.4254%2C8.723%2C49.436%2C8.702%2C49.437%2C8.704561%2C49.403252%7CxYm%3A8.704561%2C49.403252%2C8.7469%2C49.4005%2C8.704%2C49.439%2C8.71665%2C49.425%2C8.704561%2C49.403252&" + 
                    "filter=highway+in+%28secondary%2Cpath%2Cunclassified%2Ctrack%2Cprimary%2Cresidential%2Ccycleway%2Cservice%2Cfootway%29&" + 
                    "format=geojson&" + 
                    "keys=highway&" + 
                    "showMetadata=yes&" + 
                    "timeout=28&" + 
                    "values=platform")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_434() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/density?" + 
                    "bboxes=hsFgt%3A8.684%2C49.4232%2C8.70814%2C49.398&" + 
                    "bpolys=tk%3A8.704561%2C49.403252%2C8.746578%2C49.406%2C8.708%2C49.4207%2C8.7095%2C49.405%2C8.704561%2C49.403252%7CmC%3A8.704561%2C49.403252%2C8.747%2C49.41615%2C8.721%2C49.412%2C8.7044%2C49.418%2C8.704561%2C49.403252%7ChBdU%3A8.704561%2C49.403252%2C8.716%2C49.42759%2C8.707%2C49.4107%2C8.7049%2C49.40608%2C8.704561%2C49.403252&" + 
                    "format=json&" + 
                    "keys=highway&" + 
                    "showMetadata=false&" + 
                    "time=2016-01-01&" + 
                    "timeout=44")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_435() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/density?" + 
                    "bcircles=FL%3A8.712%2C49.414%2C9&" + 
                    "bpolys=Z%3A8.704561%2C49.403252%2C8.7161%2C49.4290%2C8.700%2C49.435%2C8.7169%2C49.403%2C8.704561%2C49.403252&" + 
                    "keys=highway&" + 
                    "showMetadata=false&" + 
                    "time=2007-10-22&" + 
                    "values=stop_line")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_436() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter?" + 
                    "bboxes=8.650%2C49.4265%2C8.74598%2C49.393%7C8.6691%2C49.402%2C8.7087%2C49.3968%7C8.696%2C49.403%2C8.719265%2C49.389%7C8.654%2C49.401%2C8.733%2C49.394&" + 
                    "bpolys=LojS%3A8.704561%2C49.403252%2C8.714%2C49.4187%2C8.719%2C49.4161%2C8.703%2C49.4272%2C8.704561%2C49.403252%7CK%3A8.704561%2C49.403252%2C8.718%2C49.414629%2C8.732%2C49.4007%2C8.70944%2C49.428%2C8.704561%2C49.403252&" + 
                    "filter=destination%3D*+or+not+type%3Away&" + 
                    "keys=highway&" + 
                    "showMetadata=true&" + 
                    "time=2016-05-01")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_437() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter?" + 
                    "bcircles=aY%3A8.701459%2C49.4180%2C853%7CQKUDu%3A8.723%2C49.435%2C91%7CeO%3A8.747848%2C49.43681%2C7&" + 
                    "bpolys=Nd%3A8.704561%2C49.403252%2C8.7285%2C49.4318%2C8.704595%2C49.40710%2C8.7207%2C49.430%2C8.704561%2C49.403252%7CB%3A8.704561%2C49.403252%2C8.708%2C49.424%2C8.7001%2C49.432%2C8.7426%2C49.429%2C8.704561%2C49.403252&" + 
                    "keys=highway&" + 
                    "time=2012-06-11")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_438() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/ratio/groupBy/boundary?" + 
                    "bcircles=B%3A8.709%2C49.40749%2C2&" + 
                    "filter=barrier%3D*+and+length%3A%28+..+100%29&" + 
                    "format=geojson&" + 
                    "showMetadata=true&" + 
                    "time=2012-06-01&" + 
                    "timeout=28")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The filter2 parameter has to be defined when using a /ratio endpoint."));
    }
    
    
    @Test
    public void test_439() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/ratio?" + 
                    "bcircles=yVkjz%3A8.72419%2C49.435%2C91%7CNxwoA%3A8.737%2C49.423%2C1%7Crz%3A8.738289%2C49.432%2C8%7Cy%3A8.7448%2C49.437391%2C305&" + 
                    "filter=landuse%21%3D*+or+geometry%3Aline&" + 
                    "format=json&" + 
                    "time=2011-08-04")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The filter2 parameter has to be defined when using a /ratio endpoint."));
    }
    
    
    @Test
    public void test_440() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/ratio?" + 
                    "bcircles=A%3A8.7143%2C49.413%2C4%7CwLNmp%3A8.726%2C49.4395%2C93&" + 
                    "filter=destination%21%3D*+and+id%3A%281+..+9999%29&" + 
                    "keys2=highway&" + 
                    "showMetadata=false&" + 
                    "timeout=55&" + 
                    "types2=node%2Cway%2Crelation")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The filter2 parameter has to be defined when using a /ratio endpoint."));
    }
    
    
    @Test
    public void test_441() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/type?" + 
                    "bcircles=TiuFC%3A8.739%2C49.400108%2C3%7ChG%3A8.70665%2C49.424%2C8&" + 
                    "time=foo&" + 
                    "values=street_lamp")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_442() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/tag?" + 
                    "bcircles=ht%3A8.72594%2C49.409%2C7%7CxK%3A8.70302%2C49.421%2C9&" + 
                    "filter=service%3Ddriveway+or+not+id%3A%281+..+9999%29&" + 
                    "format=csv&" + 
                    "groupByKey=building&" + 
                    "groupByValues=roof%2Cchapel&" + 
                    "showMetadata=false&" + 
                    "time=2009-05-22&" + 
                    "values=stop_line")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The keys, values and types parameters must be empty, when you set the filter parameter."));
    }
    
    
    @Test
    public void test_443() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/groupBy/tag?" + 
                    "bboxes=e%3A8.671%2C49.411%2C8.749%2C49.389&" + 
                    "bcircles=a%3A8.7261%2C49.4308%2C5%7CTPJ%3A8.740%2C49.410%2C50&" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22XL%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.725%2C49.429111%5D%2C%5B8.7117%2C49.416%5D%2C%5B8.7342%2C49.437%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "format=geojson&" + 
                    "groupByKey=foo&" + 
                    "groupByValues=speed_camera%2Cdormitory&" + 
                    "keys=highway&" + 
                    "time=2014-09-15&" + 
                    "timeout=67")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_444() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/key?" + 
                    "bcircles=dZ%3A8.728%2C49.4378%2C1%7CR%3A8.702451%2C49.435%2C6%7Cl%3A8.712118%2C49.41135%2C82&" + 
                    "format=foo&" + 
                    "groupByKeys=evomaster_215_input&" + 
                    "keys=highway&" + 
                    "time=foo&" + 
                    "values=speed_cYmera")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given 'format' parameter is invalid. Please choose between 'geojson'(only available for /groupBy/boundary and data extraction requests), 'json', or 'csv'."));
    }
    
    
    @Test
    public void test_445() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/groupBy/key?" + 
                    "bcircles=8.7461%2C49.406%2C82&" + 
                    "bpolys=yQvO%3A8.704561%2C49.403252%2C8.725%2C49.426%2C8.707%2C49.411876%2C8.7036%2C49.435%2C8.704561%2C49.403252&" + 
                    "format=geojson&" + 
                    "groupByKeys=name%2Csmoothness&" + 
                    "showMetadata=yes&" + 
                    "timeout=20")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_446() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/boundary/groupBy/tag?" + 
                    "bboxes=8.6807%2C49.4230%2C8.7324%2C49.388%7C8.6650%2C49.420804%2C8.747%2C49.382%7C8.671%2C49.41189%2C8.732%2C49.3867&" + 
                    "bcircles=8.731%2C49.4064%2C82%7C8.712%2C49.40548%2C79%7C8.73112%2C49.431%2C41%7C8.7401%2C49.41643%2C297226650&" + 
                    "bpolys=8.704561%2C49.403252%2C8.723%2C49.40841%2C8.733%2C49.40460%2C8.7255%2C49.424%2C8.704561%2C49.403252&" + 
                    "groupByKey=highway&" + 
                    "time=2011-10-21&" + 
                    "timeout=45&" + 
                    "values=stop_line")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_447() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/groupBy/boundary/groupBy/tag?" + 
                    "format=csv&" + 
                    "groupByKey=building&" + 
                    "groupByValues=house%2Ccrossing%2Cspeed_camera&" + 
                    "keys=highway&" + 
                    "showMetadata=no&" + 
                    "time=2009-07-12&" + 
                    "timeout=72")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("You need to define one of the boundary parameters (bboxes, bcircles, bpolys)."));
    }
    
    
    @Test
    public void test_448() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/boundary?" + 
                    "bboxes=ZnqBW%3A8.684%2C49.418016%2C8.7117%2C49.3953&" + 
                    "filter=landuse%3D*+or+geometry%3Apolygon&" + 
                    "showMetadata=yes&" + 
                    "time=2007-11-10&" + 
                    "timeout=56&" + 
                    "values=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The keys, values and types parameters must be empty, when you set the filter parameter."));
    }
    
    
    @Test
    public void test_449() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/groupBy/boundary?" + 
                    "bboxes=EZGW%3A8.676%2C49.412%2C8.7486%2C49.391%7CT%3A8.653384%2C49.425%2C8.755%2C49.3850%7CQDgfP%3A8.6931%2C49.404303%2C8.730569%2C49.389%7CQmect%3A8.6576%2C49.4206%2C8.748659%2C49.390672&" + 
                    "bcircles=8.7211%2C49.4055%2C380&" + 
                    "bpolys=8.704561%2C49.403252%2C8.745%2C49.4294%2C8.706%2C49.439%2C8.7110%2C49.423331%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.73679%2C49.428%2C8.702%2C49.405%2C8.701%2C49.408%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.735%2C49.431%2C8.7312%2C49.436%2C8.747%2C49.421717%2C8.704561%2C49.403252&" + 
                    "filter=foot%3D*+or+area%3A%281.0+..+1E6%29&" + 
                    "keys=highway&" + 
                    "showMetadata=yes&" + 
                    "time=2008-05-23&" + 
                    "values=crossing")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_450() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density/groupBy/type?" + 
                    "bcircles=ppjvI%3A8.714%2C49.4320%2C9&" + 
                    "bpolys=WHCij%3A8.704561%2C49.403252%2C8.727%2C49.4318%2C8.744979%2C49.432%2C8.7298%2C49.402%2C8.704561%2C49.403252&" + 
                    "format=json&" + 
                    "time=2017-03-06")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_451() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density/groupBy/tag?" + 
                    "bboxes=cZNum%3A8.685%2C49.4259%2C8.708%2C49.381%7Cjeh%3A8.690%2C49.41570%2C8.720187%2C49.391%7CUbn%3A8.653188%2C49.4008%2C8.734056%2C49.380%7CPN%3A8.678107%2C49.413%2C8.739%2C49.3841&" + 
                    "bpolys=keXJw%3A8.704561%2C49.403252%2C8.731%2C49.43617%2C8.706%2C49.420%2C8.7435%2C49.408%2C8.704561%2C49.403252%7CEI%3A8.704561%2C49.403252%2C8.736%2C49.4123%2C8.737%2C49.422%2C8.7309%2C49.42679%2C8.704561%2C49.403252%7CRQ%3A8.704561%2C49.403252%2C8.701%2C49.438%2C8.7042%2C49.418%2C8.700%2C49.411%2C8.704561%2C49.403252&" + 
                    "format=json&" + 
                    "groupByKey=highway&" + 
                    "showMetadata=true&" + 
                    "time=2017-11-23&" + 
                    "timeout=25&" + 
                    "values=platform")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_452() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/density/groupBy/tag?" + 
                    "bboxes=qr%3A8.695%2C49.415%2C8.7367%2C49.395%7CGZGf%3A8.66361%2C49.419%2C8.723%2C49.382&" + 
                    "bcircles=S%3A8.7446%2C49.4196%2C55%7CKO%3A8.723%2C49.438%2C1%7CEmr%3A8.7273%2C49.416%2C7&" + 
                    "bpolys=VRw%3A8.704561%2C49.403252%2C8.749902%2C49.4313%2C8.726%2C49.416%2C8.7404%2C49.420%2C8.704561%2C49.403252%7CzV%3A8.704561%2C49.403252%2C8.7162%2C49.431%2C8.7429%2C49.4023%2C8.7165%2C49.4104%2C8.704561%2C49.403252%7CY%3A8.704561%2C49.403252%2C8.724%2C49.411%2C8.702%2C49.437%2C8.712541%2C49.437%2C8.704561%2C49.403252&" + 
                    "filter=oneway%21%3D*+or+geometry%3Aline+or+length%3A%28+..+100%29&" + 
                    "format=json&" + 
                    "groupByKey=foo&" + 
                    "time=2011-06-30&" + 
                    "timeout=89")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_453() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/density/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=TRPgx%3A8.7142%2C49.40885%2C8&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=foo&" + 
                    "keys=hqighway&" + 
                    "time=foo&" + 
                    "timeout=93&" + 
                    "values=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_454() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density/groupBy/boundary?" + 
                    "bcircles=8.7273%2C49.4276%2C6%7C8.712%2C49.438%2C5&" + 
                    "filter=foo&" + 
                    "format=csv&" + 
                    "keys=highway&" + 
                    "time=2014-11-26&" + 
                    "types=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Parameter 'types' (and 'types2') can only have 'node' and/or 'way' and/or 'relation' OR 'point' and/or 'line' and/or 'polygon' and/or 'other'"));
    }
    
    
    @Test
    public void test_455() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/density/groupBy/boundary?" + 
                    "bboxes=I%3A8.687314%2C49.4018%2C8.713%2C49.3947&" + 
                    "bpolys=8.704561%2C49.403252%2C8.729%2C49.409%2C8.7020%2C49.435%2C8.721%2C49.42016%2C8.704561%2C49.403252&" + 
                    "filter=network%21%3D*+or+type%3Away+and+not+length%3A%28+..+100%29&" + 
                    "time=2015-02-19&" + 
                    "timeout=42")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_456() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density?" + 
                    "bboxes=5Usb1d6AVn&" + 
                    "filter=r9uMlUAjamdi&" + 
                    "keys=DGhmwd&" + 
                    "showMetadata=3Ak1c826y3DJLXSf&" + 
                    "time=zxhpJ5ysA")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_457() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length?" + 
                    "bboxes=NvD2e5b6dpzmi&" + 
                    "bpolys=W949QYtr&" + 
                    "keys=clgUqtgKSILFZ5&" + 
                    "showMetadata=b6zJ4JWT4dsukWBD&" + 
                    "time=fovhVOyDF384rTuB&" + 
                    "values=tUh1CHUIqI9")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_458() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length?" + 
                    "bboxes=8.664%2C49.424%2C8.7152%2C49.380&" + 
                    "bpolys=tx%3A8.704561%2C49.403252%2C8.70261%2C49.403985%2C8.708%2C49.41828%2C8.7127%2C49.4335%2C8.704561%2C49.403252&" + 
                    "filter=name%21%3D*+and+length%3A%28+..+100%29&" + 
                    "format=json&" + 
                    "time=2008-07-04")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_459() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/ratio/groupBy/boundary?" + 
                    "bboxes=I%3A8.658%2C49.424%2C8.757867%2C49.3830%7Cjdecr%3A8.67453%2C49.411155%2C8.700650%2C49.399&" + 
                    "filter=network%3D*+and+not+id%3A%281+..+9999%29&" + 
                    "filter2=name%21%3D*+or+type%3Away+and+id%3A%281+..+9999%29&" + 
                    "format=cst&" + 
                    "keys2=highway&" + 
                    "showMetadata=false&" + 
                    "types=foo&" + 
                    "types2=node%2Crelation")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given 'format' parameter is invalid. Please choose between 'geojson'(only available for /groupBy/boundary and data extraction requests), 'json', or 'csv'."));
    }
    
    
    @Test
    public void test_460() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/ratio?" + 
                    "bcircles=UuoZX%3A8.74051%2C49.435%2C284&" + 
                    "format=geojson&" + 
                    "showMetadata=no&" + 
                    "time=2012-03-30")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The filter2 parameter has to be defined when using a /ratio endpoint."));
    }
    
    
    @Test
    public void test_461() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/type?" + 
                    "bboxes=DsMpa%3A8.678%2C49.4247%2C8.731%2C49.3893%7CDkUCo%3A8.6580%2C49.4155%2C8.731%2C49.388142&" + 
                    "bcircles=8.710%2C49.4325%2C486&" + 
                    "bpolys=G%3A8.704561%2C49.403252%2C8.72539%2C49.4012%2C8.736%2C49.42233%2C8.70457%2C49.401169%2C8.704561%2C49.403252%7CsHCsS%3A8.704561%2C49.403252%2C8.741%2C49.4024%2C8.726713%2C49.420%2C8.7224%2C49.417%2C8.704561%2C49.403252%7CpthY%3A8.704561%2C49.403252%2C8.7424%2C49.402856%2C8.72277%2C49.40848%2C8.7049%2C49.4207%2C8.704561%2C49.403252&" + 
                    "filter=network%21%3D*+and+not+area%3A%281.0+..+1E6%29&" + 
                    "showMetadata=no&" + 
                    "time=2010-09-18&" + 
                    "timeout=62&" + 
                    "values=crossing")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_462() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/groupBy/type?" + 
                    "bcircles=foo&" + 
                    "bpolys=lDSS%3A8.704561%2C49.403252%2C8.743%2C49.402%2C8.709571%2C49.412%2C8.737%2C49.429%2C8.704561%2C49.403252%7CfPJ%3A8.704561%2C49.403252%2C8.728934%2C4%3B.4341%2C8.7358%2C49.43266%2C8.7152%2C49.412%2C8.704561%2C49.403252%7CEpq%3A8.704561%2C49.403252%2C8.7454%2C49.4238%2C8.705%2C49.429%2C8.702%2C49.4017%2C8.704561%2C49.403252&" + 
                    "showMetadata=foo&" + 
                    "time=2008-01-24&" + 
                    "types=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_463() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/tag?" + 
                    "bcircles=zo%3A8.739%2C49.424%2C5&" + 
                    "bpolys=n%3A8.704561%2C49.403252%2C8.7492%2C49.4378%2C8.730%2C49.433%2C8.74386%2C49.43383%2C8.704561%2C49.403252&" + 
                    "filter=foot%21%3D*+or+length%3A%28+..+100%29&" + 
                    "groupByKey=foo&" + 
                    "keys=highway&" + 
                    "showMetadata=yes&" + 
                    "time=2017-05-20&" + 
                    "timeout=39")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_464() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/groupBy/tag?" + 
                    "bcircles=8.7339%2C49.4284%2C80&" + 
                    "format=foo&" + 
                    "groupByKey=highway&" + 
                    "keys=highway&" + 
                    "showMetadata=false&" + 
                    "time=2016-%2F6-18&" + 
                    "timeout=49&" + 
                    "values=speed_camera")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given 'format' parameter is invalid. Please choose between 'geojson'(only available for /groupBy/boundary and data extraction requests), 'json', or 'csv'."));
    }
    
    
    @Test
    public void test_465() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/key?" + 
                    "bboxes=G%3A8.675841%2C49.428431%2C8.749%2C49.397&" + 
                    "bcircles=gwCKM%3A8.700533%2C49.437010%2C6%7Cd%3A8.731%2C49.420865%2C207&" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22HgBg%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.701%2C49.415%5D%2C%5B8.7042%2C49.418046%5D%2C%5B8.716%2C49.437%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22bVgi%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7202%2C49.425%5D%2C%5B8.71837%2C49.403%5D%2C%5B8.742%2C49.409%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=ref%21%3D*+and+not+id%3A%281+..+9999%29&" + 
                    "groupByKeys=type%2Csmoothness%2Clanduse&" + 
                    "keys=highway&" + 
                    "showMetadata=yes&" + 
                    "time=2012-07-25&" + 
                    "timeout=29&" + 
                    "values=secondary")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_466() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/groupBy/key?" + 
                    "bboxes=rwpnS%3A8.6727%2C49.4166%2C8.722%2C49.3801%7CHB%3A8.6541%2C49.42015%2C8.737490%2C49.386%7CRPTpg%3A8.659%2C49.418%2C8.7338%2C49.3902&" + 
                    "filter=oneway%21%3D*+and+not+type%3Away+and+not+id%3A%281+..+9999%29&" + 
                    "format=csv&" + 
                    "groupByKeys=turn%3Alanes%2Cfoot&" + 
                    "keys=highway&" + 
                    "showMetadata=no&" + 
                    "time=2014-03-20")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The keys, values and types parameters must be empty, when you set the filter parameter."));
    }
    
    
    @Test
    public void test_467() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=8.7374%2C49.427048%2C7&" + 
                    "filter=evomaster_199_input&" + 
                    "format=geojson&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=path%2Cfootway%2Cplatform&" + 
                    "showMetadata=yes&" + 
                    "time=foo&" + 
                    "timeout=28")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_468() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/boundary?" + 
                    "bcircles=meU%3A8.7167%2C49.4398%2C2%7COC%3A8.702%2C49.4368%2C68&" + 
                    "filter=foo&" + 
                    "keys=haghway&" + 
                    "showMetadata=no&" + 
                    "time=evokaster_50_input&" + 
                    "types=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Parameter 'types' (and 'types2') can only have 'node' and/or 'way' and/or 'relation' OR 'point' and/or 'line' and/or 'polygon' and/or 'other'"));
    }
    
    
    @Test
    public void test_469() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/groupBy/boundary?" + 
                    "bboxes=vcW%3A8.681%2C49.4002%2C8.727349%2C49.3841%7CEEULH%3A8.686607%2C49.415%2C8.749%2C49.387%7CZHEc%3A8.674893%2C49.406484%2C8.7064%2C49.391&" + 
                    "filter=ref%3D*+and+geometry%3Aline+or+id%3A%281+..+9999%29&" + 
                    "format=json&" + 
                    "showMetadata=no&" + 
                    "timeout=62&" + 
                    "values=path")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The keys, values and types parameters must be empty, when you set the filter parameter."));
    }
    
    
    @Test
    public void test_470() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/density/groupBy/type?" + 
                    "bboxes=EUkJd%3A8.692%2C49.405%2C8.75529%2C49.381%7CFe%3A8.66065%2C49.410%2C8.74405%2C49.398%7CJn%3A8.65713%2C49.404%2C8.712%2C49.382%7CD%3A8.673201%2C49.42704%2C8.733%2C49.397&" + 
                    "filter=barrier%3D*+or+area%3A%281.0+..+1E6%29&" + 
                    "format=json&" + 
                    "showMetadata=no&" + 
                    "values=service")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The keys, values and types parameters must be empty, when you set the filter parameter."));
    }
    
    
    @Test
    public void test_471() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/density/groupBy/type?" + 
                    "bboxes=8.673%2C49.402%2C8.743067%2C49.390%7C8.6522%2C49.400%2C8.759%2C49.3950&" + 
                    "bcircles=r%3A8.725549%2C49.410%2C4&" + 
                    "format=csv&" + 
                    "showMetadata=no&" + 
                    "time=2017-01-21&" + 
                    "values=primary_link")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_472() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/density/groupBy/tag?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22DIaY%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.74980%2C49.404%5D%2C%5B8.708%2C49.4269%5D%2C%5B8.70401%2C49.417%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=tracktype%3D*&" + 
                    "groupByKey=building&" + 
                    "keys=highway&" + 
                    "time=2008-08-31&" + 
                    "timeout=90")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The keys, values and types parameters must be empty, when you set the filter parameter."));
    }
    
    
    @Test
    public void test_473() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/density/groupBy/tag?" + 
                    "bboxes=D%3A8.652%2C49.429%2C8.7405%2C49.385%7CULiOA%3A8.66386%2C49.412%2C8.7571%2C49.3915&" + 
                    "format=geojson&" + 
                    "groupByKey=building&" + 
                    "timeout=55&" + 
                    "values=living_street")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("There cannot be more input values in the values|values2 than in the keys|keys2 parameter, as values_n must fit to keys_n."));
    }
    
    
    @Test
    public void test_474() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/density/groupBy/boundary/groupBy/tag?" + 
                    "bboxes=evomaster_859_input&" + 
                    "bcircles=foo&" + 
                    "filter=building%3D*+or+not+area%3A%281.0+..+1E6%29&" + 
                    "format=foo&" + 
                    "groupByKey=building&" + 
                    "time=2015-10-21")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_475() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/density/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=yy%3A8.702%2C49.4392%2C3&" + 
                    "groupByKey=building&" + 
                    "keys=highway&" + 
                    "types=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Parameter 'types' (and 'types2') can only have 'node' and/or 'way' and/or 'relation' OR 'point' and/or 'line' and/or 'polygon' and/or 'other'"));
    }
    
    
    @Test
    public void test_476() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/density/groupBy/boundary?" + 
                    "bcircles=YFa%3A8.705%2C49.415%2C504&" + 
                    "format=csv&" + 
                    "types=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Parameter 'types' (and 'types2') can only have 'node' and/or 'way' and/or 'relation' OR 'point' and/or 'line' and/or 'polygon' and/or 'other'"));
    }
    
    
    @Test
    public void test_477() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/density/groupBy/boundary?" + 
                    "bcircles=8.719%2C49.410%2C8%7C8.737%2C49.4081%2C9&" + 
                    "filter=sidewalk%21%3D*+and+not+id%3A%281+..+9999%29&" + 
                    "keys=highway&" + 
                    "showMetadata=yes&" + 
                    "time=2018-02-18&" + 
                    "values=primary")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The keys, values and types parameters must be empty, when you set the filter parameter."));
    }
    
    
    @Test
    public void test_478() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/density?" + 
                    "filter=evomaster_76_input&" + 
                    "format=geojson&" + 
                    "keys=evomaster_75_input&" + 
                    "showMetadata=foo&" + 
                    "time=foo&" + 
                    "timeout=94&" + 
                    "types=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("You need to define one of the boundary parameters (bboxes, bcircles, bpolys)."));
    }
    
    
    @Test
    public void test_479() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/density?" + 
                    "bboxes=KrS%3A8.65385%2C49.401%2C8.731147%2C49.3878&" + 
                    "bcircles=Pj%3A8.749%2C49.4270%2C2&" + 
                    "filter=addr%3Ahousenumber%21%3D*+and+not+length%3A%28+..+100%29&" + 
                    "format=csv&" + 
                    "keys=highway&" + 
                    "timeout=64")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_480() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count?" + 
                    "bcircles=rDk_MwfIn07uR&" + 
                    "bpolys=rUtoqJL&" + 
                    "filter=JN&" + 
                    "showMetadata=nDC5xRPEE&" + 
                    "timeout=MwC")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_481() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/ratio/groupBy/boundary?" + 
                    "bcircles=8.703938%2C49.405%2C8%7C8.703542%2C49.4209%2C68&" + 
                    "keys2=highway&" + 
                    "showMetadata=no&" + 
                    "time=2009-06-01&" + 
                    "values2=stop_line")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The filter2 parameter has to be defined when using a /ratio endpoint."));
    }
    
    
    @Test
    public void test_482() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/ratio/groupBy/boundary?" + 
                    "bcircles=8.7216%2C49.433743%2C7%7C8.733%2C49.408%2C7&" + 
                    "filter=sidewalk%21%3D*+and+geometry%3Aline+and+area%3A%281.0+..+1E6%29&" + 
                    "time=2018-03-10&" + 
                    "timeout=83")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The filter2 parameter has to be defined when using a /ratio endpoint."));
    }
    
    
    @Test
    public void test_483() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/ratio?" + 
                    "bboxes=Smy%3A8.67456%2C49.4016%2C8.745%2C49.392%7CRW%3A8.672%2C49.426%2C8.720%2C49.383%7CKZg%3A8.689%2C49.400%2C8.719076%2C49.391&" + 
                    "filter=lit%21%3D*+and+area%3A%281.0+..+1E6%29&" + 
                    "keys2=highway&" + 
                    "showMetadata=yes&" + 
                    "time=2013-08-31&" + 
                    "timeout=27&" + 
                    "values2=elevator")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The filter2 parameter has to be defined when using a /ratio endpoint."));
    }
    
    
    @Test
    public void test_484() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/ratio?" + 
                    "bcircles=V%3A8.70024%2C49.4170%2C8&" + 
                    "keys2=highway&" + 
                    "showMetadata=no&" + 
                    "time=2017-07-26&" + 
                    "timeout=97&" + 
                    "types2=node%2Cway%2Crelation&" + 
                    "values2=path")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The filter2 parameter has to be defined when using a /ratio endpoint."));
    }
    
    
    @Test
    public void test_485() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/type?" + 
                    "bboxes=8.6990%2C49.404%2C8.706%2C49.397&" + 
                    "bcircles=esF%3A8.747%2C49.410701%2C7%7CJ%3A8.703355%2C49.438%2C3%7Ciz%3A8.709%2C49.426321%2C1&" + 
                    "bpolys=8.704561%2C49.403252%2C8.704%2C49.428%2C8.713%2C49.433961%2C8.704%2C49.406060%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.706%2C49.4284%2C8.70458%2C49.430107%2C8.704567%2C49.4018%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.739%2C49.429%2C8.74904%2C49.416041%2C8.73889%2C49.425%2C8.704561%2C49.403252&" + 
                    "filter=name%21%3D*+and+id%3A%281+..+9999%29&" + 
                    "format=csv&" + 
                    "showMetadata=yes&" + 
                    "time=2011-06-09&" + 
                    "timeout=71")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_486() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/tag?" + 
                    "bboxes=F%3A8.65739%2C49.404667%2C8.707%2C49.392%7CA%3A8.689%2C49.426%2C8.717%2C49.389&" + 
                    "groupByKey=building&" + 
                    "showMetadata=no&" + 
                    "values=track")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("There cannot be more input values in the values|values2 than in the keys|keys2 parameter, as values_n must fit to keys_n."));
    }
    
    
    @Test
    public void test_487() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/tag?" + 
                    "bcircles=IQIy%3A8.7444%2C49.4135%2C9&" + 
                    "bpolys=8.704561%2C49.403252%2C8.733%2C49.400%2C8.7042%2C49.439%2C8.7053%2C49.4004%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.7401%2C49.4239%2C8.700%2C49.412%2C8.722%2C49.414%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.746504%2C49.4001%2C8.716%2C49.40264%2C8.704556%2C49.43624%2C8.704561%2C49.403252&" + 
                    "filter=lit%21%3D*+or+id%3A%281+..+9999%29&" + 
                    "format=geojson&" + 
                    "groupByKey=building&" + 
                    "groupByValues=elevator%2Cturning_circle&" + 
                    "keys=highway&" + 
                    "time=2010-04-25&" + 
                    "values=service")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_488() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/key?" + 
                    "bboxes=8.665%2C49.4000%2C8.70059%2C49.3822&" + 
                    "bcircles=E%3A8.7445%2C49.411%2C8&" + 
                    "bpolys=TRxF%3A8.704561%2C49.403252%2C8.7375%2C49.431%2C8.709433%2C49.42003%2C8.70216%2C49.424%2C8.704561%2C49.403252%7CW%3A8.704561%2C49.403252%2C8.732%2C49.408%2C8.704%2C49.402%2C8.7045%2C49.407%2C8.704561%2C49.403252%7CTS%3A8.704561%2C49.403252%2C8.732%2C49.422077%2C8.728%2C49.43552%2C8.708849%2C49.420%2C8.704561%2C49.403252&" + 
                    "filter=network%21%3D*+or+id%3A%281+..+9999%29&" + 
                    "groupByKeys=addr%3Ahousenumber%2Cturn%3Alanes&" + 
                    "keys=highway&" + 
                    "timeout=67")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_489() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=8.7326%2C49.410%2C3%7C8.733%2C49.4035%2C50&" + 
                    "bpolys=VBUtl%3A8.704561%2C49.403252%2C8.7327%2C49.418%2C8.724%2C49.413%2C8.708%2C49.431%2C8.704561%2C49.403252%7CnXI%3A8.704561%2C49.403252%2C8.716932%2C49.419%2C8.704299%2C49.43118%2C8.737%2C49.439%2C8.704561%2C49.403252%7Cm%3A8.704561%2C49.403252%2C8.7363%2C49.421%2C8.70416%2C49.419901%2C8.724%2C49.409%2C8.704561%2C49.403252&" + 
                    "filter=bicycle%3D*&" + 
                    "groupByKey=foo&" + 
                    "keys=highway&" + 
                    "timeout=32")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_490() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=Iq%3A8.729%2C49.400%2C7&" + 
                    "filter=building%3D*+and+not+id%3A%281+..+9999%29&" + 
                    "groupByKey=foo&" + 
                    "keys=highway&" + 
                    "showMetadata=no")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The keys, values and types parameters must be empty, when you set the filter parameter."));
    }
    
    
    @Test
    public void test_491() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/boundary?" + 
                    "bpolys=qZahL&" + 
                    "filter=rposovOHFhk3&" + 
                    "format=fIdIgilD&" + 
                    "time=iinthedSJZ&" + 
                    "timeout=s9ROGv&" + 
                    "values=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_492() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/boundary?" + 
                    "bcircles=T%3A8.742%2C49.433%2C89%7CRF%3A8.703%2C49.416%2C2%7CRStrZ%3A8.739%2C49.430%2C3%7CXK%3A8.706%2C49.43934%2C32&" + 
                    "bpolys=OO%3A8.704561%2C49.403252%2C8.728602%2C49.416%2C8.704%2C49.411%2C8.7272%2C49.426%2C8.704561%2C49.403252%7CmhR%3A8.704561%2C49.403252%2C8.7272%2C49.406778%2C8.7312%2C49.406133%2C8.74467%2C49.402%2C8.704561%2C49.403252&" + 
                    "filter=highway+in+%28secondary%2Cpath%2Cunclassified%2Ctrack%2Cprimary%2Cresidential%2Ccycleway%2Cservice%2Cfootway%29+or+not+area%3A%281.0+..+1E6%29&" + 
                    "timeout=37")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_493() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/density/groupBy/type?" + 
                    "bcircles=yCQTeAO5&" + 
                    "bpolys=IN&" + 
                    "format=&" + 
                    "keys=1MuQB")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_494() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/density/groupBy/tag?" + 
                    "bboxes=dBhpZ%3A8.6646%2C49.428%2C8.7048%2C49.3800&" + 
                    "bcircles=Nrnzk%3A8.7190%2C49.415%2C4&" + 
                    "bpolys=ze%3A8.704561%2C49.403252%2C8.7353%2C49.40583%2C8.733%2C49.406%2C8.710%2C49.4158%2C8.704561%2C49.403252%7Cj%3A8.704561%2C49.403252%2C8.744%2C49.412%2C8.700382%2C49.411%2C8.7059%2C49.41590%2C8.704561%2C49.403252&" + 
                    "filter=maxspeed%21%3D*&" + 
                    "groupByKey=foo&" + 
                    "keys=highway&" + 
                    "time=2013-10-25&" + 
                    "timeout=86&" + 
                    "values=primary")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_495() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=DYzJF%3A8.7329%2C49.4335%2C9&" + 
                    "filter=turn%21%3D*+or+length%3A%28+..+100%29&" + 
                    "format=csv&" + 
                    "groupByKey=foo&" + 
                    "groupByValues=primary_link&" + 
                    "keys=highway&" + 
                    "values=primary")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The keys, values and types parameters must be empty, when you set the filter parameter."));
    }
    
    
    @Test
    public void test_496() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/density/groupBy/boundary?" + 
                    "filter=4B&" + 
                    "keys=t86s&" + 
                    "showMetadata=ojnxt&" + 
                    "time=XHfJ&" + 
                    "values=a")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("You need to define one of the boundary parameters (bboxes, bcircles, bpolys)."));
    }
    
    
    @Test
    public void test_497() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density?" + 
                    "bboxes=8.69053%2C49.424%2C8.725659%2C49.381%7C8.656%2C49.41449%2C8.744%2C49.382&" + 
                    "bcircles=zBJ%3A8.729%2C49.4158%2C32&" + 
                    "format=csv&" + 
                    "keys=highway&" + 
                    "timeout=78&" + 
                    "values=stop_line")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_498() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area?" + 
                    "bboxes=bZ05NRDXfvLj&" + 
                    "bcircles=0U3K3C6A&" + 
                    "time=HsI&" + 
                    "timeout=m&" + 
                    "types=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_499() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/type?" + 
                    "bboxes=dxOyWEM&" + 
                    "bcircles=B0PYiEBHbeSw8&" + 
                    "bpolys=rSGB4NT3Bo&" + 
                    "format=7h2fIj2MrOki__DG&" + 
                    "keys=w5JsdlSBy1x0&" + 
                    "time=fynlIV1N&" + 
                    "timeout=q258Oz8u&" + 
                    "types=x7omZwxA")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/boundary?" + 
                    "bcircles=8.719231%2C49.428%2C7&" + 
                    "format=json&" + 
                    "showMetadata=false&" + 
                    "time=%2F%2FP2Y9M2D&" + 
                    "timeout=31&" + 
                    "values=food")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("There cannot be more input values in the values|values2 than in the keys|keys2 parameter, as values_n must fit to keys_n."));
    }
    
    
    @Test
    public void test_501() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/density/groupBy/boundary?" + 
                    "bcircles=A%3A8.711%2C73.549%2CU&" + 
                    "filter=KVk&" + 
                    "format=gfojson&" + 
                    "keys=gighway&" + 
                    "showMetadata=Jqo&" + 
                    "timeout=51&" + 
                    "types=foo&" + 
                    "values=primaryalink5")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Each bcircle must consist of a lon/lat coordinate pair plus a buffer in meters."));
    }
    
    
    @Test
    public void test_502() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/type?" + 
                    "bpolys=B&" + 
                    "keys=YGY54&" + 
                    "timeout=&" + 
                    "types=dBcoF20sStPxab%3C&" + 
                    "values=royYi_NMTccI")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_503() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/ratio/groupBy/boundary?" + 
                    "bboxes=x&" + 
                    "bcircles=RtZtymFD3ULir6M&" + 
                    "time=xMyN2jxpICK&" + 
                    "timeout=myr3TaeSkPGI6Y&" + 
                    "types=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_504() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/type?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22u%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordqnates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7241%2C49.412%5D%2C%5B8.702%2C49.406772%5D%2C%5B8.700%2C49.418%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22BK%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.744%2C49.425%5D%2C%5B8.702%2C49.410%5D%2C%5B8.705%2C49.4180%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22HVsns%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.721%2C49.427%5D%2C%5B8.7146%2C49.404%5D%2C%5B8.725%2C49.404%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "format=csv&" + 
                    "time=foo&" + 
                    "types=foo&" + 
                    "values=turning_circle")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided GeoJSON cannot be converted."));
    }
    
    
    @Test
    public void test_505() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/density/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=8.749%2C49.417%2C9&" + 
                    "format=csv&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=school%2Cfootway&" + 
                    "time=2012-08-13&" + 
                    "values=stop")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("There cannot be more input values in the values|values2 than in the keys|keys2 parameter, as values_n must fit to keys_n."));
    }
    
    
    @Test
    public void test_506() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/density/groupBy/type?" + 
                    "bcircles=URTU%3A-0020072%2C63.994%2CQ1%7CU%3A8.7UV827%2C%3AU.72U4U%2CQ&" + 
                    "filter=G6qma&" + 
                    "format=CSv&" + 
                    "keys=eromaster_6172_innu&" + 
                    "showMetadata=xrug&" + 
                    "time=20-7-04%2F16A&" + 
                    "types=G6qma")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Each bcircle must consist of a lon/lat coordinate pair plus a buffer in meters."));
    }
    
    
    @Test
    public void test_507() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count?" + 
                    "bpolys=HRvcQ%3A8.704561%2C49.403252%2C8.74918%2C49.43253%2C8.700%2C49.404071%2C8.722712%2C49.411%2C8-704561%2C49.403252&" + 
                    "filter=foo&" + 
                    "time=evomaster_2223_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The bpolys parameter must contain double-parseable values in form of lon/lat coordinate pairs."));
    }
    
    
    @Test
    public void test_508() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/groupBy/tag?" + 
                    "bboxes=BXvGQ%3A8.693%2C49.404%2C8.702%2C49.39528%7Cj%3A8.654%2C49.4211%2C8.7423%2C49.388%7CqWKra%3A8.650%2C49.418%2C8.725%2C49.386&" + 
                    "bpolys=yU%3A8.704561%2C49.403252%2C8.738%2C49.4363%2C8.706%2C49.435820%2C8.749%2C49.4251%2C8.704561%2C49.403252&" + 
                    "filter=maxspeed%21%3D*+and+not+length%3A%28+..+100%29&" + 
                    "format=json&" + 
                    "groupByKey=foo&" + 
                    "time=%2F%2FP3D&" + 
                    "timeout=99&" + 
                    "values=speed_camera")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_509() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/density/groupBy/type?" + 
                    "bcircles=zRTD%3A8.731832%2C09.409%2C11%7Cf%3A8.709817%2C69.62445%2C2&" + 
                    "bpolys=evomaster_7198_input&" + 
                    "filter=fo&" + 
                    "format=CSV&" + 
                    "keys=jon4&" + 
                    "showMetadata=true&" + 
                    "time=2017-04%2F&" + 
                    "types=Z")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_510() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/ratio?" + 
                    "bcircles=UFbIU%3A8.7461%2C49.436%2C5%7CZgUCP%3A8.742%2C49.412%2C126&" + 
                    "filter=maxspeed%3D*+and+not+area%3A%281.0+..+1E6%29&" + 
                    "format=json&" + 
                    "keys2=highway&" + 
                    "timeout=27&" + 
                    "types2=node%2Crelation&" + 
                    "values2=primary")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The filter2 parameter has to be defined when using a /ratio endpoint."));
    }
    
    
    @Test
    public void test_511() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/ratio?" + 
                    "bcircles=rw%3A8.7432%2C49.416%2C3&" + 
                    "filter=barrier%3D*+and+type%3Anode&" + 
                    "format=geojson&" + 
                    "keys2=highway&" + 
                    "time=2015-03-28&" + 
                    "types2=way%2Crelation")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The filter2 parameter has to be defined when using a /ratio endpoint."));
    }
    
    
    @Test
    public void test_512() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/groupBy/type?" + 
                    "bcircles=8.700%2C49.403%2C4%7C8.70075%2C49.436%2C1%7C8.747%2C49.4015%2C6%7C8.717%2C49.427260%2C23&" + 
                    "filter=evomaster_1849_input&" + 
                    "time=%2F%2FP1M%2CD&" + 
                    "values=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_513() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/density/groupBy/type?" + 
                    "bcircles=URTU%3A012.00%3A4%2C60.865%2CQ1%7CU%3A6.7UU817%2C%3AU.72U4Q%2CU&" + 
                    "format=evomaster_3755_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Each bcircle must consist of a lon/lat coordinate pair plus a buffer in meters."));
    }
    
    
    @Test
    public void test_514() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/density/groupBy/type?" + 
                    "bcircles=URTU%3A0%3A0.0072%2C83.834%2CQ1%7CU%3A8.7UU827%2C%3AU.72U4U%2CQ&" + 
                    "format=csv&" + 
                    "showMetadata=evomaster_12880_input&" + 
                    "time=20-7-04%2F16G&" + 
                    "values=fpe")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Each bcircle must consist of a lon/lat coordinate pair plus a buffer in meters."));
    }
    
    
    @Test
    public void test_515() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/density/groupBy/type?" + 
                    "bcircles=%5DRWW%3A042.00%3A6%2C77.934%2CU2%7CU%3A8S7UU827%2C%3AU.7TQ4U%2CQ&" + 
                    "filter=G6pmU&" + 
                    "format=evomaster_3755_input&" + 
                    "keys=evolaster_12171_knpu&" + 
                    "showMetadata=xosc&" + 
                    "types=ekoA")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Each bcircle must consist of a lon/lat coordinate pair plus a buffer in meters."));
    }
    
    
    @Test
    public void test_516() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/density/groupBy/tag?" + 
                    "bcircles=8.7040%2C49.438%2C8&" + 
                    "bpolys=B%3A8.704561%2C49.403252%2C8.723%2C49.418%2C8.7283%2C49.405%2C8.70849%2C49.4233%2C8.704561%2C49.403252%7CkD%3A8.704561%2C49.403252%2C8.7298%2C49.432001%2C8.70738%2C49.4388%2C8.70127%2C49.421%2C8.704561%2C49.403252%7COv%3A8.704561%2C49.403252%2C8.731%2C49.43388%2C8.705723%2C49.416%2C8.703793%2C49.433516%2C8.704561%2C49.403252&" + 
                    "filter=name%21%3D*+and+geometry%3Apolygon+or+area%3A%281.0+..+1E6%29&" + 
                    "format=geojson&" + 
                    "groupByKey=foo&" + 
                    "groupByValues=residential&" + 
                    "keys=highway&" + 
                    "showMetadata=no&" + 
                    "time=%2F%2FP7D&" + 
                    "values=crossing")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_517() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/density/groupBy/type?" + 
                    "bcircles=zRTD%3A8.412036%2C-9.409%2C11%7Cf%3A8.70U817%2C6%3B.62U45%2C2&" + 
                    "filter=boo_&" + 
                    "keys=eromakter_6173_inpu&" + 
                    "showMetadata=true&" + 
                    "time=2017-04%2F16")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Each bcircle must consist of a lon/lat coordinate pair plus a buffer in meters."));
    }
    
    
    @Test
    public void test_518() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/groupBy/key?" + 
                    "bcircles=8.709%2C09.4255%2C4&" + 
                    "filter=evomaster_14032_input&" + 
                    "groupByKeys=evomaster_14042_input&" + 
                    "keys=evomastera14027%5Binpu&" + 
                    "time=&" + 
                    "timeout=30&" + 
                    "values=foiq")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The keys, values and types parameters must be empty, when you set the filter parameter."));
    }
    
    
    @Test
    public void test_519() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/groupBy/type?" + 
                    "bcircles=8.700%2C49.403%2C4%7C8.70075%2C49.436%2C1%7C8.747%2C49.4015%2C6%7C8.717%2C49.427260%2C23&" + 
                    "filter=highway+in+%28secondary%2Cpath%2Cunclassified%2Ctrack%2Cprimary%2Cresidential%2Ccycleway%2Cservice%2Cfootway%29+and+area%3A%281.0+..+1E6%29&" + 
                    "format=geojson&" + 
                    "keys=higlsay&" + 
                    "showMetadata=no&" + 
                    "time=%2F0R1&" + 
                    "timeout=24")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_520() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/density/groupBy/type?" + 
                    "bcircles=zRTD%3A8.731832%2C49.409%2C11%7Cf%3A8.709817%2C49.42445%2C2&" + 
                    "filter=foo&" + 
                    "format=json&" + 
                    "keys=foo&" + 
                    "time=2018-04%2F16&" + 
                    "values=fpo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_521() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/groupBy/type?" + 
                    "bcircles=8.700%2C49.403%2C4%7C8.70075%2C39.836%2C0%7C8.746%2C49.4464%2C6%7C8.717%2C49.427250%2C23&" + 
                    "bpolys=&" + 
                    "filter=a&" + 
                    "keys=heglsan&" + 
                    "time=00&" + 
                    "timeout=8&" + 
                    "types=&" + 
                    "values=gqd")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_522() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/groupBy/type?" + 
                    "bpolys=%3A&" + 
                    "filter=WCRmJDa4l&" + 
                    "format=m&" + 
                    "keys=9aigY&" + 
                    "showMetadata=E%60&" + 
                    "time=f8ZFUZ0IovfQ8&" + 
                    "types=&" + 
                    "values=J%7Eax")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_523() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/ratio/groupBy/boundary?" + 
                    "bpolys=p%3A8.704561%2C49.403252%2C8.7319%2C49.412%2C8.70456%2C49.421%2C8.7045%2C49.421%2C8.704561%2C49.403252&" + 
                    "filter=foot%3D*+or+type%3Anode&" + 
                    "format=geojson&" + 
                    "keys2=highway&" + 
                    "showMetadata=no&" + 
                    "time=2011-10-13&" + 
                    "values2=platform")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The filter2 parameter has to be defined when using a /ratio endpoint."));
    }
    
    
    @Test
    public void test_524() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/key?" + 
                    "bcircles=UXuP%3A8.731%2C49.411%2C1&" + 
                    "format=json&" + 
                    "groupByKeys=landuse%2Cqef%2Clanes&" + 
                    "keys=highvay&" + 
                    "showMetadata=false&" + 
                    "time=2015-01-2%3B&" + 
                    "types=foo&" + 
                    "values=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Parameter 'types' (and 'types2') can only have 'node' and/or 'way' and/or 'relation' OR 'point' and/or 'line' and/or 'polygon' and/or 'other'"));
    }
    
    
    @Test
    public void test_525() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/density/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=TRPgx%3A8.7142%2C49.40885%2C&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=foo&" + 
                    "keys=hqighway&" + 
                    "time=foo&" + 
                    "timeout=93&" + 
                    "types=foo&" + 
                    "values=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_526() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/boundary?" + 
                    "bcircles=meU%3A8.7167%2C45.4398%2C2%7COC%3E8.702%2C49.4368%2C68&" + 
                    "format=csv&" + 
                    "keys=highway&" + 
                    "showMetadata=YeS&" + 
                    "time=evokaster_50_ilput&" + 
                    "values=j4TMz7")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_527() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density/groupBy/boundary/groupBy/tag?" + 
                    "bboxes=8.690%2C49.621771%2C8.7450%2C49.394&" + 
                    "bpolys=bof&" + 
                    "filter=fnm&" + 
                    "groupByKey=church%2Csteps%2Cstreet_lamp&" + 
                    "groupByValues=church%2Csteps%2Cstreet_lamp&" + 
                    "keys=cvomaster_322_input&" + 
                    "showMetadata=%7Cm&" + 
                    "time=k&" + 
                    "timeout=evomaster_1488_input&" + 
                    "types=foo&" + 
                    "values=evomaster_1487_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("You need to give one groupByKey parameter, if you want to use groupBy/tag."));
    }
    
    
    @Test
    public void test_528() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/density/groupBy/type?" + 
                    "bcircles=gRTD%3A2.652436%2C59.409%2C11%7CF%3A8.7098V7%2C97.62445%2C2&" + 
                    "filter=evomaster_6282_input&" + 
                    "keys=evomaster_6172_ivp&" + 
                    "types=Iz&" + 
                    "values=bpo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Each bcircle must consist of a lon/lat coordinate pair plus a buffer in meters."));
    }
    
    
    @Test
    public void test_529() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/density/groupBy/type?" + 
                    "bcircles=zRTD%3A46400036%2C59.809%2C11%7Cf%3A8.70U827%2C6U.62U39%2C2&" + 
                    "format=CSV&" + 
                    "keys=eromaster_6172_inpu&" + 
                    "showMetadata=xrug&" + 
                    "time=2017-04%2F16&" + 
                    "values=fpo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Each bcircle must consist of a lon/lat coordinate pair plus a buffer in meters."));
    }
    
    
    @Test
    public void test_530() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area?" + 
                    "bcircles=8.9%3A9%2C78.40352%2CU&" + 
                    "keys=gpm&" + 
                    "showMetadata=bop&" + 
                    "time=7.647UU9.428720&" + 
                    "values=9.727%2C49.42826%2CB")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Each bcircle must consist of a lon/lat coordinate pair plus a buffer in meters."));
    }
    
    
    @Test
    public void test_531() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/density/groupBy/type?" + 
                    "bcircles=%5DRUW%3A033.00%3A6%2C80.852%2CQ2%7CU%3A8S7UU807%2C%3AQ.7TQ4V%2CQ&" + 
                    "filter=K6qmU&" + 
                    "format=evomaster_3755_input&" + 
                    "keys=evolauter_12171_innu&" + 
                    "time=01%2F7%2F04%2F5%3Cx&" + 
                    "types=eooD%5B")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Each bcircle must consist of a lon/lat coordinate pair plus a buffer in meters."));
    }
    
    
    @Test
    public void test_532() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density/groupBy/tag?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22g%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7295%2C49.429%5D%2C%5B8.706%2C49.439%5D%2C%5B8.703387%2C49.4063%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22D%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polyion%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.702%2C49.4216%5D%2C%5B8.7031%2C49.4057%5D%2C%5B8.7080%2C49.429%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=R747TV3&" + 
                    "groupByKey=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22g%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7295%2C49.429%5D%2C%5B8.706%2C49.439%5D%2C%5B8.703387%2C49.4063%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22D%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polyion%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.702%2C49.4216%5D%2C%5B8.7031%2C49.4057%5D%2C%5B8.7080%2C49.429%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "groupByValues=4kjfF_XcmRh&" + 
                    "keys=foo&" + 
                    "time=evomaster_3207_input&" + 
                    "types=foo&" + 
                    "values=evomaster_14905_inpup")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("You need to give one groupByKey parameter, if you want to use groupBy/tag."));
    }
    
    
    @Test
    public void test_533() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/groupBy/tag?" + 
                    "bboxes=NArj%3A8.63146%2C49.4009*8.712%2C49.394&" + 
                    "format=foo&" + 
                    "groupByKey=builfimg&" + 
                    "groupByValues=dormitory%2Cresidential&" + 
                    "keys=highwayn&" + 
                    "showMetadata=urue&" + 
                    "time=foo&" + 
                    "types=fso&" + 
                    "values=stop_lin%60")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_534() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area?" + 
                    "bcircles=82%3A79%2C44.74706%2C8&" + 
                    "filter=fko&" + 
                    "time=8%2B647UU9.42852%2F&" + 
                    "timeout=56&" + 
                    "values=9.727%2C49.42846%2B")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_535() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/density/groupBy/type?" + 
                    "bcircles=zRTD%3A8.412036%2C-90419%2C11%7Cf%3A8.70U817%2C6%3B.62U45%2C2&" + 
                    "filter=bpo_&" + 
                    "format=CSV&" + 
                    "keys=eromakter_6173_inp&" + 
                    "showMetadata=true&" + 
                    "time=2017-04%2F16")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Each bcircle must consist of a lon/lat coordinate pair plus a buffer in meters."));
    }
    
    
    @Test
    public void test_536() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density/groupBy/boundary?" + 
                    "bboxes=HLvzQ%3A8.681898%2C49.407881%2C8.741%2C49.38993&" + 
                    "filter=foot%3D*+and+id%3A%281+..+9999%29&" + 
                    "format=jsov&" + 
                    "time=2007-12-02&" + 
                    "timeout=38&" + 
                    "types=foo&" + 
                    "values=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given 'format' parameter is invalid. Please choose between 'geojson'(only available for /groupBy/boundary and data extraction requests), 'json', or 'csv'."));
    }
    
    
    @Test
    public void test_537() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/groupBy/type?" + 
                    "bcircles=8.700%2C49.403%2C4%7C8.70075%2C37.836%2C0%7C8.746%2C49.4464%2C6%7C8.717%2C49.427250%2C23&" + 
                    "bpolys=&" + 
                    "filter=a&" + 
                    "format=geojson&" + 
                    "keys=heglsan&" + 
                    "time=%2F0&" + 
                    "timeout=4&" + 
                    "types=8.700%2C49.403%2C4%7C8.70075%2C37.836%2C0%7C8.746%2C49.4464%2C6%7C8.717%2C49.427250%2C23")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Parameter 'types' (and 'types2') cannot have more than 4 entries."));
    }
    
    
    @Test
    public void test_538() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density/groupBy/boundary/groupBy/tag?" + 
                    "bboxes=8.690%2C49.421771%2C8.7450%2C49.394&" + 
                    "format=json&" + 
                    "groupByKey=foo&" + 
                    "groupByValues=church%2Csteps%2Cstreet_lamp&" + 
                    "showMetadata=no&" + 
                    "time=2018-02-19&" + 
                    "timeout=23&" + 
                    "values=service")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("There cannot be more input values in the values|values2 than in the keys|keys2 parameter, as values_n must fit to keys_n."));
    }
    
    
    @Test
    public void test_539() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/key?" + 
                    "filter=landuse%3D*&" + 
                    "format=json&" + 
                    "groupByKeys=foo&" + 
                    "keys=highway&" + 
                    "timeout=60&" + 
                    "values=residential")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("You need to define one of the boundary parameters (bboxes, bcircles, bpolys)."));
    }
    
    
    @Test
    public void test_540() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count?" + 
                    "bpolys=HRvcQ%3A8.704561%2C49.403252%2C%3A.74918%2C49.43253%2C8.700%2C49.404071%2C8.722712%2C49.411%2C8.704561%2C49.40325&" + 
                    "filter=foo&" + 
                    "format=jor&" + 
                    "keys=fmo&" + 
                    "showMetadata=ooo&" + 
                    "time=hoo&" + 
                    "values=evomaster_3560_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_541() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=M%3A8.746%2C49.400%2C3%7CW%3A8.706%2C49.427%2C410&" + 
                    "filter=turn%21%3D*+and+not+geometry%3Apolygon+and+area%3A%281.0+..+1E6%29&" + 
                    "format=cs%7E&" + 
                    "groupByKey=evomaster_46_input&" + 
                    "groupByValues=church%2Cpedestrian%2Ctraffic_signals&" + 
                    "keys=foo&" + 
                    "showMetadata=foo&" + 
                    "time=foo&" + 
                    "types=foo&" + 
                    "values=secondary_link")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given parameter showMetadata can only contain the values 'true', 'yes', 'false', or 'no'."));
    }
    
    
    @Test
    public void test_542() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density/groupBy/tag?" + 
                    "bpolys=%7B%22type%22%3A%22FmatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22g%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7295%2C49.429%5D%2C%5B8.706%2C49.439%5D%2C%5B8.703387%2C49.4063%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22D%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polyion%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.702%2C49.4216%5D%2C%5B8.7031%2C49.4057%5D%2C%5B8.7080%2C49.429%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "groupByKey=evomaster_9644_input&" + 
                    "keys=foo&" + 
                    "showMetadata=yd%7B&" + 
                    "types=foo&" + 
                    "values=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given GeoJSON has to be of the type 'FeatureCollection'."));
    }
    
    
    @Test
    public void test_543() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/groupBy/key?" + 
                    "bcircles=8.709%2C49.4225%2C4&" + 
                    "filter=foo&" + 
                    "groupByKeys=Uoot%2CaUdr%3AstUeft%2CUmoothUUUU&" + 
                    "keys=highway&" + 
                    "time=%2F%2FP28Dk&" + 
                    "timeout=30")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The interval (period) of the provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_544() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/density?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22RGYv%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.730655%2C49.421041%5D%2C%5B8.747%2C49.418%5D%2C%5B8.7232%2C49.436%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22xBCG%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7454%2C49.410%5D%2C%5B8.73628%2C49.405759%5D%2C%5B8.745385%2C49.401506%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D&" + 
                    "filter=foo&" + 
                    "format=csv&" + 
                    "showMetadata=false&" + 
                    "time=2012-11-15&" + 
                    "timeout=93&" + 
                    "values=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in reading of the given GeoJSON."));
    }
    
    
    @Test
    public void test_545() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count?" + 
                    "bpolys=HRvcQ%3A8.704561%2C49.403252%2C8.74918%2C49.43253%2C8.700%2C49.404071%2C8.722712%2C49.411%2C8.704561%2C49.4%28325&" + 
                    "filter=foo&" + 
                    "format=foo&" + 
                    "keys=foo&" + 
                    "showMetadata=evomaster_2101_inpu&" + 
                    "types=foo&" + 
                    "values=ePgmaster_1937Uinpvt")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The bpolys parameter must contain double-parseable values in form of lon/lat coordinate pairs."));
    }
    
    
    @Test
    public void test_546() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/key?" + 
                    "bcircles=UXuP%3A8.731%2C49.411%2C1&" + 
                    "filter=service%3Ddriveway+and+type%3Away+and+length%3A%28+..+100%29&" + 
                    "format=json&" + 
                    "groupByKeys=landuse%2Cref%2Clanes&" + 
                    "keys=highvay&" + 
                    "showMetadata=false&" + 
                    "time=2015-01-2%3B&" + 
                    "values=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_547() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density/groupBy/type?" + 
                    "bpolys=8.704561%2C49.403252%2C8.727%2C49.413%2C8.72165%2C49.434%2C8.7440%2C49.438%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.7216%2C49.4130%2C8.7054%2C49.423%2C8.%2F21%2C49.4226%2C8.704561%2C49.403252&" + 
                    "keys=highwa&" + 
                    "time=2010-01-09&" + 
                    "timeout=99&" + 
                    "types=foo&" + 
                    "values=traffic_mirror")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The bpolys parameter must contain double-parseable values in form of lon/lat coordinate pairs."));
    }
    
    
    @Test
    public void test_548() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/density?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22wDB%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.719%2C49.42799%5D%2C%5B8.706%2C49.429669%5D%2C%5B8.748%2C49.416%5D%2C%5B8.7%2C4561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "format=csv&" + 
                    "keys=highway&" + 
                    "time=2012-08-21&" + 
                    "timeout=20&" + 
                    "values=stop_line")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided GeoJSON cannot be converted."));
    }
    
    
    @Test
    public void test_549() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/tag?" + 
                    "bboxes=Jv&" + 
                    "bcircles=QeAKgiye2xuchCFP&" + 
                    "bpolys=&" + 
                    "groupByKey=&" + 
                    "keys=nIdrhUcBE&" + 
                    "showMetadata=IsRg493xUS_z&" + 
                    "time=Ys4UNizDGCOT&" + 
                    "timeout=nKhgvXH0ionbiB&" + 
                    "types=XnjAfTRuA8LO1&" + 
                    "values=et3U")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_550() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/groupBy/type?" + 
                    "bcircles=8.700%2C49.403%2C4%7C8.70075%2C49.436%2C1%7C8.747%2C49%2F4015%2C6%7C8.717%2C49.427260%2C23&" + 
                    "filter=highway+in+%28secondary%2Cpath%2Cunclassified%2Ctrack%2Cprimary%2Cresidential%2Ccycleway%2Cservice%2Cfootway%29+and+area%3A%281.0+..+1E6%29&" + 
                    "showMetadata=kno&" + 
                    "time=%2F%2FP1M4D&" + 
                    "timeout=04&" + 
                    "types=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Each bcircle must consist of a lon/lat coordinate pair plus a buffer in meters."));
    }
    
    
    @Test
    public void test_551() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/ratio?" + 
                    "bboxes=RO%3A8.6751%2C49.412%2C8.7449%2C49.%2B95&" + 
                    "filter=bicycle%21%3D*+and+not+type%3Anode&" + 
                    "filter2=evomaster_1165_input&" + 
                    "format=foo&" + 
                    "keys=foo&" + 
                    "keys2=foo&" + 
                    "showMetadata=fEalswe&" + 
                    "time=foo&" + 
                    "values=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Apart from the custom ids, the bboxeses array must contain double-parseable values in the following order: minLon, minLat, maxLon, maxLat."));
    }
    
    
    @Test
    public void test_552() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/density/groupBy/type?" + 
                    "bcircles=URTU%3A020.0072%2C83.834%2CQ1%7CU%3A8.7UU827%2C%3AU.72U4U%2CQ&" + 
                    "format=cSV&" + 
                    "showMetadata=xrsg&" + 
                    "types=G6qma")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Each bcircle must consist of a lon/lat coordinate pair plus a buffer in meters."));
    }
    
    
    @Test
    public void test_553() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/density/groupBy/type?" + 
                    "bcircles=URTU%3A030.0072%2C83.834%2CQ1%7CU%3A8.7UU827%2C%3AU.72U4U%2CQ&" + 
                    "format=cSV&" + 
                    "showMetadata=xrsg&" + 
                    "time=20-7-04%2F16G")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Each bcircle must consist of a lon/lat coordinate pair plus a buffer in meters."));
    }
    
    
    @Test
    public void test_554() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/density/groupBy/type?" + 
                    "bcircles=%5DRUU%3A034.3096%2C83.933%2CQ1%7CU%3A8U7UU867%2C%3AS.72Q4U%2CQ&" + 
                    "filter=G6qm&" + 
                    "keys=evomaster_12171_input&" + 
                    "showMetadata=xrsg&" + 
                    "time=20-7-04%2F16G")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Each bcircle must consist of a lon/lat coordinate pair plus a buffer in meters."));
    }
    
    
    @Test
    public void test_555() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/groupBy/type?" + 
                    "bcircles=8.700%2C49.403%2C4%7C8.70075%2C49.436%2C1%7C8.747%2C49.4415%2C6%7C8.717%2C49.427250%2C23&" + 
                    "format=geojson&" + 
                    "keys=higlsay&" + 
                    "showMetadata=no&" + 
                    "time=%2F%2F&" + 
                    "timeout=94&" + 
                    "values=goi")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_556() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/boundary?types=8Jwn")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("You need to define one of the boundary parameters (bboxes, bcircles, bpolys)."));
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/boundary?" + 
                    "bboxes=58vVXdr&" + 
                    "bcircles=yWESfn9mUL6ldj6&" + 
                    "filter=3SQz&" + 
                    "keys=&" + 
                    "time=ge8d9pRtp8CZe&" + 
                    "types=YJ031x")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/boundary?" + 
                    "bboxes=yqm&" + 
                    "bcircles=P596TvInpshwW&" + 
                    "bpolys=9Jve209D&" + 
                    "filter=PTm2DA29k&" + 
                    "format=ZRCkCXlNLWs0&" + 
                    "time=R9BmrDS6&" + 
                    "timeout=Ejk9kNf&" + 
                    "values=eUcbJrcXK85gl")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/boundary?" + 
                    "bpolys=q1UUjHTL&" + 
                    "keys=uhtDDyN7&" + 
                    "showMetadata=j9z3Tl3m5RsAuA&" + 
                    "time=Hw6EVR&" + 
                    "timeout=rnn0oSbaVJYH&" + 
                    "values=q5NXDFw")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/boundary?" + 
                    "bboxes=PcE6HC80NeSBh&" + 
                    "bcircles=f2Jg0F0eVt&" + 
                    "filter=cX&" + 
                    "format=XxtbfHEsj0&" + 
                    "keys=T5&" + 
                    "showMetadata=E0ero9uK4siAq&" + 
                    "time=FQIhQr&" + 
                    "values=IPInLeR09x0Ee2")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/boundary?" + 
                    "bboxes=jE3i6rj4Xl&" + 
                    "keys=H3knopon6hRc_thr&" + 
                    "time=e5K6PalkE5_QWHXr&" + 
                    "timeout=sHKWlk0jLWDhYuhb&" + 
                    "types=H")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/boundary?" + 
                    "bboxes=LkjH&" + 
                    "bcircles=UslI7c&" + 
                    "bpolys=ucxJfRpc&" + 
                    "filter=FO&" + 
                    "keys=uEGplRwi0eX2lXW&" + 
                    "types=Jgm36X3lW6_oRXm&" + 
                    "values=M")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/boundary")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("You need to define one of the boundary parameters (bboxes, bcircles, bpolys)."));
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/boundary?" + 
                    "filter=H1Uig6JEi&" + 
                    "showMetadata=70nOEF4kleupp&" + 
                    "time=HU&" + 
                    "timeout=MBoMGzfu62nM&" + 
                    "types=AM_alKZ2zyfGA")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/groupBy/boundary?" + 
                    "bboxes=9vP0vtXG2VBJ&" + 
                    "showMetadata=9ZGRP&" + 
                    "time=uCrR&" + 
                    "timeout=e8m9cJ5Pl1TpN7C&" + 
                    "values=M")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_557() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/ratio/groupBy/boundary?" + 
                    "bpolys=aLa%3A8.704561%2C49.403252%2C8.7391%2C49.4179%2C8.707%2C49.419%2C8.700%2C49.405388%2C8.704561%2C49.403252&" + 
                    "filter=service%3Ddriveway+or+geometry%3Aline+and+id%3A%281+..+9999%29&" + 
                    "format=json&" + 
                    "keys2=highway&" + 
                    "time=2015-07-10&" + 
                    "timeout=41")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The filter2 parameter has to be defined when using a /ratio endpoint."));
    }
    
    
    @Test
    public void test_558() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/tag?" + 
                    "bboxes=8.650%2C49.40426%2C8.72626%2C49.394%7C8.674%2C49.4242%2C8.755%2C49.387364&" + 
                    "bcircles=j%3A8.727%2C49.433648%2C5%7CnD%3A8.731068%2C49.4274%2C3&" + 
                    "groupByKey=foo&" + 
                    "groupByValues=bus_stop%2Cconstruction%2Cgive_way&" + 
                    "keys=highway&" + 
                    "timeout=78&" + 
                    "values=track")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_559() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area?" + 
                    "bcircles=82%3A39%2C65.96902%2C8&" + 
                    "filter=fko&" + 
                    "time=8*647UU9%2F42852%2F&" + 
                    "timeout=96&" + 
                    "types=point%2C&" + 
                    "values=9.727%2C49.42846%2C")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_560() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area?" + 
                    "bcircles=82%3A39%2C65.96902%2C8&" + 
                    "filter=fko&" + 
                    "time=8*647UU9%2F42852%2Ff&" + 
                    "timeout=96&" + 
                    "types=point%2C&" + 
                    "values=9.727%2C49.42846%2B")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_561() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/ratio/groupBy/boundary?" + 
                    "filter=evomaster_170_input&" + 
                    "filter2=foo&" + 
                    "keys2=hig%60way&" + 
                    "showMetadata=noo&" + 
                    "time=evomaster_241_input&" + 
                    "timeout=414&" + 
                    "types=foo&" + 
                    "values=foo&" + 
                    "values2=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout is too long. It has to be shorter than 100.0 seconds"));
    }
    
    
    @Test
    public void test_562() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/ratio/groupBy/boundary?" + 
                    "bpolys=aLa%3A8.704561%2C49.403252%2C8.7391%2C49.4179%2C8.707%2C49.419%2C8.700%2C49.405388%2C8.704561%2C49.403252&" + 
                    "filter=evomaster_170_input&" + 
                    "keys2=highway&" + 
                    "time=2015-07-10&" + 
                    "timeout=41")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Invalid filter syntax. Please look at the additional info and examples about the filter parameter at https://docs.ohsome.org/ohsome-api. Detailed error message: line 1, column 20: whitespaces, EQUALS (=), NOT_EQUALS (!=) or in expected, EOF encountered."));
    }
    
    
    @Test
    public void test_563() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/density/groupBy/tag?" + 
                    "bboxes=0JvEqKu020iz&" + 
                    "bcircles=&" + 
                    "filter=pazi8&" + 
                    "format=3PCYeZfV7Dj&" + 
                    "groupByKey=kmRcUplajoQD8m&" + 
                    "groupByValues=6FBRo&" + 
                    "keys=JnaE5No&" + 
                    "showMetadata=xf&" + 
                    "values=p2IqHJ1LZVJy")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_564() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/ratio?" + 
                    "bcircles=khYikw&" + 
                    "filter2=bcnhc2oBjXm&" + 
                    "format=1D&" + 
                    "keys=jbnnThKK&" + 
                    "time=BcnB&" + 
                    "types=S&" + 
                    "types2=7KUu")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_565() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density/groupBy/tag?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22g%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7295%2C49.429%5D%2C%5B8.706%2C49.439%5D%2C%5B8.703387%2C49.4063%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22D%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polyhon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.702%2C49.4216%5D%2C%5B8.7031%2C49.4057%5D%2C%5B8.7080%2C49.429%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=network%21%3D*+or+geometry%3Apoint+and+id%3A%281+..+9999%29&" + 
                    "groupByKey=evomaster_146_inp&" + 
                    "groupByValues=secondary_link%2Ccivic&" + 
                    "keys=fok&" + 
                    "time=2014-11-05")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The geometry of each feature in the GeoJSON has to be of type 'Polygon' or 'MultiPolygon'."));
    }
    
    
    @Test
    public void test_566() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/groupBy/type?" + 
                    "bcircles=8.700%2C49.403%2C4%7C8.70075%2C49.436%2C1%7C8.747%2C49.4015%2C6%7C8.717%2C49.427260%2C23&" + 
                    "filter=highway+in+%28secondary%2Cpath%2Cunclassified%2Ctrack%2Cprimary%2Cresidential%2Ccycleway%2Cservice%2Cfootway%29+and+area%3A%281.0+..+1E6%29&" + 
                    "format=geojson&" + 
                    "keys=highway&" + 
                    "showMetadata=no&" + 
                    "time=%2F%2FP1M4D&" + 
                    "timeout=24")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The keys, values and types parameters must be empty, when you set the filter parameter."));
    }
    
    
    @Test
    public void test_567() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/density/groupBy/tag?" + 
                    "bpolys=PqPPGl3M9Bu6Al&" + 
                    "filter=ati5Sj_uE84Z5fg&" + 
                    "format=q9rG2ZH0yv79&" + 
                    "groupByKey=YEVaIBF8r8GXhf&" + 
                    "keys=H&" + 
                    "time=tAOoDkuU")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_568() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/density/groupBy/type?" + 
                    "bcircles=URTU%3A-00.0072%2C83.994%2CQ1%7CU%3A8.7UV827%2C%3AU.72U4U%2CQ&" + 
                    "keys=eromaster_6172_innu&" + 
                    "showMetadata=xrug")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Each bcircle must consist of a lon/lat coordinate pair plus a buffer in meters."));
    }
    
    
    @Test
    public void test_569() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/density/groupBy/type?" + 
                    "bcircles=URTU%3A4.200072%2C77.800%2CU1%7Cf%3A8.7UU827%2C2%3B.72U45%2C2&" + 
                    "filter=bwoW&" + 
                    "keys=eromaster_6172_innu&" + 
                    "showMetadata=xrug&" + 
                    "time=20%297-04%2F16")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Each bcircle must consist of a lon/lat coordinate pair plus a buffer in meters."));
    }
    
    
    @Test
    public void test_570() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/ratio?" + 
                    "bcircles=UwfUv%3A8.702%2C49.40407%2C6&" + 
                    "filter=turn%3Alanes%21%3D*+and+length%3A%28+..+100%29&" + 
                    "format=geojson&" + 
                    "keys2=highway&" + 
                    "time=2013-02-21&" + 
                    "types2=node%2Crelation")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The filter2 parameter has to be defined when using a /ratio endpoint."));
    }
    
    
    @Test
    public void test_571() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/density/groupBy/type?" + 
                    "bcircles=URTU%3A40200072%2C77.840%2CU1%7Cf%3A8.7UU827%2C2%3B.72U45%2C2&" + 
                    "filter=bvoW&" + 
                    "keys=eromaster_6172_innu&" + 
                    "showMetadata=xrug&" + 
                    "types=G6qma&" + 
                    "values=fpi")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Each bcircle must consist of a lon/lat coordinate pair plus a buffer in meters."));
    }
    
    
    @Test
    public void test_572() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/key?" + 
                    "bpolys=8.704561%2C49.403252%2C8.74225%2C49.4259%2C8.71165%2C49.431%2C8.704%2C49.42983%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.727%2C49.407%2C8.719%2C49.421%2C8.707%2C49.423921%2C8.704561%2C49.40325&" + 
                    "groupByKeys=network.type%2Clanes%3Afotwar&" + 
                    "keys=fo&" + 
                    "showMetadata=foo&" + 
                    "types=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given parameter showMetadata can only contain the values 'true', 'yes', 'false', or 'no'."));
    }
    
    
    @Test
    public void test_573() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/boundary?" + 
                    "bcircles=meU%3A8.7167%2C45.4398%2C2%7COC%3A8.702%2C49.4368%2C68&" + 
                    "format=Csv&" + 
                    "time=evokaster_50_ilput&" + 
                    "values=j4TMz7")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_574() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/key?" + 
                    "bcircles=j%3A8.736%2C49.439641%2C710%7COd%3A8.724%2C47.4042%2C697%7CrpJHp%3A8.702%2C49.41678%2C8&" + 
                    "filter=evomaster_4253_input&" + 
                    "format=geojsonD&" + 
                    "groupByKeys=sTYF3&" + 
                    "keys=foo&" + 
                    "showMetadata=no&" + 
                    "time=e86czqJaUWQJE7F&" + 
                    "types=fop")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_575() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/groupBy/type?" + 
                    "bcircles=8.700%2C49.403%2C4%7C8.70075%2C69.436%2C1%7C8.747%2C49.4015%2C6%7C8.717%2C49.427260%2C23&" + 
                    "filter=evomaster_9539_input&" + 
                    "showMetadata=n&" + 
                    "timeout=24")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_576() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/key?" + 
                    "bpolys=8.704561%2C49.403252%2C8.707917%2C49.42540%2C8.708%2C09.40687%2C8.7053%2C49.410%2C8.704561%2C49.40325&" + 
                    "filter=foog&" + 
                    "format=b&" + 
                    "groupByKeys=evsmaster_2746_input&" + 
                    "keys=hlghway&" + 
                    "showMetadata=gy&" + 
                    "time=%2F%2FO7M2%3E")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_577() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/groupBy/tag?" + 
                    "bboxes=NArj%3A8.63146%2C49.4009%2C8.712%2C49.394&" + 
                    "format=foo&" + 
                    "groupByKey=builfimg&" + 
                    "groupByValues=dormitory%2Cresidential&" + 
                    "keys=highwayn&" + 
                    "showMetadata=urue&" + 
                    "time=foo&" + 
                    "types=fso&" + 
                    "values=stop_lin%60")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_578() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/ratio?" + 
                    "bboxes=RO%3A8.6751%2C49.414%2C8.6449%2C49.385&" + 
                    "filter=bicycle%21%3D*+and+not+type%3Anode&" + 
                    "filter2=foo&" + 
                    "showMetadata=false")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_579() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/ratio?" + 
                    "bcircles=8.714%2C49.4249%2C62&" + 
                    "filter2=foo&" + 
                    "keys=highway&" + 
                    "keys2=fighway&" + 
                    "time=4016-09-13&" + 
                    "timeout=86&" + 
                    "values=primary_link&" + 
                    "values2=rertiaru")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The given time parameter is not completely within the timeframe (2007-10-07 to 2018-05-10T"));
    }
    
    
    @Test
    public void test_580() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count?" + 
                    "bpolys=HRvcQ%3A8.704561%2C49.403252%2C8.74918%2C49.43253%2C8.700%2C49.404071%2C8.722712%2C49.411%2C8.704561%2C89.40325&" + 
                    "filter=foo&" + 
                    "format=evomaster_3156_input&" + 
                    "showMetadata=ooo&" + 
                    "time=hoo&" + 
                    "values=Vu")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_581() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/boundary?" + 
                    "bboxes=ZnqBW%3A8.684%2C49.418016%2C8.7117%2C49.3953&" + 
                    "filter=landuse%3D*+or+geometry%3Apolygon&" + 
                    "showMetadata=yes&" + 
                    "time=2006-11-10&" + 
                    "values=foo")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The given time parameter is not completely within the timeframe (2007-10-07 to 2018-05-10T"));
    }
    
    
    @Test
    public void test_582() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/density/groupBy/type?" + 
                    "bcircles=zRTD%3A8.731832%2C490409%2C11%7Cf%3A8.709817%2C69.62445%2C2&" + 
                    "keys=joo5&" + 
                    "showMetadata=true&" + 
                    "types=evomaster_3761_input")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_583() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/density/groupBy/type?" + 
                    "bcircles=zRTD%3A8.731832%2C49.409%2C11%7Cf%3A8.709817%2C69.62445%2C2&" + 
                    "format=CSV&" + 
                    "keys=joo&" + 
                    "types=evomaster_3761_input")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_584() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/ratio?" + 
                    "bcircles=UuoZX%3A8.74051%2C49.435%2C284&" + 
                    "filter=fok&" + 
                    "keys=foo&" + 
                    "keys2=fmo&" + 
                    "showMetadata=no&" + 
                    "time=6012-01-30&" + 
                    "values2=fom")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The given time parameter is not completely within the timeframe (2007-10-07 to 2018-05-10T"));
    }
    
    
    @Test
    public void test_585() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density/groupBy/boundary/groupBy/tag?" + 
                    "bboxes=8.690%2C49.421771%2C8.7450%2C49.494&" + 
                    "groupByKey=evomaster_89_input&" + 
                    "showMetadata=no&" + 
                    "time=2018-02-19&" + 
                    "timeout=23")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_586() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/density/groupBy/type?" + 
                    "bcircles=zRTD%3A8.731832%2C59.409%2C11%7Cf%3A8.709817%2C67.62445%2C2&" + 
                    "filter=foo&" + 
                    "format=CSV&" + 
                    "keys=jog5&" + 
                    "showMetadata=true&" + 
                    "time=2017-04%2F16&" + 
                    "values=fpo")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_587() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count?" + 
                    "bpolys=HRvcQ%3A8.704561%2C49.403252%2C8.74918%2C49.43253%2C8.700%2C49.404071%2C8.722712%2C49.411%2C8.704561%2C49.40325&" + 
                    "filter=foo&" + 
                    "format=foo&" + 
                    "time=foo&" + 
                    "types=foo")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_588() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/groupBy/type?" + 
                    "bcircles=8.700%2C49.403%2C4%7C8.70075%2C39.836%2C0%7C8.746%2C49.4464%2C6%7C8.717%2C49.423250%2C23&" + 
                    "bpolys=&" + 
                    "format=geojson&" + 
                    "timeout=8")
                .then()
                .statusCode(413)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(413.0))
                .body("'message'", containsString("The given query is too large in respect to the given timeout. Please use a smaller region and/or coarser time period."));
    }


}
