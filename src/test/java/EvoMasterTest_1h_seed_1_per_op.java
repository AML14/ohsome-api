import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.controller.api.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import static org.evomaster.client.java.controller.db.dsl.SqlDsl.sql;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto;
import  java.util.List;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
 * This file was automatically generated by EvoMaster on 2020-11-24T17:47:13.665+01:00[Europe/Paris]
 * <br>
 * The generated test suite contains 336 tests
 * <br>
 * Covered targets: 5715
 * <br>
 * Used time: 1h 0m 0s
 * <br>
 * Needed budget for current results: 99%
 * <br>
 * 
 */
public class EvoMasterTest_1h_seed_1_per_op {

    
    private static final SutHandler controller = new org.heigit.ohsome.ohsomeapi.EMDriver();
    private static String baseUrlOfSut;
    
    
    @BeforeClass
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    @AfterClass
    public static void tearDown() {
        controller.stopSut();
    }
    
    
    @Before
    public void initTest() {
        controller.resetStateOfSUT();
    }
    
    
    
    
    @Test
    public void test_0() throws Exception {
        
        try{
            given().accept("*/*")
                    .get(baseUrlOfSut + "/users/count/groupBy/boundary?" + 
                        "bpolys=ibDLR%3A8.704561%2C49.403252%2C8.702%2C49.422%2C8.7233%2C49.4396%2C8.7340%2C49.434%2C8.704561%2C49.403252&" + 
                        "format=json&" + 
                        "timeout=91")
                    .then();
        } catch(Exception e){
        }
    }
    
    
    @Test
    public void test_1() throws Exception {
        
        try{
            given().accept("*/*")
                    .get(baseUrlOfSut + "/users/count/density/groupBy/type?" + 
                        "bcircles=OH%3A8.740%2C49.4137%2C90%7CR%3A8.716%2C49.431%2C8%7CqC%3A8.728%2C49.433%2C26&" + 
                        "format=json")
                    .then();
        } catch(Exception e){
        }
    }
    
    
    @Test
    public void test_2() throws Exception {
        
        try{
            given().accept("*/*")
                    .get(baseUrlOfSut + "/elements/area/ratio?" + 
                        "bboxes=iP%3A8.665%2C49.424%2C8.7015%2C49.384%7CodTOM%3A8.67127%2C49.416%2C8.7350%2C49.3839&" + 
                        "filter2=ref%21%3D*+and+area%3A%281.0+..+1E6%29&" + 
                        "format=json&" + 
                        "keys2=foo&" + 
                        "timeout=45&" + 
                        "types2=point%2C")
                    .then();
        } catch(Exception e){
        }
    }
    
    
    @Test
    public void test_3() throws Exception {
        
        try{
            given().accept("*/*")
                    .post(baseUrlOfSut + "/users/count/groupBy/key?" + 
                        "bboxes=y%3A8.6920%2C49.4204%2C8.715682%2C49.3990%7Cs%3A8.6786%2C49.4077%2C8.7004%2C49.3916%7Cu%3A8.650%2C49.424818%2C8.72764%2C49.3972%7CB%3A8.657%2C49.4069%2C8.736%2C49.393&" + 
                        "format=csv&" + 
                        "groupByKeys=oneway%2Clanes%2Cdestination&" + 
                        "time=%2F%2FP3M4D&" + 
                        "timeout=49")
                    .then();
        } catch(Exception e){
        }
    }
    
    
    @Test
    public void test_4_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/boundary?" + 
                    "bcircles=E%3A%2B210.%3A%3A%2C56.4.10%2C%40%7CJBc%3A8.709619%2C29.484%2C0&" + 
                    "filter=evolastera29446_inpu&" + 
                    "keys=zr&" + 
                    "showMetadata=iMCXUIoR1&" + 
                    "timeout=-20061.753135&" + 
                    "values=aRvR16xMdZVD1uyV")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_114_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/users/count/groupBy/boundary"));
    }
    
    
    @Test
    public void test_5_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/density/groupBy/tag?" + 
                    "bcircles=daVZ%3A8.715256%2C49.410%2C4%7COUzYX%3A8.709%2C49.402%2C2%7Cm%3A8.732020%2C49.401%2C70%7Cg%3A8.7302%2C49.413%2C1580058951&" + 
                    "groupByKey=building&" + 
                    "groupByValues=yes%2Cchurch%2Chospital&" + 
                    "showMetadata=no&" + 
                    "time=%2F%2FP1Y2M5D")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El Ã¡ngulo 417.667.689.776.152.600.000 es demasiado grande."))
                .body("'path'", containsString("/users/count/density/groupBy/tag"));
    }
    
    
    @Test
    public void test_6_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/density/groupBy/boundary?" + 
                    "bpolys=sYUh%3A8.704561%2C49.403252%2C8.730%2C49.4269%2C8.7334%2C49.43417%2C8.7045%2C49.424065%2C8.704561%2C49.403252%7CP%3A8.704561%2C49.403252%2C8.7338%2C49.432%2C8.704%2C49.4143%2C8.746%2C49.423913%2C8.704561%2C49.403252%7CjlH%3A8.704561%2C49.403252%2C8.73481%2C49.4282%2C8.704%2C49.412%2C8.704561%2C49.434749%2C8.704561%2C49.403252&" + 
                    "filter=ref%21%3D*+or+type%3Arelation+and+area%3A%281.0+..+1E6%29&" + 
                    "showMetadata=yes&" + 
                    "timeout=78")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.73 49.4269 ) and LINESTRING ( 8.7045 49.424065, 8.704561 49.403252 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/users/count/density/groupBy/boundary"));
    }
    
    
    @Test
    public void test_7_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/density/groupBy/type?" + 
                    "bcircles=e%3A8.70.6%2C49.40026%2C3%7CcetX%3A8.744%2C49.43087%2C6&" + 
                    "filter=foo&" + 
                    "format=geojson&" + 
                    "keys=highway&" + 
                    "showMetadata=evomaster_3600_input&" + 
                    "time=2008-03-30&" + 
                    "types=foo")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_114_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/perimeter/density/groupBy/type"));
    }
    
    
    @Test
    public void test_8_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/density/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22oH%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.747305%2C49.408%5D%2C%5B8.700%2C49.402%5D%2C%5B8.70500%2C49.432%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22tisIw%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.73565%2C49.4207%5D%2C%5B8.70909%2C49.413%5D%2C%5B8.72289%2C49.4383%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=natural%3Dwood+and+geometry%3Apoint+or+not+id%3A%281+..+9999%29&" + 
                    "groupByKey=building&" + 
                    "groupByValues=school%2Cstation%2Ctrack")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.73565 49.4207, 8.70909 49.413 ) and LINESTRING ( 8.72289 49.4383, 8.704561 49.403252 ) [ (8.709760563492425, 49.41319440281971, NaN) ]"))
                .body("'path'", containsString("/elements/perimeter/density/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_9_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/ratio?" + 
                    "bboxes=KSofN%3A8.6880%2C49.419%2C8.7.1%2C49.394%7CIyJ%3A8.6504%2C49.428%2C8.7035%2C49.394&" + 
                    "filter=ref%21%3D*+os+not+area%3A%281.0+..+1E6%29&" + 
                    "filter2=foo&" + 
                    "format=foo&" + 
                    "keys2=fko&" + 
                    "time=2.18%2F.3%2F2&" + 
                    "timeout=&" + 
                    "types=foo")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_65_createBboxes
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/length/ratio"));
    }
    
    
    @Test
    public void test_10_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/groupBy/type?" + 
                    "bpolys=8.704561%2C49.403252%2C8.745%2C49.414%2C8.732%2C49.4345%2C8.724%2C49.422%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.7129%2C49.405272%2C8.730%2C49.4282%2C8.712%2C49.429%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.743466%2C49.425%2C8.701%2C49.432%2C8.704%2C49.409%2C8.704561%2C49.403252&" + 
                    "format=json&" + 
                    "keys=highway")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.745 49.414 ) and LINESTRING ( 8.704561 49.403252, 8.7129 49.405272 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/length/groupBy/type"));
    }
    
    
    @Test
    public void test_11_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/groupBy/tag?" + 
                    "bcircles=8.716011%2C49.42870%2C86979371317&" + 
                    "filter=destination%21%3D*+or+not+type%3Anode+or+length%3A%28+..+100%29&" + 
                    "groupByKey=evomaster_13379_input&" + 
                    "keys=evomaster_13380_input&" + 
                    "time=&" + 
                    "types=evomaster_4609_inpu&" + 
                    "values=evomaster_13382_input")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El Ã¡ngulo 35.312.245.786.650.534.000.000.000.000.000.000 es demasiado grande."))
                .body("'path'", containsString("/elements/length/groupBy/tag"));
    }
    
    
    @Test
    public void test_12_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/density/groupBy/type?" + 
                    "bpolys=SwiBz%3A8.704561%2C49.403252%2C8.748%2C49.4230%2C8.7369%2C49.437%2C8.7047%2C49.416179%2C8.704561%2C49.403252%7CwifgK%3A8.704561%2C49.403252%2C8.739%2C49.4261%2C8.7429%2C49.430938%2C8.703681%2C49.416%2C8.704561%2C49.403252&" + 
                    "filter=evomaster_17852_input&" + 
                    "format=csv&" + 
                    "keys=highway&" + 
                    "showMetadata=foo&" + 
                    "time=2013-11-20")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.748 49.423 ) and LINESTRING ( 8.704561 49.403252, 8.739 49.4261 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/length/density/groupBy/type"));
    }
    
    
    @Test
    public void test_13_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/density?" + 
                    "bcircles=V%3A8.70319%2C49.416763%2C21105996463&" + 
                    "keys=highway&" + 
                    "showMetadata=true&" + 
                    "timeout=50&" + 
                    "values=primary")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El Ã¡ngulo 423.647.930.160.043.000.000.000.000.000 es demasiado grande."))
                .body("'path'", containsString("/elements/length/density"));
    }
    
    
    @Test
    public void test_14_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/ratio?" + 
                    "bpolys=Pxk%3A8.704561%2C49.403252%2C8.739%2C49.412%2C8.74281%2C49.420%2C8.743%2C49.401%2C8.704561%2C49.403252%7CNo%3A8.704561%2C49.403252%2C8.7071%2C49.4370%2C8.739%2C49.43189%2C8.7004%2C49.4125%2C8.704561%2C49.403252%7Clkcx%3A8.704561%2C49.403252%2C8.745%2C49.420500%2C8.700%2C49.414137%2C8.7472%2C49.424%2C8.704561%2C49.403252&" + 
                    "filter2=highway%21%3D*+and+type%3Away+or+id%3A%281+..+9999%29&" + 
                    "format=json&" + 
                    "types2=line%2Cpolygon%2C")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.739 49.412 ) and LINESTRING ( 8.7004 49.4125, 8.704561 49.403252 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/count/ratio"));
    }
    
    
    @Test
    public void test_15_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/groupBy/type?" + 
                    "bpolys=8.704561%2C49.403252%2C8.71475%2C49.439%2C8.730918%2C49.430%2C8.709566%2C49.406%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.74665%2C49.4273%2C8.713%2C49.4368%2C8.745%2C49.4012%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.73788%2C49.436%2C8.739%2C49.43827%2C8.74104%2C49.4247%2C8.704561%2C49.403252&" + 
                    "filter=addr%3Acity%3D*+or+not+type%3Anode+or+not+area%3A%281.0+..+1E6%29&" + 
                    "time=2011-05-21")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.71475 49.439 ) and LINESTRING ( 8.709566 49.406, 8.704561 49.403252 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/count/groupBy/type"));
    }
    
    
    @Test
    public void test_16_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/density?" + 
                    "bboxes=8.696%2C49.4.2%2C8.700%2C49.393&" + 
                    "filter=landusf%3D*+and+not+gfometry%3Aline&" + 
                    "keys=foo&" + 
                    "time=..%2FU-30%2F1")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_64_createBboxes
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/count/density"));
    }
    
    
    @Test
    public void test_17_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/ratio/groupBy/boundary?" + 
                    "bpolys=XaFqF%3A8.704561%2C49.403252%2C8.732%2C49.41525%2C8.731814%2C49.4099%2C8.70389%2C49.4150%2C8.704561%2C49.403252%7Cb%3A8.704561%2C49.403252%2C8.718%2C49.432%2C8.70370%2C49.408241%2C8.726%2C49.40421%2C8.704561%2C49.403252&" + 
                    "filter2=maxspeed%3D*+and+type%3Away&" + 
                    "keys2=highway&" + 
                    "time=2016-11-10&" + 
                    "timeout=77&" + 
                    "types2=relation&" + 
                    "values2=speed_camera")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.732 49.41525 ) and LINESTRING ( 8.70389 49.415, 8.704561 49.403252 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/area/ratio/groupBy/boundary"));
    }
    
    
    @Test
    public void test_18_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=T%3A8.738688%2C49.412%2C2%7CXm%3A8.7180%2C49.427%2C2%7CX%3A8.720%2C49.414%2C5%7CXpBdd%3A8.718551%2C49.402%2C693560199&" + 
                    "groupByKey=building&" + 
                    "groupByValues=house%2Cstop&" + 
                    "keys=highway&" + 
                    "showMetadata=yes&" + 
                    "time=2012-10-21")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El Ã¡ngulo 574.467.217.607.427.390 es demasiado grande."))
                .body("'path'", containsString("/elements/area/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_19_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/boundary?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22l%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.724%2C49.430%5D%2C%5B8.7485%2C49.4042%5D%2C%5B8.731%2C49.426%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22N%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7498%2C49.4122%5D%2C%5B8.7401%2C49.4147%5D%2C%5B8.7047%2C49.400%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "format=csv&" + 
                    "keys=highway")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.742309940506015 49.4107185116304 ) and LINESTRING ( 8.738973344483968 49.41423215152301, 8.7047 49.4 ) [ (8.719780883182702, 49.40626240064367, NaN) ]"))
                .body("'path'", containsString("/elements/area/groupBy/boundary"));
    }
    
    
    @Test
    public void test_20_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/density/groupBy/type?" + 
                    "bpolys=zOt%3A8.704561%2C49.403252%2C8.722%2C49.437%2C8.7151%2C49.4368%2C8.74621%2C49.400%2C8.704561%2C49.403252%7CEd%3A8.704561%2C49.403252%2C8.719%2C49.4068%2C8.713%2C49.429%2C8.74790%2C49.4126%2C8.704561%2C49.403252&" + 
                    "filter=lit%3D*+and+type%3Anode+and+length%3A%28+..+100%29&" + 
                    "showMetadata=true&" + 
                    "timeout=62")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.722 49.437 ) and LINESTRING ( 8.704561 49.403252, 8.719 49.4068 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/area/density/groupBy/type"));
    }
    
    
    @Test
    public void test_21_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/density/groupBy/tag?" + 
                    "bpolys=DNA%3A8.704561%2C49.403252%2C8.710%2C49.4010%2C8.737%2C49.43465%2C8.719%2C49.423%2C8.704561%2C49.403252%7CsZzG%3A8.704561%2C49.403252%2C8.706%2C49.4164%2C8.705%2C49.409%2C8.705%2C49.40713%2C8.704561%2C49.403252&" + 
                    "filter=barrier%3D*&" + 
                    "format=json&" + 
                    "groupByKey=highway&" + 
                    "time=2007-12-31&" + 
                    "timeout=31")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.71 49.401 ) and LINESTRING ( 8.704561 49.403252, 8.706 49.4164 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/area/density/groupBy/tag"));
    }
    
    
    @Test
    public void test_22_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/density?" + 
                    "bpolys=8.704561%2C49.403252%2C8.705%2C49.437415%2C8.718%2C49.431%2C8.731%2C49.435%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.745%2C49.412%2C8.701559%2C49.4312%2C8.73866%2C49.40699%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.71510%2C49.4357%2C8.706%2C49.401%2C8.70456%2C49.411%2C8.704561%2C49.403252&" + 
                    "filter=landuse%3D*&" + 
                    "time=2014-02-03")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.705 49.437415 ) and LINESTRING ( 8.706 49.401, 8.70456 49.411 ) [ (8.704652324274532, 49.41035885920464, NaN) ]"))
                .body("'path'", containsString("/elements/area/density"));
    }
    
    
    @Test
    public void test_23_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area?" + 
                    "bpolys=wFZC%3A8.704561%2C49.403252%2C8.748%2C49.42584%2C8.7047%2C49.4204%2C8.716%2C49.40325%2C8.704561%2C49.403252%7CHZJKI%3A8.704561%2C49.403252%2C8.7496%2C49.410%2C8.746%2C49.43366%2C8.739%2C49.400%2C8.704561%2C49.403252&" + 
                    "format=json&" + 
                    "keys=highway&" + 
                    "types=relation&" + 
                    "values=primary_link")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.748 49.42584 ) and LINESTRING ( 8.716 49.40325, 8.704561 49.403252 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/area"));
    }
    
    
    @Test
    public void test_24_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/groupBy/type?" + 
                    "bpolys=8.704561%2C49.403252%2C8.71475%2C49.439%2C8.730918%2C49.430%2C8.709566%2C49.406%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.74665%2C49.4273%2C8.713%2C49.4368%2C8.745%2C49.4012%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.73788%2C49.436%2C8.739%2C49.43827%2C8.74104%2C49.4247%2C8.704561%2C49.203252&" + 
                    "filter=evomaster_3721_input&" + 
                    "format=foo&" + 
                    "keys=gqo&" + 
                    "showMetadata=foo&" + 
                    "time=2011-05-21&" + 
                    "values=fqo")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.709768043015337 49.40622709968003, 8.74665 49.4273 ) and LINESTRING ( 8.725045575144334 49.423399297651926, 8.745 49.4012 ) [ (8.730059776593755, 49.41782099853945, NaN) ]"))
                .body("'path'", containsString("/elements/count/groupBy/type"));
    }
    
    
    @Test
    public void test_25_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=q%3A8.704561%2C49.403252%2C8.700587%2C49.422%2C8.702%2C49.417%2C8.7216%2C49.417%2C8.704561%2C49.403252%7ClN%3A8.704561%2C49.40325.%2C8.726%2C49.4243%2C8.7465%2C49.40504%2C8.7453%2C49.40630%2C8.704561%2C49.403252%7CV%3A8.704561%2C49.403252%2C8.7343%2C49.400%2C8.704%2C49.4115%2C8.70892%2C49.418%2C8.704561%2C49.403252&" + 
                    "format=csv&" + 
                    "groupByKey=buildingr&" + 
                    "groupByValues=secondary%2Chut&" + 
                    "showMetadata=evomaster_29061_input&" + 
                    "time=evomaster_29062_input&" + 
                    "timeout=&" + 
                    "types=foo")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_161_createBpolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/length/density/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_26_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/density/groupBy/tag?" + 
                    "bpolys=FNV%3A8.704561%2C49.403252%2C8.7164%2C49.436%2C8.710%2C49.4217%2C8.729%2C49.419%2C8.704561%2C49.403252%7CClo%3A8.704561%2C49.403252%2C8.707%2C49.422%2C8.74109%2C49.4392%2C8.7335%2C49.42294%2C8.704561%2C49.403252%7Cq%3A8.704561%2C49.403252%2C8.726%2C49.413125%2C8.709%2C49.423%2C8.703%2C49.418%2C8.704561%2C49.40325&" + 
                    "filter=evomaoter_42165_mnput&" + 
                    "format=json&" + 
                    "groupByKey=UuiU%60jv&" + 
                    "groupByValues=foo&" + 
                    "keys=foo&" + 
                    "showMetadata=false&" + 
                    "time=M%2F%2FP2M17D&" + 
                    "types=qp8Mc5G")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.712306702078244 49.424677479488 ) and LINESTRING ( 8.71 49.4217, 8.727931796235929 49.419151797377 ) [ (8.711170172826234, 49.42153371228259, NaN) ]"))
                .body("'path'", containsString("/users/count/density/groupBy/tag"));
    }
    
    
    @Test
    public void test_27_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/density/groupBy/type?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22fe%60tures%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22CI%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.74650%2C49.403%5D%2C%5B8.701%2C49.429%5D%2C%5B8.701%2C49.432%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=lit%3D*+or+not+type%3Anode+or+length%3A%28+..+100%29&" + 
                    "format=csv&" + 
                    "time=%2F.P3Y2M3D&" + 
                    "values=foo")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_237_createGeometryFromGeoJson
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/users/count/density/groupBy/type"));
    }
    
    
    @Test
    public void test_28_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/density?" + 
                    "bboxes=8.696%2C49.422%2C8.70.%2C49.393&" + 
                    "filter=landusf%3D*+and+not+cfometry%3Apine&" + 
                    "format=foo&" + 
                    "keys=fkp&" + 
                    "showMetadata=false&" + 
                    "time=..%2FU-30%2F&" + 
                    "values=joo")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_65_createBboxes
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/count/density"));
    }
    
    
    @Test
    public void test_29_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/density/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22featqres%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22oH%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.747305%2C49.408%5D%2C%5B8.700%2C49.402%5D%2C%5B8.70500%2C49.432%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Jeature%22%2C%22properties%22%3A%7B%22id%22%3A%22tisIw%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.73565%2C49.4207%5D%2C%5B8.70909%2C49.413%5D%2C%5B8.72289%2C49.4383%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=natural%3Dsood+and+geometry%3Apoint+mr%21not+id%3A%281+..+9999%29&" + 
                    "format=fhooq&" + 
                    "groupByKey=foo&" + 
                    "showMetadata=bpo&" + 
                    "time=bkWl&" + 
                    "types=foo&" + 
                    "values=natural%3Dwqod+and+geUmeUry%3ApoiUtUor+not+id%3A01+..+9999%27")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_237_createGeometryFromGeoJson
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/elements/perimeter/density/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_30_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/key?" + 
                    "bpolys=8.704561%2C49.403252%2C8.715%2C49.427%2C8.704%2C49.421%2C8.7359%2C49.404342%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.71469%2C49.4287%2C8.703%2C49.41.%2C8.7273%2C49.405%2C8.704561%2C49.403252%7C8.704561%2C49.403253%2C8.7082%2C49.431063%2C8.7044%2C49.40704%2C8.7370%2C49.4235%2C8.704561%2C49.403252&" + 
                    "format=foo&" + 
                    "groupByKeys=foo&" + 
                    "keys=foo&" + 
                    "showMetadata=foo&" + 
                    "time=2010-07-18&" + 
                    "types=foq&" + 
                    "values=foo")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_161_createBpolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/length/groupBy/key"));
    }
    
    
    @Test
    public void test_31_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/key?" + 
                    "bpolys=8.704561%2C49.403252%2C8.715%2C49.427%2C8.704%2C49.421%2C8.7359%2C49.404342%2C8.704561%2C49.403252%7C8.804561%2C49.403252%2C8.71469%2C49.4287%2C8.703%2C49.41.%2C8.7273%2C49.405%2C8.704561%2C49.403252%7C8.704561%2C49.403253%2C8.7282%2C49.431063%2C8.7044%2C49.40704%2C8.7%2F70%2C49.4235%2C8.704561%2C49.4032&" + 
                    "filter=qidewbnk%3D*+and+type%3Anqd&" + 
                    "groupByKeys=USU&" + 
                    "keys=Vk&" + 
                    "showMetadata=goo&" + 
                    "types=joqn&" + 
                    "values=fooc")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_186_createBpolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/length/groupBy/key"));
    }
    
    
    @Test
    public void test_32_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/ratio/groupBy/boundary?" + 
                    "bpolys=8.704561%2C49.403252%2C8.720954%2C49.4182%2C8.700584%2C49.405%2C8.743164%2C49.41856%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.747%2C49.4294%2C8.7315%2C49.429%2C8.741%2C49.4219%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.7307%2C49.406%2C8.748%2C49.413%2C8.742%2C49.4285%2C8.702561%2C49.403252&" + 
                    "filter=barrier%3D*+or+id%3A%281+..+9999%29&" + 
                    "keys=fno&" + 
                    "keys2=foo&" + 
                    "showMetadata=fso&" + 
                    "types2=foo&" + 
                    "values=foo&" + 
                    "values2=fpo")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.720954 49.4182 ) and LINESTRING ( 8.700584 49.405, 8.714687960999793 49.409491538542916 ) [ (8.709641126745273, 49.407884326882716, NaN) ]"))
                .body("'path'", containsString("/elements/area/ratio/groupBy/boundary"));
    }
    
    
    @Test
    public void test_33_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/density/groupBy/type?" + 
                    "bpolys=%7B%22uype%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22CI%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Uolygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.74650%2C49.403%5D%2C%5B8.721%2C49.429%5D%2C%5B8.701%2C49.432%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=lit%3D*+or+not+type%3Anode+or%24length%3A%28+..+100%29&" + 
                    "format=csv&" + 
                    "keys=joU&" + 
                    "showMetadata=boo&" + 
                    "timeout=81&" + 
                    "types=fpQ")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_233_createGeometryFromGeoJson
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/users/count/density/groupBy/type"));
    }
    
    
    @Test
    public void test_34_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length?" + 
                    "bpolys=t%3A8.704561%2C49.403252%2C8.743%2C49.418%2C8.7063%2C49.422%2C8.727%2C49.409%2C8.704561%2C49.403252&" + 
                    "filter=jBb&" + 
                    "time=foo&" + 
                    "types=foo&" + 
                    "values=foo")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/executor/ExecutionUtils_565_extractContributionTags
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.743 49.418 ) and LINESTRING ( 8.7063 49.422, 8.727 49.409 ) [ (8.724171832689722, 49.41077614372143, NaN) ]"))
                .body("'path'", containsString("/elements/length"));
    }
    
    
    @Test
    public void test_35_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/ratio?" + 
                    "bboxes=KSofN%3A8.6880%2C49.419%2C8.701%2C49.394%7CIyJ%3A8.65.4%2C49.428%2C8.7035%2C49.394&" + 
                    "filter=ref%21%3D*+os+not+area%3A%281.0+..+1E6%29&" + 
                    "time=2.18%2B.312&" + 
                    "types2=polygondK")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_72_createBboxes
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/length/ratio"));
    }
    
    
    @Test
    public void test_36_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/density/groupBy/tag?" + 
                    "bpolys=FNV%3A8.704561%2C49.403252%2C8.7164%2C49.436%2C8.710%2C49.4217%2C8.729%2C49.419%2C8.704561%2C49.403252%7CClo%3A8.704561%2C49.403252%2C8.707%2C49.422%2C8.74109%2C49.4392%2C8.7335%2C49.42294%2C8.704561%2C49.403252%7Cq%3A8.704561%2C49.403252%2C8.726%2C49.413125%2C8.709%2C49.423%2C8.703%2C49.418%2C8.704561%2C49.403252&" + 
                    "format=json&" + 
                    "groupByKey=building&" + 
                    "showMetadata=false&" + 
                    "time=%2F%2FP2M17D")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.7164 49.436 ) and LINESTRING ( 8.704561 49.403252, 8.726 49.413125 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/users/count/density/groupBy/tag"));
    }
    
    
    @Test
    public void test_37_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/key?" + 
                    "bpolys=8.704561%2C49.403252%2C8.715%2C49.427%2C8.704%2C49.421%2C8.7359%2C49.404342%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.71469%2C49.4287%2C8.703%2C49.412%2C8.7273%2C49.405%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.7082%2C49.431063%2C8.7044%2C49.40704%2C8.7370%2C49.4235%2C8.704561%2C49.403252&" + 
                    "filter=sidewalk%3D*+and+type%3Anode&" + 
                    "groupByKeys=addr%3Acountry%2Cdestination%2Cturn&" + 
                    "time=2010-07-18")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.715 49.427 ) and LINESTRING ( 8.704561 49.403252, 8.71469 49.4287 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/length/groupBy/key"));
    }
    
    
    @Test
    public void test_38_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=q%3A8.704561%2C49.403252%2C8.700587%2C49.422%2C8.702%2C49.417%2C8.7216%2C49.417%2C8.704561%2C49.403252%7ClN%3A8.704561%2C49.403252%2C8.726%2C49.4243%2C8.7465%2C49.40504%2C8.7453%2C49.40630%2C8.704561%2C49.403252%7CV%3A8.704561%2C49.403252%2C8.7343%2C49.400%2C8.704%2C49.4115%2C8.70892%2C49.418%2C8.704561%2C49.403252&" + 
                    "format=csv&" + 
                    "groupByKey=building&" + 
                    "groupByValues=secondary%2Chut&" + 
                    "showMetadata=no&" + 
                    "time=2013-08-26&" + 
                    "timeout=90")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.700587 49.422 ) and LINESTRING ( 8.704561 49.403252, 8.7343 49.4 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/length/density/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_39_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/ratio?" + 
                    "bpolys=8.704561%2C49.403252%2C8.708%2C49.412%2C8.704%2C49.403%2C8.738%2C49.434%2C8.704561%2C49.403252&" + 
                    "filter2=source%3Amaxspeed%3D*+and+geometry%3Aline+or+not+length%3A%28+..+100%29&" + 
                    "keys=highway&" + 
                    "keys2=highway&" + 
                    "timeout=89&" + 
                    "types2=other&" + 
                    "values=secondary")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.708 49.412 ) and LINESTRING ( 8.704 49.403, 8.738 49.434 ) [ (8.704720007546259, 49.403656477468644, NaN) ]"))
                .body("'path'", containsString("/elements/count/ratio"));
    }
    
    
    @Test
    public void test_40_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/type?" + 
                    "bpolys=cj%3A8.704561%2C49.403252%2C8.7424%2C49.434277%2C8.741%2C49.407490%2C8.705061%2C49.4065%2C8.704561%2C49.403252&" + 
                    "time=2009-10-14")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.7424 49.434277 ) and LINESTRING ( 8.741 49.40749, 8.705061 49.4065 ) [ (8.708642689125982, 49.40659866363101, NaN) ]"))
                .body("'path'", containsString("/elements/count/groupBy/type"));
    }
    
    
    @Test
    public void test_41_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/key?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22klWEK%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.745%2C49.40444%5D%2C%5B8.7341%2C49.426%5D%2C%5B8.7019%2C49.41989%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22CV%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.734%2C49.4263%5D%2C%5B8.7070%2C49.424%5D%2C%5B8.71570%2C49.4305%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "groupByKeys=addr%3Acountry%2Clanduse%2Csurface&" + 
                    "keys=highway")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.734 49.4263, 8.707 49.424 ) and LINESTRING ( 8.7157 49.4305, 8.712158372845929 49.42183654217667 ) [ (8.71326082112584, 49.424533329207016, NaN) ]"))
                .body("'path'", containsString("/elements/count/groupBy/key"));
    }
    
    
    @Test
    public void test_42_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=8.704561%2C49.403252%2C8.704%2C49.4246%2C8.706%2C49.400%2C8.70853%2C49.414%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.72565%2C49.434%2C8.7289%2C49.438%2C8.71336%2C49.4145%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.7426%2C49.4106%2C8.7042%2C49.438%2C8.704%2C49.4351%2C8.704561%2C49.403252&" + 
                    "groupByKey=highway&" + 
                    "timeout=51")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.704 49.4246 ) and LINESTRING ( 8.704561 49.403252, 8.7426 49.4106 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/count/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_43_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/density/groupBy/tag?" + 
                    "bcircles=8.7287%2C49.4177%2C511146523%7C8.735735%2C49.4010%2C9&" + 
                    "groupByKey=highway&" + 
                    "keys=highway&" + 
                    "showMetadata=false&" + 
                    "time=2009-05-11&" + 
                    "values=steps")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El Ã¡ngulo 50.118.278.297.607.824 es demasiado grande."))
                .body("'path'", containsString("/elements/count/density/groupBy/tag"));
    }
    
    
    @Test
    public void test_44_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/tag?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22IT%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.710%2C49.408%5D%2C%5B8.739%2C49.41665%5D%2C%5B8.7474%2C49.438%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "format=json&" + 
                    "groupByKey=building&" + 
                    "groupByValues=hospital%2Cprimary_link&" + 
                    "keys=highway&" + 
                    "time=2012-06-07&" + 
                    "timeout=100&" + 
                    "values=primary_link")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.71 49.408, 8.739 49.41665 ) and LINESTRING ( 8.7474 49.438, 8.704561 49.403252 ) [ (8.71065567113639, 49.40819557087344, NaN) ]"))
                .body("'path'", containsString("/elements/area/groupBy/tag"));
    }
    
    
    @Test
    public void test_45_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=cFe%3A8.704561%2C49.403252%2C8.708%2C49.418%2C8.7425%2C49.424682%2C8.704%2C49.403153%2C8.704561%2C49.403252%7CiN%3A8.704561%2C49.403252%2C8.716%2C49.403%2C8.741%2C49.427%2C8.743607%2C49.420%2C8.704561%2C49.403252%7CJr%3A8.704561%2C49.403252%2C8.70359%2C49.435%2C8.7469%2C49.414%2C8.70488%2C49.422%2C8.704561%2C49.403252&" + 
                    "filter=turn%3Alanes%3D*+or+not+id%3A%281+..+9999%29&" + 
                    "groupByKey=building&" + 
                    "time=2014-01-23")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.708 49.418 ) and LINESTRING ( 8.704561 49.403252, 8.716 49.403 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/area/density/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_46_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area?" + 
                    "bpolys=wFZC%3A8.704561%2C49.403252%2C8.748%2C49.42584%2C8.7047%2C49.4204%2C8.716%2C49.40325%2C8.704561%2C49.403252%7CHZJKI%3A8.704561%2C49.403252%2C8.7496%2C49.410%2C8.746%2C49.43366%2C8.739%2C49.400%2C8.704561%2C49.403262&" + 
                    "filter=foo&" + 
                    "format=evomaster_31251_input&" + 
                    "keys=highway&" + 
                    "types=relation&" + 
                    "values=primary_linj")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.748 49.42584 ) and LINESTRING ( 8.7047 49.4204, 8.716 49.40325 ) [ (8.71307992949274, 49.40768178842473, NaN) ]"))
                .body("'path'", containsString("/elements/area"));
    }
    
    
    @Test
    public void test_47_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/tag?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22bUpqi%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.71053%2C49.432613%5D%2C%5B8.723157%2C49.413%5D%2C%5B8.703875%2C49.406762%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22jd%22%3A%22CNkUC%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7381%2C49.414583%5D%2C%5B8.701%2C49.438%5D%2C%5B8.711%2C49.436%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22U%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.704375%2C49.403638%5D%2C%5B8.70457%2C49.43468%5D%2C%5B8.70495%2C49.417%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=evomaster_28661_input&" + 
                    "format=foo&" + 
                    "groupByKey=S.cHK&" + 
                    "keys=highway&" + 
                    "showMetadata=yec&" + 
                    "time=TQdHIzNd2w0jL&" + 
                    "values=evomaster_28659_inpup")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.7381 49.414583, 8.701 49.438 ) and LINESTRING ( 8.711 49.436, 8.704561 49.403252 ) [ (8.710245791869037, 49.43216418576288, NaN) ]"))
                .body("'path'", containsString("/elements/perimeter/groupBy/tag"));
    }
    
    
    @Test
    public void test_48_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/ratio/groupBy/boundary?" + 
                    "bpolys=8.704561%2C49.403252%2C8.720954%2C49.4182%2C8.700584%2C49.405%2C8.743164%2C49.41856%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.747%2C49.4294%2C8.7315%2C49.429%2C8.741%2C49.4219%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.7307%2C49.406%2C8.748%2C49.413%2C8.742%2C49.4285%2C8.704561%2C49.403252&" + 
                    "filter=barrier%3D*+or+id%3A%281+..+9999%29&" + 
                    "filter2=destination%3D*+and+length%3A%28+..+100%29&" + 
                    "format=json")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.720954 49.4182 ) and LINESTRING ( 8.700584 49.405, 8.743164 49.41856 ) [ (8.70964112674527, 49.407884326882716, NaN) ]"))
                .body("'path'", containsString("/elements/area/ratio/groupBy/boundary"));
    }
    
    
    @Test
    public void test_49_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter?" + 
                    "bpolys=aee%3A8.704561%2C49.403252%2C8.700%2C49.4111%2C8.70430%2C49.412%2C8.710%2C49.4282%2C8.704561%2C49.403252%7CfTO%3A8.704561%2C49.403252%2C8.749%2C49.4089%2C8.7049%2C49.410%2C8.7272%2C49.404%2C8.704561%2C49.403252&" + 
                    "keys=highway&" + 
                    "showMetadata=false&" + 
                    "time=2012-08-26&" + 
                    "values=footway")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.7 49.4111 ) and LINESTRING ( 8.704561 49.403252, 8.749 49.4089 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/perimeter"));
    }
    
    
    @Test
    public void test_50_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/boundary?" + 
                    "bpolys=APE%3A8.704561%2C49.403252%2C8.744675%2C49.404%2C8.724%2C49.4226%2C8.734%2C49.415%2C8.704561%2C49.403252%7CZy%3A8.704561%2C49.403252%2C8.742%2C49.430%2C8.70425%2C49.406%2C8.70311%2C49.400%2C8.704561%2C49.403252&" + 
                    "filter=highway+in+%28secondary%2Cpath%2Cunclassified%2Ctrack%2Cprimary%2Cresidential%2Ccycleway%2Cservice%2Cfootway%29+or+area%3A%281.0+..+1E6%29&" + 
                    "format=csv&" + 
                    "showMetadata=false&" + 
                    "timeout=68")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.744675 49.404 ) and LINESTRING ( 8.734 49.415, 8.704561 49.403252 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/length/groupBy/boundary"));
    }
    
    
    @Test
    public void test_51_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length?" + 
                    "bpolys=t%3A8.704561%2C49.403252%2C8.743%2C49.418%2C8.7063%2C49.422%2C8.727%2C49.409%2C8.704561%2C49.403252&" + 
                    "filter=building%3D*+or+length%3A%28+..+100%29&" + 
                    "format=json&" + 
                    "timeout=71")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.743 49.418 ) and LINESTRING ( 8.7063 49.422, 8.727 49.409 ) [ (8.724171832689722, 49.41077614372143, NaN) ]"))
                .body("'path'", containsString("/elements/length"));
    }
    
    
    @Test
    public void test_52_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density/groupBy/boundary?" + 
                    "bpolys=8.704561%2C49.403252%2C8.7350%2C49.4113%2C8.704%2C49.411%2C8.7495%2C49.416669%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.720%2C49.425%2C8.702%2C49.43261%2C8.741%2C49.418%2C8.704561%2C49.403252&" + 
                    "format=geojson&" + 
                    "keys=highway&" + 
                    "time=2008-12-03&" + 
                    "values=turning_circle")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.735 49.4113 ) and LINESTRING ( 8.704561 49.403252, 8.72 49.425 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/area/density/groupBy/boundary"));
    }
    
    
    @Test
    public void test_53_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22izZ%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.720%2C49.40159%5D%2C%5B8.70395%2C49.434%5D%2C%5B8.73214%2C49.435%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22p%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7335%2C49.431%5D%2C%5B8.746%2C49.4290%5D%2C%5B8.70444%2C49.4141%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "keys=highway&" + 
                    "showMetadata=no&" + 
                    "timeout=49&" + 
                    "values=crossing")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.714471215568295 49.41275435535399, 8.7335 49.431 ) and LINESTRING ( 8.746 49.429, 8.718301502123813 49.4190695953235 ) [ (8.722703423739569, 49.420647762601526, NaN) ]"))
                .body("'path'", containsString("/elements/area/density"));
    }
    
    
    @Test
    public void test_54_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/groupBy/type?" + 
                    "bpolys=8.704561%2C49.403252%2C8.704%2C49.412%2C8.739%2C49.4230%2C8.707%2C49.4164%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.74100%2C49.437480%2C8.7464%2C49.40977%2C8.7464%2C49.410%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.726%2C49.419%2C8.743%2C49.426%2C8.734317%2C49.426%2C8.704561%2C49.403252&" + 
                    "format=json&" + 
                    "keys=highway&" + 
                    "time=2016-01-02&" + 
                    "timeout=38&" + 
                    "values=cycleway")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.704 49.412 ) and LINESTRING ( 8.707 49.4164, 8.704561 49.403252 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/perimeter/groupBy/type"));
    }
    
    
    @Test
    public void test_55_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/tag?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22bUpqi%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.71053%2C49.432613%5D%2C%5B8.723157%2C49.413%5D%2C%5B8.703875%2C49.406762%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22CNkUC%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7381%2C49.414583%5D%2C%5B8.701%2C49.438%5D%2C%5B8.711%2C49.436%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22U%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.704375%2C49.403638%5D%2C%5B8.70457%2C49.43468%5D%2C%5B8.70495%2C49.417%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "groupByKey=building&" + 
                    "groupByValues=garage%2Cpedestrian&" + 
                    "keys=highway&" + 
                    "showMetadata=yes&" + 
                    "time=2018-05-04")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.7381 49.414583, 8.701 49.438 ) and LINESTRING ( 8.711 49.436, 8.704561 49.403252 ) [ (8.710245791869037, 49.43216418576288, NaN) ]"))
                .body("'path'", containsString("/elements/perimeter/groupBy/tag"));
    }
    
    
    @Test
    public void test_56_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/ratio?" + 
                    "bcircles=8.749%2C49.4302%2C6%7C8.743%2C49.409%2C1%7C8.728%2C49.426%2C6937610392%7C8.738%2C49.416%2C56&" + 
                    "filter2=building%3D*+and+type%3Arelation&" + 
                    "keys=highway&" + 
                    "keys2=highway&" + 
                    "time=2008-04-16&" + 
                    "timeout=34&" + 
                    "types2=point%2Cpolygon%2Cother")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El Ã¡ngulo 57.819.437.346.840.760.000.000.000 es demasiado grande."))
                .body("'path'", containsString("/elements/perimeter/ratio"));
    }
    
    
    @Test
    public void test_57_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=8.704561%2C49.403252%2C8.7024%2C49.425%2C8.734%2C49.4128%2C8.715092%2C49.4205%2C8.704561%2C49.403252&" + 
                    "filter=tracktype%21%3D*+or+type%3Anode+and+area%3A%281.0+..+1E6%29&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=garage%2Cuniversity&" + 
                    "showMetadata=true")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.7024 49.425, 8.734 49.4128 ) and LINESTRING ( 8.715092 49.4205, 8.704561 49.403252 ) [ (8.7148943249454, 49.420176241635005, NaN) ]"))
                .body("'path'", containsString("/elements/perimeter/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_58_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/density/groupBy/type?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22CI%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.74450%2C49.403%5D%2C%5B8.701%2C49.429%5D%2C%5B8.701%2C49.432%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=lit%3D*+or+not+type%3Anode+or+length%3A%28+..+100%29&" + 
                    "format=csv&" + 
                    "time=%2F%2FP3Y2M3D&" + 
                    "timeout=81")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.7445 49.403, 8.701 49.429 ) and LINESTRING ( 8.701 49.432, 8.704561 49.403252 ) [ (8.701401321039215, 49.428760129953574, NaN) ]"))
                .body("'path'", containsString("/users/count/density/groupBy/type"));
    }
    
    
    @Test
    public void test_59_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density/groupBy/boundary?" + 
                    "bpolys=8.704561%2C49.403252%2C8.7350%2C49.4113%2C8.704%2C49.411%2C8.7495%2C49.416669%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.720%2C49.425%2C8.702%2C49.43261%2C8.741%2C49.418%2C8.704561%2C49.40325&" + 
                    "filter=foo&" + 
                    "showMetadata=foo&" + 
                    "time=XwXKJHKXs7JIMK&" + 
                    "types=f0on")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.735 49.4113, 8.704 49.411 ) and LINESTRING ( 8.7495 49.416669, 8.704561 49.403252 ) [ (8.73140035373502, 49.41126516471356, NaN) ]"))
                .body("'path'", containsString("/elements/area/density/groupBy/boundary"));
    }
    
    
    @Test
    public void test_60_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/groupBy/key?" + 
                    "bpolys=hPfPi%3A8.704561%2C49.403252%2C8.706%2C49.418%2C8.708%2C49.4182%2C8.701%2C49.4036%2C8.704561%2C49.403252&" + 
                    "groupByKeys=addr%3Apostcode%2Cnetwork&" + 
                    "showMetadata=false")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.706 49.418 ) and LINESTRING ( 8.708 49.4182, 8.701 49.4036 ) [ (8.70551348833589, 49.41301384710057, NaN) ]"))
                .body("'path'", containsString("/users/count/groupBy/key"));
    }
    
    
    @Test
    public void test_61_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/tag?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22I%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7282%2C49.426%5D%2C%5B8.745%2C49.433%5D%2C%5B8.72908%2C49.425%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22K%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.726%2C49.401%5D%2C%5B8.726%2C49.4223%5D%2C%5B8.708%2C49.4314%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22pz%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.749%2C49.422%5D%2C%5B8.711%2C49.402710%5D%2C%5B8.707650%2C49.424%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "groupByKey=building&" + 
                    "groupByValues=office%2Cconstruction&" + 
                    "keys=highway&" + 
                    "showMetadata=true&" + 
                    "timeout=100")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.726 49.41229672134836 ) and LINESTRING ( 8.711 49.40271, 8.70765 49.424 ) [ (8.71051919058787, 49.40576565145798, NaN) ]"))
                .body("'path'", containsString("/users/count/groupBy/tag"));
    }
    
    
    @Test
    public void test_62() throws Exception {
        
        try{
            given().accept("*/*")
                    .get(baseUrlOfSut + "/users/count/groupBy/type?" + 
                        "bboxes=ZboO%3A8.650%2C49.41762%2C8.71568%2C49.381%7CwMX%3A8.6657%2C49.408%2C8.702%2C49.3949&" + 
                        "filter=addr%3Apostcode%3D*+or+area%3A%281.0+..+1E6%29&" + 
                        "format=geojson&" + 
                        "time=%2F%2FP2Y2M2D")
                    .then();
        } catch(Exception e){
        }
    }
    
    
    @Test
    public void test_63() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/density?" + 
                    "bcircles=tjtnU%3A8.7069%2C49.425%2C28&" + 
                    "keys=highway&" + 
                    "values=secondary_link")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_64() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/density?" + 
                    "bcircles=zQKu%3A8.740%2C49.403%2C4&" + 
                    "filter=service%3Ddriveway+or+id%3A%281+..+9999%29&" + 
                    "timeout=65")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_65() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=UO%3A8.7325%2C49.428%2C2%7CrKpem%3A8.709%2C49.43537%2C7%7CdHGF%3A8.729%2C49.4245%2C11&" + 
                    "format=json&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=stop_line&" + 
                    "keys=highway&" + 
                    "time=2017-12-16")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_66() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/density/groupBy/boundary?" + 
                    "bboxes=8.660%2C49.4006%2C8.714%2C49.398%7C8.663%2C49.427764%2C8.7052%2C49.386%7C8.6672%2C49.41576%2C8.759%2C49.392&" + 
                    "filter=addr%3Ahousenumber%21%3D*+or+id%3A%281+..+9999%29&" + 
                    "format=json")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_67() throws Exception {
        
        given().accept("text/csv")
                .get(baseUrlOfSut + "/elements/count/groupBy/tag?" + 
                    "bboxes=j%3A8.672%2C49.403%2C8.736%2C49.397%7CR%3A8.652587%2C49.419761%2C8.7176%2C49.3926%7CJ%3A8.692034%2C49.4046%2C8.71955%2C49.391%7CdJ%3A8.65206%2C49.417615%2C8.709%2C49.382&" + 
                    "format=csv&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=public&" + 
                    "keys=highway&" + 
                    "time=2017-04-12&" + 
                    "timeout=28&" + 
                    "values=crossing")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_68() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/density/groupBy/type?" + 
                    "bcircles=8.716%2C49.424%2C5&" + 
                    "filter=foot%21%3D*+and+not+type%3Anode+and+area%3A%281.0+..+1E6%29&" + 
                    "showMetadata=true&" + 
                    "time=2016-12-16")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(402.0))
                .body("'metadata'.'description'", containsString("Density of selected items (count of items in absolute values divided by the area in square kilometers), aggregated on the type."));
    }
    
    
    @Test
    public void test_69() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/density?" + 
                    "bboxes=8.696%2C49.422%2C8.700%2C49.393&" + 
                    "filter=landuse%3D*+and+not+geometry%3Aline&" + 
                    "showMetadata=false&" + 
                    "time=2008-10-05")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_70() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count?" + 
                    "bcircles=8.7205%2C49.402%2C62%7C8.718%2C49.4160%2C4&" + 
                    "keys=highway&" + 
                    "time=2008-05-24")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_71() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/key?" + 
                    "bcircles=YdE%3A8.71170%2C49.411291%2C6&" + 
                    "filter=addr%3Acountry%21%3D*+and+length%3A%28+..+100%29&" + 
                    "groupByKeys=addr%3Acountry%2Csource%3Amaxspeed&" + 
                    "showMetadata=yes&" + 
                    "timeout=68")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(729.0))
                .body("'metadata'.'description'", containsString("Total area of items in square meters, aggregated on the key."));
    }
    
    
    @Test
    public void test_72() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/density/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=f%3A8.73290%2C49.434%2C4&" + 
                    "format=json&" + 
                    "groupByKey=highway&" + 
                    "keys=highway&" + 
                    "timeout=63&" + 
                    "values=primary_link")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'groupByResult'", hasItems());
    }
    
    
    @Test
    public void test_73() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/groupBy/tag?" + 
                    "bboxes=8.697%2C49.429%2C8.741%2C49.388&" + 
                    "groupByKey=T4&" + 
                    "keys=evomaster_16153_input&" + 
                    "showMetadata=yes&" + 
                    "time=%2F%2FP5M7D&" + 
                    "timeout=97&" + 
                    "values=FrOAHZwYA638L")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(1570.0))
                .body("'metadata'.'description'", containsString("Number of distinct active users per time interval aggregated on the tag."))
                .body("'groupByResult'", hasItems());
    }
    
    
    @Test
    public void test_74() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/groupBy/tag?" + 
                    "bboxes=8.697%2C49.429%2C8.741%2C49.388&" + 
                    "format=json&" + 
                    "groupByKey=tXCoqSCiRQpkWWMs&" + 
                    "groupByValues=synagogue%2Ctrack&" + 
                    "keys=highway&" + 
                    "time=%2F%2FP5M7D&" + 
                    "timeout=97&" + 
                    "values=yUs2P0")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_75() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/ratio/groupBy/boundary?" + 
                    "bboxes=T%3A8.673%2C49.410214%2C8.719815%2C49.392%7CROZ%3A8.65122%2C49.40049%2C8.752%2C49.394&" + 
                    "filter2=oneway%3D*&" + 
                    "keys=highway&" + 
                    "keys2=highway&" + 
                    "time=2011-05-17&" + 
                    "timeout=86&" + 
                    "types2=point%2Cother&" + 
                    "values=stop&" + 
                    "values2=foo")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_76() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/groupBy/boundary/groupBy/tag?" + 
                    "bboxes=8.669%2C49.407%2C8.7262%2C49.3804&" + 
                    "groupByKey=buimding&" + 
                    "groupByValues=crossing%2Csteps%2Cresidential&" + 
                    "keys=highway&" + 
                    "showMetadata=false&" + 
                    "time=2013-06-19")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_77() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/tag?" + 
                    "bboxes=vQF%3A8.655%2C49.4275%2C8.728%2C49.389&" + 
                    "filter=barrier%3D*+and+length%3A%28+..+100%29&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=platform%2Cdemolished%2Cresidential&" + 
                    "showMetadata=yes")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(3762.0))
                .body("'metadata'.'description'", containsString("Total count of items in absolute values, aggregated on the tag."));
    }
    
    
    @Test
    public void test_78() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter?" + 
                    "bboxes=G%3A8.68904%2C49.4200%2C8.7132%2C49.380%7CQ%3A8.6819%2C49.429114%2C8.726071%2C49.397&" + 
                    "format=json&" + 
                    "keys=highway&" + 
                    "showMetadata=true&" + 
                    "time=2012-07-23&" + 
                    "timeout=59&" + 
                    "values=cycleway")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(305.0))
                .body("'metadata'.'description'", containsString("Total perimeter of items in meters."));
    }
    
    
    @Test
    public void test_79() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length?" + 
                    "bboxes=AYkKt%3A8.666698%2C49.41469%2C8.7323%2C49.390%7CH%3A8.6884%2C49.421%2C8.735%2C49.390&" + 
                    "filter=maxspeed%21%3D*+or+type%3Anode&" + 
                    "format=json&" + 
                    "showMetadata=yes&" + 
                    "time=2011-10-30")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(1501.0))
                .body("'metadata'.'description'", containsString("Total length of items in meters."));
    }
    
    
    @Test
    public void test_80() throws Exception {
        
        given().accept("text/csv")
                .get(baseUrlOfSut + "/elements/count/density/groupBy/tag?" + 
                    "bcircles=8.7295%2C49.425%2C59&" + 
                    "filter=lit%3D*+or+area%3A%281.0+..+1E6%29&" + 
                    "format=csv&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=synagogue%2Ctrack")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_81() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/tag?" + 
                    "bcircles=R%3A8.7440%2C49.41032%2C8&" + 
                    "format=json&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=hotel%2Cpath&" + 
                    "showMetadata=no&" + 
                    "time=2008-12-23")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_82() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/density/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=f%3A8.73270%2C49.434%2C4&" + 
                    "format=json&" + 
                    "groupByKey=hjghway&" + 
                    "keys=higlway")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'groupByResult'", hasItems());
    }
    
    
    @Test
    public void test_83() throws Exception {
        
        given().accept("text/csv")
                .get(baseUrlOfSut + "/elements/area/density/groupBy/boundary?" + 
                    "bboxes=8.685%2C49.429%2C8.720%2C49.397%7C8.673%2C49.4183%2C8.73629%2C49.385%7C8.65152%2C49.405804%2C8.7222%2C49.38232&" + 
                    "format=csv&" + 
                    "keys=highway&" + 
                    "timeout=36&" + 
                    "values=living_street")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_84() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/groupBy/boundary?" + 
                    "bcircles=B%3A8.74598%2C49.43392%2C1%7CM%3A8.700%2C49.413%2C3&" + 
                    "format=geojson&" + 
                    "keys=highway&" + 
                    "timeout=90&" + 
                    "values=bus_stop")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'type'", containsString("FeatureCollection"));
    }
    
    
    @Test
    public void test_85() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/groupBy/key?" + 
                    "bboxes=D%3A8.67699%2C49.4006%2C8.714%2C49.395&" + 
                    "filter=oneway%3D*+or+not+type%3Arelation+or+length%3A%28+..+100%29&" + 
                    "groupByKeys=maxspeed%2Cbuilding&" + 
                    "time=2008-06-06")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_86() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/ratio?" + 
                    "bboxes=KSofN%3A8.6880%2C49.419%2C8.701%2C49.394%7CIyJ%3A8.6504%2C49.428%2C8.7035%2C49.39&" + 
                    "keys=foo&" + 
                    "keys2=foo&" + 
                    "time=2018-03-25")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_87() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/type?" + 
                    "bcircles=8.723%2C49.40349%2C2%7C8.715%2C49.416%2C6&" + 
                    "filter=ref%3D*+or+not+id%3A%281+..+9999%29&" + 
                    "showMetadata=false&" + 
                    "timeout=50")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_88() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/groupBy/key?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22BJ%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.711%2C49.41163%5D%2C%5B8.704510%2C49.427%5D%2C%5B8.741%2C49.41668%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22YZo%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.738200%2C49.401210%5D%2C%5B8.721%2C49.4180%5D%2C%5B8.711097%2C49.426%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "format=geojson&" + 
                    "groupByKeys=smoothness%2Caddr%3Apostcode%2Cturn%3Alanes&" + 
                    "keys=highway&" + 
                    "time=2012-09-03&" + 
                    "values=track")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_89() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/type?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22zx%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.710%2C49.416%5D%2C%5B8.7044%2C49.436%5D%2C%5B8.721%2C49.4394%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22XKyg%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.71104%2C49.4395%5D%2C%5B8.7018%2C49.428684%5D%2C%5B8.702%2C49.4168%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "keys=highway&" + 
                    "showMetadata=yes")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(246.0))
                .body("'metadata'.'description'", containsString("Total area of items in square meters, aggregated on the type."));
    }
    
    
    @Test
    public void test_90() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density/groupBy/tag?" + 
                    "bboxes=RUlq%3A8.689%2C49.406%2C8.739003%2C49.386%7CRhK%3A8.655%2C49.407532%2C8.7590%2C49.390&" + 
                    "filter=oneway%3D*&" + 
                    "groupByKey=building&" + 
                    "showMetadata=yes")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(303.0))
                .body("'metadata'.'description'", containsString("Density of selected items (length of items in meters divided by the area in square kilometers), aggregated on the tag."));
    }
    
    
    @Test
    public void test_91() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/density/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=hGULh%3A8.703%2C49.4346%2C7%7CYl%3A8.710403%2C49.4299%2C5%7Cy%3A8.7086%2C49.416%2C9%7CS%3A8.719%2C49.417054%2C4&" + 
                    "groupByKey=building&" + 
                    "groupByValues=emergency_access_point%2Cgarage&" + 
                    "showMetadata=yes")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(772.0))
                .body("'metadata'.'description'", containsString("Density of selected items (length of items in meters divided by the area in square kilometers), aggregated on the boundary and on the tag."));
    }
    
    
    @Test
    public void test_92() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/density/groupBy/type?" + 
                    "bcircles=wU%3A8.72695%2C49.401%2C9&" + 
                    "filter=destination%3D*+and+geometry%3Aline+or+id%3A%281+..+9999%29&" + 
                    "showMetadata=yes")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(285.0))
                .body("'metadata'.'description'", containsString("Density of selected items (count of items in absolute values divided by the area in square kilometers), aggregated on the type."));
    }
    
    
    @Test
    public void test_93() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/type?" + 
                    "bcircles=sae%3A8.704%2C49.415%2C1%7CKdyKJ%3A8.72773%2C49.439607%2C64&" + 
                    "format=json&" + 
                    "keys=highway&" + 
                    "timeout=55")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_94() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/key?" + 
                    "bcircles=8.7176%2C49.406%2C3&" + 
                    "format=json&" + 
                    "groupByKeys=tracktype&" + 
                    "keys=highway&" + 
                    "showMetadata=true&" + 
                    "timeout=65&" + 
                    "values=elevator")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(233.0))
                .body("'metadata'.'description'", containsString("Total area of items in square meters, aggregated on the key."));
    }
    
    
    @Test
    public void test_95() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density/groupBy/type?" + 
                    "bboxes=8.655%2C49.4288%2C8.747%2C49.38219&" + 
                    "keys=highway&" + 
                    "showMetadata=true&" + 
                    "time=2009-02-07")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(1589.0))
                .body("'metadata'.'description'", containsString("Density of selected items (area of items in square meters divided by the area in square kilometers), aggregated on the type."));
    }
    
    
    @Test
    public void test_96() throws Exception {
        
        given().accept("text/csv")
                .post(baseUrlOfSut + "/elements/area/density/groupBy/tag?" + 
                    "bcircles=8.738%2C49.4052%2C9&" + 
                    "filter=natural%3Dwood+or+length%3A%28+..+100%29&" + 
                    "format=csv&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=yes%2Croof&" + 
                    "time=2013-12-16")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_97() throws Exception {
        
        given().accept("text/csv")
                .post(baseUrlOfSut + "/elements/length/groupBy/tag?" + 
                    "bcircles=8.728668%2C49.42156%2C9&" + 
                    "format=csv&" + 
                    "groupByKey=building&" + 
                    "keys=highway&" + 
                    "timeout=98")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_98() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/density/groupBy/boundary?" + 
                    "bboxes=8.699%2C49.405%2C8.739%2C49.399%7C8.66921%2C49.4220%2C8.733065%2C49.3816&" + 
                    "filter=type%21%3D*+or+not+area%3A%281.0+..+1E6%29&" + 
                    "format=geojson&" + 
                    "timeout=68")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'type'", containsString("FeatureCollection"));
    }
    
    
    @Test
    public void test_99() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/groupBy/boundary?" + 
                    "bboxes=8.6661%2C49.409%2C8.702522%2C49.3987%7C8.6922%2C49.4297%2C8.745%2C49.380&" + 
                    "filter=addr%3Apostcode%3D*+and+geometry%3Aline&" + 
                    "format=json&" + 
                    "showMetadata=no")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_100() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/density/groupBy/type?" + 
                    "bcircles=e%3A8.7066%2C49.40026%2C3%7CcetX%3A8.744%2C49.43087%2C6&" + 
                    "format=geojson&" + 
                    "keys=highway&" + 
                    "showMetadata=false&" + 
                    "time=2008-03-30&" + 
                    "values=traffic_mirror")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_101() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density/groupBy/boundary?bcircles=vXLLR%3A8.72182%2C49.407%2C5%7Chi%3A8.7384%2C49.4030%2C48%7CfqB%3A8.731%2C49.4230%2C379%7CX%3A8.70791%2C49.4223%2C6")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_102() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/groupBy/boundary/groupBy/tag?" + 
                    "bboxes=t%3A8.6808%2C49.4148%2C8.735%2C49.382&" + 
                    "groupByKey=building&" + 
                    "groupByValues=chapel%2Cship%2Cstation&" + 
                    "keys=highway&" + 
                    "values=emergency_access_point")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_103() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/density/groupBy/boundary?" + 
                    "bboxes=U%3A8.691%2C49.425%2C8.732221%2C49.383&" + 
                    "keys=highway&" + 
                    "values=secondary")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_104() throws Exception {
        
        given().accept("text/csv")
                .get(baseUrlOfSut + "/elements/count/density/groupBy/boundary?" + 
                    "bboxes=W%3A8.65352%2C49.4210%2C8.756%2C49.394%7CIYsf%3A8.673%2C49.40040%2C8.710%2C49.394%7CNDG%3A8.689%2C49.4212%2C8.7307%2C49.3912&" + 
                    "format=csv&" + 
                    "keys=highway&" + 
                    "values=steps")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_105() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count?" + 
                    "bcircles=8.7411%2C49.427%2C3%7C8.722%2C49.419%2C21%7C8.7076%2C49.4050%2C8%7C8.705%2C49.418%2C3&" + 
                    "keys=highway&" + 
                    "time=2013-07-02")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_106() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/tag?" + 
                    "bboxes=vQF%3A8.655%2C49.4275%2C8.728%2C49.389&" + 
                    "filter=barrier%3D*+and+length%3A%28+..+100%29&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=platform%2Cdemolished%2Cresidential&" + 
                    "showMetadata=yes&" + 
                    "time=2017-05-30")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(384.0))
                .body("'metadata'.'description'", containsString("Total count of items in absolute values, aggregated on the tag."));
    }
    
    
    @Test
    public void test_107() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/ratio?" + 
                    "bboxes=8.684%2C49.424%2C8.73350%2C49.380%7C8.6637%2C49.401%2C8.73581%2C49.38086%7C8.655%2C49.418%2C8.70753%2C49.380%7C8.672%2C49.401217%2C8.756%2C49.382313&" + 
                    "filter=surface%21%3D*+or+geometry%3Aline&" + 
                    "filter2=bicycle%21%3D*+and+geometry%3Apoint&" + 
                    "format=geojson&" + 
                    "keys2=highway&" + 
                    "values2=secondary")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_108() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=nk%3A8.721070%2C49.428%2C7%7CAJ%3A8.70608%2C49.405%2C92&" + 
                    "groupByKey=building&" + 
                    "groupByValues=demolished%2Cgive_way&" + 
                    "keys=highway&" + 
                    "showMetadata=true&" + 
                    "timeout=48&" + 
                    "values=cycleway")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(1908.0))
                .body("'metadata'.'description'", containsString("Total area of items in square meters, aggregated on the boundary and on the tag."));
    }
    
    
    @Test
    public void test_109() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/ratio?" + 
                    "bboxes=8.674%2C49.425797%2C8.758%2C49.38&" + 
                    "filter2=maxspeed%3D*+or+not+geometrz%3Apoint+and+id%3A%281+..+9999%29&" + 
                    "keys=foo&" + 
                    "keys2=highway&" + 
                    "time=2015-10-25&" + 
                    "timeout=53&" + 
                    "values2=foo")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_110() throws Exception {
        
        given().accept("text/csv")
                .post(baseUrlOfSut + "/elements/length/groupBy/tag?" + 
                    "bcircles=8.728668%2C49.42156%2C9&" + 
                    "format=csv&" + 
                    "groupByKey=building&" + 
                    "keys=highxay&" + 
                    "timeout=98")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_111() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count?" + 
                    "bcircles=GJ%3A8.7236%2C49.4307%2C4%7COw%3A8.714%2C49.41607%2C50&" + 
                    "filter=highway%3D*+and+area%3A%281.0+..+1E6%29&" + 
                    "format=geojson")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_112() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/boundary?" + 
                    "bcircles=C%3A8.7458%2C49.4061%2C95%7Cm%3A8.7031%2C49.4218%2C7%7CyGw%3A8.7208%2C49.413867%2C2&" + 
                    "filter=addr%3Apostcode%3D*+or+area%3A%281.0+..+1E6%29&" + 
                    "showMetadata=true&" + 
                    "time=2010-02-26&" + 
                    "timeout=50")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(617.0))
                .body("'metadata'.'description'", containsString("Total count of items in absolute values."));
    }
    
    
    @Test
    public void test_113() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/boundary?" + 
                    "bcircles=WB%3A8.737%2C49.400%2C9&" + 
                    "format=json&" + 
                    "showMetadata=no")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_114() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/density/groupBy/tag?" + 
                    "bboxes=8.652%2C49.416%2C8.711%2C49.397%7C8.6656%2C49.418%2C8.755%2C49.391%7C8.682844%2C49.429%2C8.7162%2C49.398%7C8.662%2C49.426%2C8.7088%2C49.39052&" + 
                    "filter=oneway%21%3D*+and+length%3A%28+..+100%29&" + 
                    "groupByKey=building&" + 
                    "groupByValues=stop%2Cresidential%2Cturning_circle&" + 
                    "showMetadata=false&" + 
                    "time=2010-02-18&" + 
                    "timeout=48")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_115() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/density/groupBy/boundary/groupBy/tag?" + 
                    "bboxes=qQ%3A8.665%2C49.428%2C8.7220%2C49.385&" + 
                    "format=json&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=service%2Cship%2Cdemolished&" + 
                    "time=2014-12-03")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_116() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/density?" + 
                    "bboxes=SPt%3A8.671%2C49.419%2C8.715%2C49.383%7CgYy%3A8.671%2C49.403%2C8.711%2C49.381%7CPj%3A8.686%2C49.4110%2C8.745%2C49.380&" + 
                    "format=geojson&" + 
                    "keys=highway&" + 
                    "showMetadata=no&" + 
                    "time=2014-04-08&" + 
                    "values=track")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_117() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area?" + 
                    "bcircles=8.70241%2C49.423812%2C678%7C8.738%2C49.423%2C31%7C8.744%2C49.430%2C2%7C8.705%2C49.4100%2C266&" + 
                    "filter=oneway%3D*+and+id%3A%281+..+9999%29&" + 
                    "showMetadata=yes")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(243.0))
                .body("'metadata'.'description'", containsString("Total area of items in square meters."));
    }
    
    
    @Test
    public void test_118() throws Exception {
        
        given().accept("text/csv")
                .post(baseUrlOfSut + "/elements/perimeter/density/groupBy/type?" + 
                    "bboxes=8.6790%2C49.42654%2C8.754%2C49.385&" + 
                    "format=csv&" + 
                    "keys=highway")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_119() throws Exception {
        
        given().accept("text/csv")
                .post(baseUrlOfSut + "/elements/perimeter/density/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=E%3A8.747205%2C49.41476%2C2%7Ch%3A8.728%2C49.412%2C3&" + 
                    "format=csv&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=yes%2Cunclassified&" + 
                    "keys=highway&" + 
                    "time=2016-05-10&" + 
                    "timeout=25&" + 
                    "values=elevator")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_120() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/groupBy/key?" + 
                    "bboxes=J%3A8.6884%2C49.427%2C8.748304%2C49.381%7CW%3A8.650624%2C49.426%2C8.7413%2C49.3927&" + 
                    "groupByKeys=addr%3Acity&" + 
                    "keys=highway&" + 
                    "showMetadata=yes&" + 
                    "time=2012-07-08&" + 
                    "values=give_way")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(369.0))
                .body("'metadata'.'description'", containsString("Total perimeter of items in meters, aggregated on the key."));
    }
    
    
    @Test
    public void test_121() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/ratio?" + 
                    "bboxes=8.674%2C49.425797%2C8.758%2C49.387&" + 
                    "filter2=maxspeed%3D*+or+not+geometry%3Apoint+and+id%3A%281+..+9999%29&" + 
                    "format=json&" + 
                    "keys=foo&" + 
                    "keys2=highway&" + 
                    "time=2015-10-25&" + 
                    "timeout=53&" + 
                    "types2=line%2Cpolygon%2C")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_122() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density/groupBy/type?" + 
                    "bboxes=S%3A8.650007%2C49.417%2C8.7080%2C49.381&" + 
                    "format=json&" + 
                    "showMetadata=yes&" + 
                    "timeout=53")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(1264.0))
                .body("'metadata'.'description'", containsString("Density of selected items (length of items in meters divided by the area in square kilometers), aggregated on the type."));
    }
    
    
    @Test
    public void test_123() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/density/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=8.71700%2C49.4308%2C2%7C8.714%2C49.405840%2C7&" + 
                    "format=geojson&" + 
                    "groupByKey=highway&" + 
                    "showMetadata=no&" + 
                    "time=2008-07-03&" + 
                    "timeout=37")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'type'", containsString("FeatureCollection"));
    }
    
    
    @Test
    public void test_124() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/density/groupBy/boundary?" + 
                    "bcircles=Q%3A8.703%2C49.411%2C1%7Cb%3A8.705%2C49.419%2C28&" + 
                    "keys=highway&" + 
                    "showMetadata=false&" + 
                    "time=2010-01-30")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_125() throws Exception {
        
        given().accept("text/csv")
                .post(baseUrlOfSut + "/elements/length/density?" + 
                    "bpolys=8.704561%2C49.403252%2C8.700%2C49.424%2C8.734613%2C49.429%2C8.720%2C49.407%2C8.704561%2C49.403252&" + 
                    "format=csv&" + 
                    "keys=highway&" + 
                    "showMetadata=false&" + 
                    "values=steps")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_126() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count?" + 
                    "bcircles=DU%3A8.7477%2C49.406507%2C2%7CQZZ%3A8.713%2C49.433%2C5%7CDZtEr%3A8.726%2C49.418%2C55&" + 
                    "filter=maxspeed%21%3D*+and+geometry%3Apolygon+and+length%3A%28+..+100%29&" + 
                    "time=%2F%2FP1Y4D&" + 
                    "timeout=22")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_127() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=8.704561%2C49.403252%2C8.708%2C49.404425%2C8.71500%2C49.437%2C8.7042%2C49.404%2C8.704561%2C49.403252&" + 
                    "filter=ref%21%3D*+or+area%3A%281.0+..+1E6%29&" + 
                    "groupByKey=highway&" + 
                    "showMetadata=true&" + 
                    "time=2012-12-26&" + 
                    "timeout=77")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(762.0))
                .body("'metadata'.'description'", containsString("Total length of items in meters, aggregated on the boundary and on the tag."));
    }
    
    
    @Test
    public void test_128() throws Exception {
        
        given().accept("text/csv")
                .post(baseUrlOfSut + "/elements/perimeter/density/groupBy/tag?" + 
                    "bpolys=8.704561%2C49.403252%2C8.7488%2C49.4116%2C8.731%2C49.412%2C8.716%2C49.439%2C8.704561%2C49.403252&" + 
                    "filter=type%3D*&" + 
                    "format=csv&" + 
                    "groupByKey=building&" + 
                    "showMetadata=no&" + 
                    "time=2009-06-08&" + 
                    "timeout=91")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_129() throws Exception {
        
        given().accept("text/csv")
                .post(baseUrlOfSut + "/users/count/density/groupBy/boundary?" + 
                    "bboxes=UsxMR%3A8.6996%2C49.42108%2C8.7236%2C49.386%7CHz%3A8.68666%2C49.420%2C8.70181%2C49.391%7CXc%3A8.6866%2C49.42509%2C8.7277%2C49.397%7Cfq%3A8.697755%2C49.401%2C8.738%2C49.39262&" + 
                    "format=csv&" + 
                    "keys=highway&" + 
                    "showMetadata=true&" + 
                    "time=%2F%2FP6M25D&" + 
                    "timeout=64")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_130() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/ratio/groupBy/boundary?" + 
                    "bboxes=T%3A8.673%2C49.410214%2C8.719815%2C49.392%7CROZ%3A8.65122%2C49.40049%2C8.752%2C49.394&" + 
                    "filter2=oneway%3D*&" + 
                    "keys=highway&" + 
                    "keys2=highway&" + 
                    "time=2011-05-17&" + 
                    "timeout=86&" + 
                    "types2=point%2Cother&" + 
                    "values=stop")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_131() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/density/groupBy/tag?" + 
                    "bcircles=IKceP%3A8.733089%2C49.4044%2C2%7CAdU%3A8.7406%2C49.418%2C5&" + 
                    "format=json&" + 
                    "groupByKey=building&" + 
                    "groupByValues=crossing&" + 
                    "showMetadata=true&" + 
                    "timeout=81")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(1096.0))
                .body("'metadata'.'description'", containsString("Density of selected items (perimeter of items in meters divided by the area in square kilometers), aggregated on the tag."));
    }
    
    
    @Test
    public void test_132() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/density?" + 
                    "bpolys=dxb%3A8.704561%2C49.403252%2C8.7485%2C49.431%2C8.7023%2C49.4395%2C8.7280%2C49.42736%2C8.704561%2C49.403252&" + 
                    "keys=highway&" + 
                    "timeout=77&" + 
                    "values=primary")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_133() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/density?" + 
                    "bcircles=8.744%2C49.4349%2C7&" + 
                    "keys=highway&" + 
                    "timeout=96&" + 
                    "values=secondary")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_134() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/key?" + 
                    "bcircles=8.717%2C49.4130%2C3&" + 
                    "format=geojson&" + 
                    "groupByKeys=bicycle%2Cmaxspeed&" + 
                    "keys=highway&" + 
                    "timeout=98&" + 
                    "values=emergency_access_point")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_135() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/ratio/groupBy/boundary?" + 
                    "bboxes=8.693358%2C49.403090%2C8.750%2C49.395363&" + 
                    "format=geojson&" + 
                    "keys=highway&" + 
                    "keys2=highway&" + 
                    "timeout=62&" + 
                    "values=residential&" + 
                    "values2=unclassified")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'type'", containsString("FeatureCollection"));
    }
    
    
    @Test
    public void test_136() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/groupBy/tag?" + 
                    "bboxes=8.670%2C49.427%2C8.7488%2C49.386%7C8.699%2C49.4043%2C8.732%2C49.391&" + 
                    "filter=source%3Amaxspeed%21%3D*+and+not+length%3A%28+..+100%29&" + 
                    "format=geojson&" + 
                    "groupByKey=highway&" + 
                    "time=2013-11-26&" + 
                    "timeout=37")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'groupByResult'", hasItems());
    }
    
    
    @Test
    public void test_137() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/boundary?" + 
                    "bcircles=A%3A8.74094%2C49.4294%2C8%7CJBc%3A8.709695%2C49.404%2C7&" + 
                    "keys=highway&" + 
                    "showMetadata=yes&" + 
                    "time=%2F%2FP18D&" + 
                    "timeout=64")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(998.0))
                .body("'metadata'.'description'", containsString("Number of distinct active users per time interval aggregated on the boundary."));
    }
    
    
    @Test
    public void test_138() throws Exception {
        
        given().accept("text/csv")
                .get(baseUrlOfSut + "/elements/length/groupBy/boundary?" + 
                    "bcircles=K%3A8.744%2C49.404%2C6&" + 
                    "format=csv&" + 
                    "keys=highway&" + 
                    "showMetadata=yes&" + 
                    "time=2011-04-02&" + 
                    "values=crossing")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_139() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/groupBy/boundary/groupBy/tag?" + 
                    "bboxes=8.669%2C49.407%2C8.7262%2C49.3804&" + 
                    "groupByKey=building&" + 
                    "groupByValues=crossing%2Csteps%2Cresidential&" + 
                    "keys=highway&" + 
                    "showMetadata=false&" + 
                    "time=2013-06-19")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_140() throws Exception {
        
        given().accept("text/csv")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/type?" + 
                    "bboxes=Z%3A8.663%2C49.413%2C8.718%2C49.393&" + 
                    "format=csv&" + 
                    "showMetadata=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_141() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/ratio?" + 
                    "bboxes=8.674%2C49.425797%2C8.758%2C49.387&" + 
                    "filter2=maxspeed%3D*+or+not+geometry%3Apoint+and+id%3A%281+..+9999%29&" + 
                    "format=json&" + 
                    "keys2=highway&" + 
                    "time=2015-10-25&" + 
                    "timeout=53&" + 
                    "types2=line%2Cpolygon%2C")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_142() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/boundary?" + 
                    "bcircles=T%3A8.725421%2C49.436%2C67&" + 
                    "format=geojson&" + 
                    "showMetadata=yes&" + 
                    "time=2009-10-30")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(560.0))
                .body("'metadata'.'description'", containsString("Total perimeter of items in meters."))
                .body("'type'", containsString("FeatureCollection"));
    }
    
    
    @Test
    public void test_143() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/groupBy/tag?" + 
                    "bboxes=8.697%2C49.429%2C8.741%2C49.388&" + 
                    "format=json&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=synagogue%2Ctrack&" + 
                    "keys=highway&" + 
                    "showMetadata=yes&" + 
                    "time=%2F%2FP5M7D&" + 
                    "timeout=97")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(1179.0))
                .body("'metadata'.'description'", containsString("Number of distinct active users per time interval aggregated on the tag."));
    }
    
    
    @Test
    public void test_144() throws Exception {
        
        given().accept("text/csv")
                .post(baseUrlOfSut + "/users/count/groupBy/key?" + 
                    "bboxes=y%3A8.6920%2C49.4204%2C8.715682%2C49.3990%7Cs%3A8.6786%2C49.4077%2C8.7004%2C49.3916%7Cu%3A8.650%2C49.424818%2C8.72764%2C49.3972%7CB%3A8.657%2C49.4069%2C8.736%2C49.393&" + 
                    "format=csv&" + 
                    "groupByKeys=oneway%2Clanes%2Cdestination&" + 
                    "keys=highway&" + 
                    "time=%2F%2FP3M4D&" + 
                    "timeout=49")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_145() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/ratio/groupBy/boundary?" + 
                    "bpolys=iHjkf%3A8.704561%2C49.403252%2C8.714%2C49.402%2C8.749018%2C49.413%2C8.717%2C49.4203%2C8.704561%2C49.403252&" + 
                    "filter=highway%21%3D*+and+not+geometry%3Apolygon+and+not+length%3A%28+..+100%29&" + 
                    "filter2=oneway%21%3D*+or+not+area%3A%281.0+..+1E6%29&" + 
                    "showMetadata=no&" + 
                    "time=2014-11-18&" + 
                    "timeout=57")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_146() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/ratio?" + 
                    "bboxes=iP%3A8.665%2C49.424%2C8.7015%2C49.384%7CodTOM%3A8.67127%2C49.416%2C8.7350%2C49.3839&" + 
                    "filter2=ref%21%3D*+and+area%3A%281.0+..+1E6%29&" + 
                    "format=json&" + 
                    "keys=highway&" + 
                    "timeout=45&" + 
                    "types2=point%2C")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_147() throws Exception {
        
        given().accept("text/csv")
                .post(baseUrlOfSut + "/elements/perimeter/ratio/groupBy/boundary?" + 
                    "bcircles=K%3A8.7227%2C49.43334%2C93&" + 
                    "format=csv&" + 
                    "keys=highway&" + 
                    "keys2=highway&" + 
                    "timeout=46&" + 
                    "types2=line%2Cpolygon%2Cother&" + 
                    "values=primary&" + 
                    "values2=residential")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_148() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/type?" + 
                    "bcircles=o%3A8.737%2C49.41341%2C387&" + 
                    "keys=highway&" + 
                    "values=tertiary")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_149() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/key?" + 
                    "bboxes=y%3A8.6920%2C49.4204%2C8.715682%2C49.3990%7Cs%3A8.6786%2C49.4077%2C8.7004%2C49.3916%7Cu%3A8.650%2C49.424818%2C8.72764%2C49.3972%7CB%3A8.657%2C49.4069%2C8.736%2C49.393&" + 
                    "filter=evomaster_13011_input&" + 
                    "format=csv&" + 
                    "groupByKeys=evomaster_13012_input&" + 
                    "keys=highway&" + 
                    "time=evomaster_13013_input&" + 
                    "timeout=4&" + 
                    "types=foo&" + 
                    "values=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Parameter 'types' (and 'types2') can only have 'node' and/or 'way' and/or 'relation' OR 'point' and/or 'line' and/or 'polygon' and/or 'other'"));
    }
    
    
    @Test
    public void test_150() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/groupBy/key?" + 
                    "bpolys=z8sjo4StzNf&" + 
                    "format=qrKius&" + 
                    "groupByKeys=Al_mnQ1P&" + 
                    "keys=0oMeJkTOXR&" + 
                    "showMetadata=mlnZ5vkgA8imcw&" + 
                    "time=04riiRcLL_494&" + 
                    "types=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_151() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/groupBy/boundary?" + 
                    "bpolys=qpz2hJz0IIYUJ1cl&" + 
                    "keys=AJE&" + 
                    "time=gZ")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_152() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/density/groupBy/type?" + 
                    "bboxes=foo&" + 
                    "bcircles=foo&" + 
                    "bpolys=evomaster_415_input&" + 
                    "filter=evomaster_414_input&" + 
                    "keys=foo&" + 
                    "showMetadata=evomaster_416_input&" + 
                    "time=y3yBtG&" + 
                    "timeout=81&" + 
                    "values=evomaster_418_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_153() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/density/groupBy/type?" + 
                    "bboxes=&" + 
                    "bcircles=evomaster_3001_input&" + 
                    "bpolys=ngBN&" + 
                    "filter=evomaster_7191_input&" + 
                    "format=zSq_MJLOAw89W&" + 
                    "keys=evomaster_3003_input&" + 
                    "showMetadata=VVvbWwuOal&" + 
                    "timeout=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_154() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/density/groupBy/tag?" + 
                    "bpolys=%3F&" + 
                    "filter=7HuQs2XK&" + 
                    "format=evomaster_27023_input&" + 
                    "groupByKey=evomaster_27029_input&" + 
                    "groupByValues=YGDS&" + 
                    "showMetadata=XWJHOLiK&" + 
                    "time=evomaster_27030_input&" + 
                    "values=URX7")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_155() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/density/groupBy/tag?" + 
                    "bcircles=daVZ%3A8.715256%2C49.410%2C4%7COUzYX%3A8.709%2C49.402%2C2%7Cm%3A827%2F2020%2C49.401%2C70%7CU%3A8.7302%2C49.413%2C1580058951&" + 
                    "format=foo&" + 
                    "groupByKey=duikUi&" + 
                    "groupByValues=yes%2Cchuqch%28hospita&" + 
                    "keys=fw&" + 
                    "showMetadata=um&" + 
                    "time=%2F%2FP1Y2M5D")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Each bcircle must consist of a lon/lat coordinate pair plus a buffer in meters."));
    }
    
    
    @Test
    public void test_156() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/density/groupBy/boundary?" + 
                    "bboxes=UsxMR%3A8.6996%2C49.42108%2C8.7236%2C49.386%7CHz%3A8.68666%2C49.420%2C8.70181%2C49.391%7CXc%3A8.6866%2C49.42509%2C8.7277%2C49.397%7Cfq%3A8.697755%2C49.401%2C8.738%2C49.39262&" + 
                    "filter=foo&" + 
                    "format=csv&" + 
                    "keys=highway&" + 
                    "showMetadata=true&" + 
                    "time=%2F%2FP6M25D&" + 
                    "timeout=64&" + 
                    "values=evomaster_24268_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The keys, values and types parameters must be empty, when you set the filter parameter."));
    }
    
    
    @Test
    public void test_157() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/density/groupBy/boundary?" + 
                    "bboxes=foo&" + 
                    "bcircles=evomaster_499_input&" + 
                    "bpolys=evomaster_500_input&" + 
                    "format=evomaster_497_input&" + 
                    "showMetadata=yes&" + 
                    "timeout=78&" + 
                    "types=evomaster_501_input&" + 
                    "values=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_158() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/density?" + 
                    "bcircles=tltnU%3A8.7069%2C49.425%2C28&" + 
                    "format=foo&" + 
                    "keys=jighway&" + 
                    "time=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given 'format' parameter is invalid. Please choose between 'geojson'(only available for /groupBy/boundary and data extraction requests), 'json', or 'csv'."));
    }
    
    
    @Test
    public void test_159() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count?" + 
                    "bcircles=DU%3A8.7477%2C49.406507%2C2%7CQZZ%3A8.713%2C49.433%2C5%7CDZtEr%3A8.726%2C49.418%2C55&" + 
                    "filter=maxspeed%21%3D*+and+geometry%3Apolygon+and+length%3A%28+..+100%29&" + 
                    "format=foo&" + 
                    "keys=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given 'format' parameter is invalid. Please choose between 'geojson'(only available for /groupBy/boundary and data extraction requests), 'json', or 'csv'."));
    }
    
    
    @Test
    public void test_160() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count?" + 
                    "bpolys=foo&" + 
                    "filter=highway%3D*+and+area%3A%281.0+..+1E6%29&" + 
                    "keys=foo&" + 
                    "showMetadata=foo&" + 
                    "types=foo&" + 
                    "values=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_161() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/ratio/groupBy/boundary?" + 
                    "bcircles=K%3A8.7227%2C49.43334%2C93&" + 
                    "filter2=foo&" + 
                    "format=csv&" + 
                    "keys=highway&" + 
                    "keys2=highway&" + 
                    "time=foo&" + 
                    "types=foo&" + 
                    "types2=evomaster_595_input&" + 
                    "values=evomaster_596_input&" + 
                    "values2=evomaster_597_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Parameter 'types' (and 'types2') can only have 'node' and/or 'way' and/or 'relation' OR 'point' and/or 'line' and/or 'polygon' and/or 'other'"));
    }
    
    
    @Test
    public void test_162() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/ratio/groupBy/boundary?" + 
                    "bpolys=mn2i9_Q_ABsBu4G&" + 
                    "filter=O&" + 
                    "filter2=evomaster_638_input&" + 
                    "format=5xkEi4sD5f_yB7p&" + 
                    "keys=evomaster_639_input&" + 
                    "keys2=evomaster_642_input&" + 
                    "time=tNIpjoMrvF4&" + 
                    "timeout=R6&" + 
                    "types2=IrBH9uNj2aqQ48")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_163() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/ratio?" + 
                    "bcircles=8.749%2C49.4302%2C6%7C8.743%2C47.409%2C1%7C8.728%2C49.436%2C69376UU392%7C8.738%2C49.416%2C56&" + 
                    "filter=S&" + 
                    "filter2=building%3D*+and+type%3Arelatinn&" + 
                    "format=csV&" + 
                    "keys=fighw%5Dx&" + 
                    "keys2=hgggway&" + 
                    "showMetadata=fmn&" + 
                    "time=2.08-04-16&" + 
                    "timeout=40&" + 
                    "types=hpo&" + 
                    "types2=point%2Cpolygon%2Cothe&" + 
                    "values=jsq&" + 
                    "values2=Wsm")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Each bcircle must consist of a lon/lat coordinate pair plus a buffer in meters."));
    }
    
    
    @Test
    public void test_164() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/type?" + 
                    "bboxes=NMU4KTwdIG1PtA2p&" + 
                    "bcircles=LgBFZSXm&" + 
                    "keys=1ZrUg&" + 
                    "time=h&" + 
                    "timeout=26gzkyA")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_165() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/groupBy/type?" + 
                    "bpolys=PsrB7mc&" + 
                    "filter=UbYAojr4oKWd88R&" + 
                    "format=kAU&" + 
                    "values=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_166() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/groupBy/tag?" + 
                    "bboxes=8.670%2C49.427%2C8.7488%2C49.386%7C8.699%2C49.4043%2C8.732%2C49.391&" + 
                    "filter=source%3Amaxspeed%21%3D*+and+not+length%3A%28+..+100%29&" + 
                    "format=geojson&" + 
                    "groupByKey=highway&" + 
                    "timeout=37&" + 
                    "types=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Parameter 'types' (and 'types2') can only have 'node' and/or 'way' and/or 'relation' OR 'point' and/or 'line' and/or 'polygon' and/or 'other'"));
    }
    
    
    @Test
    public void test_167() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/key?" + 
                    "bcircles=8.717%2C49.4130%2C3&" + 
                    "format=geojson&" + 
                    "groupByKeys=bicycle%2Cmaxspeed&" + 
                    "keys=highway&" + 
                    "time=foo&" + 
                    "values=emergency_access_point")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_168() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/groupBy/key?" + 
                    "bboxes=J%3A8.6884%2C49.427%2C8.748304%2C49.381%7CW%3A8.650624%2C49.426%2C8.7413%2C49.3927&" + 
                    "groupByKeys=addr%3Acity&" + 
                    "keys=highway&" + 
                    "showMetadata=yes&" + 
                    "time=2012-07-08&" + 
                    "types=foo&" + 
                    "values=give_way")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Parameter 'types' (and 'types2') can only have 'node' and/or 'way' and/or 'relation' OR 'point' and/or 'line' and/or 'polygon' and/or 'other'"));
    }
    
    
    @Test
    public void test_169() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=foo&" + 
                    "bpolys=evomaster_365_input&" + 
                    "filter=tracktype%21%3D*+or+type%3Anode+and+area%3A%281.0+..+1E6%29&" + 
                    "format=foo&" + 
                    "groupByKey=evomaster_1136_input&" + 
                    "groupByValues=garage%2Cuniversity&" + 
                    "keys=evomaster_1139_input&" + 
                    "showMetadata=evomaster_1137_input&" + 
                    "time=fo_&" + 
                    "timeout=0.8143122593317628&" + 
                    "values=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_170() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=wo2IzAHID&" + 
                    "filter=auxQSWYaPA&" + 
                    "format=bEOV3jww02oJv&" + 
                    "groupByKey=dksuq2RGBx4OcGS&" + 
                    "groupByValues=z9FaH7b8lxK45um4&" + 
                    "showMetadata=C&" + 
                    "time=8ydyNvr_Trp&" + 
                    "types=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_171() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/boundary?" + 
                    "bcircles=T%3A8.725421%2C49.436%2C67&" + 
                    "filter=foo&" + 
                    "format=geojson&" + 
                    "keys=foo&" + 
                    "showMetadata=yes&" + 
                    "time=2009-10-30&" + 
                    "types=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Parameter 'types' (and 'types2') can only have 'node' and/or 'way' and/or 'relation' OR 'point' and/or 'line' and/or 'polygon' and/or 'other'"));
    }
    
    
    @Test
    public void test_172() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/groupBy/boundary?" + 
                    "bcircles=B%3A8.74598%2C49.43392%2C1%7CM%3A8.700%2C49.413%2C3&" + 
                    "timeout=90&" + 
                    "values=bus_stop")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("There cannot be more input values in the values|values2 than in the keys|keys2 parameter, as values_n must fit to keys_n."));
    }
    
    
    @Test
    public void test_173() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/density/groupBy/type?" + 
                    "bboxes=kZvUWHf3Y6&" + 
                    "bcircles=YkNFazG9XsdeFH&" + 
                    "format=vJQAOy8cUqzL1&" + 
                    "showMetadata=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_174() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/density/groupBy/tag?" + 
                    "bcircles=foo&" + 
                    "bpolys=8.704561%2C49.403252%2C8.7488%2C49.4116%2C8.731%2C49.412%2C8.716%2C49.439%2C8.704561%2C49.403252&" + 
                    "filter=evomaster_140_input&" + 
                    "format=cov&" + 
                    "groupByKey=evomaster_138_input&" + 
                    "groupByValues=foo&" + 
                    "showMetadata=n%7F&" + 
                    "time=2009-06-08&" + 
                    "timeout=0.4788695089927061&" + 
                    "values=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_175() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/density/groupBy/tag?" + 
                    "bcircles=IKceP%3A8.733089%2C49.4044%2C2%7CAdU%3A8.7406%2C49.418%2C5&" + 
                    "format=json&" + 
                    "groupByKey=building&" + 
                    "groupByValues=crossing&" + 
                    "showMetadata=true&" + 
                    "timeout=81&" + 
                    "values=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("There cannot be more input values in the values|values2 than in the keys|keys2 parameter, as values_n must fit to keys_n."));
    }
    
    
    @Test
    public void test_176() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/density/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=E%3A8.747205%2C49.41476%2C2%7Ch%3A8.728%2C49.412%2C3&" + 
                    "format=csv&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=yes%2Cunelassified&" + 
                    "time=2016-05-10&" + 
                    "timeout=25&" + 
                    "types=foo&" + 
                    "values=elevator")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Parameter 'types' (and 'types2') can only have 'node' and/or 'way' and/or 'relation' OR 'point' and/or 'line' and/or 'polygon' and/or 'other'"));
    }
    
    
    @Test
    public void test_177() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/density/groupBy/boundary?" + 
                    "bcircles=Q%3A8.703%2C49.411%2C1%7Cb%3A8.705%2C49.419%2C28&" + 
                    "filter=foo&" + 
                    "keys=highway&" + 
                    "showMetadata=false&" + 
                    "time=2010-01-31")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The keys, values and types parameters must be empty, when you set the filter parameter."));
    }
    
    
    @Test
    public void test_178() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/density/groupBy/boundary?" + 
                    "bboxes=8.699%2C49.405%2C8.739%2C49.399%7C8.66921%2C49.4220%2C8.733065%2C49.3816&" + 
                    "bpolys=foo&" + 
                    "filter=type%21%3D*+or+not+area%3A%281.0+..+1E6%29&" + 
                    "keys=foo&" + 
                    "showMetadata=foo&" + 
                    "timeout=0.007196311425703539")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_179() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/density?" + 
                    "bpolys=dxb%3A8.704561%2C49.403252%2C8.7485%2C49.431%2C8.7023%2C49.4395%2C8.7280%2C49.42736%2C8.704561%2C49.403252&" + 
                    "keys=highway&" + 
                    "time=foo&" + 
                    "timeout=77&" + 
                    "values=primary")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_180() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/density?" + 
                    "bcircles=zQKu%3A8.740%2C49.403%2C4&" + 
                    "filter=service%3Ddriveway+or+id%3A%281+..+9999%29&" + 
                    "timeout=65&" + 
                    "types=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Parameter 'types' (and 'types2') can only have 'node' and/or 'way' and/or 'relation' OR 'point' and/or 'line' and/or 'polygon' and/or 'other'"));
    }
    
    
    @Test
    public void test_181() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter?" + 
                    "bpolys=go&" + 
                    "format=dcoo&" + 
                    "keys=Uighw_xF&" + 
                    "showMetadata=halse&" + 
                    "time=2012-%2C9-26&" + 
                    "types=hoTA&" + 
                    "values=ycaRia")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_182() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter?" + 
                    "bboxes=evomaster_158_input&" + 
                    "bcircles=evomaster_159_input&" + 
                    "filter=evomaster_160_input&" + 
                    "format=evomaster_161_input&" + 
                    "showMetadata=evomaster_108_input&" + 
                    "time=2012-07-23&" + 
                    "timeout=59&" + 
                    "types=foo&" + 
                    "values=evomaster_162_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_183() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/ratio/groupBy/boundary?" + 
                    "bcircles=evomaster_1502_input&" + 
                    "bpolys=iHjkf%3A8.704561%2C49.403252%2C8.714%2C49.402%2C8.749018%2C49.413%2C8.717%2C49.4203%2C8.704561%2C49.403252&" + 
                    "filter=evomaster_1503_input&" + 
                    "filter2=oneway%21%3D*+or+not+area%3A%281.0+..+1E6%29&" + 
                    "keys=foo&" + 
                    "keys2=evomaster_1501_inp%7Dt&" + 
                    "showMetadata=Q&" + 
                    "timeout=57&" + 
                    "types=foo&" + 
                    "types2=evomaster_1498_input&" + 
                    "values2=evomaster_1504_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_184() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/ratio?" + 
                    "bboxes=8.674%2C49.425797%2C8.758%2C49.387&" + 
                    "filter=foo&" + 
                    "filter2=maxspeed%3D*+or+not+geometry%3Apoint+and+id%3A%281+..+9999%29&" + 
                    "format=json&" + 
                    "keys2=highway&" + 
                    "time=2015-10-25&" + 
                    "timeout=53&" + 
                    "types2=line%2Cpolygon%2C")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Invalid filter syntax. Please look at the additional info and examples about the filter parameter at https://docs.ohsome.org/ohsome-api. Detailed error message: line 1, column 4: whitespaces, EQUALS (=), NOT_EQUALS (!=) or in expected, EOF encountered."));
    }
    
    
    @Test
    public void test_185() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/type?" + 
                    "bcircles=8.723%2C49.40349%2C2%7C8.715%2C49.416%2C6&" + 
                    "filter=ref%3D*+or+not+id%3A%281+..+9999%29&" + 
                    "showMetadata=false&" + 
                    "time=foo&" + 
                    "timeout=50")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_186() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/groupBy/type?" + 
                    "bpolys=8.704561%2C49.403252%2C8.745%2C49.414%2C8.732%2C49.4345%2C8.724%2C49.422%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.7129%2C49.405272%2C8.730%2C49.4282%2C8.712%2C49.429%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.743466%2C49.425%2C8.701%2C49.432%2C8.704%2C49.409%2C8.704561%2C49.40325&" + 
                    "filter=foo&" + 
                    "keys=highway&" + 
                    "showMetadata=foo&" + 
                    "types=fooC")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given parameter showMetadata can only contain the values 'true', 'yes', 'false', or 'no'."));
    }
    
    
    @Test
    public void test_187() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/tag?" + 
                    "bcircles=8.728668%2C49.42156%2C9&" + 
                    "filter=foo&" + 
                    "format=csv&" + 
                    "groupByKey=building&" + 
                    "keys=highxa%7B&" + 
                    "showMetadata=foo&" + 
                    "time=foo&" + 
                    "timeout=98")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given parameter showMetadata can only contain the values 'true', 'yes', 'false', or 'no'."));
    }
    
    
    @Test
    public void test_188() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/key?" + 
                    "bpolys=soY&" + 
                    "filter=KmYSfRSDt&" + 
                    "groupByKeys=qGpRPt&" + 
                    "keys=bAGDt7A0xQuLO&" + 
                    "showMetadata=&" + 
                    "time=sl8pOqXpJOoSnuoA")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_189() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/groupBy/key?" + 
                    "bpolys=Epb%3Cj_c&" + 
                    "format=evomaster_1590_input&" + 
                    "groupByKeys=h4rQBH8OkKzXqdhi&" + 
                    "showMetadata=_9ngzbJHi&" + 
                    "time=sFQpX&" + 
                    "types=6EZASLK6_qTs9wB")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_190() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=1uMgo0&" + 
                    "bpolys=pts6vRtWJ&" + 
                    "filter=Il&" + 
                    "format=RFKK0cN&" + 
                    "groupByKey=jXhlgYC_cgVhprp&" + 
                    "groupByValues=Kl1F8B7&" + 
                    "keys=_D&" + 
                    "showMetadata=WhRKjKM_&" + 
                    "time=s_gHEqX11RVG0&" + 
                    "types=5P_UTjFCzOYsWGhm&" + 
                    "values=20jqLfZkJFgjW")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_191() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=UO%3A8.7325%2C49.428%2C2%7CrKpem%3A8.709%2C49.43537%2C7%7CdHGF%3A8.729%2C49.4245%2C11&" + 
                    "filter=foo&" + 
                    "format=json&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=stop_line&" + 
                    "keys=highway&" + 
                    "types=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Parameter 'types' (and 'types2') can only have 'node' and/or 'way' and/or 'relation' OR 'point' and/or 'line' and/or 'polygon' and/or 'other'"));
    }
    
    
    @Test
    public void test_192() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/boundary?" + 
                    "bcircles=Sl6rX&" + 
                    "filter=lugj0KqeWgQF&" + 
                    "showMetadata=kZa&" + 
                    "timeout=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_193() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/groupBy/boundary?" + 
                    "bcircles=K%3A8.744%2C49.404%2C6&" + 
                    "keys=highwa&" + 
                    "showMetadata=yer&" + 
                    "time=2011-04-02&" + 
                    "values=crossing")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given parameter showMetadata can only contain the values 'true', 'yes', 'false', or 'no'."));
    }
    
    
    @Test
    public void test_194() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density/groupBy/type?" + 
                    "bboxes=WU1ApCrw3LDP&" + 
                    "filter=v4L&" + 
                    "keys=&" + 
                    "timeout=6U6kws3czY2CNgM&" + 
                    "types=IvybZJ&" + 
                    "values=3MIU7_2aY7ox9A")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_195() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/density/groupBy/type?" + 
                    "bpolys=evomaster_1693_input&" + 
                    "filter=kZNVwCQzTFoiMiq&" + 
                    "keys=evomaster_169E_input&" + 
                    "showMetadata=HWFl&" + 
                    "time=iWLjeZs0&" + 
                    "timeout=B0yT&" + 
                    "values=QJLS")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_196() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density/groupBy/tag?" + 
                    "bboxes=RUlq%3A8.689%2C49.406%2C8.739003%2C49.386%7CRhK%3A8.655%2C49.4075%232%2C8.7590%2C49.390&" + 
                    "filter=oneway%3D*&" + 
                    "groupByKey=buqlding&" + 
                    "groupByValues=foo&" + 
                    "showMetadata=yes&" + 
                    "types=foo&" + 
                    "values=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Apart from the custom ids, the bboxeses array must contain double-parseable values in the following order: minLon, minLat, maxLon, maxLat."));
    }
    
    
    @Test
    public void test_197() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/density/groupBy/tag?" + 
                    "bboxes=8.652%2C49.416%2C8.711%2C49.397%7C8.6656%2C49.418%2C8.755%2C49.391%7C8.682844%2C49.429%2C8.7162%2C49.398%7C8.662%2C49.426%2C8.7088%2C49.39052&" + 
                    "filter=oneway%21%3D*+and+length%3A%28+..+100%29&" + 
                    "groupByKey=building&" + 
                    "keys=foo&" + 
                    "showMetadata=false&" + 
                    "time=2010-02-18&" + 
                    "timeout=48")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The keys, values and types parameters must be empty, when you set the filter parameter."));
    }
    
    
    @Test
    public void test_198() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=foo&" + 
                    "bpolys=evomaster_14_input&" + 
                    "groupByKey=buildi%5Eg&" + 
                    "groupByValues=secondiry%2Chut&" + 
                    "keys=foo&" + 
                    "showMetadata=no&" + 
                    "time=2013-08-26&" + 
                    "timeout=90")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_199() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/density/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=hGULh%3A8.703%2C49.4346%2C7%7CYl%3A8.710403%2C49.4299%2C5%7Cy%3A8.7086%2C49.416%2C9%7CS%3A8.719%2C49.417054%2C4&" + 
                    "groupByKey=buikding&" + 
                    "showMetadata=yes&" + 
                    "values=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("There cannot be more input values in the values|values2 than in the keys|keys2 parameter, as values_n must fit to keys_n."));
    }
    
    
    @Test
    public void test_200() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density/groupBy/boundary?" + 
                    "bcircles=vXLLR%3A8.72182%2C49.407%2C5%7Chi%3A8.7384%2C49.4030%2C48%7CfqB%3A8.731%2C49.4230%2C379%7CX%3A8.70791%2C49.4223%2C6&" + 
                    "showMetadata=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given parameter showMetadata can only contain the values 'true', 'yes', 'false', or 'no'."));
    }
    
    
    @Test
    public void test_201() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/density/groupBy/boundary?" + 
                    "bpolys=foo&" + 
                    "filter=addr%3Ahousenumber%21%3D*+or+id%3A%281+..+9999%29&" + 
                    "keys=foo&" + 
                    "showMetadata=foo&" + 
                    "time=hoo&" + 
                    "values=fop")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_202() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density?" + 
                    "bpolys=8.704561%2C49.403252%2C8.700%2C49.424%2C8.734613%2C49.429%2C8.720%2C49.407%2C8.704561%2C49.403252&" + 
                    "format=csv&" + 
                    "keys=highway&" + 
                    "showMetadata=false&" + 
                    "time=foo&" + 
                    "values=steps")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_203() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/density?" + 
                    "bboxes=foo&" + 
                    "bcircles=V%3A8.70319%2C49.416763%2C21105996463&" + 
                    "bpolys=noo&" + 
                    "format=evomaster_31600_inpu&" + 
                    "keys=highway&" + 
                    "showMetadata=true&" + 
                    "time=evomasxer_31621_input&" + 
                    "timeout=5-&" + 
                    "types=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_204() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length?" + 
                    "bpolys=t%3A8.704561%2C49.403252%2C8.743%2C49.41%3C%2C8.7063%2C49.422%2C8.727%2C49.409%2C8.704561%2C49.403252&" + 
                    "filter=evomaster_8465_input&" + 
                    "showMetadata=foo&" + 
                    "time=foo&" + 
                    "timeout=61&" + 
                    "types=foo&" + 
                    "values=evomaster_18519_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The bpolys parameter must contain double-parseable values in form of lon/lat coordinate pairs."));
    }
    
    
    @Test
    public void test_205() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length?" + 
                    "bpolys=foo&" + 
                    "filter=maxspeed%21%3D*+or+type%3Anode&" + 
                    "format=cSv&" + 
                    "keys=evomaster_6593_input&" + 
                    "showMetadata=38eII5HRFmw&" + 
                    "time=2011-10-30")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_206() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/ratio/groupBy/boundary?" + 
                    "bboxes=T%3A8.673%2C49.410214%2C8.719815%2C49.392%7CROZ%3A8.65122%2C49.40049%2C8.752%2C49.394&" + 
                    "filter2=oneway%3D*&" + 
                    "keys=highway&" + 
                    "keys2=highway&" + 
                    "time=2011-05-172&" + 
                    "timeout=86&" + 
                    "types2=point%2Cother&" + 
                    "values=stop")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_207() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/ratio?" + 
                    "bboxes=&" + 
                    "bpolys=oa&" + 
                    "filter2=SCbkWLRe&" + 
                    "keys=QgqqC_H4nd_UcePj&" + 
                    "showMetadata=XMOuUcIZWnq32X&" + 
                    "types=WE&" + 
                    "values=HqAyMAMXmXM9")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_208() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/type?" + 
                    "bboxes=evomaster_6540_input&" + 
                    "bcircles=I4&" + 
                    "bpolys=NSA3xx1H&" + 
                    "filter=65oJ&" + 
                    "keys=7R&" + 
                    "showMetadata=PFjcpCQUpr2wcqr&" + 
                    "time=TCXv0&" + 
                    "timeout=evomaster_6542_input&" + 
                    "values=AnOL6QaoX")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_209() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/tag?" + 
                    "bboxes=vQF%3A8.655%2C49.4275%2C8.728%2C49.389&" + 
                    "filter=barrier%3D*+and+length%3A%28+..+100%29&" + 
                    "groupByKey=hi_hway&" + 
                    "groupByValues=platform%2Cdemolished%2Cresidential&" + 
                    "showMetadata=yes&" + 
                    "time=2017-05-30a")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_210() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/groupBy/tag?" + 
                    "bpolys=foo&" + 
                    "filter=foo&" + 
                    "format=csv&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=public&" + 
                    "time=2017-04-12&" + 
                    "timeout=28&" + 
                    "types=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_211() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/key?" + 
                    "bcircles=t&" + 
                    "format=WH&" + 
                    "groupByKeys=8trt6mFWWQgUV&" + 
                    "showMetadata=StgaZ_MGFtrf&" + 
                    "time=tiK1l3&" + 
                    "timeout=mIsswlsROg&" + 
                    "values=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_212() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/groupBy/key?" + 
                    "bboxes=evomaster_2249_input&" + 
                    "bcircles=RFe1WVCsR&" + 
                    "bpolys=evomaster_2250_input&" + 
                    "filter=z7hKkDQHguJONwY6&" + 
                    "format=&" + 
                    "groupByKeys=evomaster_6527_input&" + 
                    "keys=evomaster_2252_input&" + 
                    "time=qWOwzu6JR6&" + 
                    "timeout=evomaster_6524_input&" + 
                    "types=evomaster_6525_input&" + 
                    "values=evomaster_6526_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_213() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=foo&" + 
                    "bpolys=8.704561%2C49.403252%2C8.704%2C49.4246%2C8.706%2C49.400%2C8.70853%2C49.414%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.72565%2C49.434%2C8.7289%2C49.438%2C8.71336%2C49.4145%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.7426%2C49.4106%2C8.7042%2C49.438%2C8.704%2C49.4351%2C8.704561%2C49.403252&" + 
                    "filter=foo&" + 
                    "groupByKey=evomaster_2265_input&" + 
                    "groupByValues=foo&" + 
                    "keys=foo&" + 
                    "showMetadata=foo&" + 
                    "time=foo&" + 
                    "timeout=51&" + 
                    "types=foo&" + 
                    "values=fko")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_214() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/boundary?" + 
                    "bcircles=C%3A8.7458%2C49.4061%2C95%7Cm%3A8.7031%2C49.4218%2C7%7CyGw%3A8.7208%2C49.413867%2C2&" + 
                    "filter=addr%3Apostcode%3D*+or+area%3A%281.0+..+1E6%29&" + 
                    "format=fok&" + 
                    "showMetadata=truek&" + 
                    "time=2010-02-26&" + 
                    "timeout=50&" + 
                    "values=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given parameter showMetadata can only contain the values 'true', 'yes', 'false', or 'no'."));
    }
    
    
    @Test
    public void test_215() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/groupBy/boundary?" + 
                    "bboxes=8.6661%2C49.409%2C8.702522%2C49.3987%7C8.6922%2C49.4297%2C8.745%2C49.380&" + 
                    "filter=addr%3Apostcode%3D*+and+gaometry%3Aline&" + 
                    "format=json&" + 
                    "types=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Parameter 'types' (and 'types2') can only have 'node' and/or 'way' and/or 'relation' OR 'point' and/or 'line' and/or 'polygon' and/or 'other'"));
    }
    
    
    @Test
    public void test_216() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/density/groupBy/type?" + 
                    "bcircles=wU%3A8.72695%2C49.401%2C9&" + 
                    "filter=destination%3D*+and+geometry%3Aline+or+id%3A%281+..+9999%29&" + 
                    "showMetadata=yes&" + 
                    "time=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_217() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/density/groupBy/type?" + 
                    "bcircles=8.716%2C49.424%2C5&" + 
                    "filter=foot%21%3D*+and+not+typd%3Anode+and+area%3A%281.0+..+1E6%29&" + 
                    "showMetadata=true&" + 
                    "time=2016-12-16")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Invalid filter syntax. Please look at the additional info and examples about the filter parameter at https://docs.ohsome.org/ohsome-api. Detailed error message: line 1, column 27: whitespaces, EQUALS (=), NOT_EQUALS (!=) or in expected, a encountered."));
    }
    
    
    @Test
    public void test_218() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/density/groupBy/tag?" + 
                    "bcircles=827287%2C49.4177%2C511146523%7C8.735735%2C49.4010%2C9&" + 
                    "filter=evomaster_7692_input&" + 
                    "format=CsV&" + 
                    "groupByKey=evomaster_22803_input&" + 
                    "keys=evomaster_22807_input&" + 
                    "showMetadata=false&" + 
                    "values=steps")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Each bcircle must consist of a lon/lat coordinate pair plus a buffer in meters."));
    }
    
    
    @Test
    public void test_219() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/density/groupBy/tag?" + 
                    "bcircles=8.7295%2C49.425%2C59&" + 
                    "filter=lit%3D*+or+area%3A%281.0+..+1E6%29&" + 
                    "format=csv&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=synagogue%2Ctrack&" + 
                    "time=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_220() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/density/groupBy/boundary/groupBy/tag?" + 
                    "bboxes=qQ%3A8.665%2C49.428%2C8.7220%2C49.385&" + 
                    "format=json&" + 
                    "groupByKey=highwa%7D&" + 
                    "groupByValues=service%2Cship%2Cdemolished&" + 
                    "time=2014-12-03&" + 
                    "types=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Parameter 'types' (and 'types2') can only have 'node' and/or 'way' and/or 'relation' OR 'point' and/or 'line' and/or 'polygon' and/or 'other'"));
    }
    
    
    @Test
    public void test_221() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/density/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=8.71700%2C49.4308%2C2%7C8.714%2C49.405840%2C7&" + 
                    "format=geojson&" + 
                    "groupByKey=highway&" + 
                    "showMetadata=no&" + 
                    "time=2018-07-03&" + 
                    "types=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Parameter 'types' (and 'types2') can only have 'node' and/or 'way' and/or 'relation' OR 'point' and/or 'line' and/or 'polygon' and/or 'other'"));
    }
    
    
    @Test
    public void test_222() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/density/groupBy/boundary?" + 
                    "bboxes=U%3A8.691%2C49.425%2C8.732221%2C49.383&" + 
                    "keys=highway&" + 
                    "time=foo&" + 
                    "values=secondary")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_223() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/density/groupBy/boundary?" + 
                    "bboxes=W%3A8.65352%2C49.4210%2C8.756%2C49.394%7CIYsf%3A8.673%2C49.40040%2C8.710%2C49.394%7CNDG%3A8.689%2C49.4212%2C8.7307%2C49.3912&" + 
                    "format=csv&" + 
                    "keys=hichway&" + 
                    "types=foo&" + 
                    "values=steps")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Parameter 'types' (and 'types2') can only have 'node' and/or 'way' and/or 'relation' OR 'point' and/or 'line' and/or 'polygon' and/or 'other'"));
    }
    
    
    @Test
    public void test_224() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/density?" + 
                    "bboxes=SPt%3A8.671%2C49.419%2C8.715%2C49.383%7CgYy%3A8.671%2C49.403%2C8.711%2C49.381%7CPj%3A8.686%2C49.4110%2C8.745%2C49.380&" + 
                    "format=geojson&" + 
                    "showMetadata=no&" + 
                    "time=2014-04-08&" + 
                    "values=track")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("There cannot be more input values in the values|values2 than in the keys|keys2 parameter, as values_n must fit to keys_n."));
    }
    
    
    @Test
    public void test_225() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count?" + 
                    "bcircles=8.7411%2C49.427%2C3%7C8.722%2C49.419%2C21%7C8.7076%2C49.4050%2C8%7C8.705%2C49.418%2C3&" + 
                    "showMetadata=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given parameter showMetadata can only contain the values 'true', 'yes', 'false', or 'no'."));
    }
    
    
    @Test
    public void test_226() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/ratio/groupBy/boundary?" + 
                    "bboxes=&" + 
                    "bpolys=Jx&" + 
                    "filter=yySduPnlJa6veL&" + 
                    "keys=jioBYYa9y&" + 
                    "keys2=&" + 
                    "showMetadata=87rO81J0z%60Ufr&" + 
                    "time=GlH0YbP39&" + 
                    "types=Yxt7oLf0&" + 
                    "types2=KpDedcbdHsGaGB&" + 
                    "values=LiUZM59i5hHU3&" + 
                    "values2=mrDIXDqdE")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_227() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/ratio/groupBy/boundary?" + 
                    "bpolys=l&" + 
                    "filter=obkBr&" + 
                    "format=TmUsE_PrKN8rpRcc&" + 
                    "keys=M5Hg9UrsZ2E0JI&" + 
                    "time=SiIkACBKd_bl&" + 
                    "types=evomaster_4184_input&" + 
                    "types2=evomaster_4185_input&" + 
                    "values=1sjtC&" + 
                    "values2=Y")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_228() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/ratio?" + 
                    "bboxes=8.684%2C49.424%2C8.73350%2C49.380%7C8.6637%2C49.401%2C8.73581%2C49.38086%7C8.655%2C49.418%2C8.70753%2C49.380%7C8.672%2C49.401217%2C8.756%2C49.382313&" + 
                    "filter2=bicycle%21%3D*+and+geometry%3Apoint&" + 
                    "format=geojson&" + 
                    "keys2=highway&" + 
                    "time=foo&" + 
                    "types2=foo&" + 
                    "values2=secondary")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_229() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/ratio?" + 
                    "bboxes=iP%3A8.665%2C49.424%2C8.7015%2C49.384%7CodTOM%3A8.67127%2C49.416%2C8.7350%2C49.3839&" + 
                    "filter2=ref%21%3D*+and+area%3A%281.0+..+1E6%29&" + 
                    "format=json&" + 
                    "keys=highway&" + 
                    "timeout=45&" + 
                    "types=foo&" + 
                    "types2=point%2C")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Parameter 'types' (and 'types2') can only have 'node' and/or 'way' and/or 'relation' OR 'point' and/or 'line' and/or 'polygon' and/or 'other'"));
    }
    
    
    @Test
    public void test_230() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/type?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22zx%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.710%2C49.416%5D%2C%5B8.7044%2C49.436%5D%2C%5B8.721%2C49.4394%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22XKyg%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.71104%2C49.4395%5D%2C%5B8.7018%2C49.428684%5D%2C%5B8.702%2C49.4168%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=foo&" + 
                    "format=foo&" + 
                    "keys=highway&" + 
                    "types=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given 'format' parameter is invalid. Please choose between 'geojson'(only available for /groupBy/boundary and data extraction requests), 'json', or 'csv'."));
    }
    
    
    @Test
    public void test_231() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/tag?" + 
                    "bcircles=R%3A8.7440%2C49.41032%2C8&" + 
                    "filter=foo&" + 
                    "format=json&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=hotel%2Cpath&" + 
                    "keys=foo&" + 
                    "showMetadata=no&" + 
                    "time=2008-12-23&" + 
                    "types=foo&" + 
                    "values=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Parameter 'types' (and 'types2') can only have 'node' and/or 'way' and/or 'relation' OR 'point' and/or 'line' and/or 'polygon' and/or 'other'"));
    }
    
    
    @Test
    public void test_232() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/key?" + 
                    "bcircles=8.7176%2C49.426%2C3&" + 
                    "groupByKeys=tracmtype&" + 
                    "keys=highway&" + 
                    "time=foo&" + 
                    "timeout=65&" + 
                    "types=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Parameter 'types' (and 'types2') can only have 'node' and/or 'way' and/or 'relation' OR 'point' and/or 'line' and/or 'polygon' and/or 'other'"));
    }
    
    
    @Test
    public void test_233() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/key?" + 
                    "bcircles=YdE%3A8.71170%2C49.411291%2C6&" + 
                    "filter=addr%3Acountry%21%3D*+and+length%3A%28+..+100%29&" + 
                    "groupByKeys=addr%3Acountry%2Csource%3Amaxspeed&" + 
                    "showMetadata=yes&" + 
                    "time=boo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_234() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=r&" + 
                    "filter=evomaster_6569_input&" + 
                    "format=G1WOusiHYjSc2&" + 
                    "groupByKey=6f0&" + 
                    "groupByValues=PQtU5bKzNAGvS0N&" + 
                    "keys=2E0h7i_i7rcR3Lo&" + 
                    "time=ZvZJ4&" + 
                    "timeout=&" + 
                    "types=pY8c9ZAtR_5VtUF&" + 
                    "values=E_beo2N")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_235() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/boundary/groupBy/tag?" + 
                    "bboxes=evomaster_2605_input&" + 
                    "bpolys=e&" + 
                    "filter=evomaster_3255_input&" + 
                    "groupByKey=evomaster_2608_ilpu&" + 
                    "groupByValues=L&" + 
                    "showMetadata=evomaster_3259_input&" + 
                    "time=evomaster_3257_input&" + 
                    "timeout=f02ng3S&" + 
                    "types=evomaster_3258_input&" + 
                    "values=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_236() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/boundary?" + 
                    "bcircles=WB%3A8.737%2C49.400%2C9&" + 
                    "format=json&" + 
                    "showMetadata=no&" + 
                    "time=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_237() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/boundary?" + 
                    "bpolys=5AYzstaGQf&" + 
                    "format=&" + 
                    "keys=fEAY&" + 
                    "types=u")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_238() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density/groupBy/type?" + 
                    "bpolys=foo&" + 
                    "filter=foo&" + 
                    "format=foo&" + 
                    "keys=highway&" + 
                    "showMetadata=true&" + 
                    "time=2009-02-07")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_239() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/density/groupBy/type?" + 
                    "bpolys=IT1FZHgI&" + 
                    "keys=d4f&" + 
                    "time=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_240() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density/groupBy/tag?" + 
                    "filter=bY5Kl_V4vx7OxQ&" + 
                    "format=S4k3jjrxQsL&" + 
                    "groupByKey=RPvjiU&" + 
                    "showMetadata=krFBKkTrVLHdOWFp&" + 
                    "time=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("You need to define one of the boundary parameters (bboxes, bcircles, bpolys)."));
    }
    
    
    @Test
    public void test_241() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/density/groupBy/tag?" + 
                    "bpolys=DNA%3A8.704561%2C49.403252%2C8.710%2C49.4010%2C8.737%2C49.43465%2C8.719%2C49.423%2C8.704561%2C49.403252%7CsZzG%3A8.704561%2C49.403252%2C8.706%2C49.4164%2C8.705%2C49.409%2C8.705%2C49.40713%2C8.704561%2C49.40325&" + 
                    "filter=barrier%3D*&" + 
                    "format=evomaster_26587_input&" + 
                    "groupByKey=highway&" + 
                    "showMetadata=foo&" + 
                    "time=2007-12-31&" + 
                    "timeout=31&" + 
                    "types=foo&" + 
                    "values=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given parameter showMetadata can only contain the values 'true', 'yes', 'false', or 'no'."));
    }
    
    
    @Test
    public void test_242() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=ygyOkRk&" + 
                    "filter=ekbBZWq2WH_&" + 
                    "format=ceQuI45ucyP&" + 
                    "groupByKey=ljXqrU&" + 
                    "groupByValues=evomaster_30870_input&" + 
                    "keys=L9rNbvDrVOY&" + 
                    "showMetadata=suS_53U&" + 
                    "time=HMqLKSlRagm&" + 
                    "types=RI9A7Tx1M_&" + 
                    "values=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_243() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/density/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=f%3A8.73290%2C49.434%2C4&" + 
                    "format=json&" + 
                    "groupByKey=hjghway&" + 
                    "keys=higlway&" + 
                    "time=foo&" + 
                    "values=primary_link")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_244() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density/groupBy/boundary?" + 
                    "bboxes=&" + 
                    "bpolys=FcCJoBd8eXv4Bb&" + 
                    "format=w7vcuJYa3taLA")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_245() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/density/groupBy/boundary?" + 
                    "bpolys=foo&" + 
                    "filter=foo&" + 
                    "keys=highway&" + 
                    "showMetadata=foo&" + 
                    "timeout=36&" + 
                    "values=living_street")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_246() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/density?" + 
                    "bboxes=v8kH1mBXQwYE&" + 
                    "bcircles=evomaster_2757_input&" + 
                    "bpolys=evomaster_2758_input&" + 
                    "filter=&" + 
                    "keys=Yh&" + 
                    "showMetadata=vE&" + 
                    "time=evomaster_30134_input&" + 
                    "timeout=pq9dk&" + 
                    "types=GJq%7D")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_247() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area?" + 
                    "bcircles=8.70241%2C49.423812%2C670%7C8.738%2C49.423%2C31%7C8.744%2C49.430%2C2%7C8.705%2C49.4100%2C266&" + 
                    "filter=oneway%3D*+and+id%3A%281+..+9999%29&" + 
                    "time=fOo&" + 
                    "types=evomastes_4696_input&" + 
                    "values=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Parameter 'types' (and 'types2') can only have 'node' and/or 'way' and/or 'relation' OR 'point' and/or 'line' and/or 'polygon' and/or 'other'"));
    }
    
    
    @Test
    public void test_248() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area?" + 
                    "bpolys=R&" + 
                    "filter=evomaster_4750_input&" + 
                    "format=Kuw3j45JX8et&" + 
                    "types=mVR")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_249() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/density?" + 
                    "bboxes=LIt5O5rhZDE&" + 
                    "bcircles=Ll5bzX5&" + 
                    "filter=KcwukoTb_DZfnub&" + 
                    "showMetadata=ncErXBj3s&" + 
                    "time=YmSiVwICg0&" + 
                    "values=bka0iWsx")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_250() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/density/groupBy/tag?" + 
                    "bpolys=DNX%3AL.704561%2C49F40QST2U8.710%2C49UU010%2C8U737%2CUU0U3465UH.719449.42%3BU8.7%4045UU%2C49.U03252UsZrG%3A8.72U561%2C49.U032UU%2CU.U06%2C49.D9644U.605%2C49.409UU.7U5%2C39U40753U8.70UE61%2CU9U40327&" + 
                    "filter=barrier%3D*&" + 
                    "format=evomaster_26587_input&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=foo&" + 
                    "showMetadata=foo&" + 
                    "time=2007-12-31&" + 
                    "timeout=31&" + 
                    "types=foo&" + 
                    "values=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_251() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/type?" + 
                    "bcircles=sae%3A8.704%2C49.415%2C1%7CKdyKJ%3A8.72773%2C49.439607%2C64&" + 
                    "filter=foq&" + 
                    "format=json&" + 
                    "keys=highway&" + 
                    "time=evomaster_3077_input&" + 
                    "timeout=55&" + 
                    "types=ReLatioN&" + 
                    "values=evomaster_5022_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_252() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/density/groupBy/tag?" + 
                    "bpolys=foo&" + 
                    "filter=veeQpb3BXNZ&" + 
                    "format=evomaster_7693_input&" + 
                    "groupByKey=evomaster_7919_input&" + 
                    "groupByValues=foo&" + 
                    "keys=evomaster_7918_input&" + 
                    "time=2009-05-1%2F&" + 
                    "types=evomaster_7694_inpu")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_253() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/density?" + 
                    "bcircles=8.744%2C49.4349%2C7&" + 
                    "filter=evomaster_81_input&" + 
                    "keys=evomaster_71_input&" + 
                    "showMetadata=foo&" + 
                    "timeout=96&" + 
                    "values=evomaster_82_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given parameter showMetadata can only contain the values 'true', 'yes', 'false', or 'no'."));
    }
    
    
    @Test
    public void test_254() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/density?" + 
                    "bboxes=8.696%2C49.422%2C8.700%2C49.393&" + 
                    "filter=landusf%3D*+and+not+gfometry%3Aline&" + 
                    "keys=fk&" + 
                    "showMetadata=false&" + 
                    "time=..%2FV-3%2C%2Fd_M")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_255() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/boundary?" + 
                    "bcircles=A%3A8.74094%2C-9.4074%2C%40%7CJBc%3A8.709695%2C49.404%2C7&" + 
                    "format=CsV&" + 
                    "showMetadata=evomastmr_36326_input&" + 
                    "time=evomaster_36337_input&" + 
                    "types=evomaster_36420_input&" + 
                    "values=evomaster_36338_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Each bcircle must consist of a lon/lat coordinate pair plus a buffer in meters."));
    }
    
    
    @Test
    public void test_256() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/ratio?" + 
                    "bboxes=KSofN%3A8.6880%2C49.419%2C8.701%2C49.396%7CIyJ%3A8.6504%2C49.428%2C8.7035%2C49.394&" + 
                    "filter=ref%21%3D*+os+not+area%3A%281.0+..+1E6%29&" + 
                    "filter2=fo&" + 
                    "keys2=dko&" + 
                    "time=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Invalid filter syntax. Please look at the additional info and examples about the filter parameter at https://docs.ohsome.org/ohsome-api. Detailed error message: line 1, column 8: whitespaces, and or or expected, o encountered."));
    }
    
    
    @Test
    public void test_257() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/density?" + 
                    "bboxes=8.696%2C49.422%2C8.700%2C49.393&" + 
                    "filter=landuse%3D*+and+not+geometry%3Aline&" + 
                    "showMetadata=false&" + 
                    "time=2008-10%2F05&" + 
                    "values=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_258() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/ratio/groupBy/boundary?" + 
                    "bboxes=8.6822%2C49.4124%2C8.703%2C49.396&" + 
                    "filter=highway%3D*+or+not+id%3A%281+..+9999%29&" + 
                    "showMetadata=no&" + 
                    "time=2012-11-01&" + 
                    "timeout=80&" + 
                    "types2=way%2Crelation")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The filter2 parameter has to be defined when using a /ratio endpoint."));
    }
    
    
    @Test
    public void test_259() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/density?" + 
                    "bcircles=8.744%2C49.4349%2C7&" + 
                    "filter=foo&" + 
                    "keys=evomaster_71_input&" + 
                    "showMetadata=foo&" + 
                    "timeout=96&" + 
                    "types=foo&" + 
                    "values=secondary")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given parameter showMetadata can only contain the values 'true', 'yes', 'false', or 'no'."));
    }
    
    
    @Test
    public void test_260() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/type?" + 
                    "bcircles=sae%3A8.704%2C49.415%2C1%7CKdyKJ%3B8.72773%2C49.439607%2C64&" + 
                    "filter=foo&" + 
                    "format=evomaster_4868_input&" + 
                    "timeout=55&" + 
                    "types=foo&" + 
                    "values=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_261() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count?" + 
                    "bcircles=8.7205%2C49.402%2C62%7C8.718%2C49.4160%2C4&" + 
                    "filter=foo&" + 
                    "values=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The keys, values and types parameters must be empty, when you set the filter parameter."));
    }
    
    
    @Test
    public void test_262() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/boundary?" + 
                    "bcircles=T%3A8.725421-49.436%2C67&" + 
                    "filter=foo&" + 
                    "format=geoJSOn&" + 
                    "keys=eoo&" + 
                    "time=evomaster_5091_input&" + 
                    "types=foo&" + 
                    "values=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_263() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/ratio?" + 
                    "bboxes=evomaster_%3A049_input&" + 
                    "filter=evomaster_3030_input&" + 
                    "filter2=Q69eaoRLkHvuwxr&" + 
                    "format=7iEyKs2Jd&" + 
                    "keys=evomaster_12038_input&" + 
                    "keys2=_ExG&" + 
                    "showMetadata=evomastcr_648_inp&" + 
                    "timeout=0.9328962576702855&" + 
                    "types=3aqPRPilm8AgZU&" + 
                    "types2=mk5_sJl8sW%3A_&" + 
                    "values=ymj&" + 
                    "values2=evombster_650_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_264() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/ratio?" + 
                    "bpolys=PxoU8.7045U1%2C49.402B52U8UU3U%2C4U.4U2%2C8.74U8U%2CUA0420%2C8.74304U.00U%2C86U%40U5%3AUUU9.%3CU3252lUk%3A8.U049UU%2C%3C9.4UU252%2C80G071%2CUUU43UUUU.739%2C49.41189%2C8U700U%2CU9.41254%40.7%4045U1%2C68.U032UU%7CUkcx%3A8.U24761U4A24U3262%2C86745U49UU21U01%2C8U700449.41%3CU37%2C8.747UU49.4U3%2C4.70D77U%2C4U.403252&" + 
                    "filter=po&" + 
                    "format=gJL0F&" + 
                    "keys=f_q&" + 
                    "keys2=evomaster_22943_input&" + 
                    "showMetadata=7LY43qi&" + 
                    "time=fwoJ&" + 
                    "types2=evomaster_364_input&" + 
                    "values2=evomaster_*116_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_265() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/ratio?" + 
                    "bpolys=Exo%3AH.704561%2C47.423252AU.%6039%2CDH.412%2C8.74_U1%2C49U420%2C8.743%2C49.481U8V7%40_561A49.403242%7CRo%3A0.%60045%60_%2C49.403UU2U6.7071U49%5EUU70%2C8%3E%3FU9%2C490433H9%3C8%5E7404%2C4UU41U5%2C%5B.708U%3E1%2CW9.4UU652tlkUU%3A8U704761%2CU9.4032X2%2CH.7U5%5DU8%5E4UU%600U%2C8.U00%3C49.UU4_37U8.7U72%5DU9.UD3%2C8.70456_UU9.40325B&" + 
                    "filter=evomaster_23496_input&" + 
                    "filter2=eYpmD2n&" + 
                    "keys2=foo&" + 
                    "showMetadata=evomaster_22852_input&" + 
                    "time=B&" + 
                    "types=GuAZyeG&" + 
                    "types2=evomaster_364_input&" + 
                    "values=evomaster_22853_inp%C2%85t&" + 
                    "values2=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_266() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/density/groupBy/boundary/groupBy/tag?" + 
                    "bboxes=foo&" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22oH%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.747305%2C49.408%5D%2C%5B8.700%2C49.402%5D%2C%5B8.70500%2C49.432%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22tisIw%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.73565%2C49.4207%5D%2C%5B8.70909%2C49.413%5D%2C%5B8.72289%2C49.4383%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "format=fo_&" + 
                    "groupByKey=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22oH%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.747305%2C49.408%5D%2C%5B8.700%2C49.402%5D%2C%5B8.70500%2C49.432%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22tisIw%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.73565%2C49.4207%5D%2C%5B8.70909%2C49.413%5D%2C%5B8.72289%2C49.4383%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "showMetadata=foo&" + 
                    "timeout=foo&" + 
                    "types=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("You need to give one groupByKey parameter, if you want to use groupBy/tag."));
    }
    
    
    @Test
    public void test_267() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/density/groupBy/tag?" + 
                    "bboxes=foo&" + 
                    "bcircles=8.7287%2C49.4177%2C511146523%7C8.735735%2C49.4010%2C9&" + 
                    "bpolys=evomaster_28452_input&" + 
                    "filter=foo&" + 
                    "format=foo&" + 
                    "groupByKey=8.7287%2C49.4177%2C511146523%7C8.735735%2C49.4010%2C9&" + 
                    "groupByValues=foo&" + 
                    "keys=highway&" + 
                    "timeout=foo&" + 
                    "values=steps")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("You need to give one groupByKey parameter, if you want to use groupBy/tag."));
    }
    
    
    @Test
    public void test_268() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/ratio?" + 
                    "bboxes=KSofN%3A8.6880%2C49.419%2C8.701%2C49.394%7CIyJ%3A8.6504%2C49.428%2C8.7035%2C49.394&" + 
                    "filter=ref%21%3D*+os+not+area%3A%281.0+..+1E6%29&" + 
                    "filter2=foo&" + 
                    "keys2=dko&" + 
                    "time=2.180*3%2F&" + 
                    "types2=polygondK")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_269() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/ratio?" + 
                    "bboxes=KSofN%3A8.6880%2C49.419%2C8.701%2C49.394%7CIyJ%3A8.6504%2C49.428%2C8.7035%2C49.394&" + 
                    "filter=ref%21%3D*+os+not+area%3A%281.0+..+1E6%29&" + 
                    "filter2=foo&" + 
                    "keys2=foo&" + 
                    "time=2.18%2F0%2F%2F2&" + 
                    "timeout=59&" + 
                    "values=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_270() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/density/groupBy/boundary?" + 
                    "bboxes=2&" + 
                    "bpolys=B4q&" + 
                    "format=6x4DhFkcEbqEo&" + 
                    "keys=CnAhVO&" + 
                    "showMetadata=QmfcF5BRQvqa3i&" + 
                    "time=c&" + 
                    "values=8EfFyTZWF")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_271() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/boundary?" + 
                    "bcircles=A%3A8.74094%2C3964294%2C%40%7CJBc%3A8.709695%2C49.404%2C7&" + 
                    "filter=fo&" + 
                    "keys=highwayo&" + 
                    "showMetadata=evomaster_31988%5Einput&" + 
                    "time=foo&" + 
                    "timeout=64&" + 
                    "types=foo&" + 
                    "values=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Each bcircle must consist of a lon/lat coordinate pair plus a buffer in meters."));
    }
    
    
    @Test
    public void test_272() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/boundary?" + 
                    "bcircles=E%3A-210.%3A%3A%2C56.4030%2C%40%7CJBc%3A8.709619%2C29.484%2C0&" + 
                    "filter=evolaster_39446_input&" + 
                    "keys=%C2%80r&" + 
                    "showMetadata=evomaster_40852_input&" + 
                    "time=rxAPkn7PEFkYITR&" + 
                    "types=%40LG%5Bqp&" + 
                    "values=aRvR%2F6xMdZVD1uyV")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Each bcircle must consist of a lon/lat coordinate pair plus a buffer in meters."));
    }
    
    
    @Test
    public void test_273() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/ratio?" + 
                    "bboxes=KSofN%3A8.6880%2C49.419%2C8.701%2C49.394%7CIyJ%3A8.6504%2C49.428%2C8.7035%2C49.394&" + 
                    "filter=ref%21%3D*+os+not+area%3A%281.0+..+1E6%29&" + 
                    "filter2=foo&" + 
                    "keys2=dko&" + 
                    "time=2.180*3%2F&" + 
                    "types=KSofN%3A8.6880%2C49.419%2C8.701%2C49.394%7CIyJ%3A8.6504%2C49.428%2C8.7035%2C49.394")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Parameter 'types' (and 'types2') cannot have more than 4 entries."));
    }
    
    
    @Test
    public void test_274() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count?" + 
                    "bcircles=8.7205%2C49.402%2C62%7C8.718%2C49.4160%2C4&" + 
                    "values=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("There cannot be more input values in the values|values2 than in the keys|keys2 parameter, as values_n must fit to keys_n."));
    }
    
    
    @Test
    public void test_275() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/ratio?" + 
                    "bboxes=KUofN%3A806880%2C49.419%2C8.791%2C49.38U%7CIyJU8U6504%2C49.428%2CU.7235U49%2C394&" + 
                    "filter=ref%21%3D*+or+not+area%3A%281.0+..+1E6%29&" + 
                    "format=fooB&" + 
                    "keys=evomaster_30056_input&" + 
                    "keys2=evomaster_30054_input&" + 
                    "types=evomaster_30063_input&" + 
                    "types2=cHkFG3pCt&" + 
                    "values=evomaster_30064_input&" + 
                    "values2=evomaster_30052_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("One or more boundary object(s) have a custom id (or at least a colon), whereas other(s) don't. You can either set custom ids for all your boundary objects, or for none."));
    }
    
    
    @Test
    public void test_276() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/ratio?" + 
                    "format=7iEyKs2Rd&" + 
                    "keys=hfH1R0ob8tK2S&" + 
                    "showMetadata=TNq8qL5ef3k&" + 
                    "types=&" + 
                    "values2=f2OMw")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("You need to define one of the boundary parameters (bboxes, bcircles, bpolys)."));
    }
    
    
    @Test
    public void test_277() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/tag?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCoklection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22bUpqi%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.71053%2C49.432613%5D%2C%5B8.723157%2C49.413%5D%2C%5B8.703875%2C49.406762%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22CNkUC%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7381%2C49.414583%5D%2C%5B8.701%2C49.438%5D%2C%5B8.711%2C49.436%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22U%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.704375%2C49.403638%5D%2C%5B8.70457%2C49.43468%5D%2C%5B8.70495%2C49.417%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=evomaster_28661_input&" + 
                    "format=foo&" + 
                    "groupByKey=S.cHK&" + 
                    "keys=highway&" + 
                    "showMetadata=yec&" + 
                    "time=TQdHIzNd2w0jL&" + 
                    "values=evomaster_28659_inpup")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given GeoJSON has to be of the type 'FeatureCollection'."));
    }
    
    
    @Test
    public void test_278() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/boundary?" + 
                    "bcircles=A%3A8.74094%2C49.4294%2C8%7CJBc%3A8.709695%2C49.404%2C7&" + 
                    "format=foo&" + 
                    "keys=highway&" + 
                    "time=%2F%2FP18D&" + 
                    "timeout=64&" + 
                    "values=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given 'format' parameter is invalid. Please choose between 'geojson'(only available for /groupBy/boundary and data extraction requests), 'json', or 'csv'."));
    }
    
    
    @Test
    public void test_279() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/density/groupBy/type?" + 
                    "bcircles=e%3A8.7066%2C49.40026%2C3%7CcetX%3A8.744%2C49.43087%2C6&" + 
                    "filter=foo&" + 
                    "format=geojson&" + 
                    "keys=highway&" + 
                    "showMetadata=false&" + 
                    "time=2008-03-30&" + 
                    "types=foo&" + 
                    "values=evomaster_93_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Parameter 'types' (and 'types2') can only have 'node' and/or 'way' and/or 'relation' OR 'point' and/or 'line' and/or 'polygon' and/or 'other'"));
    }
    
    
    @Test
    public void test_280() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/boundary?" + 
                    "bboxes=VAIh7KvnrpF9y&" + 
                    "bpolys=ZEXJJGr&" + 
                    "format=6OKur5xBLQ&" + 
                    "keys=mukna91Ya8P&" + 
                    "showMetadata=mTEgguGOOc0NOYy&" + 
                    "timeout=bLOGEtBfN")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_281() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/groupBy/tag?" + 
                    "bcircles=8.%2716011%2C49.42870%2C86979371317&" + 
                    "filter=destination%21%3D*+or+not+type%3Anode+or+length%3A%28+..+100%29&" + 
                    "groupByKey=evomaster_9907_input&" + 
                    "groupByValues=evomaster_4608_input&" + 
                    "keys=evomaster_9908_input&" + 
                    "time=evomaster_4603_input&" + 
                    "types=evomaster_4609_input&" + 
                    "values=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Each bcircle must consist of a lon/lat coordinate pair plus a buffer in meters."));
    }
    
    
    @Test
    public void test_282() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/ratio?" + 
                    "bpolys=Pxk%3A8.704561%2C49.403252%2C8.739%2C49.412%2C8.74281%2C49.420%2C8.743%2C49.401%2C8.704561%2C49.403252%7CNo%3A8.704561%2C49.403252%2C8.7071%2C49.4370%2C8.739%2C49.43189%2C8.7004%2C49.4125%2C8.7045%3E1%2C49.403252%7Clkcx%3A8.704561%2C49.403252%2C8.745%2C49.420500%2C8.700%2C49.414137%2C8.7472%2C49.424%2C8.704561%2C49.403252&" + 
                    "filter2=highway%21%3D*+and+type%3Away+or+id%3A%281+..+9999%29&" + 
                    "format=gJL0F&" + 
                    "keys=f_o&" + 
                    "time=B&" + 
                    "types=evomaster_2115_input&" + 
                    "values2=evomaster_2116_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The bpolys parameter must contain double-parseable values in form of lon/lat coordinate pairs."));
    }
    
    
    @Test
    public void test_283() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/groupBy/boundary/groupBy/tag?" + 
                    "bboxes=t%3A8.6808%2C49.4148%2C8.735%2C49.382&" + 
                    "groupByKey=evomaster_2281_input&" + 
                    "keys=highway&" + 
                    "time=foo&" + 
                    "values=emergency_access_point")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_284() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/tag?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22IT%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.70456%11%2C49.403252%5D%2C%5B8.710%2C49.408%5D%2C%5B8.739%2C49.41665%5D%2C%5B8.7474%2C49.438%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "format=json&" + 
                    "groupByKey=building&" + 
                    "keys=highway&" + 
                    "timeout=100&" + 
                    "values=evomaster_8275_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in reading of the given GeoJSON."));
    }
    
    
    @Test
    public void test_285() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22izZ%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.720%2C49.40159%5D%2C%5B8.70395%2C49.434%5D%2C%5B8.73214%2C49.435%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22p%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7335%2C49.431%5D%2C%5B8.746%2C49.4290%5D%2C%5B8.70444%2C49.4141%5D%2C%5B8.704561%2C49.603252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "keys=highway&" + 
                    "showMetadata=no&" + 
                    "timeout=49")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided GeoJSON cannot be converted."));
    }
    
    
    @Test
    public void test_286() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/groupBy/tag?" + 
                    "bboxes=8.697%2C49.429%2C8.741%2C49.388&" + 
                    "filter=foo&" + 
                    "groupByKey=evomaster_15983_inpu&" + 
                    "groupByValues=synagogue%2Ctrack&" + 
                    "keys=highway&" + 
                    "time=%2F%2FP5E7D&" + 
                    "timeout=97&" + 
                    "values=evomaster_15984_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The interval (period) of the provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_287() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/boundary?" + 
                    "bcircles=A%3A9.790%3A4%2C79.4277%2C%40%7CJAc%3A8.709659%2C49.424%2C7&" + 
                    "filter=Yvomaster_32201_mnptt&" + 
                    "format=evomaster_32154_input&" + 
                    "keys=y4g6W&" + 
                    "showMetadata=evomaster_40207_input&" + 
                    "timeout=71&" + 
                    "types=TZlnWGWzfKhhu&" + 
                    "values=fmn")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Each bcircle must consist of a lon/lat coordinate pair plus a buffer in meters."));
    }
    
    
    @Test
    public void test_288() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/groupBy/type?" + 
                    "bcircles=cZzfY2bqLg9&" + 
                    "bpolys=4WWs7y&" + 
                    "format=7V6YjuxqL&" + 
                    "showMetadata=1tNmf5b_t&" + 
                    "time=ovGY23wT&" + 
                    "timeout=&" + 
                    "values=RZxRcXS1")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_289() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/groupBy/type?" + 
                    "bpolys=8.70UU61U29UUU3252%2C8U7UUU5%2CUU.%3C3UUU.U309U6%2C49.UC0U8U70U5U6%2C%3CUU%3CUU%2CUUU04961%2C4U.403052%7C8.UU45UU%2C49U403U5U%2CUU74665%2C49UU27U4UUU23%2C49.4368%2CU.745%2C4UU4012%2CH.70456U%2C49.40325UU8U744U61%2C49.443U52%2CU.7378U%2C49U4U6%2CU.739%2CU9.5382U%2C8.U4104U4U.4247%2C8.7UU562%2C492403U52&" + 
                    "filter=addr%3Acity%3D*+or+not+type%3Anode+or+not+area%3A%281.0+..+1E6%29&" + 
                    "format=foo&" + 
                    "keys=foo&" + 
                    "time=2011-05-21&" + 
                    "types=evomaster_24842_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The bpolys parameter must contain double-parseable values in form of lon/lat coordinate pairs."));
    }
    
    
    @Test
    public void test_290() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/ratio/groupBy/boundary?" + 
                    "bboxes=b%3A8.6619%2C49.42862%2C8.722%2C49.382002%7CqJWBD%3A8.686%2C49.4105%2C8.703%2C49.385%7CB%3A8.674%2C49.420%2C8.723293%2C49.385&" + 
                    "filter=barrier%3D*+or+not+type%3Away+or+area%3A%281.0+..+1E6%29&" + 
                    "format=geojson&" + 
                    "types2=line%2Cother")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The filter2 parameter has to be defined when using a /ratio endpoint."));
    }
    
    
    @Test
    public void test_291() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/density/groupBy/boundary/groupBy/tag?" + 
                    "bboxes=nGJeJEO1XoFfv&" + 
                    "filter=evomaster_1900_input&" + 
                    "groupByKey=UdU6ak&" + 
                    "groupByValues=evomaster_1959_input&" + 
                    "showMetadata=BcRG&" + 
                    "time=evomaster_1901_input&" + 
                    "timeout=2a93Fcigp8&" + 
                    "types=e1VGw3Cx35&" + 
                    "values=HYAt8B2W7E2d")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density/groupBy/type?" + 
                    "bboxes=jEzi%7CqMn4&" + 
                    "format=ljzSf6&" + 
                    "time=AgpHTG52WopS&" + 
                    "types=gDgcSFaCVKGIsm&" + 
                    "values=IBNpZgUnLbL1mqpI")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Apart from the custom ids, the bboxeses array must contain double-parseable values in the following order: minLon, minLat, maxLon, maxLat."));
    }
    
    
    @Test
    public void test_292() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/boundary?" + 
                    "bcircles=A%3A8.74094%2C49.4294%2C8%7CJBc%3A8.709695%2C49.404%2C7&" + 
                    "filter=fo&" + 
                    "showMetadata=yes&" + 
                    "time=%2F%2FP%2F8D&" + 
                    "timeout=64")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_293() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/density?" + 
                    "bboxes=8.696%2C49.422%2C8.700%2C49.393&" + 
                    "filter=landusf%3D*+and+not+gfometry%3Aline&" + 
                    "keys=foo&" + 
                    "time=..%2FU-30%2F")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_294() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/density?" + 
                    "bboxes=8.696%2C49.422%2C8.700%2C49.393&" + 
                    "filter=landuse%3D*+and+not+geometry%3Aline&" + 
                    "keys=foo&" + 
                    "showMetadata=false&" + 
                    "time=20%2F8-10%2F0&" + 
                    "values=joo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_295() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/ratio?" + 
                    "bboxes=c1pqN56_KG9cdx&" + 
                    "bcircles=evomaster_3901_input&" + 
                    "bpolys=e2Rqm&" + 
                    "filter=evomaster_3030_input&" + 
                    "format=7iEyKs2Rd&" + 
                    "keys=hfH1R0ob8tK2S&" + 
                    "keys2=QQ&" + 
                    "time=evomaster_654_input&" + 
                    "timeout=214516.5566818252&" + 
                    "types=evomaster_653_input&" + 
                    "types2=mk5_sJl8sW6_&" + 
                    "values=ymj&" + 
                    "values2=evombster_650_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout is too long. It has to be shorter than 100.0 seconds"));
    }
    
    
    @Test
    public void test_296() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/boundary?" + 
                    "bcircles=A%3A8.74094%2C49.4294%2C8%7CJBc%3A8.709695%2C49.404%2C7&" + 
                    "filter=fo&" + 
                    "showMetadata=yes&" + 
                    "time=%2F%2FP18D&" + 
                    "timeout=64")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Invalid filter syntax. Please look at the additional info and examples about the filter parameter at https://docs.ohsome.org/ohsome-api. Detailed error message: line 1, column 3: whitespaces, EQUALS (=), NOT_EQUALS (!=) or in expected, EOF encountered."));
    }
    
    
    @Test
    public void test_297() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/type?" + 
                    "bcircles=a4TTS&" + 
                    "filter=2ONg9p4Cmc3r7rAL&" + 
                    "format=oePf&" + 
                    "keys=UAT9Kb7vwlxLvlbr&" + 
                    "types=PtfSeCo6")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_298() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/tag?" + 
                    "bboxes=eUnfceBTDS&" + 
                    "bcircles=&" + 
                    "filter=fvLGpj_opAT9_EyV&" + 
                    "format=Ur&" + 
                    "groupByKey=tQtWjtDGV&" + 
                    "groupByValues=os_hsKNjG&" + 
                    "keys=iY&" + 
                    "showMetadata=&" + 
                    "types=ji476r0RZGqP&" + 
                    "values=1S")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_299() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/density/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22oH%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.747305%2C49.408%5D%2C%5B8.700%2C49.402%5D%2C%5B8.70500%2C49.432%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22tisIw%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polzgon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.73565%2C49.4207%5D%2C%5B8.70909%2C49.413%5D%2C%5B8.72289%2C49.4383%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=natural%3Dwood+and+geometry%3Apoint+mr+not+id%3A%281+..+9999%29&" + 
                    "format=fooq&" + 
                    "groupByKey=bwipTin&" + 
                    "groupByValues=school%2Cstatioj%2Cprack&" + 
                    "keys=fo&" + 
                    "showMetadata=foo&" + 
                    "time=foo&" + 
                    "types=foo&" + 
                    "values=natural%3Dwood+and+geometry%3Apoint+or+not+id%3A%281+..+9999%29")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The geometry of each feature in the GeoJSON has to be of type 'Polygon' or 'MultiPolygon'."));
    }
    
    
    @Test
    public void test_300() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/groupBy/tag?" + 
                    "bcircles=&" + 
                    "bpolys=3hkGhHSmQY&" + 
                    "format=&" + 
                    "groupByKey=EI9h3hOK6Uh&" + 
                    "groupByValues=2GzqYq5a7&" + 
                    "keys=2CxuVb&" + 
                    "time=Dqv7J_XvlCflj2GE&" + 
                    "types=NhN79ApYbvoyjAW")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_301() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/ratio?" + 
                    "bboxes=KSofN%3A8.6880%2C49.419%2C8.701%2C49.394%7CIyJ%3A8.6504%2C49.428%2C8.7035%2C49.394&" + 
                    "keys=foo&" + 
                    "keys2=foo&" + 
                    "time=2018-03-25&" + 
                    "types2=polygond&" + 
                    "values=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Parameter 'types' (and 'types2') can only have 'node' and/or 'way' and/or 'relation' OR 'point' and/or 'line' and/or 'polygon' and/or 'other'"));
    }
    
    
    @Test
    public void test_302() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/boundary?" + 
                    "bcircles=E%3A%2B210.%3A%3A%2C56.4030%2C%40%7CJBc%3A8.709619%2C29.484%2C0&" + 
                    "filter=evolaster_39446_input&" + 
                    "format=yeDaS8ymNxb3D_&" + 
                    "keys=tp&" + 
                    "time=euomaster_38194_input&" + 
                    "values=evomaster_40853_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Each bcircle must consist of a lon/lat coordinate pair plus a buffer in meters."));
    }
    
    
    @Test
    public void test_303() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/boundary?" + 
                    "bcircles=E%3A-210.%3A%3A%2C76.4030%2C%40%7CJBc%3A8.709619%2C29.484%2C0&" + 
                    "format=CsV&" + 
                    "keys=evomaster_39516_input&" + 
                    "showMetadata=evomaster_40852_input&" + 
                    "time=evomaster_38194_input&" + 
                    "types=%40LO%5Bqp&" + 
                    "values=evomaster_40853_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Each bcircle must consist of a lon/lat coordinate pair plus a buffer in meters."));
    }
    
    
    @Test
    public void test_304() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/boundary?" + 
                    "bboxes=qcnAC4ecdvTzr&" + 
                    "bcircles=iM5_XeifeQ_TiDk&" + 
                    "bpolys=WWG&" + 
                    "keys=OT&" + 
                    "showMetadata=WW7vrMWIeHFtyM&" + 
                    "time=yeQigfngwkzikW&" + 
                    "timeout=H2kcDBoHsnNJ1uK&" + 
                    "types=ghk")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=&" + 
                    "bpolys=ie_5&" + 
                    "filter=Y4gNtgc8V&" + 
                    "groupByKey=&" + 
                    "showMetadata=e&" + 
                    "types=hx6aTXhXnX7NIc&" + 
                    "values=24lFjn3jg")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/tag?" + 
                    "bcircles=&" + 
                    "bpolys=m1xSB2F&" + 
                    "groupByKey=0h96Ao7pJAjvbzm4&" + 
                    "groupByValues=XM2UVYlhy3&" + 
                    "showMetadata=Mt")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/groupBy/type")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("You need to define one of the boundary parameters (bboxes, bcircles, bpolys)."));
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area?" + 
                    "bboxes=LioLhKLnHyxD1&" + 
                    "bcircles=bZ5nhz4FF&" + 
                    "keys=E43aqr5HaR&" + 
                    "showMetadata=dZ63S_MyZZ&" + 
                    "time=Ymb9")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/density?" + 
                    "bpolys=cAIa57A&" + 
                    "filter=Y2ppMC4vTtNZAsnR&" + 
                    "format=E&" + 
                    "keys=qNOMY0ksEkUGD3&" + 
                    "values=6OBBoww")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/density/groupBy/boundary?" + 
                    "bpolys=HrmvI61P0tM&" + 
                    "time=XSBA")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density/groupBy/boundary?" + 
                    "bboxes=QjDXrg1e2ZkVyN_E&" + 
                    "bpolys=UCXwR164sJ_W9&" + 
                    "filter=R8Yh&" + 
                    "format=hr1EUn&" + 
                    "keys=ZcAL0KRM9JKok&" + 
                    "showMetadata=0Ad_b3ck9KwrPTF&" + 
                    "time=0Hb")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/density/groupBy/type?" + 
                    "bcircles=kAzKaLAS_K&" + 
                    "bpolys=b94&" + 
                    "format=RA6A&" + 
                    "keys=nzsKSR89OO&" + 
                    "showMetadata=2KwAKnno4ynvr&" + 
                    "types=cex4")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_305() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/boundary?" + 
                    "bcircles=A%3A8.74094%2C79.4074%2C%40%7CJBc%3A8.709695%2C49.404%2C7&" + 
                    "format=Csv&" + 
                    "showMetadata=2g0g8i1iah6Ef66&" + 
                    "time=evomaster_32202_input&" + 
                    "timeout=64&" + 
                    "types=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Each bcircle must consist of a lon/lat coordinate pair plus a buffer in meters."));
    }
    
    
    @Test
    public void test_306() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/boundary?" + 
                    "bcircles=A%3A8674096%2C79.4074%2C%40%7CJBc%3A8.709699%2C49.404%2C7&" + 
                    "filter=evomaster_33032_input&" + 
                    "keys=highwapmM&" + 
                    "showMetadata=2i0g4i1i%60h8Ee66&" + 
                    "time=evomaster_33186_input&" + 
                    "types=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Each bcircle must consist of a lon/lat coordinate pair plus a buffer in meters."));
    }
    
    
    @Test
    public void test_307() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/ratio?" + 
                    "bboxes=hDqY%3A8.68439%2C49.416%2C8.712010%2C49.389493&" + 
                    "format=geojson&" + 
                    "keys2=highway")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The filter2 parameter has to be defined when using a /ratio endpoint."));
    }
    
    
    @Test
    public void test_308() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/key?" + 
                    "bboxes=y%3A8.6920%2C49.4204%2C8.715682%2C49.3990%7Cs%3A8.6786%2C49.4077%2C8.7004%2C49.3916%7Cu%3A8.650%2C49.424818%2C7.72764%2C49.3972%7CB%3A8.657%2C49.4069%2C8.736%2C49.393&" + 
                    "filter=evomaster_28522_knput&" + 
                    "format=evomaster_8663_input&" + 
                    "groupByKeys=UvUmaUterU5623_intuw&" + 
                    "keys=higgway&" + 
                    "showMetadata=foo&" + 
                    "time=evomaster_8655_input&" + 
                    "types=foo&" + 
                    "values=fonT")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_309() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length?" + 
                    "bpolys=t%3A8.784561%2C49.403252%2C8.743%2C49.418%2C8.7063%2C49.422%2C8.727%2C49.409%2C8.704561%2C49.403252&" + 
                    "format=nson&" + 
                    "keys=foo&" + 
                    "showMetadata=fom&" + 
                    "timeout=0.2665495606304841&" + 
                    "values=foo")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_310() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area?" + 
                    "bpolys=wFZC%3A8.704561%2C49.403252%2C8.748%2C49.42584%2C8.7047%2C49.4204%2C8.716%2C49.40325%2C80704561%2C49.403252%7CHZJKI%3A8.704561%2C49.403252%2C8.7496%2C49.410%2C8.746%2C49.43366%2C8.739%2C49.400%2C8.704561%2C49.403262&" + 
                    "filter=UUU&" + 
                    "format=evomaster_31251_input&" + 
                    "showMetadata=foo&" + 
                    "time=foo&" + 
                    "types=relation&" + 
                    "values=primary_linj")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_311() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/type?" + 
                    "bcircles=sae%3A8.704%2C47.415%2C1%7CKdyKJ%3A8.72773%2C49.439607%2C64&" + 
                    "format=evomaster_31934_input&" + 
                    "showMetadata=evomaster_31869_input&" + 
                    "time=evomaster_32042_input&" + 
                    "timeout=55")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_312() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/boundary?" + 
                    "bcircles=A%3A8.74093%2C79.4074%2C8%7CJBc%3A8.709699%2C49.404%2C7&" + 
                    "filter=p6XjkGk&" + 
                    "showMetadata=2i0g4i1iah8Ee66&" + 
                    "time=evomaster_33080_input&" + 
                    "timeout=63&" + 
                    "types=foo")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_313() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/groupBy/boundary/groupBy/tag?" + 
                    "bboxes=t%3A8.6808%2C49.4148%2C8.735%2C49.782&" + 
                    "filter=foo&" + 
                    "format=foo&" + 
                    "groupByKey=evomaster_2281_inpu&" + 
                    "groupByValues=chapel%2Cship%2Cstation&" + 
                    "keys=evomaster_32089_input&" + 
                    "showMetadata=fon&" + 
                    "time=foo")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_314() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/type?" + 
                    "bpolys=cj%3A8.704561%2C49.403252%2C8.7424%2C49.434277%2C8.741%2C49.407490%2C8.705061%2C49.4065%2C8.704561%2C49.40325&" + 
                    "keys=foo&" + 
                    "time=2009-10--4")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_315() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density/groupBy/boundary?" + 
                    "bpolys=8.704661%2C49.403252%2C8.7350%2C49.4113%2C8.704%2C49.411%2C8.7495%2C49.416669%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.720%2C49.425%2C8.702%2C49.43261%2C8.741%2C49.418%2C8.704561%2C49.403252&" + 
                    "filter=foo&" + 
                    "format=geojson&" + 
                    "keys=highway&" + 
                    "showMetadata=eoo&" + 
                    "time=2008-12-03&" + 
                    "values=turning_circle")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_316() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter?" + 
                    "bboxes=G%3A8.68904%2C49.6200%2C8.7132%2C49.380%7CQ%3A8.6819%2C49.429114%2C8.726071%2C49.397&" + 
                    "filter=foo&" + 
                    "keys=fighway&" + 
                    "showMetadata=true&" + 
                    "values=cycleway")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_317() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/groupBy/tag?" + 
                    "bboxes=8.670%2C49.427%2C8.7488%2C49.386%7C8.899%2C49.4043%2C8.732%2C49.391&" + 
                    "filter=source%3Amaxspeed%21%3D*+and+not+length%3A%28+..+100%29&" + 
                    "groupByKey=highway&" + 
                    "timeout=37")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_318() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/groupBy/type?" + 
                    "bpolys=8.704561%2C69.403252%2C8.704%2C49.412%2C8.739%2C49.4230%2C8.707%2C49.4164%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.74100%2C49.437480%2C8.7464%2C49.40977%2C8.7464%2C49.410%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.726%2C49.419%2C8.743%2C49.426%2C8.734317%2C49.426%2C8.704561%2C49.403252&" + 
                    "format=json&" + 
                    "keys=highway&" + 
                    "showMetadata=foo&" + 
                    "time=2016-01-02&" + 
                    "values=38")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_319() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count?" + 
                    "bcircles=8.7411%2C49.427%2C3%7C8.822%2C49.419%2C21%7C8.7076%2C49.4050%2C8%7C8.705%2C49.418%2C3&" + 
                    "keys=highway&" + 
                    "showMetadata=foo&" + 
                    "time=2013-47-02")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_320() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/ratio?" + 
                    "bcircles=8.749%2C49.4302%2C6%7C8.743%2C47.409%2C1%7C8.728%2C89.436%2C6937610392%7C8.738%2C49.416%2C56&" + 
                    "filter=S&" + 
                    "filter2=building%3D*+and+type%3Arelatin&" + 
                    "format=csV&" + 
                    "showMetadata=fmn&" + 
                    "time=2.08-04-16&" + 
                    "timeout=40&" + 
                    "types=hoo&" + 
                    "types2=point%2Cpolygon%2Cothe&" + 
                    "values=fsq&" + 
                    "values2=Wso")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_321() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=8.704561%2C49.403252%2C8.7024%2C49.425%2C8.734%2C49.4128%2C8.715092%2C49.4205%2C8.704561%2C49.303252&" + 
                    "filter=tracktype%21%3D*+or+type%3Anode+and+area%3A%281.0+..+1E6%29&" + 
                    "format=foo&" + 
                    "groupByKey=jigdwa%7B&" + 
                    "groupByValues=garage%2Cuniversity&" + 
                    "keys=eoo&" + 
                    "showMetadata=true&" + 
                    "time=foo&" + 
                    "values=eoU")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_322() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/density/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=8.71700%2C49.3308%2C2%7C8.714%2C49.405840%2C7&" + 
                    "format=geojson&" + 
                    "groupByKey=highwayH&" + 
                    "keys=fso&" + 
                    "showMetadata=no&" + 
                    "time=2008-07-0%2F&" + 
                    "timeout=37")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_323() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/density/groupBy/boundary?" + 
                    "bcircles=Q%3A8.703%2C49.411%2C1%7Cb%3A9.705%2C49.419%2C28&" + 
                    "filter=foo&" + 
                    "keys=highway&" + 
                    "showMetadata=false&" + 
                    "time=2010-01-30")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_324() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=8.704561%2C49.403256%2C8.704%2C49.4246%2C8.706%2C49.400%2C8.70853%2C49.414%2C8.704560%2C49.403252%7C8.704561%2C49.403252%2C8.72565%2C49.434%2C8.7289%2C49.438%2C8.71336%2C49.4145%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.7426%2C49.4106%2C8.7042%2C49.438%2C8.704%2C49.4351%2C8.704561%2C49.403252&" + 
                    "filter=fso&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=foo&" + 
                    "keys=foo&" + 
                    "time=fpo&" + 
                    "types=foo")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_325() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/boundary?" + 
                    "bpolys=APE%3A8.704561%2C49.403252%2C8.744675%2C49.404%2C8.724%2C49.4226%2C8.734%2C49.415%2C8.704561%2C59.403252%7CZy%3A8.704561%2C49.403252%2C8.742%2C49.430%2C8.70425%2C49.406%2C8.70311%2C49.400%2C8.704561%2C49.40325&" + 
                    "filter=evomaster_42263_input&" + 
                    "format=csv&" + 
                    "keys=foo&" + 
                    "showMetadata=f_lse&" + 
                    "time=fos&" + 
                    "timeout=68")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_326() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/density?" + 
                    "bpolys=dxb%3A7.704561%2C49.403252%2C8.7485%2C49.431%2C8.7023%2C49.4395%2C8.7280%2C49.42736%2C8.704561%2C49.403252&" + 
                    "filter=fok&" + 
                    "keys=highway&" + 
                    "time=foo&" + 
                    "timeout=77&" + 
                    "values=prioary")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_327() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=UO%3A8.9325%2C49.428%2C2%7CrKpem%3A8.709%2C49.43537%2C7%7CdHGF%3A8.729%2C49.4245%2C11&" + 
                    "filter=fl&" + 
                    "format=ison&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=stop_line&" + 
                    "keys=highw%60y&" + 
                    "showMetadata=foo&" + 
                    "time=2.17-12-16")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_328() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/ratio?" + 
                    "bboxes=8.674%2C49.425797%2C8.958%2C49.387&" + 
                    "filter=foo&" + 
                    "filter2=maxspeed%3D*+or+not+geometry%3Apoint+and+id%3A%281+..+9999%29&" + 
                    "keys=foo&" + 
                    "keys2=highway&" + 
                    "time=2015-10-25&" + 
                    "timeout=53&" + 
                    "types=foo&" + 
                    "values=foo&" + 
                    "values2=foo")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_329() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/density/groupBy/boundary?" + 
                    "bboxes=U%3A8.691%2C49.425%2C8.632221%2C49.383&" + 
                    "filter=foo&" + 
                    "keys=highway&" + 
                    "time=foo&" + 
                    "values=secondary")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_330() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter?" + 
                    "bpolys=aee%3A8.304561%2C49.403252%2C8.700%2C49.4111%2C8.70430%2C49.412%2C8.710%2C49.4282%2C8.704561%2C49.405252%7CfTO%3A8.704161%2C49.403252%2C8.749%2C49.4089%2C8.7049%2C49.410%2C8.7072%2C49.404%2C8.704561%2C49.403252&" + 
                    "format=doo&" + 
                    "keys=UighwayF&" + 
                    "types=hoU")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_331() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/ratio?" + 
                    "bboxes=KSofN%3A8.6880%2C49.419%2C8.701%2C49.394%7CIyJ%3A8.6504%2C49.428%2C8.7035%2C49.394&" + 
                    "keys=foo&" + 
                    "time=2018-05-25&" + 
                    "timeout=57&" + 
                    "types2=polygond")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The given time parameter is not completely within the timeframe (2007-10-07 to 2018-05-10T"));
    }
    
    
    @Test
    public void test_332() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/density/groupBy/type?" + 
                    "bcircles=e%3A8.7066%2C49.40026%2C3%7CcetX%3A8.744%2C59.43087%2C6&" + 
                    "filter=hskq&" + 
                    "keys=9xEi&" + 
                    "time=DIT70M&" + 
                    "types=fey&" + 
                    "values=")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_333() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/density?" + 
                    "bboxes=8.696%2C49.422%2C8.700%2C49.393&" + 
                    "filter=landuse%3D*+and+not+geometry%3Aline&" + 
                    "showMetadata=false&" + 
                    "time=0008-10-05&" + 
                    "values=foo")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The given time parameter is not completely within the timeframe (2007-10-07 to 2018-05-10T"));
    }
    
    
    @Test
    public void test_334() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/groupBy/tag?" + 
                    "bboxes=8.697%2C47.429%2C8.741%2C49.388&" + 
                    "filter=foo&" + 
                    "format=json&" + 
                    "groupByKey=photographic_laboratory&" + 
                    "groupByValues=synagogue%2Ctrackh&" + 
                    "keys=evomaster_16126_input&" + 
                    "showMetadata=evomaster_16142_input&" + 
                    "time=%2F%2FP5M7D&" + 
                    "timeout=97&" + 
                    "types=foo&" + 
                    "values=Fs%3FAHZwYA638L")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_335() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/groupBy/tag?" + 
                    "bboxes=8.697%2C49.429%2C8.741%2C49.388&" + 
                    "groupByKey=evomaster_16492_input&" + 
                    "groupByValues=synagogue%2Ctrack&" + 
                    "keys=evomaster_16127_input&" + 
                    "showMetadata=yes&" + 
                    "timeout=0.5568306700919566&" + 
                    "values=foo")
                .then()
                .statusCode(413)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(413.0))
                .body("'message'", containsString("The given query is too large in respect to the given timeout. Please use a smaller region and/or coarser time period."));
    }


}
