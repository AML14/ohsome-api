import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.controller.api.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import static org.evomaster.client.java.controller.db.dsl.SqlDsl.sql;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto;
import  java.util.List;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
 * This file was automatically generated by EvoMaster on 2020-12-04T10:26:11.446+01:00[Europe/Paris]
 * <br>
 * The generated test suite contains 307 tests
 * <br>
 * Covered targets: 2341
 * <br>
 * Used time: 24h 0m 0s
 * <br>
 * Needed budget for current results: 99%
 * <br>
 * 
 */
public class EvoMasterTest_24h {

    
    private static final SutHandler controller = new org.heigit.ohsome.ohsomeapi.EMDriver();
    private static String baseUrlOfSut;
    
    
    @BeforeClass
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    @AfterClass
    public static void tearDown() {
        controller.stopSut();
    }
    
    
    @Before
    public void initTest() {
        controller.resetStateOfSUT();
    }
    
    
    
    
    @Test
    public void test_0_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/tag?" + 
                    "bboxes=%2C&" + 
                    "format=evomaster_1317847_input&" + 
                    "groupByKey=%5DvomasEez%5EUC17UU6_UopUU&" + 
                    "groupByValues=Li9Vl2ekfJTw&" + 
                    "showMetadata=3E6saZrf&" + 
                    "time=ev%7Fmaster_1318015_input&" + 
                    "timeout=2.0924023589210274&" + 
                    "types=XfQOu")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_63_createBboxes
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Index 0 out of bounds for length 0"))
                .body("'path'", containsString("/users/count/groupBy/tag"));
    }
    
    
    @Test
    public void test_1_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count?" + 
                    "bpolys=jo%3A27%2C-0690961&" + 
                    "filter=&" + 
                    "showMetadata=9&" + 
                    "time=evmqaster%5D2682022_input&" + 
                    "timeout=-3799.971330324085&" + 
                    "types=LiNE&" + 
                    "values=evomaster_2685570_input")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_166_createBpolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Invalid number of points in LineString (found 1 - must be 0 or >= 2)"))
                .body("'path'", containsString("/users/count"));
    }
    
    
    @Test
    public void test_2_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/ratio/groupBy/boundary?" + 
                    "bpolys=%2C&" + 
                    "filter2=M&" + 
                    "format=tYnY&" + 
                    "keys2=WC6UphoU&" + 
                    "showMetadata=uK&" + 
                    "time=ZxrYj3hWbSe8Oz6I&" + 
                    "types=rQ%5BLdEikOhuZqxA&" + 
                    "values=r&" + 
                    "values2=MflBktX7QSN7GG")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_156_createBpolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/elements/perimeter/ratio/groupBy/boundary"));
    }
    
    
    @Test
    public void test_3_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/density/groupBy/type?" + 
                    "bpolys=%2C&" + 
                    "filter=1TxpNAGTI8&" + 
                    "format=80e7YN&" + 
                    "keys=OWwJr62kKWuy%7D&" + 
                    "time=KiRLhR0aepshjW&" + 
                    "types=GixAS3c9wJ1Ia9")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_156_createBpolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/elements/perimeter/density/groupBy/type"));
    }
    
    
    @Test
    public void test_4_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/ratio/groupBy/boundary?" + 
                    "bboxes=%2C&" + 
                    "format=WVAd8U%7C%7DO4%3B37SUR&" + 
                    "keys=utw8tRbOfl&" + 
                    "showMetadata=PuxqsY5n&" + 
                    "time=%40c&" + 
                    "types=PCc0_45nLO%3BG&" + 
                    "types2=%3EDami%3DRZ&" + 
                    "values2=aJQafU9bf%5B8")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_63_createBboxes
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/elements/length/ratio/groupBy/boundary"));
    }
    
    
    @Test
    public void test_5_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/key?" + 
                    "bboxes=%2C&" + 
                    "filter=dY4&" + 
                    "groupByKeys=evomaster_2142799_input&" + 
                    "keys=&" + 
                    "showMetadata=pZPAaLTt8a3zg&" + 
                    "time=xRy0HZPAl9SPp&" + 
                    "types=k3q&" + 
                    "values=evomaster_2144316_input")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_63_createBboxes
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Index 0 out of bounds for length 0"))
                .body("'path'", containsString("/elements/length/groupBy/key"));
    }
    
    
    @Test
    public void test_6_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/density/groupBy/boundary?" + 
                    "bpolys=7%2C8.914&" + 
                    "filter=evomaster_1494613_input&" + 
                    "format=CSv&" + 
                    "time=evomaster_1495341_input&" + 
                    "timeout=9")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_166_createBpolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Invalid number of points in LineString (found 1 - must be 0 or >= 2)"))
                .body("'path'", containsString("/elements/count/density/groupBy/boundary"));
    }
    
    
    @Test
    public void test_7_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area?" + 
                    "bboxes=%2C&" + 
                    "filter=wQkaXl%3B5q1Ypt&" + 
                    "showMetadata=YBmv%7CaeuQn&" + 
                    "time=%3FmMEfCnNmTs%5E&" + 
                    "values=%3Bht")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_63_createBboxes
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/elements/area"));
    }
    
    
    @Test
    public void test_8_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length?" + 
                    "bpolys=8%2C8&" + 
                    "showMetadata=avomaster_1217165_input&" + 
                    "time=evomaster_1218155_input&" + 
                    "types=mvomaster_1216-09_inpu&" + 
                    "values=m2WmuwVJq8G7WXQ")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_166_createBpolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Invalid number of points in LineString (found 1 - must be 0 or >= 2)"))
                .body("'path'", containsString("/elements/length"));
    }
    
    
    @Test
    public void test_9_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count?" + 
                    "bcircles=bo%3A5%3A%2C-.2.%2C%40I&" + 
                    "filter=uacnK7O3H&" + 
                    "format=CSv&" + 
                    "keys=evomaster_2654157_input&" + 
                    "time=L8NJ&" + 
                    "timeout=-4860.57717647&" + 
                    "types=evomastex_2664088_input&" + 
                    "values=evomastera2654089_input")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_114_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/users/count"));
    }
    
    
    @Test
    public void test_10_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count?" + 
                    "bcircles=Vo%3A44%2C%2B08010%2C9&" + 
                    "filter=X0z&" + 
                    "format=CSv&" + 
                    "keys=Leih-_und_Umsonstladen&" + 
                    "showMetadata=NO&" + 
                    "time=%288j&" + 
                    "timeout=-6071.894579894732&" + 
                    "types=22&" + 
                    "values=ezmicsuetX*5%3A2967%5Dh")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( -90.00000025642856 89.99991893631125, -78.75000030054004 89.99991893631132 ) and LINESTRING ( 168.7500002935525 89.9999189363113, -179.99999975246493 89.99991893631123 ) [ (-89.32500027636108, 89.99991893631125, NaN) ]"))
                .body("'path'", containsString("/users/count"));
    }
    
    
    @Test
    public void test_11_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length?" + 
                    "bboxes=7%2C8&" + 
                    "format=kY&" + 
                    "time=evomaster_1217421_input&" + 
                    "timeout=-1168071.0745577898&" + 
                    "values=evomaster_1217164_input")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_65_createBboxes
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Index 2 out of bounds for length 2"))
                .body("'path'", containsString("/elements/length"));
    }
    
    
    @Test
    public void test_12_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length?" + 
                    "bboxes=7%2C8&" + 
                    "format=kY&" + 
                    "keys=evomaster_1217748_input&" + 
                    "time=evomaster_1217749_input&" + 
                    "timeout=-1168617.855749627&" + 
                    "values=evomaster_1217164_input")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_65_createBboxes
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Index 2 out of bounds for length 2"))
                .body("'path'", containsString("/elements/length"));
    }
    
    
    @Test
    public void test_13_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/density/groupBy/boundary?" + 
                    "bpolys=7%2C8.914&" + 
                    "filter=evomaster_1494613_input&" + 
                    "time=evomaster_617772_input&" + 
                    "types=evomaster%601488536_input")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_166_createBpolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Invalid number of points in LineString (found 1 - must be 0 or >= 2)"))
                .body("'path'", containsString("/elements/count/density/groupBy/boundary"));
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/density?" + 
                    "bcircles=evomaster_1494614_input&" + 
                    "filter=T_lXI&" + 
                    "keys=z8czsH&" + 
                    "showMetadata=evomaster_1494615_input&" + 
                    "time=UhwQV4ErUzUy&" + 
                    "timeout=eL917M")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_14() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count?" + 
                    "bcircles=do%3A59%2C-071%2C7&" + 
                    "keys=VhpPJ-6&" + 
                    "showMetadata=No&" + 
                    "values=evombster_2%3A54907_ijput")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_15() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count?" + 
                    "bcircles=do%3A59%2C-071%2C7&" + 
                    "keys=VhoPJ-6&" + 
                    "showMetadata=No&" + 
                    "values=evombster_2%3A54907_ijput")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_16() throws Exception {
        
        given().accept("text/csv")
                .get(baseUrlOfSut + "/users/count?" + 
                    "bcircles=ds%3A59%2C%2B071%2C4&" + 
                    "format=csv&" + 
                    "showMetadata=NO&" + 
                    "time=&" + 
                    "types=pOiNT")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_17() throws Exception {
        
        given().accept("text/csv")
                .get(baseUrlOfSut + "/users/count?" + 
                    "bcircles=ds%3A59%2C%2B071%2C4&" + 
                    "format=csv&" + 
                    "keys=VhoQJ-&" + 
                    "showMetadata=nO&" + 
                    "time=&" + 
                    "types=pOiNT")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_18() throws Exception {
        
        given().accept("text/csv")
                .get(baseUrlOfSut + "/users/count?" + 
                    "bcircles=do%3A59%2C-071%2C7&" + 
                    "format=csv&" + 
                    "keys=VhoPJ-6&" + 
                    "showMetadata=No&" + 
                    "values=evombster_2%3A54907_input")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_19() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count?" + 
                    "bcircles=ds%3A59%2C%2B071%2C4&" + 
                    "keys=VhoQJ-6&" + 
                    "time=&" + 
                    "values=evomaster_2654907_input")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_20() throws Exception {
        
        given().accept("text/csv")
                .get(baseUrlOfSut + "/users/count?" + 
                    "bcircles=dUn%3A59%2C%2B071%2C6&" + 
                    "filter=&" + 
                    "format=csv&" + 
                    "keys=VhoPJ-6&" + 
                    "showMetadata=TRue&" + 
                    "types=rElaTiON&" + 
                    "values=proposed%3Arailway")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_21() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count?" + 
                    "bcircles=do%3A59%2C%2B071%2C6&" + 
                    "keys=VhoPJ-6&" + 
                    "values=")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_22() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count?" + 
                    "bcircles=dUl%3A59%2C%2B071%2C6&" + 
                    "keys=VhoPJ-6&" + 
                    "showMetadata=true&" + 
                    "values=J")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(42.0))
                .body("'metadata'.'description'", containsString("Number of distinct active users per time interval."));
    }
    
    
    @Test
    public void test_23() throws Exception {
        
        given().accept("text/csv")
                .get(baseUrlOfSut + "/users/count?" + 
                    "bcircles=do%3A59%2C%2B071%2C6&" + 
                    "format=csv&" + 
                    "keys=VhoPJ-6&" + 
                    "values=")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_24() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/groupBy/type?" + 
                    "bcircles=lYVRFj5s8XwgU&" + 
                    "filter=Q3BdqY&" + 
                    "format=cSv&" + 
                    "showMetadata=evwmakter_4575_inpqt&" + 
                    "time=KjrmMjHDCmxM7&" + 
                    "types=evomaster_7153_input&" + 
                    "values=evomaster_121_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_25() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/groupBy/tag?" + 
                    "bboxes=bw8HALW&" + 
                    "format=YVMx&" + 
                    "groupByKey=evomaster_224228_input&" + 
                    "groupByValues=evomaster_16505_input&" + 
                    "keys=evomaster_6512_input&" + 
                    "showMetadata=G2JpbB1f23&" + 
                    "time=YhQZFH7P&" + 
                    "timeout=0.15551292984448983")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_26() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/groupBy/boundary?" + 
                    "bcircles=KjTO5i1zQsS&" + 
                    "filter=YKSl&" + 
                    "format=mtzM12&" + 
                    "showMetadata=evomaster_67906_input&" + 
                    "types=Canq1pvwChKUZ&" + 
                    "values=FeCW")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_27() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/density/groupBy/type?" + 
                    "bcircles=laI&" + 
                    "keys=lAv3ZvmfGOlVvsIB&" + 
                    "showMetadata=&" + 
                    "time=ab6OmIHW9q")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_28() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/density/groupBy/type?" + 
                    "bboxes=k66901I7NKK&" + 
                    "filter=evomaster_6149_input&" + 
                    "format=&" + 
                    "showMetadata=evomaster_6150_input&" + 
                    "time=evomaster_109191_input&" + 
                    "types=8qyhu5lu")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_29() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/density/groupBy/tag?" + 
                    "bboxes=&" + 
                    "bcircles=U1zOS1L&" + 
                    "groupByKey=jmz&" + 
                    "groupByValues=evomaster_31935_input&" + 
                    "showMetadata=ilxv0TeIqvK&" + 
                    "time=uLyIAHc649Wa2G&" + 
                    "values=HiILK8cB")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_30() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/density/groupBy/boundary?" + 
                    "bcircles=0DU6KOobBT&" + 
                    "format=vWuMHjCoR01wER&" + 
                    "keys=0&" + 
                    "showMetadata=JRKpn_vG4eppHw&" + 
                    "types=yqBt3wOVwH")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_31() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/density?" + 
                    "bboxes=evomaster_114598_input&" + 
                    "filter=evomaster_113991_input&" + 
                    "format=CY5ScL&" + 
                    "showMetadata=D&" + 
                    "time=evomaster_114599_input&" + 
                    "values=evomaster_114600_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_32() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/ratio/groupBy/boundary?" + 
                    "bboxes=DH9BYXD8yVT&" + 
                    "filter=evomaster_6565_input&" + 
                    "filter2=ebj9pGUpp2&" + 
                    "format=evomaster_8_input&" + 
                    "keys=Ghf3NffwpPD6sc&" + 
                    "keys2=evomaster_62115_input&" + 
                    "time=evomaster_62116_input&" + 
                    "timeout=0.32660045188055176&" + 
                    "types=evomaster_10_input&" + 
                    "types2=C8l1MAO2&" + 
                    "values=evomasrer_11_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_33() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/groupBy/tag?" + 
                    "bcircles=dCXTWRo&" + 
                    "format=evomaster_7426_input&" + 
                    "groupByKey=dGKKSeTS1pErumTp&" + 
                    "showMetadata=4U6&" + 
                    "time=IFDI5HVFOpp4e&" + 
                    "types=9IF&" + 
                    "values=evomaster_5066_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_34() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/groupBy/key?" + 
                    "bcircles=evomaster_193903_input&" + 
                    "filter=B1_O9C9ml0kxYMmp&" + 
                    "groupByKeys=evomaster_20709_input&" + 
                    "time=evomaster_2048_input&" + 
                    "types=b5bqqc")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_35() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/groupBy/boundary/groupBy/tag?" + 
                    "bboxes=Hb40BS5ZKGE29Ct_&" + 
                    "filter=evomaster_55419_input&" + 
                    "format=0R_DsCTd8WNphA&" + 
                    "groupByKey=evomaster_55979_input&" + 
                    "keys=vV%7BC&" + 
                    "showMetadata=eHc")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_36() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/groupBy/boundary?" + 
                    "bcircles=evomaster_1930_input&" + 
                    "filter=evomaster_1931_inpu&" + 
                    "format=MFuO4sjokaogQ&" + 
                    "keys=2d8&" + 
                    "time=evomaster_1916_input&" + 
                    "types=evomaster_67785_input&" + 
                    "values=exomasten_7448_inpu")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_37() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/density/groupBy/type?" + 
                    "bcircles=zwsEDmC5&" + 
                    "format=hrC&" + 
                    "showMetadata=oSf2V&" + 
                    "time=rpe_6StR5")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_38() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/density/groupBy/type?" + 
                    "bcircles=evomaster_132869_input&" + 
                    "filter=evomaster_132870_input&" + 
                    "showMetadata=evomaster_2593_input&" + 
                    "time=8udq3_HXNmDzu1VP&" + 
                    "types=evomaster_1702_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_39() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/density/groupBy/tag?" + 
                    "bcircles=oVD&" + 
                    "filter=1eT6P9vPLBgG1&" + 
                    "groupByKey=ZchXT55o5&" + 
                    "time=OWEWFNPEOAId&" + 
                    "timeout=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_40() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/density/groupBy/tag?" + 
                    "bboxes=AlyiKQDX3QR&" + 
                    "filter=evomaster_20882_inp%7Dt&" + 
                    "format=eaQCuy2meFllW4gG&" + 
                    "groupByKey=evomaster_1750_input&" + 
                    "showMetadata=e4s&" + 
                    "time=hsfRa_&" + 
                    "types=i3UvqnVk_I97")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_41() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/density/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=do96jlzwlAeoe&" + 
                    "format=oyTJ0jLtM&" + 
                    "groupByKey=2d2ClUWvxiLzu&" + 
                    "keys=lJ0uoN&" + 
                    "showMetadata=0Y2FM53a7exXb3cW&" + 
                    "time=evomaster_47052_input&" + 
                    "types=evomaster_20163_input&" + 
                    "values=evomaster_47053_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_42() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/density/groupBy/boundary/groupBy/tag?" + 
                    "bboxes=kEb94SlCrQP7&" + 
                    "filter=dKO&" + 
                    "groupByKey=WM8Hw3HD_Hf&" + 
                    "groupByValues=YprWawHJeC3ic&" + 
                    "keys=vLB_0trM6&" + 
                    "showMetadata=caiMs9iqYc8rfWf&" + 
                    "time=U&" + 
                    "types=7q9GWSxmVwrdAUz4")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_43() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/density/groupBy/boundary?" + 
                    "bcircles=34hoxyGWRGo&" + 
                    "keys=evomaster_1914_input&" + 
                    "showMetadata=tf&" + 
                    "time=4LRb3Fy56")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_44() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter?" + 
                    "bcircles=49M_r5rsQQImBH&" + 
                    "filter=YXfOKIa04Z&" + 
                    "keys=evomaster_5564_input&" + 
                    "showMetadata=evomaster_22525_input&" + 
                    "time=hohi_FR&" + 
                    "types=evomaster_36_input&" + 
                    "values=evomaster_2243_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_45() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/ratio/groupBy/boundary?" + 
                    "bboxes=NQn&" + 
                    "filter2=v_mIazrLZCv8h&" + 
                    "format=RV3SFem54WRLyqy&" + 
                    "keys=GR7C3&" + 
                    "keys2=1X53IxEX&" + 
                    "showMetadata=&" + 
                    "time=TZ6SD8Ff&" + 
                    "values=hK3GN5jv&" + 
                    "values2=9yLA")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_46() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/ratio?" + 
                    "bcircles=KVw1Lowra4fcl4AR&" + 
                    "filter2=&" + 
                    "keys=ugsriIyvIG_yGux&" + 
                    "keys2=J&" + 
                    "showMetadata=b6spiQm&" + 
                    "time=L9roEfbM&" + 
                    "types2=0UQ5B12gE&" + 
                    "values=c7CC&" + 
                    "values2=evomaster_8507_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_47() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/ratio?" + 
                    "bcircles=j&" + 
                    "filter=HCkcn2rqdOHJsF&" + 
                    "filter2=sOdHPb9y&" + 
                    "keys=evomaster_16695_input&" + 
                    "keys2=zobG7y6nCUSH&" + 
                    "showMetadata=evomaster_16696_input&" + 
                    "time=evomaster_16697_input&" + 
                    "timeout=0.8878464992428122&" + 
                    "types=evomaster_16698_input&" + 
                    "types2=GVMyxpe0c_q&" + 
                    "values=VFSXiS6ww34&" + 
                    "values2=evomaster_16699_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_48() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/type?" + 
                    "bcircles=tzZF0IdnXrDtUJ&" + 
                    "format=fmi1gLvQt0C5PW0r&" + 
                    "showMetadata=kaVFFQAaLD&" + 
                    "time=0&" + 
                    "types=odNfMyR4&" + 
                    "values=Ib7MRYGF")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_49() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/groupBy/type?" + 
                    "bboxes=evomaster_32093_input&" + 
                    "bpolys=&" + 
                    "keys=MHcdpYaGSYsbrzK9&" + 
                    "time=evomaster_4802_input&" + 
                    "timeout=0.857902501292721&" + 
                    "values=evomaster_4389_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_50() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/tag?" + 
                    "bcircles=MEr6pQGNIzF1&" + 
                    "format=&" + 
                    "groupByKey=CxOQnV8x&" + 
                    "groupByValues=z3kRg5y9SpiN&" + 
                    "showMetadata=GHjFlepyRQ3IO7x&" + 
                    "time=No_fL8YYgnQgEI3")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_51() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/groupBy/tag?" + 
                    "bcircles=9jRJx4in3RL7KqV&" + 
                    "format=&" + 
                    "groupByKey=evomaster_15562_input&" + 
                    "groupByValues=evomaster_15563_input&" + 
                    "keys=mii4LEQnair7CKE&" + 
                    "time=9njwErHKQqDRLc&" + 
                    "types=SIMlrK")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_52() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/key?" + 
                    "bcircles=cBz&" + 
                    "groupByKeys=0ir&" + 
                    "time=PXmAN&" + 
                    "values=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_53() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/groupBy/key?" + 
                    "bboxes=I&" + 
                    "filter=aophA00vCIbq&" + 
                    "format=evomaster_134080_input&" + 
                    "groupByKeys=evomaster_2490_input&" + 
                    "keys=S4&" + 
                    "showMetadata=_NRatXZaNwcCLj&" + 
                    "time=evomaster_14246_input&" + 
                    "types=evomaster_1T247_input&" + 
                    "values=evomaster_2422_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_54() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=9y&" + 
                    "groupByKey=KdUP&" + 
                    "keys=DIGTloqfTtNy5SM_&" + 
                    "time=FromX7g0&" + 
                    "types=7G")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_55() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=UwSZq9y_&" + 
                    "filter=evomaster_5609_input&" + 
                    "format=&" + 
                    "groupByKey=evomaster_57942_input&" + 
                    "keys=OfexmhrsbeSSyMV&" + 
                    "showMetadata=evomaster_4640_input&" + 
                    "time=c_3e2rHN&" + 
                    "types=JTzb&" + 
                    "values=evomaster_4638_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_56() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/groupBy/boundary?" + 
                    "bcircles=cHIPCKQolLMr&" + 
                    "filter=_uMDa5CxF4&" + 
                    "keys=7ewB1VzYjvtSz&" + 
                    "time=ZPRr_rSHy&" + 
                    "values=OyyV")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_57() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/density/groupBy/type?" + 
                    "bcircles=ez8fwQCJQyBXY&" + 
                    "format=u27NeJFEMYmG4N&" + 
                    "keys=Ms_OiPBUzmuDOM&" + 
                    "showMetadata=MN8Z&" + 
                    "time=L5Q6&" + 
                    "types=47YFs55bOkbzvV0D&" + 
                    "values=3J9ogy")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_58() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density/groupBy/tag?" + 
                    "bcircles=xVtpzCqS1&" + 
                    "filter=lyCgsry38&" + 
                    "groupByKey=evomaster_3937_input&" + 
                    "keys=evomaster_3938_input&" + 
                    "time=evomaster_3939_input&" + 
                    "timeout=3")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_59() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/density/groupBy/tag?" + 
                    "bcircles=vwDolx&" + 
                    "bpolys=&" + 
                    "format=wB1ddd&" + 
                    "groupByKey=evomaster_24837_input&" + 
                    "groupByValues=MNRzQS&" + 
                    "keys=P&" + 
                    "time=TqCUKOT&" + 
                    "values=U0hUaFDwoHRfQ")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_60() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density/groupBy/boundary/groupBy/tag?" + 
                    "bboxes=&" + 
                    "bcircles=evomaster_62509_input&" + 
                    "filter=VB7dleYlggrr&" + 
                    "groupByKey=fh&" + 
                    "keys=24&" + 
                    "showMetadata=_qh25FY0&" + 
                    "time=3MH2&" + 
                    "values=evomaster_62510_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_61() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/density/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=98zbGOEwiYJ&" + 
                    "filter=d_FNiwfq_p1&" + 
                    "format=evomaster_1491_input&" + 
                    "groupByKey=evomaster_1492_input&" + 
                    "groupByValues=c6Q&" + 
                    "values=JXNh")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_62() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/density/groupBy/boundary?" + 
                    "bcircles=OQ62b_0KIy6VXjj&" + 
                    "filter=KuaAHaMSD&" + 
                    "format=evomaster_67707_input&" + 
                    "keys=evomaster_67709_input&" + 
                    "time=evomaster_67710_input&" + 
                    "types=s&" + 
                    "values=7yR5")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_63() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/density?" + 
                    "bboxes=tmWuedsesra&" + 
                    "bcircles=&" + 
                    "filter=UC3bi4xvN2nbHp&" + 
                    "showMetadata=WrtEWmEHWr&" + 
                    "time=JZjwkl1&" + 
                    "values=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_64() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length?" + 
                    "bcircles=y9i&" + 
                    "filter=r0Lfhp2PNOYPOAv&" + 
                    "time=fFm6whzUA")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_65() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/ratio/groupBy/boundary?" + 
                    "bcircles=bKG&" + 
                    "format=6FnUZLztLMDpq4&" + 
                    "time=tl01u&" + 
                    "types2=nw8pd&" + 
                    "values=Y518K6L3RJoq90jh")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_66() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/ratio?" + 
                    "bboxes=evomaster_26496_input&" + 
                    "bpolys=&" + 
                    "filter=Bf_&" + 
                    "filter2=hDo_7Ox5d&" + 
                    "format=evomaster_17075_input&" + 
                    "keys=evomaster_26497_input&" + 
                    "time=evomaster_26498_input&" + 
                    "timeout=0.5324439025644437&" + 
                    "types=9gwDhTwNYd0Ar&" + 
                    "types2=kEjeZ&" + 
                    "values2=evomaster_26499_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_67() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/ratio?" + 
                    "bcircles=evomaster_23214_inpu&" + 
                    "format=Y8EfhnmSeMt5&" + 
                    "keys=uQ9Ur&" + 
                    "keys2=evomaster_3964_input&" + 
                    "showMetadata=&" + 
                    "types=6RCvg64Ckl4MYc4L&" + 
                    "types2=evomaster_3966_input&" + 
                    "values=7YtyGB&" + 
                    "values2=hdMhKfCvcJFKWSCR")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_68() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/type?" + 
                    "bcircles=evomaster_57733_input&" + 
                    "filter=GQ&" + 
                    "format=KKsqqL&" + 
                    "keys=evomaster_57734_input&" + 
                    "showMetadata=evomaster_57735_input&" + 
                    "time=TSQrJ6kbhH5ei4a&" + 
                    "values=5jMEM9VnftFXA")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_69() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/groupBy/type?" + 
                    "bcircles=7L6M6aL3Sveh&" + 
                    "filter=evomaster_3485_input&" + 
                    "format=IG6tP28jK&" + 
                    "keys=u54EXdZUAJ&" + 
                    "time=evomaster_217635_input&" + 
                    "types=wGYbmX8bJdFy")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_70() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/tag?" + 
                    "bboxes=Msa97&" + 
                    "bpolys=&" + 
                    "filter=evomaster_2688_input&" + 
                    "groupByKey=evomaster_33250_input&" + 
                    "groupByValues=evomaster_33251_input&" + 
                    "keys=evomaster_33252_input&" + 
                    "showMetadata=evomaster_2692_input&" + 
                    "time=tCcnoyG&" + 
                    "values=OvJ2sA")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_71() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/groupBy/tag?" + 
                    "bcircles=evomaster_64174_input&" + 
                    "filter=evomaster_36121_input&" + 
                    "groupByKey=0VhPKbaL6vO5G&" + 
                    "groupByValues=evomaster_25985_input&" + 
                    "keys=ULzGnOa6CJXVVoJ6&" + 
                    "time=G&" + 
                    "types=xWa%26MdC4YR")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_72() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/key?" + 
                    "bcircles=3jx28&" + 
                    "groupByKeys=fzng5NodIkm04q9&" + 
                    "keys=&" + 
                    "time=DWuu7f2Qqj2GsNO&" + 
                    "types=gbn14Quf")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_73() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/groupBy/key?" + 
                    "bboxes=evomaster_11986_input&" + 
                    "filter=bxRxp1VaR_XA&" + 
                    "format=evomaster_63671_input&" + 
                    "groupByKeys=UUoUasUer_UU17UiNxUU&" + 
                    "showMetadata=jwbRUrndPySHQs&" + 
                    "time=6otI75c&" + 
                    "types=n&" + 
                    "values=BKyJ")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_74() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/boundary/groupBy/tag?" + 
                    "bboxes=&" + 
                    "bcircles=_iNzU095kkLS&" + 
                    "filter=mQP2anugiluBh&" + 
                    "groupByKey=ltDHA9Eb&" + 
                    "groupByValues=ZgM4ugG4&" + 
                    "keys=JqmomtQ9M7Z9&" + 
                    "showMetadata=7Ng5x_WzJSxjo&" + 
                    "time=MPTIivUStDIaW3s&" + 
                    "types=lwJsM2mZG")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_75() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/groupBy/boundary/groupBy/tag?" + 
                    "bboxes=&" + 
                    "bcircles=evomaster_5742_input&" + 
                    "filter=evomaster_3900_input&" + 
                    "groupByKey=evokasterc1%3E_input&" + 
                    "groupByValues=evomaster_62582_input&" + 
                    "showMetadata=evomaster_62583_input&" + 
                    "time=xafAZcu1G5bpK&" + 
                    "values=evomaster_17_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_76() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/groupBy/boundary?" + 
                    "bcircles=evomaster_108_input&" + 
                    "showMetadata=QYS0RL6hhnn9lAc&" + 
                    "time=6&" + 
                    "timeout=0.5179332251428296&" + 
                    "types=evomaster_212104_input&" + 
                    "values=evomaster_109_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_77() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/density/groupBy/type?" + 
                    "bcircles=evomaster_17372_input&" + 
                    "filter=jNt5DOkByVdr2&" + 
                    "keys=GZaivX5rus&" + 
                    "time=evomaster_17373_input&" + 
                    "timeout=&" + 
                    "values=uVR5E10Nc")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_78() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/density/groupBy/tag?" + 
                    "bcircles=tSNAd5YocAIyvZAc&" + 
                    "filter=oAeR6hiasdVW&" + 
                    "groupByKey=Vonp&" + 
                    "keys=Zw&" + 
                    "time=o9sG5RyaHNVgwD&" + 
                    "types=&" + 
                    "values=JMO2znNyd1HM_J2")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_79() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/density/groupBy/tag?" + 
                    "bcircles=90n_9wrHCrO&" + 
                    "groupByKey=evomaster_39907_input&" + 
                    "groupByValues=pMEALu&" + 
                    "showMetadata=eVod01vRLV0tR51w&" + 
                    "time=evomaster_39908_input&" + 
                    "types=8XyhBpihbTEr&" + 
                    "values=evomaster_10962_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_80() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/density/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=3NNdsk0Wp&" + 
                    "filter=rJ6TnB6v_u5GIM8&" + 
                    "format=ZzAfmTFK&" + 
                    "groupByKey=&" + 
                    "groupByValues=T&" + 
                    "time=Bqec2MEACokz8ydO")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_81() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/density/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=U3dQRpJpX&" + 
                    "filter=CWW&" + 
                    "format=jb3oX4defsrvLZp_&" + 
                    "groupByKey=9egxK&" + 
                    "groupByValues=yAhP0QnZ8h4&" + 
                    "keys=6KCWof9&" + 
                    "showMetadata=HtIf&" + 
                    "time=VJOqWHkQvdIW_8&" + 
                    "types=1cYzdV7y44X5rp4m&" + 
                    "values=4YMMSVwjCihYv")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_82() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/density/groupBy/boundary?" + 
                    "bpolys=7%2CZFYC4a&" + 
                    "filter=evomaster_427160_input&" + 
                    "keys=2bxbR&" + 
                    "showMetadata=evomaster_427794_input&" + 
                    "time=e_dNh61AitPpv04&" + 
                    "timeout=9&" + 
                    "types=evomaster_428613_input&" + 
                    "values=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The bpolys parameter must contain double-parseable values in form of lon/lat coordinate pairs."));
    }
    
    
    @Test
    public void test_83() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/density/groupBy/boundary?" + 
                    "bboxes=ik9H97rifEw&" + 
                    "keys=R1Es&" + 
                    "showMetadata=&" + 
                    "time=gt&" + 
                    "values=L_Ta3W")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_84() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/density?" + 
                    "bcircles=evomaster_185480_input&" + 
                    "filter=evomaster_185481_input&" + 
                    "format=evomaster_185482_input&" + 
                    "keys=evomaster_185483_input&" + 
                    "showMetadata=3jC6LoCv2x2vF6BE&" + 
                    "time=kd3cEN&" + 
                    "timeout=0.3831481574285268&" + 
                    "types=evomaster_185484_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_85() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count?" + 
                    "bboxes=4UeKnAdiC1ig6&" + 
                    "format=zK_Yx&" + 
                    "keys=&" + 
                    "showMetadata=c&" + 
                    "time=Hmfal9GC&" + 
                    "types=bSYeN&" + 
                    "values=_w0Za")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_86() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/ratio?" + 
                    "bboxes=&" + 
                    "bcircles=qwrThONiqXt8&" + 
                    "format=DArvUH&" + 
                    "keys=Rk&" + 
                    "keys2=C&" + 
                    "time=&" + 
                    "types=7m&" + 
                    "types2=Jg8CEXYhjUe6hg")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_87() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/ratio?" + 
                    "bcircles=evomaster_2947_input&" + 
                    "filter2=evomaster_184438_input&" + 
                    "format=evomaster_184439_input&" + 
                    "showMetadata=UY3IC&" + 
                    "time=evomaster_184440_input&" + 
                    "types=jfbIhD17X6j&" + 
                    "types2=OCvQwl9&" + 
                    "values2=tBzK1mF_5lxDJ")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_88() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/type?" + 
                    "bcircles=wJajH12NzVsojZyv&" + 
                    "filter=JiRMWIW&" + 
                    "time=l01&" + 
                    "values=PofRUrQqV1Y")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_89() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/type?" + 
                    "bcircles=BZBCTqHS&" + 
                    "format=ViE_Kq63V&" + 
                    "keys=evomaster_22219_input&" + 
                    "showMetadata=evomaster_7067_input&" + 
                    "time=evomaster_7068_input&" + 
                    "types=zDHlsyR&" + 
                    "values=K")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_90() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/tag?" + 
                    "bcircles=MDzMZS3&" + 
                    "filter=kXvMA&" + 
                    "groupByKey=WC&" + 
                    "showMetadata=48sp4Ti&" + 
                    "time=&" + 
                    "timeout=&" + 
                    "values=SVwtDBdc1EqN")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_91() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/tag?" + 
                    "bcircles=YTQ&" + 
                    "filter=uotC&" + 
                    "format=evomaster_133869_input&" + 
                    "groupByKey=evomaster_8673_inpu&" + 
                    "groupByValues=evomaster_84966_input&" + 
                    "time=exomastera3%2F02_input&" + 
                    "timeout=0.039052468006974816&" + 
                    "values=evomaster_85576_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_92() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/key?" + 
                    "bcircles=3m8Pw&" + 
                    "filter=OrBbl5rTr8&" + 
                    "groupByKeys=_IIjvMuuDEwWLtXp&" + 
                    "keys=Aepv&" + 
                    "showMetadata=uwFBd8biCUvR&" + 
                    "time=9L2G_&" + 
                    "types=OKtIEEc&" + 
                    "values=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_93() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/key?" + 
                    "bboxes=evomaster_5988_input&" + 
                    "filter=evomaster_11358_input&" + 
                    "format=i_wfDZZ&" + 
                    "groupByKeys=o&" + 
                    "keys=g10csVqhLZcp&" + 
                    "showMetadata=evomaster_249063_input&" + 
                    "time=evomaster_11359_input&" + 
                    "timeout=0.06298194918395295&" + 
                    "types=SozBf")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_94() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=evomaster_36387_input&" + 
                    "filter=evomaster_36388_input&" + 
                    "format=UB2ohBh0Nw&" + 
                    "groupByKey=KHQt9iKdlIy8M&" + 
                    "keys=9&" + 
                    "showMetadata=NlIeFo4t4&" + 
                    "time=g3&" + 
                    "types=7CBSbctvSfvTAH")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_95() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=66WDxQEkZTCC&" + 
                    "filter=W8VC91f74VCRV&" + 
                    "groupByKey=&" + 
                    "keys=kov6QpX&" + 
                    "showMetadata=NWkzVyk&" + 
                    "time=EyqXB54z&" + 
                    "values=NJ6f")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_96() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/boundary?" + 
                    "bcircles=SEp338xVyx&" + 
                    "time=KS")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_97() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/boundary?" + 
                    "bcircles=F5eqjPHR&" + 
                    "format=evomaster_4199_input&" + 
                    "showMetadata=evomaster_4327_input&" + 
                    "time=hU_Vsc3PlnY&" + 
                    "timeout=0.5379537873178456&" + 
                    "values=evomaster_4328_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_98() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density/groupBy/type?" + 
                    "bcircles=Sa35Y&" + 
                    "format=OXJqX8h&" + 
                    "keys=U3ZZkw53RHAns1&" + 
                    "showMetadata=Y&" + 
                    "time=TsBPomxhiyM&" + 
                    "types=Go8m7i9PNTBS4&" + 
                    "values=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_99() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/density/groupBy/type?" + 
                    "bcircles=YPfjsn12dk2P&" + 
                    "filter=AvoH8&" + 
                    "format=evomaster_82140_input&" + 
                    "keys=evomaster_82141_input&" + 
                    "time=v6SSbTQT&" + 
                    "timeout=0.6659564518023877")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_100() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density/groupBy/tag?" + 
                    "bcircles=evomaster_12656_input&" + 
                    "filter=evomaster_12657_input&" + 
                    "groupByKey=evomaster_12658_input&" + 
                    "showMetadata=CT9jJm3ESNrq&" + 
                    "time=evomaster_117992_input&" + 
                    "timeout=0.7170164895093746&" + 
                    "types=quwS8nFHK8wC&" + 
                    "values=WGoo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_101() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/density/groupBy/tag?" + 
                    "bcircles=3PhW&" + 
                    "filter=um&" + 
                    "groupByKey=UUoUauUerU33U9_iUnU&" + 
                    "groupByValues=I1vo5xMVxpfq&" + 
                    "keys=FUrq_&" + 
                    "showMetadata=&" + 
                    "timeout=0.5060863896947282&" + 
                    "types=evomaster_102276_input&" + 
                    "values=J6eAJY")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_102() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/density/groupBy/boundary/groupBy/tag?" + 
                    "bboxes=evomaster_22277_input&" + 
                    "filter=CUFI4dkQObxhUK&" + 
                    "format=cSV&" + 
                    "groupByKey=f&" + 
                    "keys=evomaster_15570_input&" + 
                    "time=07Hxh&" + 
                    "timeout=0.061323657699360656&" + 
                    "types=SVE")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_103() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density/groupBy/boundary?" + 
                    "bboxes=ySdHhFiIF&" + 
                    "format=Icipac4fT&" + 
                    "time=xrtzYG47oPhOeZHY&" + 
                    "types=RKLkrE0hiP7KmA")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_104() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/density/groupBy/boundary?" + 
                    "bcircles=oZOYEZ6e_&" + 
                    "filter=dxBHvDF2KXDBkqi&" + 
                    "format=evomaster_4274_input&" + 
                    "keys=evomaster_6049_input&" + 
                    "showMetadata=tzKRJ&" + 
                    "time=IWYF&" + 
                    "types=evomaster_4278_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_105() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density?" + 
                    "bcircles=9TwfgQATt46y6d&" + 
                    "showMetadata=MbXQjJM2W9&" + 
                    "types=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_106() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/density?" + 
                    "bcircles=evomaster_180258_input&" + 
                    "time=3Oj08Q&" + 
                    "types=evomaster_180259_input&" + 
                    "values=CIdo1P")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_107() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area?" + 
                    "bcircles=evomaster_3400_input&" + 
                    "format=TsWmeaZ&" + 
                    "keys=evomaster_75636_input&" + 
                    "time=evomaster_75637_input&" + 
                    "timeout=0.24913157500444283&" + 
                    "values=evomaster_22804_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_108() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/density/groupBy/tag?" + 
                    "bcircles=evomaster_1193_input&" + 
                    "bpolys=q%18jcf4UTQ&" + 
                    "filter=evomatter_8904_input&" + 
                    "format=csv&" + 
                    "groupByKey=n8dq4CIhy48flk&" + 
                    "keys=evomaster_8906_input&" + 
                    "showMetadata=evomaster_8908_input&" + 
                    "time=evomaster_89%2C7_input&" + 
                    "timeout=Xfb1Q5kf7zuxzCaO&" + 
                    "types=iNvUQz3DP&" + 
                    "values=evomaster_8909_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_109() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/tag?" + 
                    "bcircles=YTQ&" + 
                    "filter=uotC&" + 
                    "groupByKey=ep-&" + 
                    "time=exomaster_3%2F%2F2_input&" + 
                    "timeout=evomaster_85464_input&" + 
                    "values=evomaster_85474_knout")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_110() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/density/groupBy/boundary/groupBy/tag?" + 
                    "bboxes=pJMBgl8FQErxQ&" + 
                    "bcircles=gn&" + 
                    "filter=tgCxYyeBaUK5LL2&" + 
                    "groupByKey=Ru&" + 
                    "groupByValues=OkyDTw_psp&" + 
                    "keys=&" + 
                    "showMetadata=evomaster_2801_input&" + 
                    "time=rGCHoaR%2F&" + 
                    "types=B8IpHlUfsQ")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_111() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/density?" + 
                    "bcircles=t5Du%7CqUcgBwfMCD&" + 
                    "bpolys=&" + 
                    "filter=o3iDj1Ea7kEVYI&" + 
                    "format=evomaster_171829_input&" + 
                    "showMetadata=Ey3JSH8t&" + 
                    "types=evomaster_171830_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_112() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=%3AvQ&" + 
                    "filter=HTRujxw&" + 
                    "format=evomaster_79855_input&" + 
                    "groupByKey=evomaster_79856_input&" + 
                    "keys=evomaster_79857_input&" + 
                    "showMetadata=gxlPaA3&" + 
                    "time=evomaster_79858_input&" + 
                    "types=evomaster_79859_input&" + 
                    "values=tJi8am0oHtx2D8g9")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_113() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/density/groupBy/type?" + 
                    "keys=_9bx&" + 
                    "showMetadata=2dH_a7JAHEiuZT&" + 
                    "time=&" + 
                    "timeout=iTFlwDzAesZa_H&" + 
                    "values=GHrpR0rdhBSajmL8")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_114() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/density/groupBy/boundary?" + 
                    "bcircles=c&" + 
                    "filter=iwvktWxTWSVVCQn&" + 
                    "format=X72FfkOK&" + 
                    "keys=pZCOjE&" + 
                    "types=ZyUOk8Us&" + 
                    "values=iiq2Pj")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_115() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count?" + 
                    "bboxes=&" + 
                    "bpolys=5&" + 
                    "filter=RCWsX2DnIW8&" + 
                    "types=BJnGOvJAjBekdl3Q&" + 
                    "values=XWyOA48KesNqLeHw")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_116() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/density/groupBy/type?" + 
                    "bboxes=4kzMdDtmAWBAk&" + 
                    "bcircles=VjcqYxyyUR&" + 
                    "bpolys=Lm1L&" + 
                    "filter=vZ3AWB&" + 
                    "showMetadata=1bsKAlHbfF&" + 
                    "time=beLxdXNoIOWX&" + 
                    "timeout=4gzA_W")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_117() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/density/groupBy/tag?" + 
                    "bcircles=be_V06uA&" + 
                    "groupByKey=DDZfkQShYkp&" + 
                    "timeout=qNU9Eay")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_118() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/density/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=e&" + 
                    "format=kDRG6yCdZb&" + 
                    "groupByKey=mUU7f250XRF1K&" + 
                    "groupByValues=SH&" + 
                    "keys=U&" + 
                    "showMetadata=s_&" + 
                    "time=sAan&" + 
                    "timeout=hVT7nsihFF5KM1Hl&" + 
                    "values=1L9l3")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_119() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/boundary/groupBy/tag?" + 
                    "bboxes=iKUZj_72%2C6G&" + 
                    "filter=HTRujxw&" + 
                    "format=evomaster_321385_input&" + 
                    "groupByKey=evomaster_321386_input&" + 
                    "groupByValues=rIZzawUML6VxN&" + 
                    "keys=ytvWUhe&" + 
                    "showMetadata=gxlPaA3&" + 
                    "time=evomaster_321387_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Apart from the custom ids, the bboxeses array must contain double-parseable values in the following order: minLon, minLat, maxLon, maxLat."));
    }
    
    
    @Test
    public void test_120() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/ratio?" + 
                    "bpolys=BKn&" + 
                    "filter=&" + 
                    "filter2=&" + 
                    "format=ETQ1&" + 
                    "keys2=5c&" + 
                    "time=rFs942OHlBV&" + 
                    "timeout=oUwnGuU&" + 
                    "types=DTgHb4XZw&" + 
                    "values=Ut")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_121() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/type?" + 
                    "bcircles=iU0&" + 
                    "bpolys=N&" + 
                    "format=iD6TqL1_V6y&" + 
                    "keys=_C1bfKq&" + 
                    "showMetadata=DplXpv58PkzCOh")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_122() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/tag?" + 
                    "bboxes=4BV&" + 
                    "bpolys=XCFUk&" + 
                    "filter=WxTOPVFfg1YA&" + 
                    "groupByKey=0c5r_br&" + 
                    "showMetadata=hrQk4mtMpbVdsBu&" + 
                    "types=Ajo798aqT4&" + 
                    "values=VatVP")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_123() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/key?" + 
                    "bpolys=VJBX4vCQuDgBeO&" + 
                    "groupByKeys=tEZeEFyXVjoOPR&" + 
                    "keys=N6rxjmX1&" + 
                    "showMetadata=5tXikUhqWVrHC2tL&" + 
                    "time=cLs8rXwd&" + 
                    "timeout=xJjJ4&" + 
                    "values=x")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_124() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/boundary/groupBy/tag?" + 
                    "bboxes=9LKoaigjqQT3I&" + 
                    "bcircles=uDPTHhr&" + 
                    "bpolys=vlhPKuc&" + 
                    "format=uYh&" + 
                    "groupByKey=50Qc&" + 
                    "groupByValues=CR175Hv&" + 
                    "types=p7qb6M&" + 
                    "values=YrNINBHFHV")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_125() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density/groupBy/type?" + 
                    "bcircles=i&" + 
                    "filter=ax7tvx&" + 
                    "format=rBhX9BRWPS8&" + 
                    "keys=AC1&" + 
                    "showMetadata=RKd&" + 
                    "types=gQRF")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_126() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density/groupBy/tag?" + 
                    "bboxes=DUGl7LY&" + 
                    "bpolys=TebVL5&" + 
                    "filter=cuqICba8z&" + 
                    "groupByKey=bogWtyIPOJw&" + 
                    "time=XErlQze1B&" + 
                    "timeout=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_127() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=32UhnNAXMkJE&" + 
                    "bpolys=wLdHvjcgeO4zT7&" + 
                    "format=sUBVdBzUd&" + 
                    "groupByKey=ElBuGiM6Ka9&" + 
                    "groupByValues=SH8tb0mzt&" + 
                    "keys=pRag&" + 
                    "time=9Dx2p7Om&" + 
                    "timeout=BYprdZV1A&" + 
                    "types=FPxWtZwQUgdf")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_128() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/ratio?" + 
                    "bboxes=FBt7&" + 
                    "bcircles=TxVg3bo9Hxu&" + 
                    "bpolys=UXuxF9QJ0&" + 
                    "filter2=qjJqT_REOmwF&" + 
                    "format=tMz5UapicJ&" + 
                    "keys=Nt6A7FykvJDyI&" + 
                    "showMetadata=&" + 
                    "timeout=6VR&" + 
                    "types=P0ZF&" + 
                    "types2=HGDPhGu&" + 
                    "values2=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_129() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/type?" + 
                    "bboxes=O3Wrb8UikEA3e6Y_&" + 
                    "filter=uXpmU0N&" + 
                    "showMetadata=W9T&" + 
                    "types=kC0jh5M0k&" + 
                    "values=Xljwhuffjg8xeq")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_130() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/tag?" + 
                    "bcircles=&" + 
                    "bpolys=4&" + 
                    "filter=UrRj429pJFpz&" + 
                    "groupByKey=1s1inxPNVFs35oVR&" + 
                    "groupByValues=FtxzHQNS80j&" + 
                    "keys=3QE&" + 
                    "showMetadata=D&" + 
                    "time=4Jim2mgDZIiO3Hs&" + 
                    "timeout=ASx0MH0gghNgB&" + 
                    "types=NmT_PlZPmvY6ZHG6&" + 
                    "values=5kpmu7XHG")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_131() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/key?" + 
                    "bcircles=CU&" + 
                    "filter=hGIG&" + 
                    "groupByKeys=OgMPzSRhOWNBn7&" + 
                    "showMetadata=Jm&" + 
                    "timeout=79qfIv4")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_132() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/boundary/groupBy/tag?" + 
                    "bboxes=yBVOlaB32_wevDFg&" + 
                    "bpolys=31S9lMa&" + 
                    "format=&" + 
                    "groupByKey=OpSxQ_S1hA&" + 
                    "groupByValues=xoMq&" + 
                    "keys=T2&" + 
                    "types=LHeNn48&" + 
                    "values=Ecrz")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_133() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/density/groupBy/type?" + 
                    "bcircles=yIt&" + 
                    "format=r&" + 
                    "showMetadata=o0&" + 
                    "timeout=&" + 
                    "types=MgS64KzgrsEh&" + 
                    "values=i0J8O")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_134() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/density/groupBy/tag?" + 
                    "bboxes=faR02&" + 
                    "filter=n&" + 
                    "format=YvgW&" + 
                    "groupByKey=vUUTBsfhA0J&" + 
                    "groupByValues=n6&" + 
                    "showMetadata=3LRu")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_135() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/density/groupBy/boundary/groupBy/tag?" + 
                    "bboxes=3hvV781A&" + 
                    "bpolys=utp3hMX95U&" + 
                    "filter=nCKDyWlBX&" + 
                    "groupByKey=H&" + 
                    "groupByValues=wVkGA0RP7I3zd&" + 
                    "types=qM")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_136() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/groupBy/type?" + 
                    "bcircles=evomaster_1516792_input&" + 
                    "bpolys=4qpgKn36JlQ&" + 
                    "format=CSV&" + 
                    "keys=PFD7gpB9Br&" + 
                    "showMetadata=evomYster_15162%3F4_input&" + 
                    "time=%2FCtfpnM7I&" + 
                    "timeout=100.0")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_137() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/ratio?" + 
                    "filter2=&" + 
                    "format=XiiEK0ksG5hwg_1&" + 
                    "keys2=s7&" + 
                    "showMetadata=1Rf_q4cN_&" + 
                    "time=tDHd9VHR&" + 
                    "types=8Lh3oHP8cLaGT1u&" + 
                    "types2=dJ&" + 
                    "values2=W")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("You need to define one of the boundary parameters (bboxes, bcircles, bpolys)."));
    }
    
    
    @Test
    public void test_138() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/type?" + 
                    "bcircles=yUkG9cCW&" + 
                    "format=CENSWVMYtamd&" + 
                    "timeout=PX&" + 
                    "types=j4kWu&" + 
                    "values=3dIxD7byrDdzMigd")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_139() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/tag?" + 
                    "bcircles=cZ&" + 
                    "filter=gsERVdMOi1uPY&" + 
                    "format=&" + 
                    "groupByKey=1p&" + 
                    "keys=PykRWx15HffDZa&" + 
                    "timeout=lTdnkSELP")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_140() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/key?" + 
                    "bboxes=OkayhZmRWMFhP&" + 
                    "format=za&" + 
                    "groupByKeys=LwaViUyswsiDvMVn&" + 
                    "showMetadata=1aLPMa8IK&" + 
                    "timeout=3LY2Ymfc1R8arm")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_141() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/boundary/groupBy/tag?" + 
                    "bboxes=0qRJaI&" + 
                    "bpolys=ck4E&" + 
                    "groupByKey=4BBpCEWcyX&" + 
                    "groupByValues=7A733C3a&" + 
                    "showMetadata=yCt_EXtqFaqRi&" + 
                    "timeout=0kKkdi")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_142() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density/groupBy/type?" + 
                    "bboxes=lNErAA&" + 
                    "bpolys=WsMU7k&" + 
                    "showMetadata=jZKzrJWK2q8&" + 
                    "types=Ve0jL4XXw8owonl2")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_143() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density/groupBy/tag?" + 
                    "format=tw72UppZPXxU&" + 
                    "groupByKey=QWMfkNZ&" + 
                    "groupByValues=3&" + 
                    "time=Kigm2yh4LcKG&" + 
                    "types=LXHa")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("You need to define one of the boundary parameters (bboxes, bcircles, bpolys)."));
    }
    
    
    @Test
    public void test_144() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density/groupBy/boundary/groupBy/tag?" + 
                    "bboxes=YeZdTJ12T&" + 
                    "bpolys=0fXm6JsTyJE&" + 
                    "filter=TVx7HaPSGf9Ug_CW&" + 
                    "groupByKey=m77qMH_4wNARJ&" + 
                    "groupByValues=T3GiGAaRXDC&" + 
                    "keys=_1Opls0rv&" + 
                    "types=F_rntjawi&" + 
                    "values=Ujc3F0N")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_145() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count?" + 
                    "bcircles=w4rk%2Cm%3ACd%2CO&" + 
                    "keys=evomasxer_7870_input&" + 
                    "showMetadata=evomaster_1365094_input&" + 
                    "values=evomaster_1365095_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_146() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area?" + 
                    "bpolys=_v_%5Dast%60%3AO3%24%2C3_inpUt&" + 
                    "filter=evomaster_11608_irpu&" + 
                    "keys=Rfvq1PKdTk5UUBh&" + 
                    "time=evomaster_257010_input&" + 
                    "types=evomaster_257033_input&" + 
                    "values=X")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The bpolys parameter must contain double-parseable values in form of lon/lat coordinate pairs."));
    }
    
    
    @Test
    public void test_147() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count?" + 
                    "bboxes=cq%3A89%2C%29%2C78%2C7&" + 
                    "keys=Leih-_und_Umsonstladen&" + 
                    "timeout=-6270.840744")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Apart from the custom ids, the bboxeses array must contain double-parseable values in the following order: minLon, minLat, maxLon, maxLat."));
    }
    
    
    @Test
    public void test_148() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count?" + 
                    "bboxes=cq%3A89%2C%29%2C78%2C7&" + 
                    "keys=Leih-_und_Umsonstladen&" + 
                    "showMetadata=evomaster_2682699_input&" + 
                    "time=as%3A89%2C-078%2C6&" + 
                    "values=evomaster_2682701_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Apart from the custom ids, the bboxeses array must contain double-parseable values in the following order: minLon, minLat, maxLon, maxLat."));
    }
    
    
    @Test
    public void test_149() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count?" + 
                    "bcircles=_q%3A79%2C6898%2CNhwp&" + 
                    "filter=WpJ08&" + 
                    "keys=evnmasvir_265.316_inpst&" + 
                    "showMetadata=IjKltr5raHU&" + 
                    "types=evomaster_2452911_input&" + 
                    "values=evomaster_2652912_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Each bcircle must consist of a lon/lat coordinate pair plus a buffer in meters."));
    }
    
    
    @Test
    public void test_150() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count?" + 
                    "bcircles=do%3A50%2C%2B084%2C%3B&" + 
                    "filter=&" + 
                    "keys=QhmLM-6&" + 
                    "time=evomaster_2655217_input&" + 
                    "values=RXSOBx%40az4pkvO4")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Each bcircle must consist of a lon/lat coordinate pair plus a buffer in meters."));
    }
    
    
    @Test
    public void test_151() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count?" + 
                    "bcircles=do%3A50%2C-080%2C%3B&" + 
                    "filter=l&" + 
                    "format=CSV&" + 
                    "keys=QhmLM-6&" + 
                    "showMetadata=gvomawter%602253481_emp&" + 
                    "timeout=-4854.744&" + 
                    "values=evomaster_2655045_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Each bcircle must consist of a lon/lat coordinate pair plus a buffer in meters."));
    }
    
    
    @Test
    public void test_152() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count?" + 
                    "bcircles=do%3A59%2C%2B056%2C6q&" + 
                    "filter=J&" + 
                    "format=*&" + 
                    "keys=VhoPJ-6&" + 
                    "showMetadata=No&" + 
                    "timeout=-4814.9859636663805&" + 
                    "types=%2B")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Each bcircle must consist of a lon/lat coordinate pair plus a buffer in meters."));
    }
    
    
    @Test
    public void test_153() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count?" + 
                    "bcircles=do%3A99%2C%2B081%2C%3B&" + 
                    "filter=&" + 
                    "format=CSv&" + 
                    "keys=RhoPJ-6&" + 
                    "showMetadata=evomaster%602253481_imp&" + 
                    "timeout=-4854.74407251331&" + 
                    "values=Dt")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Each bcircle must consist of a lon/lat coordinate pair plus a buffer in meters."));
    }
    
    
    @Test
    public void test_154() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count?" + 
                    "bcircles=ds%3A59%2C%2B072%2C4&" + 
                    "filter=G&" + 
                    "format=&" + 
                    "timeout=-5160.65529791096&" + 
                    "types=pOiNT&" + 
                    "values=evomaster_2654907_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The keys, values and types parameters must be empty, when you set the filter parameter."));
    }
    
    
    @Test
    public void test_155() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count?" + 
                    "bcircles=do%3A99%2C%2B081%2C%3B&" + 
                    "format=CSv&" + 
                    "keys=RhoPJ-6&" + 
                    "showMetadata=evomaster%602253481_imp&" + 
                    "timeout=-4854.74407251331&" + 
                    "values=Dt")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Each bcircle must consist of a lon/lat coordinate pair plus a buffer in meters."));
    }
    
    
    @Test
    public void test_156() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count?" + 
                    "bcircles=bo%3A5%3A%2C-.00%2C%40I&" + 
                    "format=Pr&" + 
                    "showMetadata=evooatver_2653481cimpu&" + 
                    "timeout=-4856.46847036918&" + 
                    "values=vCp")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Each bcircle must consist of a lon/lat coordinate pair plus a buffer in meters."));
    }
    
    
    @Test
    public void test_157() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count?" + 
                    "bcircles=dg%3A-971%2C%2B083%2C%3F&" + 
                    "filter=4Lyoc%7CCv%600_Kz&" + 
                    "showMetadata=frsoawper_3646332_ilmqt&" + 
                    "types=cvomestenc225537-%5Eeoru")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Each bcircle must consist of a lon/lat coordinate pair plus a buffer in meters."));
    }
    
    
    @Test
    public void test_158() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count?" + 
                    "bcircles=do%3A2.%2C%2B064%2C%3B&" + 
                    "filter=i&" + 
                    "keys=QhmLM-6&" + 
                    "showMetadata=gvomawter%602653481_emp&" + 
                    "time=evomastdr_0655043_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Each bcircle must consist of a lon/lat coordinate pair plus a buffer in meters."));
    }
    
    
    @Test
    public void test_159() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count?" + 
                    "bcircles=do%3A55%2C%2B063%2C%3B&" + 
                    "keys=RhoPJ-6&" + 
                    "showMetadata=evomawter%602253481_imp&" + 
                    "time=d&" + 
                    "timeout=-4854.74407251331&" + 
                    "types=1-&" + 
                    "values=evomaster_2654816_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Each bcircle must consist of a lon/lat coordinate pair plus a buffer in meters."));
    }
    
    
    @Test
    public void test_160() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count?" + 
                    "bcircles=do%3A-0%2C%2B083%2C%3B&" + 
                    "showMetadata=gvomawter%602253471_emp&" + 
                    "time=evomaotdr_0655043_input&" + 
                    "timeout=-4854.74407251331&" + 
                    "types=pvIdAB_f&" + 
                    "values=RXSMBx%3Daz4pkvO4D")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Each bcircle must consist of a lon/lat coordinate pair plus a buffer in meters."));
    }
    
    
    @Test
    public void test_161() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count?" + 
                    "bcircles=do%3A5.%2C%2B083%2C%3B&" + 
                    "filter=m&" + 
                    "format=cSV&" + 
                    "showMetadata=gvomawter%602253481_emp&" + 
                    "time=evomaster_2655043_input&" + 
                    "timeout=-4854.74407251331&" + 
                    "types=prIdAB_f&" + 
                    "values=evomaster_2655058_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Each bcircle must consist of a lon/lat coordinate pair plus a buffer in meters."));
    }
    
    
    @Test
    public void test_162() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count?" + 
                    "bcircles=dk%3A21%2C%2B083%2C%3B&" + 
                    "filter=i&" + 
                    "showMetadata=evooaster_2646331_innut&" + 
                    "time=2&" + 
                    "types=RXSMBx%40az4pkvO4&" + 
                    "values=RXSMBx%40az6pkvO")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Each bcircle must consist of a lon/lat coordinate pair plus a buffer in meters."));
    }
    
    
    @Test
    public void test_163() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count?" + 
                    "bcircles=dk%3A21%2C%2B083%2C%3B&" + 
                    "filter=j&" + 
                    "format=cSV&" + 
                    "showMetadata=evooasper_2646332_innut&" + 
                    "time=s&" + 
                    "timeout=-4854.885681997332")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Each bcircle must consist of a lon/lat coordinate pair plus a buffer in meters."));
    }
    
    
    @Test
    public void test_164() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count?" + 
                    "bcircles=do%3A30%2C%2B083%2C%3B&" + 
                    "format=cSV&" + 
                    "keys=UhmLM-6&" + 
                    "time=evomastdr_0655043_input&" + 
                    "values=RXSMBxAaz4pkvO4D")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Each bcircle must consist of a lon/lat coordinate pair plus a buffer in meters."));
    }
    
    
    @Test
    public void test_165() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count?" + 
                    "bcircles=do%3A33%2C%2B083%2C%3BS&" + 
                    "format=Pr&" + 
                    "showMetadata=sDqv2&" + 
                    "time=evomasxdra0655043_inrut&" + 
                    "types=prIdAB%5Df&" + 
                    "values=RXSMBxA%5Dz4pkvO4D")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Each bcircle must consist of a lon/lat coordinate pair plus a buffer in meters."));
    }
    
    
    @Test
    public void test_166() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count?" + 
                    "bcircles=do%3A33%2C%2B083%2C%3BS&" + 
                    "filter=fr4c2XV02pyeoHT9&" + 
                    "format=Pr&" + 
                    "showMetadata=sDqv2&" + 
                    "time=evomastdra0655043_inrut&" + 
                    "timeout=-4854.74407251331&" + 
                    "types=prIdAB%5Df&" + 
                    "values=RXSMBxA%5Dz4pkvO4D")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Each bcircle must consist of a lon/lat coordinate pair plus a buffer in meters."));
    }
    
    
    @Test
    public void test_167() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count?" + 
                    "bcircles=ds%3A42%2C%2B083%2C%3B&" + 
                    "showMetadata=evomaster_2646332_jnnut&" + 
                    "time=&" + 
                    "values=RXSMBx%40az4pkvO4")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Each bcircle must consist of a lon/lat coordinate pair plus a buffer in meters."));
    }
    
    
    @Test
    public void test_168() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count?" + 
                    "bcircles=do%3A59%2C%2B071%2C7&" + 
                    "filter=H&" + 
                    "showMetadata=No&" + 
                    "values=evomaster_2654907_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The keys, values and types parameters must be empty, when you set the filter parameter."));
    }
    
    
    @Test
    public void test_169() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count?" + 
                    "bcircles=dUn%3A59%2C%2B071%2C6&" + 
                    "format=csv&" + 
                    "showMetadata=trUe&" + 
                    "time=evomastep_.654897_inpst&" + 
                    "timeout=-4332.788491989052&" + 
                    "types=evomaster_2654981_input&" + 
                    "values=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Parameter 'types' (and 'types2') can only have 'node' and/or 'way' and/or 'relation' OR 'point' and/or 'line' and/or 'polygon' and/or 'other'"));
    }
    
    
    @Test
    public void test_170() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count?" + 
                    "bcircles=dUn%3A59%2C%2B071%2C6&" + 
                    "filter=Gi&" + 
                    "format=csv&" + 
                    "showMetadata=YES&" + 
                    "timeout=-4332.78849&" + 
                    "types=WAY")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The keys, values and types parameters must be empty, when you set the filter parameter."));
    }
    
    
    @Test
    public void test_171() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count?" + 
                    "bcircles=dUn%3A59%2C%2B071%2C6&" + 
                    "filter=H&" + 
                    "keys=VioRJ-6&" + 
                    "showMetadata=FaLSE&" + 
                    "time=evomastep_.652897_inp&" + 
                    "timeout=-4333.402090817301&" + 
                    "types=OtHeR")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_172() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count?" + 
                    "bcircles=do%3A3.%2C%2B063%2C%3B&" + 
                    "format=csV&" + 
                    "keys=QhmLM-6&" + 
                    "showMetadata=gvomawter%602253481_emp&" + 
                    "time=evomastdr_0655043_input&" + 
                    "types=prIdAB_f")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Each bcircle must consist of a lon/lat coordinate pair plus a buffer in meters."));
    }
    
    
    @Test
    public void test_173() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count?" + 
                    "bcircles=do%3A10%2C%2B063%2C%3B&" + 
                    "time=evomastdr_0655043_input&" + 
                    "timeout=-4854.74407251331")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Each bcircle must consist of a lon/lat coordinate pair plus a buffer in meters."));
    }
    
    
    @Test
    public void test_174() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count?" + 
                    "bcircles=do%3A12%2C%2B063%2C%3B&" + 
                    "time=evomastdt_0655043_input&" + 
                    "timeout=-4854.74407251331&" + 
                    "types=prIdAB_f")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Each bcircle must consist of a lon/lat coordinate pair plus a buffer in meters."));
    }
    
    
    @Test
    public void test_175() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count?" + 
                    "bcircles=dUn%3A59%2C%2B071%2C6&" + 
                    "filter=Hi&" + 
                    "time=evomastep_%2F654897%5Binps&" + 
                    "timeout=-4332.788491989052&" + 
                    "types=wAY")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_176() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count?" + 
                    "bcircles=dUn%3A59%2C%2B071%2C6&" + 
                    "filter=Gi&" + 
                    "keys=VhoPJ-6&" + 
                    "time=evomastep_%2F654897%5Binps&" + 
                    "timeout=-4332.5105865734195&" + 
                    "types=rElaTiON")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_177() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count?" + 
                    "bcircles=dUn%3A59%2C%2B071%2C6&" + 
                    "format=&" + 
                    "keys=VhoPJ-6&" + 
                    "showMetadata=trUe&" + 
                    "time=evomastep_.654897_inpst&" + 
                    "timeout=-4332.788491989052&" + 
                    "types=Polygon&" + 
                    "values=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_178() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count?" + 
                    "bcircles=do%3A59%2C%2B071%2C6&" + 
                    "filter=H&" + 
                    "format=gEOJsON&" + 
                    "keys=VhoPJ-6&" + 
                    "time=evomastep_2654897_inpqt&" + 
                    "types=10&" + 
                    "values=evomastes_2654907_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Parameter 'types' (and 'types2') can only have 'node' and/or 'way' and/or 'relation' OR 'point' and/or 'line' and/or 'polygon' and/or 'other'"));
    }
    
    
    @Test
    public void test_179() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count?" + 
                    "bcircles=do%3A59%2C%2B071%2C6&" + 
                    "format=json&" + 
                    "showMetadata=No&" + 
                    "time=evomastep_2654897_inpqt&" + 
                    "values=evomastes_2654907_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_180() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count?" + 
                    "bcircles=dUn%3A59%2C%2B071%2C6&" + 
                    "format=YES&" + 
                    "values=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given 'format' parameter is invalid. Please choose between 'geojson'(only available for /groupBy/boundary and data extraction requests), 'json', or 'csv'."));
    }
    
    
    @Test
    public void test_181() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count?" + 
                    "bcircles=bo%3A59%2C1075%2C3&" + 
                    "filter=H&" + 
                    "keys=VhnPD-7&" + 
                    "showMetadata=no&" + 
                    "time=%2F&" + 
                    "values=BxLd")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The keys, values and types parameters must be empty, when you set the filter parameter."));
    }
    
    
    @Test
    public void test_182() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count?" + 
                    "bcircles=do%3A59%2C-075%2C7&" + 
                    "filter=H&" + 
                    "showMetadata=no&" + 
                    "time=%3A3mQVay7xrCA%2F&" + 
                    "timeout=-5008.865520001367&" + 
                    "values=evombster_2%3A54907_ejput")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_183() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count?" + 
                    "bcircles=dUn%3A59%2C%2B071%2C6&" + 
                    "filter=H&" + 
                    "format=csv&" + 
                    "showMetadata=trUe&" + 
                    "time=evomastep_.654897_inpst&" + 
                    "timeout=-4332.788491989052&" + 
                    "types=evomaster_2654981_input&" + 
                    "values=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Parameter 'types' (and 'types2') can only have 'node' and/or 'way' and/or 'relation' OR 'point' and/or 'line' and/or 'polygon' and/or 'other'"));
    }
    
    
    @Test
    public void test_184() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count?" + 
                    "bcircles=dUn%3A59%2C%2B071%2C6&" + 
                    "filter=H&" + 
                    "time=evomastep_%2F654897%5Binps&" + 
                    "timeout=-4332.788491989052&" + 
                    "types=nOdE&" + 
                    "values=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_185() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count?" + 
                    "bcircles=ds%3A59%2C%2B071%2C4&" + 
                    "format=csv&" + 
                    "keys=VhoQJ-6&" + 
                    "time=p&" + 
                    "timeout=-4852.903871521379&" + 
                    "types=POinT&" + 
                    "values=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_186() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count?" + 
                    "bcircles=ds%3A59%2C%2B071%2C4&" + 
                    "format=csv&" + 
                    "time=s&" + 
                    "timeout=-5160.65529791096&" + 
                    "types=lInE&" + 
                    "values=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_187() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count?" + 
                    "bcircles=dUn%3A59%2C%2B071%2C6&" + 
                    "filter=I&" + 
                    "showMetadata=no&" + 
                    "timeout=-4332.507449837188")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Invalid filter syntax. Please look at the additional info and examples about the filter parameter at https://docs.ohsome.org/ohsome-api. Detailed error message: line 1, column 2: whitespaces, EQUALS (=), NOT_EQUALS (!=) or in expected, EOF encountered."));
    }
    
    
    @Test
    public void test_188() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count?" + 
                    "bcircles=dUn%3A59%2C%2B071%2C6&" + 
                    "filter=H&" + 
                    "format=&" + 
                    "timeout=-4333.795670275034&" + 
                    "types=Polygon")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The keys, values and types parameters must be empty, when you set the filter parameter."));
    }
    
    
    @Test
    public void test_189() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count?" + 
                    "bcircles=do%3A10%2C%2B083%2C%3B&" + 
                    "filter=i&" + 
                    "format=cSV&" + 
                    "time=evomastdr_0655043_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Each bcircle must consist of a lon/lat coordinate pair plus a buffer in meters."));
    }
    
    
    @Test
    public void test_190() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count?" + 
                    "bcircles=do%3A40%2C%2B083%2C%3B&" + 
                    "filter=&" + 
                    "format=csV&" + 
                    "showMetadata=evomaster_2646331_innut&" + 
                    "time=&" + 
                    "timeout=-4854.7695291428745&" + 
                    "types=RXSMBx%40az4pkvO4&" + 
                    "values=RXSMBx%40az4pkvO4")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Each bcircle must consist of a lon/lat coordinate pair plus a buffer in meters."));
    }
    
    
    @Test
    public void test_191() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count?" + 
                    "bcircles=do%3A59%2C1074%2C7&" + 
                    "filter=O&" + 
                    "keys=VhnPF-5&" + 
                    "showMetadata=&" + 
                    "time=%2CKJ61xqH")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_192() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/boundary?" + 
                    "bboxes=hJPistk5DlH7TYsr&" + 
                    "bpolys=uhKLhqXLbX&" + 
                    "filter=uhKLhqXLbX&" + 
                    "format=GMJjV_vFwPy&" + 
                    "keys=hG2&" + 
                    "types=Hxk6&" + 
                    "values=YwiCXOln")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density/groupBy/tag?" + 
                    "bcircles=%2C&" + 
                    "filter=i3utE&" + 
                    "format=le7&" + 
                    "groupByKey=wTNLSg954A0&" + 
                    "groupByValues=PuZ_AXEOf4Efymn&" + 
                    "keys=N&" + 
                    "showMetadata=XFDmtFbv2wxgi0cV&" + 
                    "types=bB&" + 
                    "values=noDTJefHDEYZRb")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_193() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area?" + 
                    "bpolys=cvomaster_3%24%2C3_input&" + 
                    "filter=evomaster_11608_input&" + 
                    "format=evomaster_3398_input&" + 
                    "keys=03vISk5x2f71&" + 
                    "time=lkTdAFNI75bp6jl&" + 
                    "types=evomaster_252526_input&" + 
                    "values=KPsVxEGUyLjf")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The bpolys parameter must contain double-parseable values in form of lon/lat coordinate pairs."));
    }
    
    
    @Test
    public void test_194() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/boundary/groupBy/tag?" + 
                    "bboxes=evomaster_28193_input&" + 
                    "bcircles=6FcXs0k9tW4u8tBd&" + 
                    "bpolys=Ks4d&" + 
                    "filter=&" + 
                    "format=evomaster_28194_input&" + 
                    "groupByKey=evomaster_%2C191_inqu&" + 
                    "keys=HtDqEyvJJ&" + 
                    "time=6zofQ9pAT0R8b&" + 
                    "timeout=evomaster_4192_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("You need to give one groupByKey parameter, if you want to use groupBy/tag."));
    }
    
    
    @Test
    public void test_195() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/tag?" + 
                    "bboxes=2PPfCJnRGFhsI&" + 
                    "bcircles=&" + 
                    "bpolys=rY&" + 
                    "filter=evomaster_37445_input&" + 
                    "format=JS9PdThTKn8&" + 
                    "groupByKey=%2C6wWv&" + 
                    "groupByValues=3uJcJPuhuSzWw1R&" + 
                    "keys=lK7x8u8jdojVQcjh&" + 
                    "timeout=yTqmf6TxqIf_IbD6&" + 
                    "types=jVLexwME9")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("You need to give one groupByKey parameter, if you want to use groupBy/tag."));
    }
    
    
    @Test
    public void test_196() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/key?" + 
                    "bcircles=Qy6ljFyIjzbj%7Cz&" + 
                    "bpolys=&" + 
                    "format=evomaster_73379_input&" + 
                    "groupByKeys=evomaster_73380_input&" + 
                    "keys=T&" + 
                    "showMetadata=evomaster_77190_input&" + 
                    "time=evomaster_73191_input&" + 
                    "types=HzARgKSml_BUJGHc&" + 
                    "values=IFa")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_197() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/groupBy/tag?" + 
                    "bboxes=&" + 
                    "bpolys=&" + 
                    "groupByKey=T%2CllMtfs&" + 
                    "keys=5lCP&" + 
                    "showMetadata=evomaster_233881_input&" + 
                    "time=Ky&" + 
                    "timeout=v2pwGOzaBKsS")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("You need to give one groupByKey parameter, if you want to use groupBy/tag."));
    }
    
    
    @Test
    public void test_198() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/type?" + 
                    "bboxes=%7C&" + 
                    "filter=YP&" + 
                    "format=R5YD%5CYF&" + 
                    "keys=evomaster_805022_input&" + 
                    "showMetadata=Msdzh7PHU9Z&" + 
                    "values=iYuSDlImedA318U")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_199() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count?" + 
                    "bcircles=do%3A59%2C%2B081%2C7&" + 
                    "filter=&" + 
                    "keys=RhoPJ-6&" + 
                    "showMetadata=evomaster%602253481_imp&" + 
                    "timeout=-4853.4031")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given parameter showMetadata can only contain the values 'true', 'yes', 'false', or 'no'."));
    }
    
    
    @Test
    public void test_200() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/boundary?" + 
                    "bcircles=%7C&" + 
                    "keys=f&" + 
                    "time=&" + 
                    "types=qXHlSj7eygsfWt4%3A&" + 
                    "values=8rLN")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_201() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count?" + 
                    "bcircles=bo%3A59%2C%2B.30%2C%3B&" + 
                    "filter=&" + 
                    "keys=RhoPJ16&" + 
                    "time=m&" + 
                    "types=1%2C&" + 
                    "values=Et")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Each bcircle must consist of a lon/lat coordinate pair plus a buffer in meters."));
    }
    
    
    @Test
    public void test_202() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count?" + 
                    "bcircles=dk%3A-01%2C%2B083%2C%3Br&" + 
                    "keys=evkmaster_2656329_input&" + 
                    "showMetadata=frsoasper_2646332_inmut&" + 
                    "timeout=-4854.397420751126&" + 
                    "types=evomasten_2655541_eorut&" + 
                    "values=RXSMFxAa%7E6nm")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Each bcircle must consist of a lon/lat coordinate pair plus a buffer in meters."));
    }
    
    
    @Test
    public void test_203() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count?" + 
                    "bcircles=do%3A5.%2C%2B083%2C%3B&" + 
                    "filter=m&" + 
                    "format=cSV&" + 
                    "showMetadata=gvomawter%602253481_emp&" + 
                    "time=evomaster_2655043_input&" + 
                    "types=prIdAB_f&" + 
                    "values=evomaster_2655058_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Each bcircle must consist of a lon/lat coordinate pair plus a buffer in meters."));
    }
    
    
    @Test
    public void test_204() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count?" + 
                    "bcircles=do%3A10%2C%2B083%2C%3B&" + 
                    "filter=i&" + 
                    "format=cSV&" + 
                    "showMetadata=gvomawter%602253481_emp&" + 
                    "time=evomastdr_0655043_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Each bcircle must consist of a lon/lat coordinate pair plus a buffer in meters."));
    }
    
    
    @Test
    public void test_205() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count?" + 
                    "bcircles=do%3A30%2C%2B083%2C%3B&" + 
                    "format=cSV&" + 
                    "keys=UhmLM-6&" + 
                    "time=evomastdr_0655043_input&" + 
                    "timeout=-4854.74407251331&" + 
                    "values=RXSMBxAaz4pkvO4D")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Each bcircle must consist of a lon/lat coordinate pair plus a buffer in meters."));
    }
    
    
    @Test
    public void test_206() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count?" + 
                    "bcircles=do%3A40%2C%2B083%2C%3B&" + 
                    "filter=&" + 
                    "format=csV&" + 
                    "showMetadata=evomaster_2646332_innut&" + 
                    "time=&" + 
                    "timeout=-4854.7695291428745&" + 
                    "types=RXSMBx%40az4pkvO4&" + 
                    "values=RXSMBx%40az4pkvO4")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Each bcircle must consist of a lon/lat coordinate pair plus a buffer in meters."));
    }
    
    
    @Test
    public void test_207() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count?" + 
                    "bcircles=dUn%3A1%3A%2C%2B061%2C6&" + 
                    "showMetadata=No&" + 
                    "time=evomastepa.654897_inpqt&" + 
                    "types=u77%3B&" + 
                    "values=proposed%3Arailway")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Parameter 'types' (and 'types2') can only have 'node' and/or 'way' and/or 'relation' OR 'point' and/or 'line' and/or 'polygon' and/or 'other'"));
    }
    
    
    @Test
    public void test_208() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count?" + 
                    "bcircles=do%3A10%2C%2B063%2C%3B&" + 
                    "keys=QhmLM-6&" + 
                    "showMetadata=gvomawter%602253481_emp&" + 
                    "time=evomastdr_0655043_input&" + 
                    "timeout=-4854.74407251331&" + 
                    "values=RXSMBxAa%7C4pkvO4D")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Each bcircle must consist of a lon/lat coordinate pair plus a buffer in meters."));
    }
    
    
    @Test
    public void test_209() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count?" + 
                    "bcircles=do%3A59%2C%2B051%2C6&" + 
                    "filter=Dv&" + 
                    "format=csv&" + 
                    "keys=VhoPJ-6&" + 
                    "timeout=-4814.9859636663805&" + 
                    "types=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The keys, values and types parameters must be empty, when you set the filter parameter."));
    }
    
    
    @Test
    public void test_210() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count?" + 
                    "bcircles=ds%3A59%2C%2B071%2C4&" + 
                    "filter=G&" + 
                    "keys=VhoQJ-6&" + 
                    "time=&" + 
                    "values=evomaster_2654907_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The keys, values and types parameters must be empty, when you set the filter parameter."));
    }
    
    
    @Test
    public void test_211() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count?" + 
                    "bcircles=dUn%3A59%2C%2B071%2C6&" + 
                    "filter=H&" + 
                    "showMetadata=trUe&" + 
                    "time=evomastep_%2F654897_inps&" + 
                    "timeout=-4332.788491989052&" + 
                    "types=OTHeR&" + 
                    "values=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_212() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count?" + 
                    "bcircles=dUn%3A59%2C%2B071%2C6&" + 
                    "format=Pr&" + 
                    "showMetadata=trUe&" + 
                    "time=evomastep_.654897_inps&" + 
                    "types=Polygon")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given 'format' parameter is invalid. Please choose between 'geojson'(only available for /groupBy/boundary and data extraction requests), 'json', or 'csv'."));
    }
    
    
    @Test
    public void test_213() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count?" + 
                    "bcircles=do%3A59%2C-075%2C7&" + 
                    "filter=H&" + 
                    "time=%3A%2FmQVay7xrCA%2F&" + 
                    "timeout=-5008.865520001367&" + 
                    "values=evombster_2%3A54907_ejput")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_214() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/density?" + 
                    "bboxes=RGw5MdM&" + 
                    "format=2YYtLpWg&" + 
                    "keys=R54kzp&" + 
                    "types=kscBm")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/density?" + 
                    "bcircles=%2C&" + 
                    "filter=0jYG47Kcl0&" + 
                    "showMetadata=9RJB4DaIQLFdU&" + 
                    "values=Pt2wljRnXzCq2")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/tag?" + 
                    "bpolys=E0Y1sGC7g03&" + 
                    "filter=9p&" + 
                    "groupByKey=I5j&" + 
                    "groupByValues=bKNCj&" + 
                    "keys=6fu640x&" + 
                    "showMetadata=JL&" + 
                    "time=6YJVZtessKZAW&" + 
                    "types=VY77FbV93X&" + 
                    "values=EJqwggV6_KYH2")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_215() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/ratio/groupBy/boundary?" + 
                    "bboxes=CR8psn7g5TGWcI4&" + 
                    "bpolys=vA38MTzq&" + 
                    "keys=nLE3Ni6znGr7lvIN&" + 
                    "keys2=M_Z&" + 
                    "showMetadata=zF&" + 
                    "time=d&" + 
                    "timeout=2Vu&" + 
                    "types=MjybXqIDr")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_216() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/key?" + 
                    "bpolys=evomaster_217316_input&" + 
                    "filter=evomaster_20706_input&" + 
                    "format=evomaster_R0707_input&" + 
                    "groupByKeys=%2C&" + 
                    "keys=evomaster_217317_input&" + 
                    "timeout=37GJi&" + 
                    "types=evomaster_217318_input&" + 
                    "values=d1P81hr3_1yAaS5")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("You need to give one groupByKeys parameter, if you want to use groupBy/key."));
    }
    
    
    @Test
    public void test_217() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/density/groupBy/boundary?" + 
                    "bboxes=TID4sLRHKeoJqb&" + 
                    "bpolys=d6UdWm&" + 
                    "filter=xMYVXaU&" + 
                    "format=8DmWDWmO6T&" + 
                    "keys=c1T46cC&" + 
                    "types=BjkNXj3kM_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_218() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter?" + 
                    "bboxes=oxW_&" + 
                    "bcircles=I2ZY0eErlW&" + 
                    "bpolys=7x&" + 
                    "filter=iLu6S26DLy3o6CCG&" + 
                    "format=DXZHG1aPjn5Jb&" + 
                    "keys=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_219() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/boundary?" + 
                    "bpolys=AG&" + 
                    "keys=ibYLiDKSpmmqi2R&" + 
                    "showMetadata=no&" + 
                    "time=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_220() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density/groupBy/boundary?" + 
                    "keys=3efCN&" + 
                    "showMetadata=u8&" + 
                    "time=EwsLxvJT4HKZ&" + 
                    "timeout=gXWI&" + 
                    "types=ijk&" + 
                    "values=oKhV")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_221() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density?" + 
                    "bpolys=JgUV&" + 
                    "filter=&" + 
                    "format=p&" + 
                    "keys=Q4EcfPxX9m&" + 
                    "showMetadata=aF1R1&" + 
                    "timeout=5DqGW9T&" + 
                    "types=gPD9cEzg&" + 
                    "values=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_222() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length?" + 
                    "bboxes=a_9IEbd7yJ5&" + 
                    "bcircles=9EoHD&" + 
                    "time=8DuDzMj_V9bf5ENs&" + 
                    "types=MRjeHQRBB&" + 
                    "values=zMPhfsFJpw45YJj")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_223() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/boundary?" + 
                    "filter=3Yu7Pnuuljzl&" + 
                    "keys=D44gI5eZ&" + 
                    "time=hY6JjA8nN_X&" + 
                    "timeout=dSh&" + 
                    "types=Un9t9FlyZPwhvI")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_224() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/density/groupBy/boundary?" + 
                    "bboxes=fRg&" + 
                    "filter=uoTt&" + 
                    "format=cniDdQzNTz&" + 
                    "keys=yErR&" + 
                    "timeout=PM8vv32CZIMi&" + 
                    "types=GPFgxviD")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_225() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/density?" + 
                    "bcircles=j1DhclMcALL&" + 
                    "format=v4&" + 
                    "showMetadata=KXl0sIOQ&" + 
                    "timeout=&" + 
                    "values=omLOX96K6")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_226() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count?" + 
                    "bboxes=wSi1cCyIyRacpi_&" + 
                    "filter=V0kpD&" + 
                    "format=Sr4ur2&" + 
                    "showMetadata=aWoOj08vJB_WQzKS&" + 
                    "types=Hdj2VWy6g0OX3&" + 
                    "values=U")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_227() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/boundary?" + 
                    "bpolys=g9FyTd&" + 
                    "filter=KCYrda6GnG1a_vaB&" + 
                    "format=qYzSO&" + 
                    "showMetadata=0DQqMBPGEYF&" + 
                    "timeout=R2pO03MV_Pa&" + 
                    "types=On4gru")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_228() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density/groupBy/boundary?" + 
                    "bcircles=bU0EW&" + 
                    "bpolys=AyRrnex0Is0MYe3c&" + 
                    "timeout=aF&" + 
                    "types=yFOECxpu76U_1k")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_229() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density?" + 
                    "bpolys=yu3lm&" + 
                    "filter=&" + 
                    "keys=7aDM49_05LK&" + 
                    "showMetadata=d9&" + 
                    "time=c1y3z6qzgN3n&" + 
                    "values=t01_lyuuhVDWot")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_230() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area?" + 
                    "bboxes=CQhD5I8UDNe86&" + 
                    "bpolys=K&" + 
                    "filter=402UnOq5Y&" + 
                    "format=C&" + 
                    "showMetadata=YCBGI&" + 
                    "time=377gVs9GXvW")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_231() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count?" + 
                    "bpolys=is%3A65%2C-08%3A1%3C5&" + 
                    "format=Nr&" + 
                    "keys=O7&" + 
                    "showMetadata=yES&" + 
                    "types=OthER")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_232() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/density/groupBy/boundary?" + 
                    "bpolys=7%2C%3AFYC4a&" + 
                    "keys=2bxbR&" + 
                    "timeout=9&" + 
                    "values=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=vRDgik&" + 
                    "bpolys=zAzQ4YOy3av&" + 
                    "format=BD9cslvCw0C2S_&" + 
                    "groupByKey=evomaster_564371_input&" + 
                    "groupByValues=0uOHKjkbZMKqKcOi&" + 
                    "showMetadata=op_GnB2HWJ&" + 
                    "time=6TpQ&" + 
                    "values=gea2w")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_233() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count?" + 
                    "bcircles=t%3A7%3A%2Cl%3EJd%2CPmw5&" + 
                    "filter=evomasxer_2649144_inlut&" + 
                    "keys=evkmarxgt_777%2C%5Demku&" + 
                    "showMetadata=evom%5Drtar_2648894_inpu&" + 
                    "time=evnmaoterd2448760_ilpqt&" + 
                    "types=UlHqkQwup&" + 
                    "values=evomaster_2649890_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Each bcircle must consist of a lon/lat coordinate pair plus a buffer in meters."));
    }
    
    
    @Test
    public void test_234() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count?" + 
                    "bcircles=do%3A59%2C-075%2C7&" + 
                    "filter=H&" + 
                    "time=%3A3mQVay7xrCA%2F&" + 
                    "values=evombster_2%3A54907_ejput")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_235() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count?" + 
                    "bboxes=a%7D529%2C%25%2C*5%2C%3AnAOF&" + 
                    "filter=avosastcr_2681787_jnpup&" + 
                    "format=Nz%2FlqrvWx&" + 
                    "showMetadata=&" + 
                    "values=bz51%3A%2C%29%2C*5%2C7nEOF")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("One or more boundary object(s) have a custom id (or at least a colon), whereas other(s) don't. You can either set custom ids for all your boundary objects, or for none."));
    }
    
    
    @Test
    public void test_236() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/density/groupBy/type?" + 
                    "bboxes=cBnJypLzklpt&" + 
                    "bcircles=rMDCMfrb4&" + 
                    "filter=nUH2&" + 
                    "timeout=tA6f74aBNP&" + 
                    "types=x1S9D1vK4AFGO4")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/density/groupBy/type")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("You need to define one of the boundary parameters (bboxes, bcircles, bpolys)."));
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/density/groupBy/type?" + 
                    "bboxes=&" + 
                    "bcircles=Poqea09&" + 
                    "filter=N2xEMV7Newp&" + 
                    "timeout=dFMsnLBv&" + 
                    "values=O4zqtHacsTeNvDXx")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/density/groupBy/type?" + 
                    "bcircles=_JrRf_3wv&" + 
                    "time=NytMPMq0u_JKg&" + 
                    "types=CWYDc")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_237() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/groupBy/type?" + 
                    "bboxes=l5Y5Ff&" + 
                    "bpolys=LPmy&" + 
                    "filter=zPccI0S_uOMpec_&" + 
                    "format=vDsPK7Ec4n1t&" + 
                    "time=LsXDrucz&" + 
                    "values=Ib_3")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_238() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length?" + 
                    "bboxes=5%2CLP&" + 
                    "filter=In&" + 
                    "keys=_upo_ix_aUZy&" + 
                    "time=HK5oG7c&" + 
                    "types=evomaster_1216509_input&" + 
                    "values=c")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Apart from the custom ids, the bboxeses array must contain double-parseable values in the following order: minLon, minLat, maxLon, maxLat."));
    }
    
    
    @Test
    public void test_239() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/density/groupBy/boundary?" + 
                    "bpolys=7%2CjVYS4ay&" + 
                    "keys=2bxbR&" + 
                    "showMetadata=gzaEyZH8&" + 
                    "time=Hkfaet9k8UW0h&" + 
                    "timeout=8&" + 
                    "types=XBevVitzNWe6E")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The bpolys parameter must contain double-parseable values in form of lon/lat coordinate pairs."));
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/density/groupBy/boundary/groupBy/tag?" + 
                    "bboxes=Yd4OJzlWRQAq&" + 
                    "filter=YxpeYV&" + 
                    "format=0_Y8yrSr&" + 
                    "groupByKey=5&" + 
                    "groupByValues=oAe0rV&" + 
                    "keys=VZMjCAACvq_jB&" + 
                    "showMetadata=kb&" + 
                    "time=Oo7cbDgRcxfxnmGt&" + 
                    "timeout=c7NKN&" + 
                    "types=I3kT&" + 
                    "values=H_XsJioZRO6Wo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_240() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count?" + 
                    "bcircles=w4rk%2Cm%3ACd%2CO&" + 
                    "keys=evomasxer_7870_input&" + 
                    "showMetadata=evomaster_1365094_input&" + 
                    "time=evomaster_7871_input&" + 
                    "values=evomaster_1365095_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_241() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count?" + 
                    "bcircles=dUn%3A59%2C%2B071%2C6&" + 
                    "filter=Ei&" + 
                    "keys=VhoNJ-6&" + 
                    "showMetadata=TRuE&" + 
                    "time=ivomastep_%2F654897%5Binos&" + 
                    "timeout=-4336.09027234365&" + 
                    "types=rElaTiON&" + 
                    "values=proposed%3Arailway")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_242() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/density?" + 
                    "bboxes=lIzVt&" + 
                    "bcircles=&" + 
                    "bpolys=ROuroI2vqL&" + 
                    "time=lTWTY0MKU5&" + 
                    "timeout=0qhn4OOkaEckgb&" + 
                    "values=jcaZM")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_243() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count?" + 
                    "bcircles=do%3A59%2C-075%2C7&" + 
                    "keys=VioPJ-6&" + 
                    "showMetadata=no&" + 
                    "time=%3A%2FmQVay7xrCA%2Fs&" + 
                    "timeout=-5008.865520001367&" + 
                    "values=evombster_2%3A54907_ejput")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_244() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/ratio/groupBy/boundary?" + 
                    "format=tWcR3&" + 
                    "keys=b9UlS9tlB035&" + 
                    "keys2=fgTX&" + 
                    "showMetadata=2pa7lZ29F0Ssmo&" + 
                    "timeout=TwXIO&" + 
                    "values=MYu5BQ6")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_245() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/ratio/groupBy/boundary?" + 
                    "bcircles=evomaster_115_input&" + 
                    "bpolys=evomaster_100_input&" + 
                    "keys2=I4gn&" + 
                    "showMetadata=&" + 
                    "timeout=q6dp2AFVrZ&" + 
                    "types=&" + 
                    "values=evomaster_101_input&" + 
                    "values2=IsXqc")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/density/groupBy/boundary?" + 
                    "bboxes=&" + 
                    "bcircles=6KFTk_2HLya&" + 
                    "keys=_mWJ3fI&" + 
                    "showMetadata=nkTPpE&" + 
                    "time=tv7&" + 
                    "types=gnSJ9ClzWw4eA5")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/groupBy/type?" + 
                    "bcircles=P6kq&" + 
                    "filter=4ghaUJto&" + 
                    "keys=vt&" + 
                    "time=q%2CpmJsD&" + 
                    "timeout=&" + 
                    "types=kgNbNL&" + 
                    "values=3y")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/boundary?" + 
                    "filter=evomaster_104_input&" + 
                    "format=bGJXQkx2m_vCOPU&" + 
                    "keys=mIpHH&" + 
                    "showMetadata=aqGH7x&" + 
                    "timeout=zy7dv34o2lyd")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_246() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count?" + 
                    "bcircles=do%3A-2%2C%2B083%2C%3B&" + 
                    "filter=j&" + 
                    "format=CSV&" + 
                    "keys=QhmLM-6&" + 
                    "showMetadata=gvomawter%602253471_emp&" + 
                    "time=evomaotdr_0655043_input&" + 
                    "types=prIdAB_j")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Each bcircle must consist of a lon/lat coordinate pair plus a buffer in meters."));
    }
    
    
    @Test
    public void test_247() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count?" + 
                    "bcircles=ds%3A59%2C%2B071%2C4&" + 
                    "format=CSv&" + 
                    "keys=VhoRJ-6&" + 
                    "showMetadata=nO&" + 
                    "time=p&" + 
                    "timeout=-5160.7&" + 
                    "types=lInE")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_248() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/type?" + 
                    "bpolys=ctvrzyPl&" + 
                    "filter=m&" + 
                    "format=pmbw8e5K&" + 
                    "showMetadata=CJN_yQfx0V9KeLFN&" + 
                    "timeout=W5c&" + 
                    "types=Z0&" + 
                    "values=vKLi3Y6Uu7S0K")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_249() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count?" + 
                    "bcircles=bo%3A69%2C-430%2CA&" + 
                    "filter=Q&" + 
                    "format=csv&" + 
                    "keys=RhoPJ16&" + 
                    "showMetadata=evomaster_2653481_imput&" + 
                    "timeout=-4854.74407251331&" + 
                    "types=%2C")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Each bcircle must consist of a lon/lat coordinate pair plus a buffer in meters."));
    }
    
    
    @Test
    public void test_250() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count?" + 
                    "bcircles=do%3A55%2C%2B063%2C%3B&" + 
                    "keys=RhoPJ-6&" + 
                    "showMetadata=evomawter%602253481_imp&" + 
                    "time=d&" + 
                    "timeout=-4854.74407251331&" + 
                    "types=11&" + 
                    "values=evomaster_2654816_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Each bcircle must consist of a lon/lat coordinate pair plus a buffer in meters."));
    }
    
    
    @Test
    public void test_251() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count?" + 
                    "bcircles=do%3A59%2C%2B071%2C6&" + 
                    "showMetadata=nO&" + 
                    "values=evomaster_2654907_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("There cannot be more input values in the values|values2 than in the keys|keys2 parameter, as values_n must fit to keys_n."));
    }
    
    
    @Test
    public void test_252() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/ratio/groupBy/boundary?" + 
                    "bcircles=h&" + 
                    "bpolys=kzFaysxaa1gybmi&" + 
                    "filter=lra&" + 
                    "format=67ikPLgF8Duz&" + 
                    "keys=liQeaWOYJPIT4&" + 
                    "showMetadata=TQk6pkT&" + 
                    "time=0WXfuMfp2DGyHJQb&" + 
                    "timeout=5&" + 
                    "types=phtcG5Pv&" + 
                    "values=yG&" + 
                    "values2=wNq6vLc3z62aWU2")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_253() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count?" + 
                    "bcircles=dUn%3A59%2C%2B071%2C6&" + 
                    "filter=Hi&" + 
                    "time=evomastep_%2F654897%5Binps&" + 
                    "timeout=-4332.788491989052&" + 
                    "types=wAY&" + 
                    "values=proposed%3Arailway")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_254() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/density?" + 
                    "bcircles=mr_Ybgtcr9sq8C&" + 
                    "bpolys=T10ri7dGvfj&" + 
                    "format=E&" + 
                    "keys=hNC3udX6Q&" + 
                    "time=XJ_pjvVIY3q")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_255() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area?" + 
                    "bpolys=_v_%5Dast%60%3AO3%24%2C3_inpUt&" + 
                    "keys=Rfvq1PKdTk5UUBh&" + 
                    "showMetadata=uSNpgCSrWArMWA&" + 
                    "time=evomaster_257010_input&" + 
                    "types=evomaster_257033_input&" + 
                    "values=X")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The bpolys parameter must contain double-parseable values in form of lon/lat coordinate pairs."));
    }
    
    
    @Test
    public void test_256() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count?" + 
                    "bcircles=w4rk%2Cm%3BCd%2CO&" + 
                    "format=cSv&" + 
                    "keys=evomasxer_7870_ioput&" + 
                    "timeout=11.127757153970846&" + 
                    "types=evomastet_36590_input&" + 
                    "values=evomaster_1365095_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Each bcircle must consist of a lon/lat coordinate pair plus a buffer in meters."));
    }
    
    
    @Test
    public void test_257() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count?" + 
                    "bcircles=do%3A59%2C1075%2C7&" + 
                    "filter=G&" + 
                    "keys=VhnPD-7&" + 
                    "time=%2FKJ61xqH&" + 
                    "timeout=-5011.08549107086&" + 
                    "values=evmmboter_2%3A54907_ejput")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_258() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count?" + 
                    "bcircles=t%3Ac%5C%2Cl%3FEd%2CP&" + 
                    "format=G&" + 
                    "time=evpoasserc7871_innu&" + 
                    "timeout=-677.1918982389458&" + 
                    "types=YkGrkPvswXKQd&" + 
                    "values=aromapver_1365095_ipput")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Each bcircle must consist of a lon/lat coordinate pair plus a buffer in meters."));
    }
    
    
    @Test
    public void test_259() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/boundary?" + 
                    "bpolys=UWXJi9_XBfv&" + 
                    "filter=dPA&" + 
                    "keys=V4m6FQDo&" + 
                    "showMetadata=DbP1h7XlXsn8&" + 
                    "values=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_260() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count?" + 
                    "bcircles=do%3A59%2C%2B071%2C6&" + 
                    "format=csv&" + 
                    "time=evomastep_2654897_inpqt&" + 
                    "types=10&" + 
                    "values=evomaster_2654907_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Parameter 'types' (and 'types2') can only have 'node' and/or 'way' and/or 'relation' OR 'point' and/or 'line' and/or 'polygon' and/or 'other'"));
    }
    
    
    @Test
    public void test_261() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count?" + 
                    "bcircles=dUn%3A59%2C%2B071%2C6&" + 
                    "filter=J&" + 
                    "format=&" + 
                    "timeout=-4333.795670275034")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Invalid filter syntax. Please look at the additional info and examples about the filter parameter at https://docs.ohsome.org/ohsome-api. Detailed error message: line 1, column 2: whitespaces, EQUALS (=), NOT_EQUALS (!=) or in expected, EOF encountered."));
    }
    
    
    @Test
    public void test_262() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count?" + 
                    "bcircles=bo%3A59%2C1075%2C7&" + 
                    "showMetadata=&" + 
                    "time=%2FKJ7%2FxpH")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_263() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/ratio?" + 
                    "bboxes=evomaster_347_input&" + 
                    "bcircles=pPAlfJ_ID2Yd&" + 
                    "filter2=5&" + 
                    "format=evomaster_348_input&" + 
                    "keys=evomaster_341_input&" + 
                    "keys2=evomast%5Dr_350_input&" + 
                    "time=evomaster_372_input&" + 
                    "timeout=L8&" + 
                    "types=GWlY8aXmjKg238Z&" + 
                    "values=evomaster_373_input&" + 
                    "values2=evomaster_374_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/density/groupBy/type?" + 
                    "bboxes=M08xsFmx&" + 
                    "bcircles=evomaster_375_input&" + 
                    "filter=evomaster_376_input&" + 
                    "format=3HIdsMQgPUYbfx2A&" + 
                    "keys=HZ1lnkm9QnrknE&" + 
                    "showMetadata=i&" + 
                    "time=evmmaster_354_input&" + 
                    "timeout=evomaster_377_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density/groupBy/tag?" + 
                    "bboxes=dKX3JgT_WFYUTus&" + 
                    "bcircles=N98M5bntW4pixoaT&" + 
                    "format=glaQGNhpPHQQo&" + 
                    "groupByKey=evomaster_355_input&" + 
                    "keys=evomaster_378_input&" + 
                    "types=9nV1fPVeF8")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/groupBy/type?" + 
                    "bcircles=evomaster_379_input&" + 
                    "bpolys=&" + 
                    "filter=xoov&" + 
                    "format=iFWqNF&" + 
                    "keys=wW&" + 
                    "timeout=0.5551879605371808&" + 
                    "types=evomaster_357_input&" + 
                    "values=M4TnG")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density/groupBy/tag?" + 
                    "bboxes=evomaster_358_input&" + 
                    "bcircles=evomaster_41_input&" + 
                    "filter=evomaster_359_inpu&" + 
                    "groupByKey=t3r48b6&" + 
                    "keys=5tJ73avlL0gr5&" + 
                    "showMetadata=evomaster_360_input&" + 
                    "timeout=01ls4")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/boundary?" + 
                    "bboxes=evomaster_380_input&" + 
                    "keys=I69zbKr&" + 
                    "timeout=A_xp&" + 
                    "types=kM9aL&" + 
                    "values=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count?" + 
                    "bboxes=evomaster_381_input&" + 
                    "bcircles=evomaster_382_input&" + 
                    "filter=evomaster_362_input&" + 
                    "format=cSV&" + 
                    "keys=evomaster_383_input&" + 
                    "showMetadata=UJ9Vdqzo5QRX&" + 
                    "timeout=_HieJdL&" + 
                    "types=evomaster_44_input&" + 
                    "values=9aTuJel5qfyxKi")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density/groupBy/type?" + 
                    "bpolys=evomaster_384_input&" + 
                    "filter=evomaster_385_input&" + 
                    "keys=evomaster_363_input&" + 
                    "showMetadata=ifx2vcHxg2m39&" + 
                    "timeout=eZBxCS_38MA&" + 
                    "types=evomaster_364_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/groupBy/boundary/groupBy/tag?" + 
                    "groupByKey=evomaster_47_inpu&" + 
                    "keys=7ZdSZyp&" + 
                    "showMetadata=Vz1j8k&" + 
                    "time=oEDZbJ2sX&" + 
                    "values=BbZL")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("You need to define one of the boundary parameters (bboxes, bcircles, bpolys)."));
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/groupBy/boundary?" + 
                    "bcircles=evomaster_365_input&" + 
                    "bpolys=m&" + 
                    "filter=ji&" + 
                    "keys=evomaster_386_input&" + 
                    "showMetadata=evomaster_48_input&" + 
                    "time=evomaster_49_inpu&" + 
                    "timeout=i5L_z4pY6YzS&" + 
                    "types=l0qYAdYfAAk")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_264() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count?" + 
                    "bcircles=w4rk2m%3ACd4O&" + 
                    "filter=siJNPvoly5d8&" + 
                    "format=evomaster_4661_input&" + 
                    "keys=evomaster_7870_input&" + 
                    "time=evomaster_7871_input&" + 
                    "types=bKy_3&" + 
                    "values=q")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_265() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/tag?" + 
                    "bboxes=SKsRe7M%3ABoBn2&" + 
                    "groupByKey=evomas%7Cer%3F6131_input&" + 
                    "time=vOm1hIC2GFu5dy6e&" + 
                    "types=evomaster_277950_input&" + 
                    "values=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_266() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/groupBy/key?" + 
                    "bpolys=hHZgdTr&" + 
                    "format=&" + 
                    "groupByKeys=NG5bVMQhviM&" + 
                    "keys=&" + 
                    "showMetadata=wg1")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/density/groupBy/type?" + 
                    "bcircles=xR1aEEDOSD&" + 
                    "bpolys=sa2oC&" + 
                    "filter=Ojgd_NaV5G3goN&" + 
                    "format=Es4IboNzmJe&" + 
                    "keys=uwToEpcBzKZLlZ&" + 
                    "values=c")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter?" + 
                    "bcircles=K&" + 
                    "bpolys=npRcE&" + 
                    "filter=T&" + 
                    "format=ioXhm&" + 
                    "keys=xp3DFi0U3BtM6j&" + 
                    "showMetadata=X6TIQzTSLl&" + 
                    "time=fc0QA&" + 
                    "values=nvdg_oyH9bwmV")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/groupBy/key?" + 
                    "bboxes=ZXOb&" + 
                    "filter=bPjccJD2MU&" + 
                    "format=&" + 
                    "groupByKeys=V&" + 
                    "keys=VlY0_Qb&" + 
                    "time=g&" + 
                    "timeout=439&" + 
                    "types=EsFl2sl")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout is too long. It has to be shorter than 100.0 seconds"));
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area?" + 
                    "bboxes=4WhlPlPeXIub4&" + 
                    "bpolys=2cGClIti&" + 
                    "keys=ehfOCSGgcA&" + 
                    "types=CUornJHDiW&" + 
                    "values=tEHoRtVvm")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/boundary?" + 
                    "bcircles=_GzGhadRzk3&" + 
                    "format=OLYo9Tb2m&" + 
                    "showMetadata=JUOF8M0IM5Coq54")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/groupBy/key?" + 
                    "bboxes=VqEY&" + 
                    "bcircles=73MDW61&" + 
                    "bpolys=pkq&" + 
                    "filter=5F&" + 
                    "format=EFRHcsp2UTSR&" + 
                    "groupByKeys=lo2MNdU6p&" + 
                    "showMetadata=qnqJN8v9qU&" + 
                    "time=raA&" + 
                    "types=7F5tfg_eX")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area?" + 
                    "bboxes=3TnUi49fLWt5f_&" + 
                    "bcircles=BLg&" + 
                    "bpolys=fs_2EjxdcP&" + 
                    "filter=g_G&" + 
                    "format=ed5EgLy6x&" + 
                    "showMetadata=QeZ99OhyjFdT75&" + 
                    "time=lT7gC&" + 
                    "types=hHY27JQABnXC&" + 
                    "values=LcApqrKnrgHxC")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_267() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count?" + 
                    "bcircles=dUn%3A59%2C%2B071%2C6&" + 
                    "filter=H&" + 
                    "showMetadata=trUe&" + 
                    "time=evomastep_%2F654897_inps&" + 
                    "timeout=-4332.788491989052&" + 
                    "types=nOdE&" + 
                    "values=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_268() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count?" + 
                    "bcircles=ds%3A59%2C%2B071%2C4&" + 
                    "format=csv&" + 
                    "time=p&" + 
                    "timeout=-4852.903871521379&" + 
                    "types=pOiNT&" + 
                    "values=evomaster_2654907_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_269() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count?" + 
                    "bcircles=dUn%3A59%2C%2B071%2C6&" + 
                    "format=&" + 
                    "keys=VhoPJ-6&" + 
                    "time=evomastep_.654897_inps&" + 
                    "timeout=-4332.788491989052&" + 
                    "types=OTHeR")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_270() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=%7Bh&" + 
                    "groupByKey=evomaster_110223_input&" + 
                    "showMetadata=sZWdiDY3S5z2ix_m&" + 
                    "types=&" + 
                    "values=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in reading of the given GeoJSON."));
    }
    
    
    @Test
    public void test_271() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/ratio?" + 
                    "bpolys=hbc98a53w&" + 
                    "keys2=Qr4qcp&" + 
                    "time=eYF6d58ITxoEK5K&" + 
                    "timeout=EhiRx8j&" + 
                    "types2=kKOhtSXtvD&" + 
                    "values2=AwBW")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_272() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/tag?" + 
                    "bcircles=seC5Fej&" + 
                    "format=3mtZmn3vM8BA&" + 
                    "groupByKey=CvVMEAh&" + 
                    "time=_zP2Lt82nEYtU&" + 
                    "types=0&" + 
                    "values=xVp80Oxz")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_273() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/key?" + 
                    "bboxes=ljeQvKZWt_LMgwW&" + 
                    "bcircles=XeYfxdZt&" + 
                    "bpolys=WqDuJE7tavfZCC&" + 
                    "filter=hMfS4&" + 
                    "groupByKeys=DPRAc0MxIo&" + 
                    "keys=3eKUNK4yPla2Li&" + 
                    "showMetadata=7Zk5CqPQpub&" + 
                    "timeout=fD1IeqUjeQ&" + 
                    "types=Dv9&" + 
                    "values=yg3DQ8y")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_274() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/ratio/groupBy/boundary?" + 
                    "bboxes=&" + 
                    "filter=kL&" + 
                    "keys=fSJy18Fc7fF&" + 
                    "keys2=TfX9ZWAzXeyih&" + 
                    "showMetadata=&" + 
                    "time=JatZh9UNTV9WY")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("You need to define one of the boundary parameters (bboxes, bcircles, bpolys)."));
    }
    
    
    @Test
    public void test_275() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=%3AvQ&" + 
                    "filter=HTRujxw&" + 
                    "format=&" + 
                    "groupByKey=pWAt9xRXs&" + 
                    "groupByValues=rIZzawUML6VxN&" + 
                    "keys=ytvWUhe&" + 
                    "showMetadata=gxlPaA3&" + 
                    "time=evomaster_79826_input&" + 
                    "types=Vlmfy_6&" + 
                    "values=tJi8am0oHtx2D8g9")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_276() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/boundary/groupBy/tag?" + 
                    "bboxes=iKUZj_7B%2C6G&" + 
                    "format=&" + 
                    "groupByKey=pWAt9xRXs&" + 
                    "groupByValues=rIZzawUML6VxN&" + 
                    "keys=ytvWUhe&" + 
                    "showMetadata=gxlPaA3&" + 
                    "time=&" + 
                    "types=evomaster_321384_input&" + 
                    "values=tJi8am0oHtx2D8g9")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Apart from the custom ids, the bboxeses array must contain double-parseable values in the following order: minLon, minLat, maxLon, maxLat."));
    }
    
    
    @Test
    public void test_277() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/ratio?" + 
                    "bcircles=Mayn9U8fADX&" + 
                    "filter2=wGE8Eh&" + 
                    "keys2=KxqqED5y1LmNw&" + 
                    "timeout=Qn&" + 
                    "types=R92zHTlpzWFcOwj0&" + 
                    "values=oGDeZ8uH")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_278() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count?" + 
                    "bcircles=bo%3A69%2C-030%2C%40&" + 
                    "filter=P&" + 
                    "showMetadata=evomaster_2653481_imput&" + 
                    "time=g&" + 
                    "timeout=-4854.74407251331&" + 
                    "values=Et")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Each bcircle must consist of a lon/lat coordinate pair plus a buffer in meters."));
    }
    
    
    @Test
    public void test_279() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/boundary/groupBy/tag?" + 
                    "filter=vabjgdv7ho6mCzw&" + 
                    "groupByKey=a&" + 
                    "keys=hMc&" + 
                    "values=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("You need to define one of the boundary parameters (bboxes, bcircles, bpolys)."));
    }
    
    
    @Test
    public void test_280() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count?" + 
                    "bboxes=cq%3A89%2C%29%2C78%2C7&" + 
                    "keys=Leih-_und_Umsonstladen&" + 
                    "timeout=-6270.840744&" + 
                    "values=evomaster_2682701_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Apart from the custom ids, the bboxeses array must contain double-parseable values in the following order: minLon, minLat, maxLon, maxLat."));
    }
    
    
    @Test
    public void test_281() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count?" + 
                    "bcircles=do%3A59%2C%2B071%2C6&" + 
                    "filter=H&" + 
                    "format=gEOJsON&" + 
                    "keys=VhoPJ-6&" + 
                    "showMetadata=No&" + 
                    "time=evomastep_2654897_inpqt&" + 
                    "types=10&" + 
                    "values=evomastes_2654907_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Parameter 'types' (and 'types2') can only have 'node' and/or 'way' and/or 'relation' OR 'point' and/or 'line' and/or 'polygon' and/or 'other'"));
    }
    
    
    @Test
    public void test_282() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count?" + 
                    "bcircles=_q%3A79%2C6898%2CNhwp&" + 
                    "keys=evnmasvir_265.316_inpst&" + 
                    "showMetadata=IjKltr5raHU&" + 
                    "values=evomaster_2652912_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Each bcircle must consist of a lon/lat coordinate pair plus a buffer in meters."));
    }
    
    
    @Test
    public void test_283() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/density?" + 
                    "bboxes=GcLk8&" + 
                    "filter=5zG&" + 
                    "keys=D&" + 
                    "showMetadata=0Xd2")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_284() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/boundary?" + 
                    "bpolys=_&" + 
                    "filter=DSEye1iAx&" + 
                    "time=hkrnuYvuwt_ANOjl&" + 
                    "timeout=DDxfPi5qH&" + 
                    "types=D3h&" + 
                    "values=rgN449JfswnPpBQO")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_285() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count?" + 
                    "bcircles=do%3A59%2C%2B071%2C6&" + 
                    "format=csv&" + 
                    "keys=VhoPJ-6&" + 
                    "showMetadata=No&" + 
                    "time=evomastep_2654897_inpqt&" + 
                    "values=evomaster_2654907_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_286() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/tag?" + 
                    "bpolys=xmWL3IoEEyfkyO_&" + 
                    "filter=hE0ZIazbWBgg4Dch&" + 
                    "format=pNV&" + 
                    "groupByKey=&" + 
                    "groupByValues=e2mb5pbdx&" + 
                    "keys=P0&" + 
                    "showMetadata=zMPrMwUnm93sGqr&" + 
                    "time=_m3bB1qc7sCaAY&" + 
                    "timeout=hl3z_sricLKNd&" + 
                    "types=Y5qUc3QpDcIPn")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_287() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count?" + 
                    "bcircles=bo%3A59%2C1075%2C3&" + 
                    "filter=H&" + 
                    "format=CSV&" + 
                    "keys=VhnPD-7&" + 
                    "showMetadata=no&" + 
                    "time=%2F&" + 
                    "values=BxLd")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The keys, values and types parameters must be empty, when you set the filter parameter."));
    }
    
    
    @Test
    public void test_288() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count?" + 
                    "bcircles=do%3A59%2C%2B081%2C%3B&" + 
                    "format=csv&" + 
                    "keys=RhoPJ-6&" + 
                    "showMetadata=evomaster%602253481_imp&" + 
                    "timeout=-4854.74407251331")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Each bcircle must consist of a lon/lat coordinate pair plus a buffer in meters."));
    }
    
    
    @Test
    public void test_289() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area?" + 
                    "bpolys=cvomaster_3%24%2C3_input&" + 
                    "filter=evomaster_11608_input&" + 
                    "format=evomaster_3398_input&" + 
                    "showMetadata=uSNpgCSrWArMWA&" + 
                    "time=lkTdAFNI75bp6jl&" + 
                    "types=yveXPBNROq3Mkhwj&" + 
                    "values=KPsVxEGUyLjf")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The bpolys parameter must contain double-parseable values in form of lon/lat coordinate pairs."));
    }
    
    
    @Test
    public void test_290() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count?" + 
                    "bcircles=do%3A59%2C%2B071%2C6&" + 
                    "time=evomastep_2654897_inpqt&" + 
                    "types=10&" + 
                    "values=evomaster_2654907_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Parameter 'types' (and 'types2') can only have 'node' and/or 'way' and/or 'relation' OR 'point' and/or 'line' and/or 'polygon' and/or 'other'"));
    }
    
    
    @Test
    public void test_291() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/ratio/groupBy/boundary?" + 
                    "bboxes=&" + 
                    "bcircles=qKH6y7GDhnrNaSU&" + 
                    "bpolys=s6cE&" + 
                    "format=lQJm2&" + 
                    "keys=ljIDkgy97SOO1N_&" + 
                    "keys2=Sc&" + 
                    "showMetadata=2VUXs3ntZR&" + 
                    "time=wq&" + 
                    "types=daE6lePu3shkHBc0&" + 
                    "values2=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_292() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/density/groupBy/tag?" + 
                    "bcircles=mUv8VXCavmR&" + 
                    "groupByKey=yFPlKHimKBkK77f9&" + 
                    "keys=uFlsv&" + 
                    "showMetadata=SzNguyRGcarh3_Y9&" + 
                    "time=RBYV8Vppx3tPT7en&" + 
                    "values=16yg")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_293() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/key?" + 
                    "bboxes=NfODSMr&" + 
                    "bcircles=yL7iwaow&" + 
                    "bpolys=Uik&" + 
                    "format=pSO_V&" + 
                    "groupByKeys=jhmrYLTtw&" + 
                    "keys=2Sok0SAH&" + 
                    "time=Cw_RS5&" + 
                    "types=gCovZPGYvx")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_294() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count?" + 
                    "bcircles=do%3A59%2C%2B081%2C7&" + 
                    "keys=RhoPJ-6&" + 
                    "showMetadata=evomaster%602253481_imp&" + 
                    "timeout=-4853.4031")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given parameter showMetadata can only contain the values 'true', 'yes', 'false', or 'no'."));
    }
    
    
    @Test
    public void test_295() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/groupBy/key?" + 
                    "bboxes=&" + 
                    "bpolys=aqFW_fkRoSZC&" + 
                    "groupByKeys=G9NXIHNa_fWcI&" + 
                    "showMetadata=ipLEAvujx77Cw&" + 
                    "types=G&" + 
                    "values=jPi8m")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_296() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count?" + 
                    "bcircles=do%3A59%2C%2B071%2C7&" + 
                    "filter=H&" + 
                    "showMetadata=No&" + 
                    "timeout=-4853.4031&" + 
                    "values=evomaster_2654907_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The keys, values and types parameters must be empty, when you set the filter parameter."));
    }
    
    
    @Test
    public void test_297() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count?" + 
                    "bcircles=dUn%3A59%2C%2B071%2C6&" + 
                    "format=csv&" + 
                    "showMetadata=trUe&" + 
                    "time=evomastep_.654897_inpst&" + 
                    "timeout=-4332.788491989052&" + 
                    "types=Polygon")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_298() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/type?" + 
                    "bboxes=4dLgBrYMC1&" + 
                    "bpolys=Z&" + 
                    "format=Wo5MC75u&" + 
                    "keys=Gf3GRULBWp0XhgU&" + 
                    "showMetadata=_cKev8h0&" + 
                    "timeout=hvua8W&" + 
                    "values=fQni4")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_299() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/key?" + 
                    "bcircles=%2C&" + 
                    "groupByKeys=evomaster_2135705_input&" + 
                    "time=xRy0HZPAl9SPp")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_300() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count?" + 
                    "bcircles=%2C&" + 
                    "filter=RhoOJ16&" + 
                    "format=CsV&" + 
                    "keys=RhoPJ16&" + 
                    "showMetadata=evomaster_2653481_iiput&" + 
                    "timeout=-4854.74407251331&" + 
                    "types=%2C&" + 
                    "values=Dt")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_301() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/density/groupBy/tag?" + 
                    "bcircles=%2C&" + 
                    "filter=P6S_9FzKui&" + 
                    "format=y5TeHa6&" + 
                    "groupByKey=I&" + 
                    "groupByValues=f6vkno4b22WqdK&" + 
                    "keys=cSF&" + 
                    "showMetadata=ypxN8&" + 
                    "time=pPuTcqDkuz0")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_302() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/tag?" + 
                    "bcircles=%2C&" + 
                    "filter=evomaster_1312058_input&" + 
                    "format=weqiL3BU&" + 
                    "groupByKey=evomaster_674487_inpq&" + 
                    "groupByValues=rncjTnRu&" + 
                    "keys=w3HX2HDa97UZ6elk&" + 
                    "showMetadata=1E6saJrf&" + 
                    "time=G7FxlIpKPR0o&" + 
                    "timeout=0.3889867594008408&" + 
                    "types=XfQOe")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_303() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count?" + 
                    "bcircles=do%3A59%2C.071%2C8&" + 
                    "keys=do%3A59%2C.071%2C5G&" + 
                    "showMetadata=nO&" + 
                    "timeout=-5195.49014826917&" + 
                    "values=nOE6N1Y")
                .then()
                .statusCode(413)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(413.0))
                .body("'message'", containsString("The given query is too large in respect to the given timeout. Please use a smaller region and/or coarser time period."));
    }
    
    
    @Test
    public void test_304() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count?" + 
                    "bcircles=do%3A59%2C-075%2C7&" + 
                    "format=CSV&" + 
                    "keys=VhoPJ%2C6&" + 
                    "showMetadata=&" + 
                    "timeout=-5008.865520001367&" + 
                    "values=evomboter_2%3A54907_ejpqt")
                .then()
                .statusCode(413)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(413.0))
                .body("'message'", containsString("The given query is too large in respect to the given timeout. Please use a smaller region and/or coarser time period."));
    }
    
    
    @Test
    public void test_305() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count?" + 
                    "bcircles=do%3A59%2C-071%2C7&" + 
                    "keys=VhoPJ-6&" + 
                    "showMetadata=No&" + 
                    "timeout=-4855.1082317837445")
                .then()
                .statusCode(413)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(413.0))
                .body("'message'", containsString("The given query is too large in respect to the given timeout. Please use a smaller region and/or coarser time period."));
    }
    
    
    @Test
    public void test_306() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count?" + 
                    "bcircles=do%3A59%2C%2B071%2C6&" + 
                    "keys=VhoPJ-6&" + 
                    "timeout=-4852.627463583258&" + 
                    "values=evomaster_2654907_input")
                .then()
                .statusCode(413)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(413.0))
                .body("'message'", containsString("The given query is too large in respect to the given timeout. Please use a smaller region and/or coarser time period."));
    }


}
