import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.controller.api.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import static org.evomaster.client.java.controller.db.dsl.SqlDsl.sql;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto;
import  java.util.List;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
 * This file was automatically generated by EvoMaster on 2020-11-30T01:32:32.471+01:00[Europe/Paris]
 * <br>
 * The generated test suite contains 932 tests
 * <br>
 * Covered targets: 6772
 * <br>
 * Used time: 24h 0m 0s
 * <br>
 * Needed budget for current results: 97%
 * <br>
 * 
 */
public class EvoMasterTest_24h_seed_100_per_op {

    
    private static final SutHandler controller = new org.heigit.ohsome.ohsomeapi.EMDriver();
    private static String baseUrlOfSut;
    
    
    @BeforeClass
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    @AfterClass
    public static void tearDown() {
        controller.stopSut();
    }
    
    
    @Before
    public void initTest() {
        controller.resetStateOfSUT();
    }
    
    
    
    
    @Test
    public void test_0() throws Exception {
        
        try{
            given().accept("*/*")
                    .get(baseUrlOfSut + "/users/count/groupBy/tag?" + 
                        "bcircles=t%3A8.702%2C49.401%2C14%7CJr%3A8.703%2C49.413%2C6&" + 
                        "groupByKey=highway&" + 
                        "showMetadata=no&" + 
                        "time=%2F%2FP2M23D&" + 
                        "timeout=81")
                    .then();
        } catch(Exception e){
        }
    }
    
    
    @Test
    public void test_1() throws Exception {
        
        try{
            given().accept("*/*")
                    .post(baseUrlOfSut + "/users/count/groupBy/key?" + 
                        "bcircles=8.730%2C49.403%2C6%7C8.717%2C49.426%2C9&" + 
                        "groupByKeys=source%3Amaxspeed%2Clanduse&" + 
                        "time=%2F%2FP1M26D")
                    .then();
        } catch(Exception e){
        }
    }
    
    
    @Test
    public void test_2() throws Exception {
        
        try{
            given().accept("*/*")
                    .get(baseUrlOfSut + "/users/count/groupBy/key?" + 
                        "bcircles=UUAA%3A8.737%2C49.408%2C2%7Cbwd%3A8.7361%2C49.43589%2C3&" + 
                        "format=json&" + 
                        "groupByKeys=highway%2Clanes%3Abackward&" + 
                        "showMetadata=true&" + 
                        "time=%2F%2FP24D")
                    .then();
        } catch(Exception e){
        }
    }
    
    
    @Test
    public void test_3() throws Exception {
        
        try{
            given().accept("*/*")
                    .get(baseUrlOfSut + "/users/count/groupBy/boundary?" + 
                        "bboxes=ivE%3A8.6775%2C49.417%2C8.759%2C49.3825&" + 
                        "filter=lit%3D*+or+type%3Away+or+area%3A%281.0+..+1E6%29&" + 
                        "showMetadata=no&" + 
                        "time=%2F%2FP9M4D")
                    .then();
        } catch(Exception e){
        }
    }
    
    
    @Test
    public void test_4() throws Exception {
        
        try{
            given().accept("*/*")
                    .post(baseUrlOfSut + "/users/count/density/groupBy/type?" + 
                        "bcircles=qB%3A8.7142%2C49.4019%2C6%7CkrX%3A8.704%2C49.416%2C5%7CwCMsW%3A8.712633%2C49.408%2C6%7Cd%3A8.748%2C49.432%2C6&" + 
                        "showMetadata=no&" + 
                        "time=%2F%2FP1Y11D")
                    .then();
        } catch(Exception e){
        }
    }
    
    
    @Test
    public void test_5() throws Exception {
        
        try{
            given().accept("*/*")
                    .get(baseUrlOfSut + "/users/count/density/groupBy/type?" + 
                        "bcircles=c%3A8.707%2C49.435409%2C3%7Cs%3A8.703%2C49.406%2C9&" + 
                        "showMetadata=false&" + 
                        "time=%2F%2FP28D&" + 
                        "timeout=35")
                    .then();
        } catch(Exception e){
        }
    }
    
    
    @Test
    public void test_6() throws Exception {
        
        try{
            given().accept("*/*")
                    .post(baseUrlOfSut + "/users/count/density/groupBy/tag?" + 
                        "bcircles=ZrW%3A8.718%2C49.437%2C3%7CVZ%3A8.741%2C49.413%2C1&" + 
                        "filter=highway%21%3D*+or+not+area%3A%281.0+..+1E6%29&" + 
                        "format=csv&" + 
                        "groupByKey=building&" + 
                        "groupByValues=synagogue%2Capartments&" + 
                        "showMetadata=false&" + 
                        "time=%2F%2FP3Y9M4D")
                    .then();
        } catch(Exception e){
        }
    }
    
    
    @Test
    public void test_7() throws Exception {
        
        try{
            given().accept("*/*")
                    .get(baseUrlOfSut + "/users/count/density/groupBy/tag?" + 
                        "bcircles=rv%3A8.742%2C49.4063%2C4%7Cq%3A8.714%2C49.41983%2C2&" + 
                        "groupByKey=building&" + 
                        "groupByValues=stop%2Cgarage&" + 
                        "showMetadata=yes&" + 
                        "time=%2F%2FP2Y1M25D&" + 
                        "timeout=22")
                    .then();
        } catch(Exception e){
        }
    }
    
    
    @Test
    public void test_8() throws Exception {
        
        try{
            given().accept("*/*")
                    .post(baseUrlOfSut + "/users/count/density/groupBy/boundary?" + 
                        "bcircles=8.703%2C49.422%2C1%7C8.7182%2C49.437%2C3%7C8.7157%2C49.4011%2C5%7C8.7013%2C49.405%2C2&" + 
                        "showMetadata=no&" + 
                        "time=%2F%2FP3Y9M20D")
                    .then();
        } catch(Exception e){
        }
    }
    
    
    @Test
    public void test_9() throws Exception {
        
        try{
            given().accept("*/*")
                    .get(baseUrlOfSut + "/users/count/density/groupBy/boundary?" + 
                        "bcircles=8.703%2C49.419%2C6%7C8.724%2C49.400284%2C7%7C8.7141%2C49.4256%2C9&" + 
                        "filter=lit%21%3D*+or+area%3A%281.0+..+1E6%29&" + 
                        "showMetadata=true&" + 
                        "time=%2F%2FP13D&" + 
                        "timeout=100")
                    .then();
        } catch(Exception e){
        }
    }
    
    
    @Test
    public void test_10() throws Exception {
        
        try{
            given().accept("*/*")
                    .get(baseUrlOfSut + "/users/count/density?" + 
                        "bcircles=8.730%2C49.416%2C15%7C8.7017%2C49.40065%2C4&" + 
                        "filter=bicycle%21%3D*+or+id%3A%281+..+9999%29&" + 
                        "format=geojson&" + 
                        "showMetadata=yes&" + 
                        "time=%2F%2FP4M8D")
                    .then();
        } catch(Exception e){
        }
    }
    
    
    @Test
    public void test_11() throws Exception {
        
        try{
            given().accept("*/*")
                    .post(baseUrlOfSut + "/users/count?" + 
                        "bcircles=ABxR%3A8.747744%2C49.42290%2C4&" + 
                        "time=%2F%2FP4M16D&" + 
                        "timeout=99")
                    .then();
        } catch(Exception e){
        }
    }
    
    
    @Test
    public void test_12() throws Exception {
        
        try{
            given().accept("*/*")
                    .get(baseUrlOfSut + "/users/count?" + 
                        "bcircles=uBU%3A8.726%2C49.422075%2C9&" + 
                        "format=csv&" + 
                        "showMetadata=true&" + 
                        "time=%2F%2FP2M4D&" + 
                        "timeout=99")
                    .then();
        } catch(Exception e){
        }
    }
    
    
    @Test
    public void test_13() throws Exception {
        
        try{
            given().accept("*/*")
                    .post(baseUrlOfSut + "/users/count/groupBy/type?" + 
                        "bboxes=DME%3A8.677%2C49.411302%2C8.743%2C49.3815%7CCzxJ%3A8.683%2C49.42183%2C8.753%2C49.394&" + 
                        "filter=foot%21%3D*+or+area%3A%281.0+..+1E6%29&" + 
                        "format=geojson&" + 
                        "timeout=100")
                    .then();
        } catch(Exception e){
        }
    }
    
    
    @Test
    public void test_14_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/type?" + 
                    "bcircles=R%3A8.720114%2C49.4210%2C4%7CEJ%3A8.71852%2C49.4002%2C374804977%7CUym%3A8.701%2C49.415%2C9&" + 
                    "format=csv&" + 
                    "keys=highway&" + 
                    "time=%2F%2FP5M22D&" + 
                    "timeout=33&" + 
                    "values=primary")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El ángulo 4.175.873.121.626.054 es demasiado grande."))
                .body("'path'", containsString("/users/count/groupBy/type"));
    }
    
    
    @Test
    public void test_15_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/type?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22FA%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.741%2C49.408359%5D%2C%5B8.721%2C49.422%5D%2C%5B8.71208%2C49.41006%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22eNWFp%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.720%2C49.431%5D%2C%5B8.7049%2C49.43458%5D%2C%5B8.7124%2C49.401%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22NJwG%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7036%2C49.4014%5D%2C%5B8.741%2C49.427%5D%2C%5B8.7079%2C49.438%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "format=json&" + 
                    "timeout=68")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.72 49.431 ) and LINESTRING ( 8.706767780668672 49.4262173233528, 8.711155570166836 49.406571727173024 ) [ (8.709795726679408, 49.41266019974741, NaN) ]"))
                .body("'path'", containsString("/users/count/groupBy/type"));
    }
    
    
    @Test
    public void test_16_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/groupBy/type?" + 
                    "bcircles=u%3A8.746%2C49.4274%2C871%7CxwfH%3A8.715%2C49.427%2C8%7CLG%3A8.718421%2C49.407%2C5%7ClWVGd%3A8.746%2C49.425506%2C79108922220&" + 
                    "keys=highway&" + 
                    "showMetadata=yes&" + 
                    "time=%2F%2FP1Y1M14D")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El ángulo 16.526.094.479.471.916.000.000.000.000.000.000 es demasiado grande."))
                .body("'path'", containsString("/users/count/groupBy/type"));
    }
    
    
    @Test
    public void test_17_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/groupBy/type?" + 
                    "bpolys=G%3A8.704561%2C49.403252%2C8.719%2C49.411%2C8.702%2C49.4149%2C8.7370%2C49.42286%2C8.704561%2C49.403252%7Cg%3A8.704561%2C49.403252%2C8.7486%2C49.426%2C8.717041%2C49.4303%2C8.748704%2C49.4249%2C8.704561%2C49.403252%7Cey%3A8.704561%2C49.403252%2C8.72016%2C49.4342%2C8.704%2C49.43269%2C8.7212%2C49.42732%2C8.704561%2C49.403252&" + 
                    "format=json&" + 
                    "time=%2F%2FP1Y7D&" + 
                    "timeout=88")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.719 49.411 ) and LINESTRING ( 8.704561 49.403252, 8.72016 49.4342 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/users/count/groupBy/type"));
    }
    
    
    @Test
    public void test_18_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/groupBy/type?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22h%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.737%2C49.420%5D%2C%5B8.740%2C49.41065%5D%2C%5B8.716%2C49.404%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22hMzMi%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.73275%2C49.4020%5D%2C%5B8.717651%2C49.435%5D%2C%5B8.7292%2C49.4277%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "keys=highway&" + 
                    "time=%2F%2FP8M6D&" + 
                    "values=service")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.726900061190372 49.41478548120523, 8.717651 49.435 ) and LINESTRING ( 8.7292 49.4277, 8.704561 49.403252 ) [ (8.723554246121605, 49.42209801165555, NaN) ]"))
                .body("'path'", containsString("/users/count/groupBy/type"));
    }
    
    
    @Test
    public void test_19_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/tag?" + 
                    "bpolys=YJp%3A8.704561%2C49.403252%2C8.736%2C49.4203%2C8.70459%2C49.4053%2C8.733%2C49.433884%2C8.704561%2C49.403252%7Co%3A8.704561%2C49.403252%2C8.712%2C49.404%2C8.705091%2C49.413%2C8.7380%2C49.400%2C8.704561%2C49.403252%7CG%3A8.704561%2C49.403252%2C8.7206%2C49.4193%2C8.700%2C49.43279%2C8.701%2C49.4082%2C8.704561%2C49.403252&" + 
                    "groupByKey=building&" + 
                    "groupByValues=secondary%2Cuniversity%2Cservice&" + 
                    "keys=highway&" + 
                    "time=%2F%2FP3Y11D&" + 
                    "timeout=67&" + 
                    "values=speed_camera")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.736 49.4203 ) and LINESTRING ( 8.704561 49.403252, 8.712 49.404 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/users/count/groupBy/tag"));
    }
    
    
    @Test
    public void test_20_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/tag?" + 
                    "bpolys=8.704561%2C49.403252%2C8.7392%2C49.4269%2C8.724%2C49.438%2C8.747%2C49.435%2C8.704561%2C49.403252&" + 
                    "filter=highway+in+%28secondary%2Cpath%2Cunclassified%2Ctrack%2Cprimary%2Cresidential%2Ccycleway%2Cservice%2Cfootway%29+or+type%3Away+and+id%3A%281+..+9999%29&" + 
                    "groupByKey=building&" + 
                    "timeout=89")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/executor/ExecutionUtils_565_extractContributionTags
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.7392 49.4269, 8.724 49.438 ) and LINESTRING ( 8.747 49.435, 8.704561 49.403252 ) [ (8.737667930277857, 49.42801881407341, NaN) ]"))
                .body("'path'", containsString("/users/count/groupBy/tag"));
    }
    
    
    @Test
    public void test_21_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/tag?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22tg%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.716%2C49.435%5D%2C%5B8.71199%2C49.412%5D%2C%5B8.706%2C49.4256%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22GgG%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.727%2C49.436652%5D%2C%5B8.717735%2C49.41625%5D%2C%5B8.7268%2C49.427%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22c%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.734957%2C49.429%5D%2C%5B8.704510%2C49.435%5D%2C%5B8.740717%2C49.426%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "format=csv&" + 
                    "groupByKey=highway&" + 
                    "keys=highway&" + 
                    "timeout=21")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.734957 49.429 ) and LINESTRING ( 8.724044686169202 49.4301442490258, 8.740717 49.426 ) [ (8.733525681355344, 49.42778755124153, NaN) ]"))
                .body("'path'", containsString("/users/count/groupBy/tag"));
    }
    
    
    @Test
    public void test_22_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/groupBy/tag?" + 
                    "bcircles=KaWtl%3A8.73147%2C49.434%2C178501387%7CM%3A8.71391%2C49.433%2C8%7CPV%3A8.7001%2C49.4132%2C1%7CZx%3A8.74627%2C49.432%2C729804085&" + 
                    "format=csv&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=give_way&" + 
                    "keys=highway&" + 
                    "time=%2F%2FP3M13D&" + 
                    "timeout=31")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El ángulo 11.098.304.394.243,977 es demasiado grande."))
                .body("'path'", containsString("/users/count/groupBy/tag"));
    }
    
    
    @Test
    public void test_23_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/groupBy/tag?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22dL%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.749%2C49.4317%5D%2C%5B8.712%2C49.432%5D%2C%5B8.724%2C49.435%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "groupByKey=building&" + 
                    "showMetadata=true&" + 
                    "time=%2F%2FP3Y11M25D&" + 
                    "timeout=91")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.749 49.4317, 8.712 49.432 ) and LINESTRING ( 8.724 49.435, 8.704561 49.403252 ) [ (8.722112922601013, 49.43191800333026, NaN) ]"))
                .body("'path'", containsString("/users/count/groupBy/tag"));
    }
    
    
    @Test
    public void test_24_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/groupBy/tag?" + 
                    "bcircles=jFka%3A8.739%2C49.413339%2C752037041&" + 
                    "filter=oneway%21%3D*+and+geometry%3Apoint&" + 
                    "format=geojson&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=house%2Ctertiary&" + 
                    "time=%2F%2FP3Y6M4D")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/executor/ExecutionUtils_565_extractContributionTags
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El ángulo 1.099.806.155.297.081.860 es demasiado grande."))
                .body("'path'", containsString("/users/count/groupBy/tag"));
    }
    
    
    @Test
    public void test_25_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/groupBy/tag?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22f%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.744%2C49.40780%5D%2C%5B8.7156%2C49.400446%5D%2C%5B8.704560%2C49.431%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22cPP%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.715%2C49.403%5D%2C%5B8.707%2C49.425%5D%2C%5B8.704%2C49.417190%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "format=geojson&" + 
                    "groupByKey=building&" + 
                    "timeout=59")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.714491924490233 49.40439720765186 ) and LINESTRING ( 8.714674328924522 49.403007861779, 8.706859823121084 49.42463507285855 ) [ (8.714185104442326, 49.40436182598453, NaN) ]"))
                .body("'path'", containsString("/users/count/groupBy/tag"));
    }
    
    
    @Test
    public void test_26_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/key?" + 
                    "bcircles=8.712050%2C49.4334%2C387580731%7C8.7336%2C49.4375%2C3&" + 
                    "format=json&" + 
                    "groupByKeys=sidewalk%2Csmoothness&" + 
                    "keys=highway&" + 
                    "time=%2F%2FP9M20D&" + 
                    "values=path")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El ángulo 5.489.570.582.473.010 es demasiado grande."))
                .body("'path'", containsString("/users/count/groupBy/key"));
    }
    
    
    @Test
    public void test_27_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/key?" + 
                    "bpolys=8.704561%2C49.403252%2C8.724%2C49.41205%2C8.708200%2C49.436%2C8.725%2C49.42475%2C8.704561%2C49.403252&" + 
                    "filter=name%3D*+or+not+area%3A%281.0+..+1E6%29&" + 
                    "groupByKeys=maxspeed%2Cturn%3Alanes%2Ctype&" + 
                    "time=%2F%2FP1Y17D&" + 
                    "timeout=99")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.724 49.41205, 8.7082 49.436 ) and LINESTRING ( 8.725 49.42475, 8.704561 49.403252 ) [ (8.719463457602123, 49.41892659433096, NaN) ]"))
                .body("'path'", containsString("/users/count/groupBy/key"));
    }
    
    
    @Test
    public void test_28_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/key?" + 
                    "bcircles=LW%3A8.728%2C49.410%2C1%7CnfyPA%3A8.73757%2C49.4005%2C37%7CTfnrn%3A8.743%2C49.4154%2C8%7Cqts%3A8.731%2C49.4238%2C605603095678&" + 
                    "format=csv&" + 
                    "groupByKeys=foot%2Csidewalk&" + 
                    "keys=highway&" + 
                    "time=%2F%2FP3M7D")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/executor/ExecutionUtils_565_extractContributionTags
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El ángulo 194.874.357.994.699.300.000.000.000.000.000.000.000.000 es demasiado grande."))
                .body("'path'", containsString("/users/count/groupBy/key"));
    }
    
    
    @Test
    public void test_29_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/key?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22RGRZd%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7087%2C49.400%5D%2C%5B8.703198%2C49.408%5D%2C%5B8.7043%2C49.4351%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22y%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7238%2C49.432791%5D%2C%5B8.7166%2C49.410%5D%2C%5B8.72318%2C49.43539%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22oz%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.74905%2C49.408%5D%2C%5B8.702%2C49.41252%5D%2C%5B8.7002%2C49.417794%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "groupByKeys=bicycle%2Cdestination%2Caddr%3Astreet&" + 
                    "time=%2F%2FP1Y16D")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.705430838250168 49.40475341584854, 8.703198 49.408 ) and LINESTRING ( 8.7043 49.4351, 8.704561 49.403252 ) [ (8.704538057321066, 49.406051534247815, NaN) ]"))
                .body("'path'", containsString("/users/count/groupBy/key"));
    }
    
    
    @Test
    public void test_30_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/groupBy/key?" + 
                    "bcircles=8.7353%2C49.414%2C79%7C8.7355%2C49.408%2C921%7C8.703%2C49.406%2C73%7C8.7045%2C49.4363%2C669093908184&" + 
                    "filter=addr%3Acity%21%3D*+and+length%3A%28+..+100%29&" + 
                    "groupByKeys=destination%2Clanduse%2Ctype&" + 
                    "timeout=59")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El ángulo 433.538.144.372.982.050.000.000.000.000.000.000.000.000 es demasiado grande."))
                .body("'path'", containsString("/users/count/groupBy/key"));
    }
    
    
    @Test
    public void test_31_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/groupBy/key?" + 
                    "bpolys=8.704561%2C49.403252%2C8.701%2C49.428%2C8.701%2C49.424%2C8.705%2C49.439%2C8.704561%2C49.403252&" + 
                    "filter=tracktype%3D*+or+type%3Anode+and+area%3A%281.0+..+1E6%29&" + 
                    "groupByKeys=lanes%3Aforward&" + 
                    "showMetadata=false&" + 
                    "time=%2F%2FP8M6D&" + 
                    "timeout=46")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.701 49.428 ) and LINESTRING ( 8.701 49.424, 8.705 49.439 ) [ (8.701373841096538, 49.425401904112015, NaN) ]"))
                .body("'path'", containsString("/users/count/groupBy/key"));
    }
    
    
    @Test
    public void test_32_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/groupBy/key?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22tgK%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.747311%2C49.431%5D%2C%5B8.72961%2C49.4135%5D%2C%5B8.704%2C49.438074%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22Qb%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.748922%2C49.405026%5D%2C%5B8.730%2C49.404%5D%2C%5B8.739%2C49.434%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22fBAr%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.70896%2C49.429%5D%2C%5B8.722%2C49.404%5D%2C%5B8.705%2C49.40820%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "groupByKeys=lanes%3Aforward%2Ctype&" + 
                    "keys=highway&" + 
                    "time=%2F%2FP10M7D&" + 
                    "timeout=86&" + 
                    "values=cycleway")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.748922 49.405026 ) and LINESTRING ( 8.73 49.404, 8.73421615532889 49.418053851096296 ) [ (8.730081773340817, 49.40427257780272, NaN) ]"))
                .body("'path'", containsString("/users/count/groupBy/key"));
    }
    
    
    @Test
    public void test_33_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/groupBy/key?" + 
                    "bpolys=HL%3A8.704561%2C49.403252%2C8.7118%2C49.43996%2C8.740774%2C49.420%2C8.741611%2C49.433%2C8.704561%2C49.403252%7CRc%3A8.704561%2C49.403252%2C8.736%2C49.4049%2C8.7071%2C49.4152%2C8.70648%2C49.4345%2C8.704561%2C49.403252%7Crn%3A8.704561%2C49.403252%2C8.7019%2C49.402887%2C8.7484%2C49.405431%2C8.710%2C49.4020%2C8.704561%2C49.403252&" + 
                    "groupByKeys=network%2Clanes%3Aforward%2Cmaxspeed&" + 
                    "keys=highway&" + 
                    "showMetadata=true&" + 
                    "time=%2F%2FP11M2D&" + 
                    "timeout=87&" + 
                    "values=steps")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/executor/ExecutionUtils_565_extractContributionTags
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.7118 49.43996 ) and LINESTRING ( 8.704561 49.403252, 8.736 49.4049 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/users/count/groupBy/key"));
    }
    
    
    @Test
    public void test_34_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/groupBy/key?" + 
                    "bpolys=Rbq%3A8.704561%2C49.403252%2C8.711%2C49.4386%2C8.704%2C49.400%2C8.737%2C49.418%2C8.704561%2C49.403252%7CA%3A8.704561%2C49.403252%2C8.743%2C49.421%2C8.746%2C49.40001%2C8.7364%2C49.436762%2C8.704561%2C49.403252&" + 
                    "groupByKeys=maxspeed%2Coneway%2Caddr%3Acountry&" + 
                    "keys=highway&" + 
                    "time=%2F%2FP8M6D")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/executor/ExecutionUtils_554_extractContributionTags
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.711 49.4386 ) and LINESTRING ( 8.737 49.418, 8.704561 49.403252 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/users/count/groupBy/key"));
    }
    
    
    @Test
    public void test_35_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/boundary?" + 
                    "bcircles=PtjAX%3A8.7200%2C49.4382%2C5%7CloTJF%3A8.732%2C49.42685%2C9%7CpTvOA%3A8.724%2C49.428%2C33%7CV%3A8.740%2C49.414%2C230165970756&" + 
                    "format=json&" + 
                    "keys=highway&" + 
                    "timeout=75")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El ángulo 84.701.405.838.116.540.000.000.000.000.000.000.000 es demasiado grande."))
                .body("'path'", containsString("/users/count/groupBy/boundary"));
    }
    
    
    @Test
    public void test_36_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/boundary?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22ztEXL%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.700%2C49.433971%5D%2C%5B8.730%2C49.437%5D%2C%5B8.704783%2C49.40511%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22HA%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.735%2C49.4090%5D%2C%5B8.719%2C49.415%5D%2C%5B8.717%2C49.4162%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22auxOn%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.733%2C49.419%5D%2C%5B8.723%2C49.439%5D%2C%5B8.748%2C49.4307%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=service%3Ddriveway+and+geometry%3Aline+and+area%3A%281.0+..+1E6%29&" + 
                    "format=csv&" + 
                    "timeout=36")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.733 49.419, 8.726324231086926 49.43235153782615 ) and LINESTRING ( 8.748 49.4307, 8.704561 49.403252 ) [ (8.732155779962563, 49.420688440074876, NaN) ]"))
                .body("'path'", containsString("/users/count/groupBy/boundary"));
    }
    
    
    @Test
    public void test_37_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/boundary?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22lvgfi%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.717%2C49.436%5D%2C%5B8.715%2C49.407%5D%2C%5B8.708%2C49.436015%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=addr%3Apostcode%21%3D*+and+area%3A%281.0+..+1E6%29&" + 
                    "showMetadata=yes&" + 
                    "time=%2F%2FP1Y6M2D&" + 
                    "timeout=68")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.717 49.436 ) and LINESTRING ( 8.715 49.407, 8.708 49.436015 ) [ (8.711498123450355, 49.42151527829827, NaN) ]"))
                .body("'path'", containsString("/users/count/groupBy/boundary"));
    }
    
    
    @Test
    public void test_38_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/groupBy/boundary?" + 
                    "bcircles=BH%3A8.745%2C49.4249%2C210055863&" + 
                    "filter=oneway%21%3D*+and+geometry%3Apolygon+or+not+area%3A%281.0+..+1E6%29&" + 
                    "showMetadata=false&" + 
                    "time=%2F%2FP2Y11M15D")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El ángulo 40.772.153.847.827,05 es demasiado grande."))
                .body("'path'", containsString("/users/count/groupBy/boundary"));
    }
    
    
    @Test
    public void test_39_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/groupBy/boundary?" + 
                    "bpolys=Hx%3A8.704561%2C49.403252%2C8.702%2C49.413%2C8.736%2C49.414%2C8.7491%2C49.4176%2C8.704561%2C49.403252%7CM%3A8.704561%2C49.403252%2C8.74162%2C49.423%2C8.72474%2C49.4396%2C8.703300%2C49.431%2C8.704561%2C49.403252%7Co%3A8.704561%2C49.403252%2C8.720%2C49.425896%2C8.706%2C49.4331%2C8.705966%2C49.416%2C8.704561%2C49.403252&" + 
                    "keys=highway&" + 
                    "time=%2F%2FP2M24D&" + 
                    "timeout=93")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.702 49.413 ) and LINESTRING ( 8.704561 49.403252, 8.72 49.425896 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/users/count/groupBy/boundary"));
    }
    
    
    @Test
    public void test_40_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/groupBy/boundary?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22Xz%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.71510%2C49.4029%5D%2C%5B8.704860%2C49.42389%5D%2C%5B8.7071%2C49.432%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22jF%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7315%2C49.424%5D%2C%5B8.722%2C49.412%5D%2C%5B8.701%2C49.439%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "format=geojson&" + 
                    "keys=highway&" + 
                    "timeout=45")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.712096806081965 49.40905596097066, 8.70486 49.42389 ) and LINESTRING ( 8.707033150517434 49.43124309219187, 8.704561 49.403252 ) [ (8.70615016388238, 49.42124541602625, NaN) ]"))
                .body("'path'", containsString("/users/count/groupBy/boundary"));
    }
    
    
    @Test
    public void test_41_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/density/groupBy/type?" + 
                    "bcircles=lwwG%3A8.742%2C49.428%2C8%7CanWNq%3A8.7498%2C49.434%2C6563385762&" + 
                    "filter=oneway%21%3D*+or+type%3Away+or+id%3A%281+..+9999%29&" + 
                    "timeout=87")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El ángulo 37.151.434.517.081.280.000.000.000 es demasiado grande."))
                .body("'path'", containsString("/users/count/density/groupBy/type"));
    }
    
    
    @Test
    public void test_42_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/density/groupBy/type?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22C%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7463%2C49.424032%5D%2C%5B8.748699%2C49.437%5D%2C%5B8.736%2C49.4383%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22u%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7036%2C49.431%5D%2C%5B8.737426%2C49.402%5D%2C%5B8.702%2C49.4064%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22rBvc%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.733%2C49.403%5D%2C%5B8.702%2C49.402285%5D%2C%5B8.7095%2C49.42590%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=lit%3D*+or+not+area%3A%281.0+..+1E6%29&" + 
                    "format=csv&" + 
                    "showMetadata=yes&" + 
                    "time=%2F%2FP7M25D&" + 
                    "timeout=30")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.7036 49.431 ) and LINESTRING ( 8.706845040119681 49.405798233598865, 8.702 49.4064 ) [ (8.70446256770901, 49.40609414277876, NaN) ]"))
                .body("'path'", containsString("/users/count/density/groupBy/type"));
    }
    
    
    @Test
    public void test_43_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/density/groupBy/type?" + 
                    "bpolys=8.704561%2C49.403252%2C8.708%2C49.410728%2C8.746%2C49.436%2C8.7221%2C49.4131%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.724830%2C49.403%2C8.741%2C49.437%2C8.729%2C49.424%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.716%2C49.41448%2C8.702%2C49.422179%2C8.703%2C49.43608%2C8.704561%2C49.403252&" + 
                    "filter=maxspeed%21%3D*+or+length%3A%28+..+100%29&" + 
                    "format=json&" + 
                    "showMetadata=true&" + 
                    "time=%2F%2FP3Y3M7D&" + 
                    "timeout=92")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.708 49.410728, 8.746 49.436 ) and LINESTRING ( 8.716 49.41448, 8.702 49.422179 ) [ (8.71470909850395, 49.41518990361558, NaN) ]"))
                .body("'path'", containsString("/users/count/density/groupBy/type"));
    }
    
    
    @Test
    public void test_44_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/density/groupBy/type?" + 
                    "bcircles=8.7102%2C49.406%2C415009863&" + 
                    "filter=ref%3D*+and+geometry%3Apolygon+and+not+area%3A%281.0+..+1E6%29&" + 
                    "format=json&" + 
                    "time=%2F%2FP6D&" + 
                    "timeout=60")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El ángulo 9.445.222.788.573.722 es demasiado grande."))
                .body("'path'", containsString("/users/count/density/groupBy/type"));
    }
    
    
    @Test
    public void test_45_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/density/groupBy/type?" + 
                    "bpolys=gy%3A8.704561%2C49.403252%2C8.722%2C49.418%2C8.742%2C49.433%2C8.7091%2C49.4301%2C8.704561%2C49.403252%7Cz%3A8.704561%2C49.403252%2C8.70763%2C49.426%2C8.709%2C49.4348%2C8.746%2C49.423103%2C8.704561%2C49.403252%7CDS%3A8.704561%2C49.403252%2C8.735842%2C49.410%2C8.745%2C49.406%2C8.70479%2C49.411%2C8.704561%2C49.403252&" + 
                    "keys=highway&" + 
                    "time=%2F%2FP1Y8D&" + 
                    "timeout=77&" + 
                    "values=stop")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.722 49.418 ) and LINESTRING ( 8.704561 49.403252, 8.735842 49.41 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/users/count/density/groupBy/type"));
    }
    
    
    @Test
    public void test_46_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/density/groupBy/type?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22jTGSf%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7375%2C49.41600%5D%2C%5B8.703177%2C49.4154%5D%2C%5B8.74072%2C49.435%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22f%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7062%2C49.425%5D%2C%5B8.745%2C49.4226%5D%2C%5B8.701%2C49.421031%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "keys=highway&" + 
                    "time=%2F%2FP9M28D&" + 
                    "timeout=43&" + 
                    "values=traffic_signals")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.705570691981732 49.41664967005412, 8.7062 49.425 ) and LINESTRING ( 8.714913276613872 49.42152713479562, 8.701 49.421031 ) [ (8.705914089303747, 49.421206231957214, NaN) ]"))
                .body("'path'", containsString("/users/count/density/groupBy/type"));
    }
    
    
    @Test
    public void test_47_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/density/groupBy/tag?" + 
                    "bcircles=uJxJ%3A8.7213%2C49.41480%2C9%7CL%3A8.710%2C49.430%2C6%7CWzGk%3A8.7418%2C49.427%2C4%7Cyrb%3A8.7034%2C49.4039%2C54099286020&" + 
                    "filter=addr%3Apostcode%21%3D*+or+type%3Arelation+or+length%3A%28+..+100%29&" + 
                    "format=geojson&" + 
                    "groupByKey=highway")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El ángulo 787.755.647.625.941.800.000.000.000.000.000 es demasiado grande."))
                .body("'path'", containsString("/users/count/density/groupBy/tag"));
    }
    
    
    @Test
    public void test_48_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/density/groupBy/tag?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22nG%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.703%2C49.4149%5D%2C%5B8.702034%2C49.412414%5D%2C%5B8.717%2C49.40976%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22Mfdj%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.740%2C49.4119%5D%2C%5B8.703%2C49.40690%5D%2C%5B8.7278%2C49.4132%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "format=csv&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=chapel%2Cgarage&" + 
                    "keys=highway&" + 
                    "showMetadata=no&" + 
                    "time=%2F%2FP3M9D&" + 
                    "timeout=28")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.74 49.4119, 8.71450524924273 49.40845476341118 ) and LINESTRING ( 8.7278 49.4132, 8.704561 49.403252 ) [ (8.717734235214236, 49.40889111286679, NaN) ]"))
                .body("'path'", containsString("/users/count/density/groupBy/tag"));
    }
    
    
    @Test
    public void test_49_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/density/groupBy/tag?" + 
                    "bpolys=C%3A8.704561%2C49.403252%2C8.744%2C49.412%2C8.704503%2C49.4357%2C8.7012%2C49.4109%2C8.704561%2C49.403252%7CHNQ%3A8.704561%2C49.403252%2C8.725%2C49.434%2C8.709%2C49.413%2C8.7010%2C49.404%2C8.704561%2C49.403252%7Cf%3A8.704561%2C49.403252%2C8.702%2C49.403638%2C8.717%2C49.419%2C8.704236%2C49.402%2C8.704561%2C49.403252&" + 
                    "filter=turn%3D*+and+not+area%3A%281.0+..+1E6%29&" + 
                    "format=csv&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=residential%2Celevator&" + 
                    "showMetadata=yes&" + 
                    "time=%2F%2FP11M16D&" + 
                    "timeout=54")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/executor/ExecutionUtils_565_extractContributionTags
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.744 49.412 ) and LINESTRING ( 8.704561 49.403252, 8.702 49.403638 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/users/count/density/groupBy/tag"));
    }
    
    
    @Test
    public void test_50_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/density/groupBy/tag?" + 
                    "bcircles=U%3A8.73833%2C49.423454%2C760748899%7CgMHWq%3A8.727%2C49.422307%2C4%7CF%3A8.709104%2C49.419%2C7&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=speed_camera%2Ctertiary%2Cstreet_lamp&" + 
                    "keys=highway&" + 
                    "showMetadata=true&" + 
                    "time=%2F%2FP3Y2M9D")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El ángulo 1.207.934.024.505.752.830 es demasiado grande."))
                .body("'path'", containsString("/users/count/density/groupBy/tag"));
    }
    
    
    @Test
    public void test_51_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/density/groupBy/tag?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22fFMSA%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.705%2C49.426786%5D%2C%5B8.70525%2C49.408%5D%2C%5B8.7041%2C49.423%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "format=csv&" + 
                    "groupByKey=building&" + 
                    "keys=highway&" + 
                    "timeout=26&" + 
                    "values=give_way")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.705 49.426786 ) and LINESTRING ( 8.70525 49.408, 8.7041 49.423 ) [ (8.704767070676482, 49.41429907813285, NaN) ]"))
                .body("'path'", containsString("/users/count/density/groupBy/tag"));
    }
    
    
    @Test
    public void test_52_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/density/groupBy/tag?" + 
                    "bpolys=8.704561%2C49.403252%2C8.7152%2C49.412%2C8.701%2C49.439%2C8.702%2C49.433%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.70338%2C49.4095%2C8.7047%2C49.428528%2C8.737522%2C49.416%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.706%2C49.4224%2C8.729660%2C49.412%2C8.744207%2C49.424136%2C8.704561%2C49.403252&" + 
                    "format=csv&" + 
                    "groupByKey=building&" + 
                    "groupByValues=elevator%2Ctraffic_signals%2Csecondary_link&" + 
                    "keys=highway&" + 
                    "showMetadata=false&" + 
                    "timeout=66&" + 
                    "values=steps")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/executor/ExecutionUtils_565_extractContributionTags
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.7152 49.412 ) and LINESTRING ( 8.704561 49.403252, 8.70338 49.4095 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/users/count/density/groupBy/tag"));
    }
    
    
    @Test
    public void test_53_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/density/groupBy/boundary?" + 
                    "bcircles=8.718%2C49.430%2C92%7C8.706%2C49.4383%2C7%7C8.73625%2C49.402%2C7%7C8.716%2C49.414826%2C651390476549&" + 
                    "filter=smoothness%3D*+or+not+type%3Arelation+or+id%3A%281+..+9999%29&" + 
                    "format=csv&" + 
                    "time=%2F%2FP1M1D")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El ángulo 348.622.118.256.681.800.000.000.000.000.000.000.000.000 es demasiado grande."))
                .body("'path'", containsString("/users/count/density/groupBy/boundary"));
    }
    
    
    @Test
    public void test_54_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/density/groupBy/boundary?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22buYF%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7217%2C49.4119%5D%2C%5B8.707%2C49.43187%5D%2C%5B8.704756%2C49.4107%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22k%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7254%2C49.412%5D%2C%5B8.7018%2C49.40868%5D%2C%5B8.704%2C49.430%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22Zq%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7251%2C49.435%5D%2C%5B8.7202%2C49.4115%5D%2C%5B8.743%2C49.436%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=tracktype%21%3D*+or+area%3A%281.0+..+1E6%29&" + 
                    "format=csv&" + 
                    "showMetadata=yes")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.7251 49.435, 8.720596098154084 49.413399654412444 ) and LINESTRING ( 8.743 49.436, 8.719006647047165 49.415558929147494 ) [ (8.721486926993329, 49.41767199680474, NaN) ]"))
                .body("'path'", containsString("/users/count/density/groupBy/boundary"));
    }
    
    
    @Test
    public void test_55_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/density/groupBy/boundary?" + 
                    "bcircles=d%3A8.7057%2C49.41846%2C5%7CT%3A8.715%2C49.4070%2C790545769%7Cy%3A8.7177%2C49.402%2C75&" + 
                    "keys=highway&" + 
                    "showMetadata=no&" + 
                    "timeout=82")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El ángulo 1.638.239.574.517.207.810 es demasiado grande."))
                .body("'path'", containsString("/users/count/density/groupBy/boundary"));
    }
    
    
    @Test
    public void test_56_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/density/groupBy/boundary?" + 
                    "bpolys=8.704561%2C49.403252%2C8.726%2C49.427%2C8.731886%2C49.421%2C8.721%2C49.415%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.714199%2C49.417970%2C8.709%2C49.4063%2C8.7045%2C49.407%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.740%2C49.424439%2C8.709%2C49.4147%2C8.70293%2C49.43706%2C8.704561%2C49.403252&" + 
                    "format=geojson&" + 
                    "keys=highway&" + 
                    "time=%2F%2FP6M3D&" + 
                    "timeout=93")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.726 49.427 ) and LINESTRING ( 8.7045 49.407, 8.704561 49.403252 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/users/count/density/groupBy/boundary"));
    }
    
    
    @Test
    public void test_57_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/density/groupBy/boundary?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22w%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.72666%2C49.421%5D%2C%5B8.70813%2C49.4121%5D%2C%5B8.726%2C49.43847%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22ClUjC%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.728%2C49.405%5D%2C%5B8.7049%2C49.4158%5D%2C%5B8.700%2C49.40293%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "format=geojson&" + 
                    "time=%2F%2FP7M23D&" + 
                    "timeout=63")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.72666 49.421, 8.710440392493231 49.41320968662654 ) and LINESTRING ( 8.726 49.43847, 8.710582350847831 49.413143316486725 ) [ (8.710698104867522, 49.41333346645013, NaN) ]"))
                .body("'path'", containsString("/users/count/density/groupBy/boundary"));
    }
    
    
    @Test
    public void test_58_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/density?" + 
                    "bcircles=8.738%2C49.427%2C969865174&" + 
                    "filter=type%21%3D*+or+not+length%3A%28+..+100%29&" + 
                    "format=csv&" + 
                    "time=%2F%2FP3Y17D&" + 
                    "timeout=66")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El ángulo 8.434.909.945.445.097.500 es demasiado grande."))
                .body("'path'", containsString("/users/count/density"));
    }
    
    
    @Test
    public void test_59_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/density?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22UUwIx%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.70463%2C49.436%5D%2C%5B8.742865%2C49.41005%5D%2C%5B8.72832%2C49.434%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22dNLDX%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7065%2C49.428962%5D%2C%5B8.7045%2C49.430%5D%2C%5B8.70752%2C49.431514%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22Rdhea%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.725%2C49.4077%5D%2C%5B8.7125%2C49.428%5D%2C%5B8.702292%2C49.43785%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "format=geojson&" + 
                    "keys=highway&" + 
                    "showMetadata=no&" + 
                    "time=%2F%2FP3Y3M6D&" + 
                    "values=crossing")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.70463 49.436, 8.742865 49.41005 ) and LINESTRING ( 8.72832 49.434, 8.717459849776906 49.4199452039623 ) [ (8.721183991210994, 49.42476484707924, NaN) ]"))
                .body("'path'", containsString("/users/count/density"));
    }
    
    
    @Test
    public void test_60_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/density?" + 
                    "bcircles=Kvfg%3A8.723%2C49.412%2C441047096&" + 
                    "keys=highway&" + 
                    "showMetadata=no&" + 
                    "time=%2F%2FP2Y4M12D&" + 
                    "timeout=25")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El ángulo 15.384.035.167.395.690 es demasiado grande."))
                .body("'path'", containsString("/users/count/density"));
    }
    
    
    @Test
    public void test_61_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/density?" + 
                    "bpolys=rjcXX%3A8.704561%2C49.403252%2C8.735%2C49.435%2C8.74020%2C49.4094%2C8.703%2C49.408%2C8.704561%2C49.403252%7CR%3A8.704561%2C49.403252%2C8.7356%2C49.425%2C8.74650%2C49.423%2C8.707%2C49.430%2C8.704561%2C49.403252&" + 
                    "format=csv&" + 
                    "time=%2F%2FP1Y6D&" + 
                    "timeout=98")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.735 49.435 ) and LINESTRING ( 8.703 49.408, 8.704561 49.403252 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/users/count/density"));
    }
    
    
    @Test
    public void test_62_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/density?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22Q%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.714%2C49.4300%5D%2C%5B8.747%2C49.431%5D%2C%5B8.728%2C49.403%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22qk%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.712%2C49.435%5D%2C%5B8.7240%2C49.4187%5D%2C%5B8.7034%2C49.428%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22H%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.719%2C49.427%5D%2C%5B8.7079%2C49.413%5D%2C%5B8.745%2C49.416191%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=oneway%21%3D*+and+length%3A%28+..+100%29&" + 
                    "format=geojson&" + 
                    "showMetadata=true&" + 
                    "timeout=97")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.712 49.435 ) and LINESTRING ( 8.71193456328082 49.42414701754798, 8.7034 49.428 ) [ (8.709694006331656, 49.425158531122115, NaN) ]"))
                .body("'path'", containsString("/users/count/density"));
    }
    
    
    @Test
    public void test_63() throws Exception {
        
        try{
            given().accept("*/*")
                    .post(baseUrlOfSut + "/users/count?" + 
                        "bboxes=8.690898%2C49.424%2C8.7173%2C49.399%7C8.6811%2C49.412%2C8.748%2C49.39395%7C8.692%2C49.42679%2C8.7175%2C49.381%7C8.688%2C49.410%2C8.7025%2C49.3837&" + 
                        "format=csv&" + 
                        "time=%2F%2FP23D")
                    .then();
        } catch(Exception e){
        }
    }
    
    
    @Test
    public void test_64_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count?" + 
                    "bcircles=8.7157%2C49.419%2C108083125%7C8.746%2C49.41607%2C77&" + 
                    "filter=smoothness%21%3D*+or+not+type%3Anode&" + 
                    "time=%2F%2FP1Y1D&" + 
                    "timeout=26")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El ángulo 199.552.274.782,696 es demasiado grande."))
                .body("'path'", containsString("/users/count"));
    }
    
    
    @Test
    public void test_65_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count?" + 
                    "bpolys=Q%3A8.704561%2C49.403252%2C8.742%2C49.425%2C8.7485%2C49.4135%2C8.7023%2C49.421167%2C8.704561%2C49.403252&" + 
                    "format=json&" + 
                    "keys=highway&" + 
                    "time=%2F%2FP10M6D&" + 
                    "timeout=91")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.742 49.425 ) and LINESTRING ( 8.7485 49.4135, 8.7023 49.421167 ) [ (8.728046202395891, 49.416894356411916, NaN) ]"))
                .body("'path'", containsString("/users/count"));
    }
    
    
    @Test
    public void test_66_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22DGMEq%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.74794%2C49.400%5D%2C%5B8.703528%2C49.4106%5D%2C%5B8.7225%2C49.433616%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22klQIS%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.730427%2C49.4188%5D%2C%5B8.700%2C49.404%5D%2C%5B8.71236%2C49.4113%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22J%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7153%2C49.4340%5D%2C%5B8.706%2C49.429%5D%2C%5B8.708%2C49.4105%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=maxspeed%3D*+or+length%3A%28+..+100%29&" + 
                    "format=csv&" + 
                    "showMetadata=true&" + 
                    "time=%2F%2FP2Y1M10D")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.74794 49.4, 8.707587705683762 49.40963105286301 ) and LINESTRING ( 8.7225 49.433616, 8.704561 49.403252 ) [ (8.708238032214462, 49.40947583667763, NaN) ]"))
                .body("'path'", containsString("/users/count"));
    }
    
    
    @Test
    public void test_67_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count?" + 
                    "bcircles=URkIo%3A8.710%2C49.42461%2C7%7Cbx%3A8.729%2C49.436%2C9%7CHNBbs%3A8.723%2C49.428%2C7%7Cx%3A8.7050%2C49.423%2C875001458&" + 
                    "keys=highway&" + 
                    "showMetadata=yes&" + 
                    "time=%2F%2FP10M28D&" + 
                    "timeout=28")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El ángulo 3.699.682.951.805.939.700 es demasiado grande."))
                .body("'path'", containsString("/users/count"));
    }
    
    
    @Test
    public void test_68_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count?" + 
                    "bpolys=TvP%3A8.704561%2C49.403252%2C8.723%2C49.436%2C8.747%2C49.4222%2C8.739%2C49.400079%2C8.704561%2C49.403252%7ClB%3A8.704561%2C49.403252%2C8.738%2C49.401%2C8.704%2C49.4187%2C8.702684%2C49.419%2C8.704561%2C49.403252%7CU%3A8.704561%2C49.403252%2C8.705%2C49.40174%2C8.710%2C49.4062%2C8.707%2C49.4381%2C8.704561%2C49.403252&" + 
                    "format=csv&" + 
                    "keys=highway&" + 
                    "showMetadata=true&" + 
                    "time=%2F%2FP5M2D&" + 
                    "timeout=79&" + 
                    "values=bus_stop")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.723 49.436 ) and LINESTRING ( 8.702684 49.419, 8.704561 49.403252 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/users/count"));
    }
    
    
    @Test
    public void test_69_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22cXQaN%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.70985%2C49.432%5D%2C%5B8.700752%2C49.425%5D%2C%5B8.72637%2C49.425004%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22iUpi%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.700377%2C49.412492%5D%2C%5B8.705%2C49.412%5D%2C%5B8.702%2C49.418%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22x%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.717%2C49.4354%5D%2C%5B8.7325%2C49.404%5D%2C%5B8.706452%2C49.421%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "time=%2F%2FP4M9D&" + 
                    "timeout=77")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.707678923142634 49.420199259312625, 8.70985 49.432 ) and LINESTRING ( 8.700752 49.425, 8.712976674850916 49.42500190876334 ) [ (8.708562378252754, 49.42500121951413, NaN) ]"))
                .body("'path'", containsString("/users/count"));
    }
    
    
    @Test
    public void test_70_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/ratio/groupBy/boundary?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22A%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.72722%2C49.404518%5D%2C%5B8.724%2C49.431164%5D%2C%5B8.725%2C49.428%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter2=ref%21%3D*+and+id%3A%281+..+9999%29&" + 
                    "keys=highway&" + 
                    "time=2013-11-29&" + 
                    "timeout=92&" + 
                    "values=residential")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.72722 49.404518, 8.724 49.431164 ) and LINESTRING ( 8.725 49.428, 8.704561 49.403252 ) [ (8.724461188353304, 49.42734759476332, NaN) ]"))
                .body("'path'", containsString("/elements/perimeter/ratio/groupBy/boundary"));
    }
    
    
    @Test
    public void test_71_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/ratio/groupBy/boundary?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22RfAd%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.722425%2C49.4183%5D%2C%5B8.704%2C49.407209%5D%2C%5B8.7176%2C49.43883%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22q%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.702%2C49.4249%5D%2C%5B8.744%2C49.40570%5D%2C%5B8.70456%2C49.4326%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22phmu%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.737%2C49.427514%5D%2C%5B8.7068%2C49.403%5D%2C%5B8.743%2C49.437%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter2=sidewalk%3D*&" + 
                    "keys=highway&" + 
                    "keys2=highway&" + 
                    "showMetadata=false&" + 
                    "timeout=94&" + 
                    "types2=node%2Crelation&" + 
                    "values2=traffic_mirror")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.737 49.427514 ) and LINESTRING ( 8.7068 49.403, 8.743 49.437 ) [ (8.716871154697989, 49.41245909557269, NaN) ]"))
                .body("'path'", containsString("/elements/perimeter/ratio/groupBy/boundary"));
    }
    
    
    @Test
    public void test_72_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/ratio/groupBy/boundary?" + 
                    "bcircles=8.724%2C49.419%2C206328312%7C8.712200%2C49.426%2C61%7C8.7197%2C49.4327%2C59%7C8.712%2C49.43068%2C65&" + 
                    "format=csv&" + 
                    "showMetadata=true&" + 
                    "timeout=67&" + 
                    "types2=point%2Cline%2C")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El ángulo 35.294.109.664.964,35 es demasiado grande."))
                .body("'path'", containsString("/elements/perimeter/ratio/groupBy/boundary"));
    }
    
    
    @Test
    public void test_73_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/ratio/groupBy/boundary?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22p%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7482%2C49.400%5D%2C%5B8.7060%2C49.427%5D%2C%5B8.74987%2C49.433%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter2=foot%3D*+and+area%3A%281.0+..+1E6%29&" + 
                    "format=csv&" + 
                    "keys2=highway&" + 
                    "showMetadata=true&" + 
                    "timeout=47")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.7482 49.4, 8.706 49.427 ) and LINESTRING ( 8.74987 49.433, 8.704561 49.403252 ) [ (8.723590066888862, 49.415745691800964, NaN) ]"))
                .body("'path'", containsString("/elements/perimeter/ratio/groupBy/boundary"));
    }
    
    
    @Test
    public void test_74_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/ratio/groupBy/boundary?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22u%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7446%2C49.402164%5D%2C%5B8.717%2C49.434631%5D%2C%5B8.707%2C49.415827%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22Pi%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7262%2C49.4375%5D%2C%5B8.7443%2C49.418851%5D%2C%5B8.708%2C49.4310%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter2=foot%3D*+or+not+geometry%3Apoint+and+length%3A%28+..+100%29&" + 
                    "format=json&" + 
                    "keys=highway&" + 
                    "showMetadata=false&" + 
                    "time=2008-05-12&" + 
                    "timeout=88&" + 
                    "values=platform")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.721237643221913 49.429646088315735 ) and LINESTRING ( 8.724892937061675 49.42534621784126, 8.714000948418754 49.42899158340663 ) [ (8.719633108240368, 49.42710659415944, NaN) ]"))
                .body("'path'", containsString("/elements/perimeter/ratio/groupBy/boundary"));
    }
    
    
    @Test
    public void test_75_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/ratio?" + 
                    "bcircles=8.744%2C49.418%2C2%7C8.735%2C49.40781%2C31%7C8.739%2C49.4057%2C773903290%7C8.745%2C49.40352%2C8&" + 
                    "filter2=highway+in+%28secondary%2Cpath%2Cunclassified%2Ctrack%2Cprimary%2Cresidential%2Ccycleway%2Cservice%2Cfootway%29+and+length%3A%28+..+100%29&" + 
                    "format=csv&" + 
                    "keys=highway&" + 
                    "keys2=highway&" + 
                    "time=2018-01-16&" + 
                    "timeout=89&" + 
                    "values2=footway")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El ángulo 1.381.543.652.534.867.970 es demasiado grande."))
                .body("'path'", containsString("/elements/perimeter/ratio"));
    }
    
    
    @Test
    public void test_76_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/ratio?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22G%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.702%2C49.404%5D%2C%5B8.723670%2C49.4173%5D%2C%5B8.71579%2C49.4374%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter2=ref%21%3D*+and+not+length%3A%28+..+100%29&" + 
                    "keys=highway&" + 
                    "keys2=highway&" + 
                    "time=2007-12-30&" + 
                    "timeout=26&" + 
                    "values=secondary&" + 
                    "values2=tertiary")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.702 49.404, 8.72367 49.4173 ) and LINESTRING ( 8.71579 49.4374, 8.704561 49.403252 ) [ (8.705516718542583, 49.40615839209121, NaN) ]"))
                .body("'path'", containsString("/elements/perimeter/ratio"));
    }
    
    
    @Test
    public void test_77_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/ratio?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22v%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.720%2C49.4087%5D%2C%5B8.703%2C49.412%5D%2C%5B8.7236%2C49.421%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22IIx%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.708%2C49.407315%5D%2C%5B8.7429%2C49.426496%5D%2C%5B8.739%2C49.427013%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22gI%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.717%2C49.427%5D%2C%5B8.737%2C49.4319%5D%2C%5B8.70453%2C49.414%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=maxspeed%3D*+and+type%3Away+and+length%3A%28+..+100%29&" + 
                    "keys2=highway&" + 
                    "showMetadata=true&" + 
                    "time=2009-12-14&" + 
                    "types2=point%2Cother&" + 
                    "values2=residential")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.708 49.407315, 8.7429 49.426496 ) and LINESTRING ( 8.739 49.427013, 8.704561 49.403252 ) [ (8.720043695673125, 49.413934201338286, NaN) ]"))
                .body("'path'", containsString("/elements/perimeter/ratio"));
    }
    
    
    @Test
    public void test_78_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/ratio?" + 
                    "bcircles=xwJCU%3A8.722411%2C49.4122%2C152%7CU%3A8.742%2C49.424%2C8%7CzgPU%3A8.7291%2C49.40397%2C3%7CLUxS%3A8.7245%2C49.4205%2C850399119058&" + 
                    "filter2=building%3D*+or+length%3A%28+..+100%29&" + 
                    "keys=highway&" + 
                    "keys2=highway&" + 
                    "timeout=33&" + 
                    "types2=point%2Cline%2Cpolygon%2C&" + 
                    "values=secondary_link&" + 
                    "values2=stop_line")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El ángulo 2.944.436.997.527.533.000.000.000.000.000.000.000.000.000 es demasiado grande."))
                .body("'path'", containsString("/elements/perimeter/ratio"));
    }
    
    
    @Test
    public void test_79_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/ratio?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22V%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.716%2C49.431%5D%2C%5B8.706%2C49.418%5D%2C%5B8.722%2C49.431%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "format=csv&" + 
                    "keys=highway&" + 
                    "showMetadata=no&" + 
                    "time=2010-08-10&" + 
                    "timeout=34&" + 
                    "types2=point%2Cother&" + 
                    "values=speed_camera")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.716 49.431 ) and LINESTRING ( 8.706 49.418, 8.722 49.431 ) [ (8.712978124439054, 49.42366972610673, NaN) ]"))
                .body("'path'", containsString("/elements/perimeter/ratio"));
    }
    
    
    @Test
    public void test_80_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/ratio?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22h%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.731%2C49.413%5D%2C%5B8.702%2C49.4017%5D%2C%5B8.725%2C49.407%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22uJEe%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7310%2C49.427%5D%2C%5B8.736%2C49.417017%5D%2C%5B8.701%2C49.423%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=foot%3D*+and+not+type%3Away+and+length%3A%28+..+100%29&" + 
                    "filter2=maxspeed%3D*+and+length%3A%28+..+100%29&" + 
                    "showMetadata=no&" + 
                    "timeout=71")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.731 49.413, 8.702 49.4017 ) and LINESTRING ( 8.725 49.407, 8.704561 49.403252 ) [ (8.70724711802777, 49.403744566679784, NaN) ]"))
                .body("'path'", containsString("/elements/perimeter/ratio"));
    }
    
    
    @Test
    public void test_81_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/type?" + 
                    "bcircles=shELg%3A8.747175%2C49.43204%2C9%7CXJ%3A8.73945%2C49.411%2C7%7CPOdjR%3A8.7173%2C49.417%2C9%7CT%3A8.748%2C49.4028%2C481325146662&" + 
                    "keys=highway&" + 
                    "timeout=35&" + 
                    "values=stop_line")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El ángulo 30.923.203.165.452.630.000.000.000.000.000.000.000.000 es demasiado grande."))
                .body("'path'", containsString("/elements/perimeter/groupBy/type"));
    }
    
    
    @Test
    public void test_82_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/type?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22bUOqY%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.721%2C49.414%5D%2C%5B8.704926%2C49.4131%5D%2C%5B8.739286%2C49.433%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "format=geojson&" + 
                    "showMetadata=no&" + 
                    "timeout=41")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.721 49.414, 8.704926 49.4131 ) and LINESTRING ( 8.739286 49.433, 8.704561 49.403252 ) [ (8.71683497786893, 49.41376679607329, NaN) ]"))
                .body("'path'", containsString("/elements/perimeter/groupBy/type"));
    }
    
    
    @Test
    public void test_83_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/type?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22LyHvo%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7328%2C49.439%5D%2C%5B8.704561%2C49.401%5D%2C%5B8.7048%2C49.425%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22QR%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.748%2C49.436758%5D%2C%5B8.718%2C49.4352%5D%2C%5B8.733%2C49.426%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=highway+in+%28secondary%2Cpath%2Cunclassified%2Ctrack%2Cprimary%2Cresidential%2Ccycleway%2Cservice%2Cfootway%29&" + 
                    "format=geojson&" + 
                    "time=2014-01-04&" + 
                    "timeout=72")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.725947592443797 49.43032547663447 ) and LINESTRING ( 8.704583606237696 49.40327008244647, 8.7048 49.425 ) [ (8.704583712488066, 49.40328075193964, NaN) ]"))
                .body("'path'", containsString("/elements/perimeter/groupBy/type"));
    }
    
    
    @Test
    public void test_84_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/groupBy/type?" + 
                    "bcircles=8.734%2C49.42013%2C112334354&" + 
                    "filter=network%21%3D*+and+type%3Arelation+or+not+area%3A%281.0+..+1E6%29&" + 
                    "showMetadata=true&" + 
                    "time=2014-04-07&" + 
                    "values=living_street")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El ángulo 271.850.444.862,068 es demasiado grande."))
                .body("'path'", containsString("/elements/perimeter/groupBy/type"));
    }
    
    
    @Test
    public void test_85_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/groupBy/type?" + 
                    "bpolys=Q%3A8.704561%2C49.403252%2C8.7420%2C49.423%2C8.7394%2C49.422%2C8.704%2C49.42129%2C8.704561%2C49.403252%7CHhnh%3A8.704561%2C49.403252%2C8.705%2C49.400%2C8.725%2C49.432%2C8.721%2C49.411859%2C8.704561%2C49.403252%7CFkbNn%3A8.704561%2C49.403252%2C8.701%2C49.428%2C8.73803%2C49.415%2C8.7401%2C49.407%2C8.704561%2C49.403252&" + 
                    "keys=highway&" + 
                    "time=2017-12-21&" + 
                    "timeout=100&" + 
                    "values=traffic_mirror")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.742 49.423 ) and LINESTRING ( 8.704 49.42129, 8.704561 49.403252 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/perimeter/groupBy/type"));
    }
    
    
    @Test
    public void test_86_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/groupBy/type?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22fX%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.711%2C49.427%5D%2C%5B8.743597%2C49.411%5D%2C%5B8.7191%2C49.426477%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22MfJGU%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.704%2C49.43208%5D%2C%5B8.7036%2C49.43009%5D%2C%5B8.704%2C49.416%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22h%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.729%2C49.4229%5D%2C%5B8.7032%2C49.407%5D%2C%5B8.7349%2C49.405%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=addr%3Apostcode%21%3D*+and+type%3Anode+and+not+id%3A%281+..+9999%29&" + 
                    "format=csv&" + 
                    "showMetadata=false&" + 
                    "time=2015-12-20&" + 
                    "timeout=33")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.711 49.427, 8.743597 49.411 ) and LINESTRING ( 8.7191 49.426477, 8.704561 49.403252 ) [ (8.717446561766248, 49.42383575211645, NaN) ]"))
                .body("'path'", containsString("/elements/perimeter/groupBy/type"));
    }
    
    
    @Test
    public void test_87_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/tag?" + 
                    "bcircles=UT%3A8.712%2C49.426%2C8%7Cq%3A8.745517%2C49.4024%2C6%7CUxR%3A8.738%2C49.411%2C5%7CES%3A8.7407%2C49.410%2C133581700421&" + 
                    "filter=smoothness%21%3D*+and+geometry%3Aline+and+length%3A%28+..+100%29&" + 
                    "groupByKey=building")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El ángulo 1.089.574.414.064.206.200.000.000.000.000.000.000 es demasiado grande."))
                .body("'path'", containsString("/elements/perimeter/groupBy/tag"));
    }
    
    
    @Test
    public void test_88_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/tag?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22CJ%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.744%2C49.4176%5D%2C%5B8.729%2C49.4019%5D%2C%5B8.73203%2C49.4157%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "groupByKey=building&" + 
                    "groupByValues=bus_stop%2Ccycleway&" + 
                    "keys=highway&" + 
                    "showMetadata=true&" + 
                    "time=2014-01-05&" + 
                    "timeout=52")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.744 49.4176 ) and LINESTRING ( 8.729 49.4019, 8.73203 49.4157 ) [ (8.731444240741752, 49.413032185556496, NaN) ]"))
                .body("'path'", containsString("/elements/perimeter/groupBy/tag"));
    }
    
    
    @Test
    public void test_89_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/tag?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22Gi%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.727016%2C49.422656%5D%2C%5B8.7499%2C49.4394%5D%2C%5B8.7117%2C49.4017%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22RxJs%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.724%2C49.4085%5D%2C%5B8.720%2C49.403%5D%2C%5B8.703%2C49.40589%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22uvZYO%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7109%2C49.4265%5D%2C%5B8.7268%2C49.42627%5D%2C%5B8.704535%2C49.427%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "format=geojson&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=demolished%2Ctrack%2Csynagogue&" + 
                    "showMetadata=yes&" + 
                    "time=2010-01-20&" + 
                    "timeout=97")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.71655304740046 49.40648952583763 ) and LINESTRING ( 8.714043309046478 49.404012637462095, 8.706855328566165 49.40523459414375 ) [ (8.709953675068359, 49.40470787523837, NaN) ]"))
                .body("'path'", containsString("/elements/perimeter/groupBy/tag"));
    }
    
    
    @Test
    public void test_90_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/groupBy/tag?" + 
                    "bcircles=DLZ%3A8.7230%2C49.4374%2C454786593%7Cwj%3A8.720%2C49.413%2C71&" + 
                    "filter=addr%3Apostcode%21%3D*+or+type%3Arelation+and+area%3A%281.0+..+1E6%29&" + 
                    "format=csv&" + 
                    "groupByKey=highway&" + 
                    "showMetadata=true&" + 
                    "timeout=73")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El ángulo 19.744.280.578.934.356 es demasiado grande."))
                .body("'path'", containsString("/elements/perimeter/groupBy/tag"));
    }
    
    
    @Test
    public void test_91_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/groupBy/tag?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22Tw%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7370%2C49.428%5D%2C%5B8.732%2C49.40508%5D%2C%5B8.71169%2C49.421608%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "groupByKey=building&" + 
                    "keys=highway&" + 
                    "time=2012-07-04&" + 
                    "timeout=81&" + 
                    "values=tertiary")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.737 49.428 ) and LINESTRING ( 8.732 49.40508, 8.71169 49.421608 ) [ (8.71988259372756, 49.41494097936341, NaN) ]"))
                .body("'path'", containsString("/elements/perimeter/groupBy/tag"));
    }
    
    
    @Test
    public void test_92_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/groupBy/tag?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22sk%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.732%2C49.4137%5D%2C%5B8.709%2C49.42981%5D%2C%5B8.7047%2C49.422%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22YdpbJ%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.737%2C49.4334%5D%2C%5B8.7472%2C49.429%5D%2C%5B8.709%2C49.438%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22AIq%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.739%2C49.420631%5D%2C%5B8.704594%2C49.400%5D%2C%5B8.708%2C49.418%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "groupByKey=building&" + 
                    "groupByValues=speed_camera%2Cliving_street%2Cbus_stop&" + 
                    "time=2014-03-26&" + 
                    "timeout=47")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.72276387733058 49.420169301574106, 8.737 49.4334 ) and LINESTRING ( 8.7472 49.429, 8.709 49.438 ) [ (8.735285924746986, 49.431806981080555, NaN) ]"))
                .body("'path'", containsString("/elements/perimeter/groupBy/tag"));
    }
    
    
    @Test
    public void test_93_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/key?" + 
                    "bcircles=8.74610%2C49.405%2C2%7C8.726%2C49.419%2C1%7C8.724058%2C49.434%2C7%7C8.711%2C49.407%2C959740738&" + 
                    "filter=lit%21%3D*+or+area%3A%281.0+..+1E6%29&" + 
                    "groupByKeys=addr%3Apostcode%2Csurface%2Csmoothness&" + 
                    "showMetadata=no&" + 
                    "time=2009-05-15&" + 
                    "timeout=49")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El ángulo 7.730.648.979.498.728.400 es demasiado grande."))
                .body("'path'", containsString("/elements/perimeter/groupBy/key"));
    }
    
    
    @Test
    public void test_94_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/key?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22vf%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.739165%2C49.416%5D%2C%5B8.709%2C49.416937%5D%2C%5B8.7032%2C49.40160%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22Mh%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.740%2C49.426%5D%2C%5B8.734%2C49.416500%5D%2C%5B8.704%2C49.405%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22Nvs%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7153%2C49.402%5D%2C%5B8.7053%2C49.412%5D%2C%5B8.7194%2C49.402618%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=maxspeed%3D*+or+length%3A%28+..+100%29&" + 
                    "format=geojson&" + 
                    "groupByKeys=barrier%2Caddr%3Astreet%2Cmaxspeed&" + 
                    "showMetadata=false&" + 
                    "timeout=75")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.725101605258091 49.41643684405348 ) and LINESTRING ( 8.733180584788299 49.416185890835514, 8.704568140108284 49.40521778704151 ) [ (8.712153289570598, 49.40812542766873, NaN) ]"))
                .body("'path'", containsString("/elements/perimeter/groupBy/key"));
    }
    
    
    @Test
    public void test_95_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/groupBy/key?" + 
                    "bcircles=8.732%2C49.409784%2C28%7C8.73640%2C49.401594%2C2%7C8.747%2C49.4301%2C7%7C8.736921%2C49.426%2C372214600753&" + 
                    "format=json&" + 
                    "groupByKeys=lanes%2Clit%2Chighway&" + 
                    "keys=highway&" + 
                    "time=2015-05-13&" + 
                    "timeout=82&" + 
                    "values=primary")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El ángulo 3.969.633.459.286.807.000.000.000.000.000.000.000.000 es demasiado grande."))
                .body("'path'", containsString("/elements/perimeter/groupBy/key"));
    }
    
    
    @Test
    public void test_96_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/groupBy/key?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22G%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.701%2C49.437%5D%2C%5B8.7203%2C49.4223%5D%2C%5B8.701%2C49.427%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "groupByKeys=type%2Csmoothness&" + 
                    "keys=highway&" + 
                    "timeout=34&" + 
                    "values=path")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.701 49.437 ) and LINESTRING ( 8.7203 49.4223, 8.701 49.427 ) [ (8.702083002402933, 49.426736263663535, NaN) ]"))
                .body("'path'", containsString("/elements/perimeter/groupBy/key"));
    }
    
    
    @Test
    public void test_97_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/groupBy/key?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22s%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.73046%2C49.4214%5D%2C%5B8.7023%2C49.426328%5D%2C%5B8.73438%2C49.4278%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22EJsgk%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.732%2C49.423985%5D%2C%5B8.70212%2C49.401319%5D%2C%5B8.7029%2C49.4235%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22LAXhl%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.740%2C49.4151%5D%2C%5B8.728309%2C49.432%5D%2C%5B8.7012%2C49.418059%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "groupByKeys=source%3Amaxspeed%2Clanduse&" + 
                    "showMetadata=true&" + 
                    "time=2007-11-17&" + 
                    "timeout=98")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.73046 49.4214, 8.713476258109743 49.42437215483079 ) and LINESTRING ( 8.73236307770551 49.426139601982456, 8.704561 49.403252 ) [ (8.727281460492685, 49.42195624441378, NaN) ]"))
                .body("'path'", containsString("/elements/perimeter/groupBy/key"));
    }
    
    
    @Test
    public void test_98_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=FD%3A8.70688%2C49.42123%2C5901605565%7CGE%3A8.7035%2C49.417%2C37%7Cf%3A8.736%2C49.40747%2C2%7CH%3A8.709461%2C49.42698%2C41&" + 
                    "format=csv&" + 
                    "groupByKey=highway&" + 
                    "keys=highway&" + 
                    "showMetadata=false")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El ángulo 15.842.460.265.395.543.000.000.000 es demasiado grande."))
                .body("'path'", containsString("/elements/perimeter/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_99_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=P%3A8.704561%2C49.403252%2C8.723%2C49.436071%2C8.7309%2C49.416%2C8.7030%2C49.4346%2C8.704561%2C49.403252%7CAz%3A8.704561%2C49.403252%2C8.722%2C49.4282%2C8.70843%2C49.405%2C8.702673%2C49.407%2C8.704561%2C49.403252%7Cx%3A8.704561%2C49.403252%2C8.712%2C49.401%2C8.70442%2C49.438109%2C8.7048%2C49.428%2C8.704561%2C49.403252&" + 
                    "format=geojson&" + 
                    "groupByKey=highway&" + 
                    "time=2008-11-23&" + 
                    "timeout=90")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.723 49.436071 ) and LINESTRING ( 8.70843 49.405, 8.702673 49.407 ) [ (8.706014553166122, 49.40583913386621, NaN) ]"))
                .body("'path'", containsString("/elements/perimeter/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_100_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22wrU%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7446%2C49.4048%5D%2C%5B8.738%2C49.422%5D%2C%5B8.704%2C49.429%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22T%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.740072%2C49.402%5D%2C%5B8.73420%2C49.400%5D%2C%5B8.736%2C49.41070%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=destination%21%3D*+or+area%3A%281.0+..+1E6%29&" + 
                    "format=json&" + 
                    "groupByKey=building&" + 
                    "groupByValues=stop%2Ccycleway&" + 
                    "showMetadata=no&" + 
                    "timeout=90")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.740072 49.402 ) and LINESTRING ( 8.7342 49.4, 8.734944679016492 49.404426703042475 ) [ (8.734569086545413, 49.4021940144644, NaN) ]"))
                .body("'path'", containsString("/elements/perimeter/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_101_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=yK%3A8.7191%2C49.434005%2C1&" + 
                    "format=geojson&" + 
                    "groupByKey=building&" + 
                    "keys=highway&" + 
                    "time=2009-08-06&" + 
                    "timeout=28&" + 
                    "values=bus_stop")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/utils/GroupByBoundaryGeoJsonGenerator_75_generateGroupByResultGeoJson
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Index 0 out of bounds for length 0"))
                .body("'path'", containsString("/elements/perimeter/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_102_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22v%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7151%2C49.411%5D%2C%5B8.704560%2C49.427194%5D%2C%5B8.71125%2C49.42737%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=type%3D*+or+length%3A%28+..+100%29&" + 
                    "format=json&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=give_way%2Ccommercial&" + 
                    "showMetadata=no&" + 
                    "time=2008-03-16&" + 
                    "timeout=76")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.7151 49.411, 8.70456 49.427194 ) and LINESTRING ( 8.71125 49.42737, 8.704561 49.403252 ) [ (8.709216817396616, 49.42003911376463, NaN) ]"))
                .body("'path'", containsString("/elements/perimeter/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_103_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22sVmsQ%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.74321%2C49.426%5D%2C%5B8.704952%2C49.421%5D%2C%5B8.7046%2C49.426%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22g%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7123%2C49.430%5D%2C%5B8.7095%2C49.42082%5D%2C%5B8.7294%2C49.43279%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22c%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7285%2C49.42584%5D%2C%5B8.712%2C49.4056%5D%2C%5B8.7469%2C49.41322%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "format=csv&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=church&" + 
                    "timeout=64")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.70988246535584 49.42164437050497 ) and LINESTRING ( 8.7095 49.42082, 8.71114477337957 49.4218093435856 ) [ (8.70967428106857, 49.42092483137642, NaN) ]"))
                .body("'path'", containsString("/elements/perimeter/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_104_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=8.7222%2C49.4123%2C678540129&" + 
                    "filter=surface%21%3D*+or+not+type%3Anode+or+area%3A%281.0+..+1E6%29&" + 
                    "format=geojson&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=unclassified%2Cresidential%2Ctraffic_signals&" + 
                    "time=2016-03-11&" + 
                    "timeout=45")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El ángulo 482.964.117.742.257.280 es demasiado grande."))
                .body("'path'", containsString("/elements/perimeter/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_105_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/boundary?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22w%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.73710%2C49.4254%5D%2C%5B8.7007%2C49.437%5D%2C%5B8.742%2C49.431%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22Pv%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7425%2C49.430370%5D%2C%5B8.72162%2C49.423%5D%2C%5B8.745%2C49.42581%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "time=2013-12-22&" + 
                    "timeout=25")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.736025751224295 49.42574234301644 ) and LINESTRING ( 8.733061375738316 49.42437511829875, 8.736137442008655 49.4247448251516 ) [ (8.734325520087632, 49.42452705352636, NaN) ]"))
                .body("'path'", containsString("/elements/perimeter/groupBy/boundary"));
    }
    
    
    @Test
    public void test_106_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/boundary?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22X%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7100%2C49.4226%5D%2C%5B8.736%2C49.40660%5D%2C%5B8.7183%2C49.421%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "showMetadata=no&" + 
                    "time=2011-03-12&" + 
                    "timeout=41")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.71 49.4226, 8.736 49.4066 ) and LINESTRING ( 8.7183 49.421, 8.704561 49.403252 ) [ (8.716460798036614, 49.41862412428516, NaN) ]"))
                .body("'path'", containsString("/elements/perimeter/groupBy/boundary"));
    }
    
    
    @Test
    public void test_107_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/groupBy/boundary?" + 
                    "bcircles=Y%3A8.731%2C49.4106%2C355817910%7CF%3A8.707%2C49.40515%2C599083737094%7CZp%3A8.7461%2C49.43041%2C85&" + 
                    "showMetadata=true&" + 
                    "time=2014-12-02&" + 
                    "timeout=22")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El ángulo 2.759.565.052.654.706 es demasiado grande."))
                .body("'path'", containsString("/elements/perimeter/groupBy/boundary"));
    }
    
    
    @Test
    public void test_108_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/groupBy/boundary?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22c%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.73046%2C49.439%5D%2C%5B8.705%2C49.412626%5D%2C%5B8.728%2C49.437%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "format=json&" + 
                    "keys=highway&" + 
                    "time=2011-06-07&" + 
                    "timeout=63&" + 
                    "values=living_street")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.73046 49.439, 8.705 49.412626 ) and LINESTRING ( 8.728 49.437, 8.704561 49.403252 ) [ (8.726642531979843, 49.435045486977074, NaN) ]"))
                .body("'path'", containsString("/elements/perimeter/groupBy/boundary"));
    }
    
    
    @Test
    public void test_109_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/groupBy/boundary?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22A%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.720201%2C49.413%5D%2C%5B8.745%2C49.4304%5D%2C%5B8.709%2C49.437%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22iE%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7305%2C49.403153%5D%2C%5B8.7060%2C49.408%5D%2C%5B8.721%2C49.41705%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "format=csv&" + 
                    "keys=highway&" + 
                    "values=platform")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.710690123575056 49.4070721212666, 8.706 49.408 ) and LINESTRING ( 8.721 49.41705, 8.704561 49.403252 ) [ (8.709413269053567, 49.407324729995814, NaN) ]"))
                .body("'path'", containsString("/elements/perimeter/groupBy/boundary"));
    }
    
    
    @Test
    public void test_110_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/density/groupBy/type?" + 
                    "bcircles=w%3A8.7030%2C49.43846%2C5%7CX%3A8.7403%2C49.4244%2C7%7CV%3A8.734%2C49.4253%2C8%7CeMmlo%3A8.717378%2C49.431%2C933977543&" + 
                    "filter=turn%21%3D*&" + 
                    "format=json")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El ángulo 6.242.454.354.248.865.800 es demasiado grande."))
                .body("'path'", containsString("/elements/perimeter/density/groupBy/type"));
    }
    
    
    @Test
    public void test_111_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/density/groupBy/type?" + 
                    "bpolys=d%3A8.704561%2C49.403252%2C8.7184%2C49.4190%2C8.708%2C49.412%2C8.7299%2C49.424%2C8.704561%2C49.403252%7CO%3A8.704561%2C49.403252%2C8.74289%2C49.4297%2C8.703%2C49.4399%2C8.706884%2C49.4030%2C8.704561%2C49.403252%7CcSMgt%3A8.704561%2C49.403252%2C8.7049%2C49.4242%2C8.7028%2C49.405%2C8.71373%2C49.409%2C8.704561%2C49.403252&" + 
                    "keys=highway&" + 
                    "time=2011-06-30&" + 
                    "timeout=76&" + 
                    "values=living_street")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.7184 49.419 ) and LINESTRING ( 8.706884 49.403, 8.704561 49.403252 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/perimeter/density/groupBy/type"));
    }
    
    
    @Test
    public void test_112_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/density/groupBy/type?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22cvlzR%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.749199%2C49.422031%5D%2C%5B8.704578%2C49.424%5D%2C%5B8.708%2C49.43787%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22e%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.717%2C49.419%5D%2C%5B8.721%2C49.400%5D%2C%5B8.702%2C49.407%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22lfz%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.737%2C49.428%5D%2C%5B8.7030%2C49.425%5D%2C%5B8.706865%2C49.43434%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=foot%21%3D*+or+not+type%3Away+or+id%3A%281+..+9999%29&" + 
                    "format=geojson&" + 
                    "showMetadata=no")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.70675438514779 49.42533126927774, 8.704865326523798 49.42516458763445 ) and LINESTRING ( 8.706751612289017 49.43281005331638, 8.706093722910666 49.423933115384884 ) [ (8.706193676519884, 49.42528179498704, NaN) ]"))
                .body("'path'", containsString("/elements/perimeter/density/groupBy/type"));
    }
    
    
    @Test
    public void test_113_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/density/groupBy/type?" + 
                    "bcircles=np%3A8.700%2C49.408467%2C577809428&" + 
                    "filter=landuse%3D*&" + 
                    "timeout=32")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El ángulo 133.439.098.656.368.288 es demasiado grande."))
                .body("'path'", containsString("/elements/perimeter/density/groupBy/type"));
    }
    
    
    @Test
    public void test_114_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/density/groupBy/type?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22D%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.716%2C49.423%5D%2C%5B8.704%2C49.400625%5D%2C%5B8.725%2C49.409%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=source%3Amaxspeed%3D*+or+geometry%3Aline+or+id%3A%281+..+9999%29&" + 
                    "time=2008-09-22&" + 
                    "timeout=62")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.716 49.423, 8.704 49.400625 ) and LINESTRING ( 8.725 49.409, 8.704561 49.403252 ) [ (8.705559492116098, 49.40353280300814, NaN) ]"))
                .body("'path'", containsString("/elements/perimeter/density/groupBy/type"));
    }
    
    
    @Test
    public void test_115_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/density/groupBy/type?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22Ww%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7208%2C49.421084%5D%2C%5B8.705%2C49.439131%5D%2C%5B8.722%2C49.401133%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22NaTiB%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.703%2C49.4398%5D%2C%5B8.700%2C49.421%5D%2C%5B8.7063%2C49.428%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22u%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7442%2C49.406420%5D%2C%5B8.7435%2C49.422%5D%2C%5B8.7046%2C49.431250%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=ref%3D*&" + 
                    "time=2014-02-24&" + 
                    "timeout=64")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.7208 49.421084 ) and LINESTRING ( 8.705 49.439131, 8.722 49.401133 ) [ (8.715619270759221, 49.41539505586418, NaN) ]"))
                .body("'path'", containsString("/elements/perimeter/density/groupBy/type"));
    }
    
    
    @Test
    public void test_116_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/density/groupBy/tag?" + 
                    "bcircles=hOhMo%3A8.713911%2C49.412%2C6%7CNac%3A8.730%2C49.434%2C6%7CdesWr%3A8.743130%2C49.429%2C22%7CqsLQ%3A8.701%2C49.433%2C293465449&" + 
                    "filter=source%3Amaxspeed%3D*+and+not+type%3Arelation+or+not+id%3A%281+..+9999%29&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=roof%2Cship%2Cfootway&" + 
                    "showMetadata=true&" + 
                    "time=2014-09-27&" + 
                    "timeout=66")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El ángulo 592.827.313.064.266 es demasiado grande."))
                .body("'path'", containsString("/elements/perimeter/density/groupBy/tag"));
    }
    
    
    @Test
    public void test_117_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/density/groupBy/tag?" + 
                    "bpolys=ju%3A8.704561%2C49.403252%2C8.747%2C49.417824%2C8.703%2C49.43050%2C8.704%2C49.422%2C8.704561%2C49.403252%7CP%3A8.704561%2C49.403252%2C8.7203%2C49.4103%2C8.7041%2C49.437%2C8.73457%2C49.4087%2C8.704561%2C49.403252%7CYKlda%3A8.704561%2C49.403252%2C8.7126%2C49.429%2C8.7006%2C49.408%2C8.746%2C49.4004%2C8.704561%2C49.403252&" + 
                    "groupByKey=highway&" + 
                    "keys=highway&" + 
                    "time=2016-03-10&" + 
                    "timeout=97")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.747 49.417824 ) and LINESTRING ( 8.704561 49.403252, 8.7126 49.429 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/perimeter/density/groupBy/tag"));
    }
    
    
    @Test
    public void test_118_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/density/groupBy/tag?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22nS%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.739%2C49.40712%5D%2C%5B8.701%2C49.429%5D%2C%5B8.72558%2C49.419%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22k%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.70275%2C49.411%5D%2C%5B8.714995%2C49.423%5D%2C%5B8.7042%2C49.419%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22fk%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7368%2C49.423%5D%2C%5B8.724%2C49.40010%5D%2C%5B8.7136%2C49.4024%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "groupByKey=highway&" + 
                    "keys=highway&" + 
                    "timeout=100")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.70275 49.411, 8.713672080335883 49.42170354953292 ) and LINESTRING ( 8.7042 49.419, 8.704561 49.403252 ) [ (8.70434750069307, 49.412565537633064, NaN) ]"))
                .body("'path'", containsString("/elements/perimeter/density/groupBy/tag"));
    }
    
    
    @Test
    public void test_119_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/density/groupBy/tag?" + 
                    "bcircles=txd%3A8.71829%2C49.406%2C8%7CpoNFS%3A8.738%2C49.405%2C7%7CYE%3A8.7231%2C49.405%2C2%7CLYvc%3A8.7009%2C49.435%2C433477125&" + 
                    "format=json&" + 
                    "groupByKey=building&" + 
                    "groupByValues=tower%2Csecondary_link%2Cdemolished&" + 
                    "keys=highway&" + 
                    "time=2010-02-23&" + 
                    "timeout=45")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El ángulo 13.443.662.147.757.486 es demasiado grande."))
                .body("'path'", containsString("/elements/perimeter/density/groupBy/tag"));
    }
    
    
    @Test
    public void test_120_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/density/groupBy/tag?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22c%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.739816%2C49.4337%5D%2C%5B8.72926%2C49.400%5D%2C%5B8.70484%2C49.437087%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=street_lamp%2Cturning_circle%2Csecondary_link&" + 
                    "keys=highway&" + 
                    "time=2015-04-20&" + 
                    "timeout=81&" + 
                    "values=service")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.739816 49.4337 ) and LINESTRING ( 8.72926 49.4, 8.70484 49.437087 ) [ (8.718941132916326, 49.41567140964505, NaN) ]"))
                .body("'path'", containsString("/elements/perimeter/density/groupBy/tag"));
    }
    
    
    @Test
    public void test_121_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/density/groupBy/tag?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22hk%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.745%2C49.416%5D%2C%5B8.70434%2C49.4377%5D%2C%5B8.708054%2C49.401924%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22Q%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.71464%2C49.402%5D%2C%5B8.741%2C49.410%5D%2C%5B8.719%2C49.401772%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "format=json&" + 
                    "groupByKey=building&" + 
                    "groupByValues=residential%2Csecondary_link%2Cpath&" + 
                    "keys=highway&" + 
                    "showMetadata=true&" + 
                    "timeout=84")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.71464 49.402, 8.741 49.41 ) and LINESTRING ( 8.719 49.401772, 8.707952222204995 49.40290439913683 ) [ (8.715179177289862, 49.402163634989336, NaN) ]"))
                .body("'path'", containsString("/elements/perimeter/density/groupBy/tag"));
    }
    
    
    @Test
    public void test_122_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/density/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=NvmBv%3A8.706%2C49.411%2C4%7CLYeUB%3A8.745%2C49.421343%2C9&" + 
                    "format=geojson&" + 
                    "groupByKey=highway&" + 
                    "keys=highway&" + 
                    "timeout=81&" + 
                    "values=tertiary")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/utils/GroupByBoundaryGeoJsonGenerator_75_generateGroupByResultGeoJson
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Index 0 out of bounds for length 0"))
                .body("'path'", containsString("/elements/perimeter/density/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_123_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/density/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22eg%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.745%2C49.433%5D%2C%5B8.701%2C49.404306%5D%2C%5B8.70508%2C49.408%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "groupByKey=highway&" + 
                    "showMetadata=false&" + 
                    "timeout=44")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.745 49.433, 8.701 49.404306 ) and LINESTRING ( 8.70508 49.408, 8.704561 49.403252 ) [ (8.70495838321956, 49.406887405638685, NaN) ]"))
                .body("'path'", containsString("/elements/perimeter/density/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_124_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/density/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=8.73711%2C49.406%2C1%7C8.716%2C49.401%2C50605705&" + 
                    "filter=oneway%21%3D*+and+not+length%3A%28+..+100%29&" + 
                    "format=evomaster_6277_input&" + 
                    "groupByKey=evomaster_6279_input&" + 
                    "groupByValues=foo&" + 
                    "keys=boo&" + 
                    "time=foo&" + 
                    "timeout=37&" + 
                    "types=foo")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 34.83808275748474 4.540710550202685E8, -23.32687143122082 -9.866007769082463E7 ) and LINESTRING ( 124.35068592431813 -9.932095979448584E7, -36.285735242251285 4.570485591980834E8 ) [ (16.06933845075128, 2.7571504245351064E8, NaN) ]"))
                .body("'path'", containsString("/elements/perimeter/density/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_125_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/density/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=8.73711%2C49.406%2C1%7C8.716%2C49.401%2C506057056&" + 
                    "filter=oneway%21%3D*+and+not+length%3A%28+..+100%29&" + 
                    "format=csv&" + 
                    "groupByKey=building&" + 
                    "timeout=37")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El ángulo 46.137.292.827.497.680 es demasiado grande."))
                .body("'path'", containsString("/elements/perimeter/density/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_126_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/density/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=8.739692%2C49.419114%2C4%7C8.739%2C49.430%2C25&" + 
                    "filter=natural%3Dwood+or+not+geometry%3Apoint+and+id%3A%281+..+9999%29&" + 
                    "format=geojson&" + 
                    "groupByKey=highway&" + 
                    "time=2014-07-01&" + 
                    "timeout=47")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/utils/GroupByBoundaryGeoJsonGenerator_75_generateGroupByResultGeoJson
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Index 0 out of bounds for length 0"))
                .body("'path'", containsString("/elements/perimeter/density/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_127_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/density/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22S%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7015%2C49.4200%5D%2C%5B8.740%2C49.4376%5D%2C%5B8.7021%2C49.4036%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "format=json&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=university%2Cconstruction%2Chouse&" + 
                    "keys=highway&" + 
                    "time=2007-10-26&" + 
                    "timeout=42&" + 
                    "values=street_lamp")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.7015 49.42 ) and LINESTRING ( 8.74 49.4376, 8.7021 49.4036 ) [ (8.704159688488396, 49.405447741651855, NaN) ]"))
                .body("'path'", containsString("/elements/perimeter/density/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_128_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/density/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22S%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7123%2C49.4292%5D%2C%5B8.710330%2C49.438751%5D%2C%5B8.704%2C49.434818%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22Rrtxx%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7345%2C49.418%5D%2C%5B8.705%2C49.411%5D%2C%5B8.736115%2C49.422%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22iNmdT%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.717%2C49.4110%5D%2C%5B8.701841%2C49.436%5D%2C%5B8.707%2C49.4362%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "format=csv&" + 
                    "groupByKey=building&" + 
                    "groupByValues=residential%2Cturning_circle%2Cstop_line&" + 
                    "keys=highway&" + 
                    "timeout=89&" + 
                    "values=elevator")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.710211100355943 49.42219615351286, 8.704043549426984 49.43236758785707 ) and LINESTRING ( 8.707 49.4362, 8.704561 49.403252 ) [ (8.706425508196928, 49.428439296462614, NaN) ]"))
                .body("'path'", containsString("/elements/perimeter/density/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_129_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/density/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=heDF%3A8.728966%2C49.421%2C748264063&" + 
                    "filter=addr%3Ahousenumber%21%3D*+or+length%3A%28+..+100%29&" + 
                    "format=geojson&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=tower%2Cunclassified%2Coffice&" + 
                    "time=2012-09-10")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El ángulo 1.057.732.221.027.620.220 es demasiado grande."))
                .body("'path'", containsString("/elements/perimeter/density/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_130_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/density/groupBy/boundary?" + 
                    "bcircles=8.7468%2C49.42785%2C6%7C8.723%2C49.4351%2C5721052480%7C8.71153%2C49.422%2C82%7C8.707%2C49.436%2C83&" + 
                    "format=geojson&" + 
                    "keys=highway&" + 
                    "time=2010-08-14&" + 
                    "timeout=88&" + 
                    "values=stop_line")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El ángulo 12.383.354.031.660.098.000.000.000 es demasiado grande."))
                .body("'path'", containsString("/elements/perimeter/density/groupBy/boundary"));
    }
    
    
    @Test
    public void test_131_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/density/groupBy/boundary?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22NeJGz%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.704%2C49.411%5D%2C%5B8.705%2C49.4120%5D%2C%5B8.704560%2C49.424978%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "keys=highway&" + 
                    "timeout=84&" + 
                    "values=residential")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704 49.411, 8.705 49.412 ) and LINESTRING ( 8.70456 49.424978, 8.704561 49.403252 ) [ (8.704560617572605, 49.411560617572604, NaN) ]"))
                .body("'path'", containsString("/elements/perimeter/density/groupBy/boundary"));
    }
    
    
    @Test
    public void test_132_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/density/groupBy/boundary?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22ARpT%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.736%2C49.408%5D%2C%5B8.705%2C49.41515%5D%2C%5B8.709%2C49.426%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22i%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.723%2C49.425%5D%2C%5B8.70452%2C49.425%5D%2C%5B8.740%2C49.404176%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22RiDwH%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.731%2C49.419623%5D%2C%5B8.7402%2C49.408%5D%2C%5B8.704%2C49.417%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "format=csv&" + 
                    "keys=highway&" + 
                    "showMetadata=true&" + 
                    "time=2015-11-28&" + 
                    "timeout=79")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.713070494611934 49.413288579468535, 8.723 49.425 ) and LINESTRING ( 8.708364543182078 49.422743552220304, 8.731856283283395 49.408955728210444 ) [ (8.716859571651321, 49.41775763133971, NaN) ]"))
                .body("'path'", containsString("/elements/perimeter/density/groupBy/boundary"));
    }
    
    
    @Test
    public void test_133_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/density/groupBy/boundary?" + 
                    "bcircles=8.717%2C49.410239%2C5%7C8.701%2C49.401%2C2%7C8.72337%2C49.426%2C7%7C8.746%2C49.41543%2C2400681407&" + 
                    "keys=highway&" + 
                    "time=2011-05-19&" + 
                    "timeout=31")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El ángulo 11.866.106.643.049.343.000.000 es demasiado grande."))
                .body("'path'", containsString("/elements/perimeter/density/groupBy/boundary"));
    }
    
    
    @Test
    public void test_134_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/density/groupBy/boundary?" + 
                    "bpolys=R%3A8.704561%2C49.403252%2C8.7408%2C49.4277%2C8.7002%2C49.404%2C8.705%2C49.428%2C8.704561%2C49.403252&" + 
                    "format=csv&" + 
                    "keys=highway&" + 
                    "showMetadata=false&" + 
                    "time=2011-09-10&" + 
                    "timeout=87&" + 
                    "values=unclassified")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.7408 49.4277, 8.7002 49.404 ) and LINESTRING ( 8.705 49.428, 8.704561 49.403252 ) [ (8.704620037762812, 49.406580169827066, NaN) ]"))
                .body("'path'", containsString("/elements/perimeter/density/groupBy/boundary"));
    }
    
    
    @Test
    public void test_135_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/density/groupBy/boundary?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22oxykS%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.745%2C49.436289%5D%2C%5B8.736%2C49.430%5D%2C%5B8.707319%2C49.422%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22iu%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.73622%2C49.433%5D%2C%5B8.71079%2C49.4022%5D%2C%5B8.736%2C49.4211%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22RnEy%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.741%2C49.414%5D%2C%5B8.704555%2C49.428188%5D%2C%5B8.710034%2C49.411%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=destination%3D*+and+length%3A%28+..+100%29&" + 
                    "format=geojson&" + 
                    "showMetadata=no&" + 
                    "timeout=31")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.726367615646472 49.421067108215155, 8.71079 49.4022 ) and LINESTRING ( 8.736 49.4211, 8.704561 49.403252 ) [ (8.71792048324903, 49.410836212507675, NaN) ]"))
                .body("'path'", containsString("/elements/perimeter/density/groupBy/boundary"));
    }
    
    
    @Test
    public void test_136_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/density?" + 
                    "bcircles=Av%3A8.73148%2C49.400%2C1%7Cv%3A8.707%2C49.427462%2C3%7CAI%3A8.702%2C49.430%2C4%7Cjv%3A8.739%2C49.419%2C2134370618&" + 
                    "time=2009-03-19")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El ángulo 4.634.864.997.850.188.000.000 es demasiado grande."))
                .body("'path'", containsString("/elements/perimeter/density"));
    }
    
    
    @Test
    public void test_137_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/density?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22zANyt%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7072%2C49.42149%5D%2C%5B8.70200%2C49.427%5D%2C%5B8.707%2C49.414%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22b%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7037%2C49.4178%5D%2C%5B8.702%2C49.4202%5D%2C%5B8.727%2C49.4217%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "showMetadata=no&" + 
                    "time=2017-07-28&" + 
                    "timeout=36")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.707057246098655 49.42050343476592 ) and LINESTRING ( 8.704556390977444 49.42035338345865, 8.707 49.414 ) [ (8.706357812935767, 49.415669686367, NaN) ]"))
                .body("'path'", containsString("/elements/perimeter/density"));
    }
    
    
    @Test
    public void test_138_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/density?" + 
                    "bcircles=oQPhS%3A8.7345%2C49.4364%2C17%7Cr%3A8.712%2C49.416%2C4%7CHoSKJ%3A8.718923%2C49.4266%2C2%7CMD%3A8.704%2C49.427%2C9141163715&" + 
                    "format=geojson&" + 
                    "keys=highway&" + 
                    "time=2014-01-04&" + 
                    "timeout=41&" + 
                    "values=footway")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El ángulo 525.390.929.513.588.600.000.000.000 es demasiado grande."))
                .body("'path'", containsString("/elements/perimeter/density"));
    }
    
    
    @Test
    public void test_139_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/density?" + 
                    "bpolys=8.704561%2C49.403252%2C8.727%2C49.439%2C8.707%2C49.43767%2C8.735%2C49.40165%2C8.704561%2C49.403252&" + 
                    "filter=type%21%3D*+or+geometry%3Apoint+and+length%3A%28+..+100%29&" + 
                    "showMetadata=yes&" + 
                    "time=2016-09-01&" + 
                    "timeout=41")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.727 49.439 ) and LINESTRING ( 8.707 49.43767, 8.735 49.40165 ) [ (8.717603186923645, 49.42402975739322, NaN) ]"))
                .body("'path'", containsString("/elements/perimeter/density"));
    }
    
    
    @Test
    public void test_140_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/density?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22xA%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.707074%2C49.402211%5D%2C%5B8.701%2C49.426911%5D%2C%5B8.7131%2C49.43964%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22VIIqx%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.732%2C49.437492%5D%2C%5B8.704%2C49.410%5D%2C%5B8.704563%2C49.4054%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22mu%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7299%2C49.406420%5D%2C%5B8.710223%2C49.439%5D%2C%5B8.7152%2C49.420%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=destination%3D*&" + 
                    "showMetadata=true&" + 
                    "time=2013-09-12&" + 
                    "timeout=33")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.706188123023484 49.40581343024695, 8.701 49.426911 ) and LINESTRING ( 8.711661307745063 49.43350917276347, 8.704561 49.403252 ) [ (8.705663095973804, 49.40794845957311, NaN) ]"))
                .body("'path'", containsString("/elements/perimeter/density"));
    }
    
    
    @Test
    public void test_141_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter?" + 
                    "bcircles=8.7469%2C49.401%2C9%7C8.70117%2C49.433%2C9901518930%7C8.73339%2C49.439%2C4%7C8.7365%2C49.436212%2C545291252&" + 
                    "showMetadata=yes&" + 
                    "time=2012-12-11&" + 
                    "timeout=47")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El ángulo 996.567.920.432.222.500.000.000.000 es demasiado grande."))
                .body("'path'", containsString("/elements/perimeter"));
    }
    
    
    @Test
    public void test_142_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22Jn%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.740%2C49.4309%5D%2C%5B8.73628%2C49.4094%5D%2C%5B8.702%2C49.438%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "keys=highway&" + 
                    "time=2015-03-11&" + 
                    "timeout=42")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.74 49.4309 ) and LINESTRING ( 8.73628 49.4094, 8.702 49.438 ) [ (8.724760496425473, 49.419010787696365, NaN) ]"))
                .body("'path'", containsString("/elements/perimeter"));
    }
    
    
    @Test
    public void test_143_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22oMr%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.721%2C49.41822%5D%2C%5B8.74964%2C49.403%5D%2C%5B8.749%2C49.402559%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22Ff%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.732%2C49.427%5D%2C%5B8.700%2C49.4214%5D%2C%5B8.711%2C49.403230%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "keys=highway&" + 
                    "showMetadata=false&" + 
                    "time=2014-08-01&" + 
                    "values=residential")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.721529968893321 49.41793836150292 ) and LINESTRING ( 8.708703336477646 49.407023670563746, 8.711 49.40323 ) [ (8.708777442399139, 49.40690126105524, NaN) ]"))
                .body("'path'", containsString("/elements/perimeter"));
    }
    
    
    @Test
    public void test_144_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter?" + 
                    "bcircles=8.702170%2C49.42040%2C8%7C8.742%2C49.405582%2C47%7C8.70944%2C49.431717%2C8%7C8.7097%2C49.40141%2C722273155074&" + 
                    "keys=highway&" + 
                    "showMetadata=yes&" + 
                    "timeout=63&" + 
                    "values=pedestrian")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El ángulo 794.871.303.692.448.900.000.000.000.000.000.000.000.000 es demasiado grande."))
                .body("'path'", containsString("/elements/perimeter"));
    }
    
    
    @Test
    public void test_145_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter?" + 
                    "bpolys=b%3A8.704561%2C49.403252%2C8.717%2C49.4118%2C8.704%2C49.43300%2C8.730%2C49.408%2C8.704561%2C49.403252%7Cqn%3A8.704561%2C49.403252%2C8.731%2C49.431%2C8.7235%2C49.4121%2C8.7000%2C49.4283%2C8.704561%2C49.403252&" + 
                    "keys=highway&" + 
                    "time=2009-08-11&" + 
                    "timeout=72&" + 
                    "values=primary_link")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.717 49.4118 ) and LINESTRING ( 8.73 49.408, 8.704561 49.403252 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/perimeter"));
    }
    
    
    @Test
    public void test_146_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22t%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7396%2C49.428%5D%2C%5B8.7450%2C49.414%5D%2C%5B8.7045%2C49.4116%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22P%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7309%2C49.4202%5D%2C%5B8.7415%2C49.42266%5D%2C%5B8.704935%2C49.41052%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22tCd%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.731%2C49.4216%5D%2C%5B8.705%2C49.426%5D%2C%5B8.701%2C49.404%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "keys=highway&" + 
                    "showMetadata=true&" + 
                    "time=2009-02-11")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.730627846657729 49.42166297979638 ) and LINESTRING ( 8.717719043482408 49.41238335072488, 8.7045 49.4116 ) [ (8.717468427807258, 49.41236849942561, NaN) ]"))
                .body("'path'", containsString("/elements/perimeter"));
    }
    
    
    @Test
    public void test_147_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/ratio/groupBy/boundary?" + 
                    "bcircles=joeby%3A8.707%2C49.409%2C5%7Cb%3A8.727%2C49.401%2C276637649%7CbN%3A8.73357%2C49.408%2C69&" + 
                    "filter=turn%21%3D*+and+area%3A%281.0+..+1E6%29&" + 
                    "filter2=maxspeed%21%3D*+or+id%3A%281+..+9999%29&" + 
                    "keys2=highway&" + 
                    "time=2016-11-14&" + 
                    "timeout=26&" + 
                    "types2=point%2Cline%2Cother")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El ángulo 367.707.242.016.335,56 es demasiado grande."))
                .body("'path'", containsString("/elements/length/ratio/groupBy/boundary"));
    }
    
    
    @Test
    public void test_148_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/ratio/groupBy/boundary?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22BfR%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.705453%2C49.4311%5D%2C%5B8.719%2C49.400580%5D%2C%5B8.7426%2C49.42817%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter2=oneway%3D*+and+not+geometry%3Apoint+and+not+area%3A%281.0+..+1E6%29&" + 
                    "keys=highway&" + 
                    "showMetadata=no&" + 
                    "time=2018-01-22&" + 
                    "timeout=22")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.705453 49.4311, 8.719 49.40058 ) and LINESTRING ( 8.7426 49.42817, 8.704561 49.403252 ) [ (8.714828529580087, 49.409977894531316, NaN) ]"))
                .body("'path'", containsString("/elements/length/ratio/groupBy/boundary"));
    }
    
    
    @Test
    public void test_149_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/ratio/groupBy/boundary?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22Tk%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.703%2C49.4014%5D%2C%5B8.707%2C49.437860%5D%2C%5B8.702%2C49.4198%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22JKh%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.709%2C49.414%5D%2C%5B8.70853%2C49.4371%5D%2C%5B8.712%2C49.434%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22eT%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.728%2C49.400%5D%2C%5B8.7274%2C49.438123%5D%2C%5B8.7214%2C49.414%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=smoothness%3D*+or+type%3Away+and+id%3A%281+..+9999%29&" + 
                    "filter2=lanes%3D*+or+id%3A%281+..+9999%29&" + 
                    "format=json&" + 
                    "keys2=highway&" + 
                    "time=2015-02-20&" + 
                    "timeout=78")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.703 49.4014, 8.707 49.43786 ) and LINESTRING ( 8.702 49.4198, 8.704561 49.403252 ) [ (8.703766438677498, 49.4083860885454, NaN) ]"))
                .body("'path'", containsString("/elements/length/ratio/groupBy/boundary"));
    }
    
    
    @Test
    public void test_150_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/ratio/groupBy/boundary?" + 
                    "bcircles=rSkLh%3A8.700%2C49.433%2C6%7CN%3A8.71446%2C49.4218%2C5%7CK%3A8.713%2C49.401%2C11%7Cpy%3A8.726674%2C49.437%2C77284919695&" + 
                    "filter2=highway+in+%28secondary%2Cpath%2Cunclassified%2Ctrack%2Cprimary%2Cresidential%2Ccycleway%2Cservice%2Cfootway%29+or+geometry%3Aline+and+length%3A%28+..+100%29&" + 
                    "keys=highway&" + 
                    "keys2=highway&" + 
                    "time=2015-12-09&" + 
                    "timeout=57&" + 
                    "types2=line%2Cpolygon%2C")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El ángulo 13.738.308.280.355.830.000.000.000.000.000.000 es demasiado grande."))
                .body("'path'", containsString("/elements/length/ratio/groupBy/boundary"));
    }
    
    
    @Test
    public void test_151_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/ratio/groupBy/boundary?" + 
                    "bpolys=8.704561%2C49.403252%2C8.7176%2C49.437%2C8.7071%2C49.425%2C8.719956%2C49.427%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.70074%2C49.4252%2C8.732%2C49.430558%2C8.729%2C49.416665%2C8.704561%2C49.403252&" + 
                    "filter=highway%3D*+or+id%3A%281+..+9999%29&" + 
                    "keys2=highway&" + 
                    "time=2009-12-01&" + 
                    "timeout=53&" + 
                    "values2=unclassified")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.7176 49.437 ) and LINESTRING ( 8.704561 49.403252, 8.70074 49.4252 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/length/ratio/groupBy/boundary"));
    }
    
    
    @Test
    public void test_152_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/ratio/groupBy/boundary?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22QOvvI%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.736%2C49.415%5D%2C%5B8.703%2C49.4306%5D%2C%5B8.7065%2C49.4057%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22Gt%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.748%2C49.4352%5D%2C%5B8.712%2C49.4230%5D%2C%5B8.70451%2C49.430%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22IepP%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.715695%2C49.424%5D%2C%5B8.731%2C49.400309%5D%2C%5B8.707%2C49.437%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter2=highway+in+%28secondary%2Cpath%2Cunclassified%2Ctrack%2Cprimary%2Cresidential%2Ccycleway%2Cservice%2Cfootway%29+or+type%3Away&" + 
                    "format=json&" + 
                    "keys=highway&" + 
                    "keys2=highway&" + 
                    "showMetadata=false&" + 
                    "timeout=77&" + 
                    "types2=point%2Cother&" + 
                    "values2=footway")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.715695 49.424 ) and LINESTRING ( 8.721112423545971 49.41542504448645, 8.715403173871334 49.424153297811955 ) [ (8.715608673353913, 49.423839131915486, NaN) ]"))
                .body("'path'", containsString("/elements/length/ratio/groupBy/boundary"));
    }
    
    
    @Test
    public void test_153_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/ratio?" + 
                    "bcircles=v%3A8.73348%2C49.428%2C6%7CeJriR%3A8.7280%2C49.407%2C7124845509%7CO%3A8.705%2C49.439%2C5&" + 
                    "filter=destination%21%3D*+and+type%3Arelation+or+not+area%3A%281.0+..+1E6%29&" + 
                    "format=json&" + 
                    "keys2=highway&" + 
                    "timeout=24")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El ángulo 71.329.181.997.849.080.000.000.000 es demasiado grande."))
                .body("'path'", containsString("/elements/length/ratio"));
    }
    
    
    @Test
    public void test_154_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/ratio?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22Gq%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.703633%2C49.432%5D%2C%5B8.7042%2C49.414473%5D%2C%5B8.70345%2C49.421%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22oTzO%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.733%2C49.408%5D%2C%5B8.70557%2C49.4190%5D%2C%5B8.732%2C49.40232%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22CzvZR%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.719%2C49.420%5D%2C%5B8.7009%2C49.420757%5D%2C%5B8.730%2C49.407%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter2=highway%21%3D*+or+not+id%3A%281+..+9999%29&" + 
                    "format=geojson&" + 
                    "time=2014-11-15&" + 
                    "timeout=83")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.719 49.42 ) and LINESTRING ( 8.704044807077459 49.419270295155854, 8.73 49.407 ) [ (8.714222677186443, 49.41445871580571, NaN) ]"))
                .body("'path'", containsString("/elements/length/ratio"));
    }
    
    
    @Test
    public void test_155_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/ratio?" + 
                    "bpolys=X%3A8.704561%2C49.403252%2C8.716%2C49.406%2C8.709%2C49.403%2C8.703691%2C49.415%2C8.704561%2C49.403252&" + 
                    "filter=foot%21%3D*+or+length%3A%28+..+100%29&" + 
                    "filter2=foot%21%3D*+and+geometry%3Apolygon+and+not+area%3A%281.0+..+1E6%29&" + 
                    "format=csv&" + 
                    "showMetadata=false&" + 
                    "time=2012-11-10&" + 
                    "timeout=83&" + 
                    "types2=line%2Cpolygon%2C")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.716 49.406 ) and LINESTRING ( 8.709 49.403, 8.703691 49.415 ) [ (8.708472760824955, 49.404191725390945, NaN) ]"))
                .body("'path'", containsString("/elements/length/ratio"));
    }
    
    
    @Test
    public void test_156_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/ratio?" + 
                    "bcircles=QiH%3A8.723341%2C49.416016%2C638%7CwT%3A8.743039%2C49.4115%2C64%7CfjhD%3A8.7115%2C49.409%2C5%7CgL%3A8.707148%2C49.4298%2C91693134038&" + 
                    "filter=oneway%21%3D*+or+type%3Arelation+or+length%3A%28+..+100%29&" + 
                    "filter2=foot%3D*+and+not+area%3A%281.0+..+1E6%29&" + 
                    "keys2=highway&" + 
                    "showMetadata=true&" + 
                    "time=2008-09-03&" + 
                    "timeout=23")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El ángulo 53.872.661.164.965.090.000.000.000.000.000.000 es demasiado grande."))
                .body("'path'", containsString("/elements/length/ratio"));
    }
    
    
    @Test
    public void test_157_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/ratio?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22L%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7216%2C49.424%5D%2C%5B8.740364%2C49.406%5D%2C%5B8.701%2C49.41529%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "showMetadata=true&" + 
                    "time=2017-02-20&" + 
                    "timeout=98&" + 
                    "types2=other")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.7216 49.424 ) and LINESTRING ( 8.740364 49.406, 8.701 49.41529 ) [ (8.71226393250001, 49.41263168445978, NaN) ]"))
                .body("'path'", containsString("/elements/length/ratio"));
    }
    
    
    @Test
    public void test_158_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/ratio?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22mE%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.725%2C49.439%5D%2C%5B8.7192%2C49.435%5D%2C%5B8.7263%2C49.410%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22q%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.703%2C49.413%5D%2C%5B8.701%2C49.438%5D%2C%5B8.702395%2C49.4223%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22vaNE%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.700%2C49.4139%5D%2C%5B8.73531%2C49.414%5D%2C%5B8.745%2C49.426%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=name%21%3D*+or+geometry%3Aline+and+id%3A%281+..+9999%29&" + 
                    "filter2=highway%21%3D*&" + 
                    "format=json&" + 
                    "keys2=highway&" + 
                    "time=2008-03-29&" + 
                    "values2=turning_circle")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.725 49.439 ) and LINESTRING ( 8.7192 49.435, 8.7263 49.41 ) [ (8.720365862441485, 49.43089485055816, NaN) ]"))
                .body("'path'", containsString("/elements/length/ratio"));
    }
    
    
    @Test
    public void test_159_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/type?" + 
                    "bcircles=w%3A8.72834%2C49.401%2C448407948&" + 
                    "filter=maxspeed%21%3D*+and+not+geometry%3Aline+and+area%3A%281.0+..+1E6%29&" + 
                    "format=json&" + 
                    "time=2009-04-21")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El ángulo 17.531.276.969.743.708 es demasiado grande."))
                .body("'path'", containsString("/elements/length/groupBy/type"));
    }
    
    
    @Test
    public void test_160_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/type?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22KVDwb%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.735%2C49.429%5D%2C%5B8.707%2C49.407%5D%2C%5B8.746%2C49.4358%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "format=csv&" + 
                    "keys=highway&" + 
                    "showMetadata=yes&" + 
                    "timeout=53&" + 
                    "values=give_way")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.735 49.429 ) and LINESTRING ( 8.707 49.407, 8.746 49.4358 ) [ (8.72268393962771, 49.41858198618662, NaN) ]"))
                .body("'path'", containsString("/elements/length/groupBy/type"));
    }
    
    
    @Test
    public void test_161_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/type?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22I%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.74503%2C49.409%5D%2C%5B8.732574%2C49.428%5D%2C%5B8.749%2C49.412%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22aJ%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7275%2C49.424414%5D%2C%5B8.739%2C49.435%5D%2C%5B8.740%2C49.408%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22O%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.735713%2C49.400%5D%2C%5B8.7045%2C49.4317%5D%2C%5B8.704%2C49.421%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "keys=highway&" + 
                    "time=2016-08-09&" + 
                    "timeout=76&" + 
                    "values=bus_stop")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.74503 49.409, 8.739659559045986 49.417191905758365 ) and LINESTRING ( 8.749 49.412, 8.739918067252965 49.410212184169964 ) [ (8.743741845892837, 49.41096491072865, NaN) ]"))
                .body("'path'", containsString("/elements/length/groupBy/type"));
    }
    
    
    @Test
    public void test_162_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/groupBy/type?" + 
                    "bcircles=8.742%2C49.416%2C8%7C8.72873%2C49.407%2C868%7C8.712%2C49.434%2C59%7C8.7341%2C49.439148%2C829097046&" + 
                    "filter=building%3D*+and+not+geometry%3Apolygon+and+id%3A%281+..+9999%29&" + 
                    "timeout=43")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El ángulo 2.410.272.726.051.169.800 es demasiado grande."))
                .body("'path'", containsString("/elements/length/groupBy/type"));
    }
    
    
    @Test
    public void test_163_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/groupBy/type?" + 
                    "bpolys=8.704561%2C49.403252%2C8.716%2C49.401%2C8.709%2C49.423%2C8.729%2C49.4044%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.7421%2C49.419%2C8.714%2C49.407187%2C8.73968%2C49.408%2C8.704561%2C49.403252&" + 
                    "format=json&" + 
                    "keys=highway&" + 
                    "showMetadata=yes&" + 
                    "time=2012-11-30&" + 
                    "timeout=96&" + 
                    "values=path")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.716 49.401 ) and LINESTRING ( 8.729 49.4044, 8.704561 49.403252 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/length/groupBy/type"));
    }
    
    
    @Test
    public void test_164_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/groupBy/type?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22rfGdU%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7151%2C49.438%5D%2C%5B8.7412%2C49.41233%5D%2C%5B8.701%2C49.4229%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22h%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.73451%2C49.4061%5D%2C%5B8.704585%2C49.416%5D%2C%5B8.7180%2C49.413%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "format=geojson&" + 
                    "keys=highway&" + 
                    "values=steps")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.73451 49.4061, 8.708077053461023 49.414844734193345 ) and LINESTRING ( 8.718 49.413, 8.704561 49.403252 ) [ (8.716638445206062, 49.41201239406717, NaN) ]"))
                .body("'path'", containsString("/elements/length/groupBy/type"));
    }
    
    
    @Test
    public void test_165_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/tag?" + 
                    "bcircles=xlB%3A8.7207%2C49.4291%2C6%7CrfreN%3A8.7309%2C49.422%2C4559310141&" + 
                    "format=json&" + 
                    "groupByKey=highway&" + 
                    "keys=highway&" + 
                    "time=2009-08-18&" + 
                    "timeout=41&" + 
                    "values=emergency_access_point")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El ángulo 2.010.488.045.257.140.500.000.000 es demasiado grande."))
                .body("'path'", containsString("/elements/length/groupBy/tag"));
    }
    
    
    @Test
    public void test_166_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/tag?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22V%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.710%2C49.410209%5D%2C%5B8.724%2C49.437660%5D%2C%5B8.712%2C49.413%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "format=json&" + 
                    "groupByKey=highway&" + 
                    "keys=highway&" + 
                    "showMetadata=false&" + 
                    "timeout=40&" + 
                    "values=pedestrian")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.71 49.410209, 8.724 49.43766 ) and LINESTRING ( 8.712 49.413, 8.704561 49.403252 ) [ (8.710261714433663, 49.41072216592275, NaN) ]"))
                .body("'path'", containsString("/elements/length/groupBy/tag"));
    }
    
    
    @Test
    public void test_167_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/tag?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22cL%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.710%2C49.4095%5D%2C%5B8.704569%2C49.43148%5D%2C%5B8.708%2C49.405946%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22habsr%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7396%2C49.4089%5D%2C%5B8.725%2C49.418563%5D%2C%5B8.7148%2C49.4233%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22vHpmh%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.742099%2C49.4286%5D%2C%5B8.7451%2C49.4285%5D%2C%5B8.737%2C49.425%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "format=geojson&" + 
                    "groupByKey=building&" + 
                    "groupByValues=dormitory%2Ctraffic_mirror&" + 
                    "time=2008-02-21&" + 
                    "timeout=24")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.71 49.4095 ) and LINESTRING ( 8.704569 49.43148, 8.708 49.405946 ) [ (8.707853738149282, 49.407034501922546, NaN) ]"))
                .body("'path'", containsString("/elements/length/groupBy/tag"));
    }
    
    
    @Test
    public void test_168_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/groupBy/tag?" + 
                    "bcircles=rmc%3A8.732%2C49.428%2C3%7CwtoWL%3A8.738917%2C49.415%2C1%7CqS%3A8.7174%2C49.437%2C124851996%7CJi%3A8.7034%2C49.413%2C6&" + 
                    "format=json&" + 
                    "groupByKey=building&" + 
                    "groupByValues=unclassified&" + 
                    "showMetadata=no&" + 
                    "time=2010-08-22&" + 
                    "timeout=49")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El ángulo 635.078.713.417,517 es demasiado grande."))
                .body("'path'", containsString("/elements/length/groupBy/tag"));
    }
    
    
    @Test
    public void test_169_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/groupBy/tag?" + 
                    "bpolys=ch%3A8.704561%2C49.403252%2C8.726698%2C49.42406%2C8.743%2C49.419%2C8.715%2C49.4094%2C8.704561%2C49.403252%7Cqdec%3A8.704561%2C49.403252%2C8.70520%2C49.4086%2C8.729%2C49.428603%2C8.722089%2C49.405%2C8.704561%2C49.403252%7CwzS%3A8.704561%2C49.403252%2C8.73063%2C49.419%2C8.701610%2C49.409036%2C8.727%2C49.40405%2C8.704561%2C49.403252&" + 
                    "format=json&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=stop%2Cdormitory&" + 
                    "time=2009-02-20&" + 
                    "timeout=73")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.726698 49.42406 ) and LINESTRING ( 8.70161 49.409036, 8.727 49.40405 ) [ (8.709141043788017, 49.407557079782315, NaN) ]"))
                .body("'path'", containsString("/elements/length/groupBy/tag"));
    }
    
    
    @Test
    public void test_170_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/groupBy/tag?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22J%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.727%2C49.43517%5D%2C%5B8.728332%2C49.406%5D%2C%5B8.7329%2C49.421%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22deUND%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7342%2C49.408134%5D%2C%5B8.704007%2C49.430%5D%2C%5B8.740245%2C49.425%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=oneway%21%3D*+or+length%3A%28+..+100%29&" + 
                    "groupByKey=building&" + 
                    "showMetadata=no&" + 
                    "time=2009-01-23&" + 
                    "timeout=25")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.728030531647617 49.412601975855104, 8.724070169542673 49.415470100181494 ) and LINESTRING ( 8.727810450125757 49.417421629002774, 8.704561 49.403252 ) [ (8.724316126975006, 49.415291975940264, NaN) ]"))
                .body("'path'", containsString("/elements/length/groupBy/tag"));
    }
    
    
    @Test
    public void test_171_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/key?" + 
                    "bcircles=8.748090%2C49.41723%2C13%7C8.722667%2C49.427%2C119368271&" + 
                    "groupByKeys=network%2Csurface&" + 
                    "showMetadata=yes&" + 
                    "timeout=39")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El ángulo 442.556.496.209,868 es demasiado grande."))
                .body("'path'", containsString("/elements/length/groupBy/key"));
    }
    
    
    @Test
    public void test_172_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/key?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22w%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.718%2C49.4340%5D%2C%5B8.716%2C49.40497%5D%2C%5B8.733%2C49.423%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=foot%3D*+or+type%3Away+or+not+area%3A%281.0+..+1E6%29&" + 
                    "format=csv&" + 
                    "groupByKeys=addr%3Acountry%2Cmaxspeed%2Caddr%3Apostcode&" + 
                    "showMetadata=no&" + 
                    "timeout=69")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.718 49.434, 8.716 49.40497 ) and LINESTRING ( 8.733 49.423, 8.704561 49.403252 ) [ (8.716450430821265, 49.41150800337066, NaN) ]"))
                .body("'path'", containsString("/elements/length/groupBy/key"));
    }
    
    
    @Test
    public void test_173_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/groupBy/key?" + 
                    "bcircles=8.73151%2C49.422%2C9%7C8.748%2C49.4192%2C7231714088&" + 
                    "format=json&" + 
                    "groupByKeys=maxspeed%2Caddr%3Acity%2Csurface&" + 
                    "keys=highway&" + 
                    "time=2007-12-30&" + 
                    "timeout=54&" + 
                    "values=crossing")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El ángulo 80.509.291.126.197.250.000.000.000 es demasiado grande."))
                .body("'path'", containsString("/elements/length/groupBy/key"));
    }
    
    
    @Test
    public void test_174_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/groupBy/key?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22E%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7448%2C49.414745%5D%2C%5B8.7010%2C49.416833%5D%2C%5B8.7400%2C49.401%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22kEfKv%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.707638%2C49.4376%5D%2C%5B8.731%2C49.406%5D%2C%5B8.705%2C49.4266%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22mo%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.721%2C49.418%5D%2C%5B8.707%2C49.438855%5D%2C%5B8.7450%2C49.4131%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=network%3D*+or+length%3A%28+..+100%29&" + 
                    "groupByKeys=barrier%2Cname&" + 
                    "timeout=92")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.707638 49.4376 ) and LINESTRING ( 8.718586823496306 49.41583505522985, 8.705 49.4266 ) [ (8.706543063416175, 49.42537741898565, NaN) ]"))
                .body("'path'", containsString("/elements/length/groupBy/key"));
    }
    
    
    @Test
    public void test_175_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/groupBy/key?" + 
                    "bpolys=h%3A8.704561%2C49.403252%2C8.748%2C49.4241%2C8.706%2C49.419%2C8.717%2C49.420%2C8.704561%2C49.403252%7CnNTyp%3A8.704561%2C49.403252%2C8.738377%2C49.414%2C8.704561%2C49.402%2C8.734%2C49.4323%2C8.704561%2C49.403252%7Cq%3A8.704561%2C49.403252%2C8.729%2C49.4229%2C8.7015%2C49.426%2C8.718%2C49.410068%2C8.704561%2C49.403252&" + 
                    "format=geojson&" + 
                    "groupByKeys=tracktype%2Caddr%3Acity%2Cbuilding&" + 
                    "keys=highway&" + 
                    "time=2008-06-10&" + 
                    "timeout=32")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.748 49.4241 ) and LINESTRING ( 8.717 49.42, 8.704561 49.403252 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/length/groupBy/key"));
    }
    
    
    @Test
    public void test_176_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=SdZLE%3A8.748%2C49.4282%2C6%7CWQjpP%3A8.731%2C49.43715%2C2%7CpN%3A8.723%2C49.402%2C9&" + 
                    "format=geojson&" + 
                    "groupByKey=building&" + 
                    "keys=highway&" + 
                    "showMetadata=true&" + 
                    "time=2009-11-22&" + 
                    "timeout=55&" + 
                    "values=cycleway")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/utils/GroupByBoundaryGeoJsonGenerator_75_generateGroupByResultGeoJson
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Index 0 out of bounds for length 0"))
                .body("'path'", containsString("/elements/length/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_177_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22P%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.70740%2C49.4090%5D%2C%5B8.709746%2C49.422%5D%2C%5B8.747%2C49.41724%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22COJ%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.718403%2C49.4182%5D%2C%5B8.718151%2C49.406%5D%2C%5B8.702%2C49.420214%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22R%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.740%2C49.4396%5D%2C%5B8.7413%2C49.4289%5D%2C%5B8.714347%2C49.4152%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=pedestrian%2Cliving_street%2Cresidential&" + 
                    "keys=highway&" + 
                    "time=2013-12-31&" + 
                    "timeout=89&" + 
                    "values=turning_circle")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.721389626806292 49.420512276169056 ) and LINESTRING ( 8.72411351080673 49.42016424138508, 8.714347 49.4152 ) [ (8.718040755235668, 49.417077507020686, NaN) ]"))
                .body("'path'", containsString("/elements/length/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_178_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22gzpG%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.738%2C49.420%5D%2C%5B8.7431%2C49.431%5D%2C%5B8.732780%2C49.417%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=footway%2Cemergency_access_point%2Cbus_stop&" + 
                    "keys=highway&" + 
                    "showMetadata=no&" + 
                    "timeout=56&" + 
                    "values=path")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.738 49.42 ) and LINESTRING ( 8.7431 49.431, 8.73278 49.417 ) [ (8.733230548557934, 49.41761120928402, NaN) ]"))
                .body("'path'", containsString("/elements/length/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_179_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=8.720%2C49.427%2C32%7C8.740%2C49.401849%2C1%7C8.7184%2C49.4324%2C347522416%7C8.736640%2C49.439744%2C2&" + 
                    "filter=name%3D*+and+id%3A%281+..+9999%29&" + 
                    "groupByKey=building&" + 
                    "groupByValues=construction%2Cprimary_link%2Cresidential&" + 
                    "time=2017-01-04&" + 
                    "timeout=71")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El ángulo 2.292.933.456.062.525,5 es demasiado grande."))
                .body("'path'", containsString("/elements/length/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_180_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=LLC%3A8.7464%2C49.430%2C7&" + 
                    "format=geojson&" + 
                    "groupByKey=building&" + 
                    "keys=highway&" + 
                    "timeout=50&" + 
                    "values=primary")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/utils/GroupByBoundaryGeoJsonGenerator_75_generateGroupByResultGeoJson
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Index 0 out of bounds for length 0"))
                .body("'path'", containsString("/elements/length/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_181_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22XnBUe%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7383%2C49.435%5D%2C%5B8.70492%2C49.420374%5D%2C%5B8.707%2C49.428%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22lM%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.736%2C49.417063%5D%2C%5B8.72522%2C49.416%5D%2C%5B8.73424%2C49.410%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "format=json&" + 
                    "groupByKey=building&" + 
                    "groupByValues=cycleway%2Cfootway%2Ccommercial&" + 
                    "keys=highway&" + 
                    "showMetadata=false&" + 
                    "timeout=35&" + 
                    "values=tertiary")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.736 49.417063 ) and LINESTRING ( 8.72522 49.416, 8.73424 49.41 ) [ (8.728545175310801, 49.4137881317223, NaN) ]"))
                .body("'path'", containsString("/elements/length/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_182_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22iJtj%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.718%2C49.431%5D%2C%5B8.7352%2C49.404020%5D%2C%5B8.706%2C49.4376%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "format=json&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=commercial%2Cship&" + 
                    "keys=highway&" + 
                    "time=2011-07-14&" + 
                    "timeout=90&" + 
                    "values=crossing")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.718 49.431 ) and LINESTRING ( 8.7352 49.40402, 8.706 49.4376 ) [ (8.715760314423703, 49.42637563841274, NaN) ]"))
                .body("'path'", containsString("/elements/length/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_183_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=8.704%2C49.4167%2C3%7C8.744%2C49.421%2C5%7C8.744%2C49.41778%2C215%7C8.7442%2C49.424841%2C722450800168&" + 
                    "groupByKey=building&" + 
                    "groupByValues=unclassified%2Chut&" + 
                    "keys=highway&" + 
                    "showMetadata=true&" + 
                    "time=2015-01-26")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El ángulo 799.442.247.822.479.600.000.000.000.000.000.000.000.000 es demasiado grande."))
                .body("'path'", containsString("/elements/length/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_184_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/boundary?" + 
                    "bcircles=fSSFE%3A8.7400%2C49.4193%2C952%7CHEMMC%3A8.7077%2C49.43505%2C3%7CH%3A8.7287%2C49.435%2C14%7CcuE%3A8.701451%2C49.4038%2C386392582883&" + 
                    "format=csv&" + 
                    "keys=highway&" + 
                    "timeout=33")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El ángulo 5.334.381.184.863.396.000.000.000.000.000.000.000.000 es demasiado grande."))
                .body("'path'", containsString("/elements/length/groupBy/boundary"));
    }
    
    
    @Test
    public void test_185_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/boundary?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22NH%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7185%2C49.43289%5D%2C%5B8.70455%2C49.4111%5D%2C%5B8.708%2C49.43904%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22CrIA%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.736%2C49.424%5D%2C%5B8.70459%2C49.422%5D%2C%5B8.70273%2C49.427%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=service%3Ddriveway&" + 
                    "format=geojson&" + 
                    "time=2007-11-17&" + 
                    "timeout=74")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.711823050607906 49.42246055718611, 8.70455 49.4111 ) and LINESTRING ( 8.70637347648636 49.42211356106248, 8.704561 49.403252 ) [ (8.705450273156128, 49.412506233123445, NaN) ]"))
                .body("'path'", containsString("/elements/length/groupBy/boundary"));
    }
    
    
    @Test
    public void test_186_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/groupBy/boundary?" + 
                    "bcircles=idjij%3A8.7172%2C49.413%2C494904128%7CJjO%3A8.7164%2C49.411%2C6&" + 
                    "filter=service%3Ddriveway+or+id%3A%281+..+9999%29&" + 
                    "format=json&" + 
                    "showMetadata=no&" + 
                    "timeout=45")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El ángulo 38.677.648.341.877.216 es demasiado grande."))
                .body("'path'", containsString("/elements/length/groupBy/boundary"));
    }
    
    
    @Test
    public void test_187_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/groupBy/boundary?" + 
                    "bpolys=S%3A8.704561%2C49.403252%2C8.7331%2C49.41029%2C8.72277%2C49.414273%2C8.70544%2C49.433%2C8.704561%2C49.403252%7CeBdLA%3A8.704561%2C49.403252%2C8.70697%2C49.418%2C8.726%2C49.408%2C8.728%2C49.407%2C8.704561%2C49.403252%7CQsKn%3A8.704561%2C49.403252%2C8.732%2C49.429468%2C8.701%2C49.4205%2C8.723%2C49.418871%2C8.704561%2C49.403252&" + 
                    "filter=landuse%3D*+and+not+type%3Arelation+and+area%3A%281.0+..+1E6%29&" + 
                    "showMetadata=yes&" + 
                    "time=2007-11-11&" + 
                    "timeout=99")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.7331 49.41029 ) and LINESTRING ( 8.704561 49.403252, 8.70697 49.418 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/length/groupBy/boundary"));
    }
    
    
    @Test
    public void test_188_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/groupBy/boundary?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22G%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7481%2C49.414%5D%2C%5B8.70196%2C49.40270%5D%2C%5B8.708810%2C49.402508%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22HyGrY%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.70041%2C49.426%5D%2C%5B8.702%2C49.403%5D%2C%5B8.7091%2C49.421%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22Z%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7352%2C49.433%5D%2C%5B8.704932%2C49.427%5D%2C%5B8.7042%2C49.438%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "format=geojson&" + 
                    "keys=highway&" + 
                    "showMetadata=true&" + 
                    "values=turning_circle")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.70041 49.426 ) and LINESTRING ( 8.702 49.403, 8.70449782890642 49.409332523988105 ) [ (8.70378240810604, 49.4075187811139, NaN) ]"))
                .body("'path'", containsString("/elements/length/groupBy/boundary"));
    }
    
    
    @Test
    public void test_189_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density/groupBy/type?" + 
                    "bcircles=Zy%3A8.74003%2C49.417%2C6%7Cey%3A8.735800%2C49.4127%2C2%7CtXX%3A8.7330%2C49.437877%2C42%7CPD%3A8.7373%2C49.4002%2C661327801&" + 
                    "keys=highway&" + 
                    "time=2015-01-18&" + 
                    "timeout=76&" + 
                    "values=pedestrian")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El ángulo 392.460.660.014.558.270 es demasiado grande."))
                .body("'path'", containsString("/elements/length/density/groupBy/type"));
    }
    
    
    @Test
    public void test_190_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density/groupBy/type?" + 
                    "bpolys=J%3A8.704561%2C49.403252%2C8.7480%2C49.422%2C8.733%2C49.401754%2C8.7250%2C49.416%2C8.704561%2C49.403252%7CQkkcc%3A8.704561%2C49.403252%2C8.704%2C49.426%2C8.704560%2C49.4321%2C8.706%2C49.432%2C8.704561%2C49.403252&" + 
                    "showMetadata=no&" + 
                    "time=2009-09-20&" + 
                    "timeout=55")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.748 49.422 ) and LINESTRING ( 8.704561 49.403252, 8.704 49.426 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/length/density/groupBy/type"));
    }
    
    
    @Test
    public void test_191_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density/groupBy/type?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22okGcg%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.702%2C49.435%5D%2C%5B8.7340%2C49.41910%5D%2C%5B8.70431%2C49.436972%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22R%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7144%2C49.433%5D%2C%5B8.715%2C49.410%5D%2C%5B8.702%2C49.4362%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22Z%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.702377%2C49.404%5D%2C%5B8.73876%2C49.401%5D%2C%5B8.731%2C49.421%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=building%21%3D*+and+id%3A%281+..+9999%29&" + 
                    "showMetadata=false&" + 
                    "timeout=33")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.713217945244399 49.42942608345669 ) and LINESTRING ( 8.715 49.41, 8.704351016031634 49.431461798459324 ) [ (8.710075458746841, 49.41992484467944, NaN) ]"))
                .body("'path'", containsString("/elements/length/density/groupBy/type"));
    }
    
    
    @Test
    public void test_192_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/density/groupBy/type?" + 
                    "bpolys=c%3A8.704561%2C49.403252%2C8.746%2C49.41035%2C8.702%2C49.412459%2C8.738%2C49.40805%2C8.704561%2C49.403252%7CG%3A8.704561%2C49.403252%2C8.7212%2C49.406%2C8.723%2C49.401278%2C8.735%2C49.429%2C8.704561%2C49.403252&" + 
                    "time=2015-05-03&" + 
                    "timeout=98")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.746 49.41035 ) and LINESTRING ( 8.704561 49.403252, 8.7212 49.406 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/length/density/groupBy/type"));
    }
    
    
    @Test
    public void test_193_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/density/groupBy/type?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22pL%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.72784%2C49.412%5D%2C%5B8.708307%2C49.424359%5D%2C%5B8.7328%2C49.4177%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22jSx%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.734%2C49.436%5D%2C%5B8.716%2C49.4075%5D%2C%5B8.703%2C49.42169%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22o%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.702%2C49.4316%5D%2C%5B8.72745%2C49.438%5D%2C%5B8.722%2C49.423%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "keys=highway&" + 
                    "time=2008-11-04")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.734 49.436 ) and LINESTRING ( 8.716 49.4075, 8.712085522726738 49.41177280250058 ) [ (8.712153813595776, 49.41169826039045, NaN) ]"))
                .body("'path'", containsString("/elements/length/density/groupBy/type"));
    }
    
    
    @Test
    public void test_194_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density/groupBy/tag?" + 
                    "bpolys=fijCD%3A8.704561%2C49.403252%2C8.745631%2C49.424%2C8.734%2C49.422562%2C8.723071%2C49.410474%2C8.704561%2C49.403252&" + 
                    "filter=turn%3Alanes%3D*+or+length%3A%28+..+100%29&" + 
                    "format=json&" + 
                    "groupByKey=foo&" + 
                    "showMetadata=false&" + 
                    "time=2017-07-10&" + 
                    "timeout=47&" + 
                    "values=track")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.745631 49.424 ) and LINESTRING ( 8.734 49.422562, 8.723071 49.410474 ) [ (8.726614240044166, 49.41439299402085, NaN) ]"))
                .body("'path'", containsString("/elements/length/density/groupBy/tag"));
    }
    
    
    @Test
    public void test_195_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density/groupBy/tag?" + 
                    "bcircles=QW%3A8.709008%2C49.426%2C7%7CaRbEK%3A8.740%2C49.437505%2C6141195369&" + 
                    "format=csv&" + 
                    "groupByKey=building&" + 
                    "groupByValues=church%2Cschool%2Cyes&" + 
                    "time=2016-07-25&" + 
                    "timeout=31")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El ángulo 21.838.438.214.056.934.000.000.000 es demasiado grande."))
                .body("'path'", containsString("/elements/length/density/groupBy/tag"));
    }
    
    
    @Test
    public void test_196_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/density/groupBy/tag?" + 
                    "bcircles=bwS%3A8.7322%2C49.416%2C2%7CTz%3A8.7311%2C49.429%2C16293677237&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=hospital%2Cprimary_link&" + 
                    "keys=highway&" + 
                    "showMetadata=true&" + 
                    "time=2011-04-09&" + 
                    "timeout=75&" + 
                    "values=emergency_access_point")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El ángulo 7.690.109.350,235 es demasiado grande."))
                .body("'path'", containsString("/elements/length/density/groupBy/tag"));
    }
    
    
    @Test
    public void test_197_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/density/groupBy/tag?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22h%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.710%2C49.429329%5D%2C%5B8.704590%2C49.401%5D%2C%5B8.704%2C49.4192%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22sG%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.740%2C49.404%5D%2C%5B8.739%2C49.4112%5D%2C%5B8.714%2C49.402%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "format=csv&" + 
                    "groupByKey=building&" + 
                    "groupByValues=dormitory%2Cbus_stop%2Cstop_line&" + 
                    "keys=highway&" + 
                    "showMetadata=yes&" + 
                    "time=2017-12-23&" + 
                    "timeout=88&" + 
                    "values=primary")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.705021923171449 49.40326172856267, 8.74 49.404 ) and LINESTRING ( 8.739 49.4112, 8.714 49.402 ) [ (8.71818349391617, 49.403539525761154, NaN) ]"))
                .body("'path'", containsString("/elements/length/density/groupBy/tag"));
    }
    
    
    @Test
    public void test_198_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/density/groupBy/tag?" + 
                    "bpolys=8.704561%2C49.403252%2C8.7414%2C49.428%2C8.736%2C49.400341%2C8.703%2C49.425%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.7312%2C49.421%2C8.707032%2C49.4385%2C8.723%2C49.425%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.71662%2C49.4122%2C8.707948%2C49.433%2C8.744%2C49.4028%2C8.704561%2C49.403252&" + 
                    "groupByKey=highway&" + 
                    "time=2014-09-22&" + 
                    "timeout=97")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.7414 49.428 ) and LINESTRING ( 8.704561 49.403252, 8.71662 49.4122 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/length/density/groupBy/tag"));
    }
    
    
    @Test
    public void test_199_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=8.725%2C49.42568%2C3&" + 
                    "format=geojson&" + 
                    "groupByKey=building&" + 
                    "keys=highway&" + 
                    "time=2016-02-20&" + 
                    "values=traffic_mirror")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/utils/GroupByBoundaryGeoJsonGenerator_75_generateGroupByResultGeoJson
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Index 0 out of bounds for length 0"))
                .body("'path'", containsString("/elements/length/density/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_200_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=8.704561%2C49.403252%2C8.736%2C49.431%2C8.7271%2C49.4166%2C8.7027%2C49.4103%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.7211%2C49.41123%2C8.7120%2C49.408815%2C8.723%2C49.421%2C8.704561%2C49.403252&" + 
                    "filter=oneway%3D*+and+not+length%3A%28+..+100%29&" + 
                    "format=geojson&" + 
                    "groupByKey=highway&" + 
                    "time=2014-10-30&" + 
                    "timeout=40")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.736 49.431 ) and LINESTRING ( 8.7027 49.4103, 8.704561 49.403252 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/length/density/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_201_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22TnaaZ%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.737%2C49.4356%5D%2C%5B8.703865%2C49.4287%5D%2C%5B8.746%2C49.434%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22ZBcTe%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.706696%2C49.419%5D%2C%5B8.709%2C49.437%5D%2C%5B8.739%2C49.407%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22V%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7290%2C49.4091%5D%2C%5B8.7119%2C49.43449%5D%2C%5B8.701%2C49.430%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=foot%3D*+or+id%3A%281+..+9999%29&" + 
                    "format=json&" + 
                    "groupByKey=highway&" + 
                    "timeout=96")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.723681318783088 49.42231868121691, 8.737 49.4356 ) and LINESTRING ( 8.715798882681563 49.43020111731843, 8.746 49.434 ) [ (8.733864759468794, 49.43247355465016, NaN) ]"))
                .body("'path'", containsString("/elements/length/density/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_202_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/density/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=uTdhf%3A8.738716%2C49.4332%2C7&" + 
                    "filter=natural%3Dwood+and+area%3A%281.0+..+1E6%29&" + 
                    "format=geojson&" + 
                    "groupByKey=building&" + 
                    "showMetadata=yes&" + 
                    "time=2017-05-12&" + 
                    "timeout=84")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/utils/GroupByBoundaryGeoJsonGenerator_75_generateGroupByResultGeoJson
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Index 0 out of bounds for length 0"))
                .body("'path'", containsString("/elements/length/density/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_203_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/density/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=pR%3A8.704561%2C49.403252%2C8.740%2C49.415%2C8.700%2C49.424%2C8.709%2C49.437%2C8.704561%2C49.403252%7CkbX%3A8.704561%2C49.403252%2C8.719%2C49.415%2C8.746274%2C49.41404%2C8.704%2C49.432%2C8.704561%2C49.403252%7Caj%3A8.704561%2C49.403252%2C8.712680%2C49.400%2C8.7480%2C49.4112%2C8.713%2C49.402377%2C8.704561%2C49.403252&" + 
                    "groupByKey=highway&" + 
                    "time=2010-11-30&" + 
                    "timeout=67")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.74 49.415 ) and LINESTRING ( 8.704 49.432, 8.704561 49.403252 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/length/density/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_204_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/density/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22sU%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7061%2C49.435272%5D%2C%5B8.729%2C49.409%5D%2C%5B8.708%2C49.42368%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22qvP%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7480%2C49.423%5D%2C%5B8.723062%2C49.429118%5D%2C%5B8.7484%2C49.40385%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "format=csv&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=speed_camera%2Ctertiary&" + 
                    "keys=highway&" + 
                    "time=2008-11-11&" + 
                    "timeout=81")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.725652446086002 49.4128404775733, 8.748 49.423 ) and LINESTRING ( 8.723062 49.429118, 8.7484 49.40385 ) [ (8.735084698188652, 49.417128516306306, NaN) ]"))
                .body("'path'", containsString("/elements/length/density/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_205_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/density/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=8.702065%2C49.431%2C5%7C8.720%2C49.416%2C418366214860%7C8.73650%2C49.426280%2C5&" + 
                    "format=json&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=garage%2Croof&" + 
                    "showMetadata=yes&" + 
                    "time=2014-10-01")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El ángulo 10.096.202.625.710.511.000.000.000.000.000.000.000.000 es demasiado grande."))
                .body("'path'", containsString("/elements/length/density/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_206_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density/groupBy/boundary?" + 
                    "bcircles=8.709976%2C49.43567%2C6%7C8.731656%2C49.4168%2C7%7C8.7187%2C49.403740%2C3%7C8.722%2C49.408%2C58557465484&" + 
                    "filter=turn%3D*+or+id%3A%281+..+9999%29&" + 
                    "format=csv&" + 
                    "showMetadata=yes&" + 
                    "time=2015-07-21&" + 
                    "timeout=95")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El ángulo 1.485.256.825.419.463.000.000.000.000.000.000 es demasiado grande."))
                .body("'path'", containsString("/elements/length/density/groupBy/boundary"));
    }
    
    
    @Test
    public void test_207_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density/groupBy/boundary?" + 
                    "bpolys=8.704561%2C49.403252%2C8.743302%2C49.4379%2C8.709%2C49.42895%2C8.7292%2C49.416%2C8.704561%2C49.403252&" + 
                    "keys=highway&" + 
                    "showMetadata=false&" + 
                    "time=2008-06-12&" + 
                    "timeout=93")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.743302 49.4379 ) and LINESTRING ( 8.709 49.42895, 8.7292 49.416 ) [ (8.723150992136347, 49.4198779530611, NaN) ]"))
                .body("'path'", containsString("/elements/length/density/groupBy/boundary"));
    }
    
    
    @Test
    public void test_208_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density/groupBy/boundary?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22aYQ%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.71030%2C49.412%5D%2C%5B8.70028%2C49.4086%5D%2C%5B8.70459%2C49.4306%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22Z%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.738%2C49.409003%5D%2C%5B8.7169%2C49.43172%5D%2C%5B8.70292%2C49.4077%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22aubcW%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.708%2C49.415%5D%2C%5B8.709872%2C49.430%5D%2C%5B8.704%2C49.434378%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "format=json&" + 
                    "keys=highway&" + 
                    "time=2008-05-23&" + 
                    "timeout=47")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.7103 49.412, 8.70422239815603 49.409937739893266 ) and LINESTRING ( 8.70459 49.4306, 8.704561 49.403252 ) [ (8.704568214033772, 49.41005508260627, NaN) ]"))
                .body("'path'", containsString("/elements/length/density/groupBy/boundary"));
    }
    
    
    @Test
    public void test_209_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/density/groupBy/boundary?" + 
                    "bcircles=Mdg%3A8.7234%2C49.411118%2C273205923&" + 
                    "format=json&" + 
                    "time=2011-04-29&" + 
                    "timeout=51")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El ángulo 333.296.634.216.552,2 es demasiado grande."))
                .body("'path'", containsString("/elements/length/density/groupBy/boundary"));
    }
    
    
    @Test
    public void test_210_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/density/groupBy/boundary?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22T%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.719%2C49.411%5D%2C%5B8.70962%2C49.4299%5D%2C%5B8.741637%2C49.428%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=oneway%3D*+and+area%3A%281.0+..+1E6%29&" + 
                    "showMetadata=false&" + 
                    "time=2008-01-03&" + 
                    "timeout=81")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.719 49.411, 8.70962 49.4299 ) and LINESTRING ( 8.741637 49.428, 8.704561 49.403252 ) [ (8.71829543340973, 49.412419649099796, NaN) ]"))
                .body("'path'", containsString("/elements/length/density/groupBy/boundary"));
    }
    
    
    @Test
    public void test_211_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/density/groupBy/boundary?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22zLqF%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7187%2C49.402%5D%2C%5B8.7017%2C49.416%5D%2C%5B8.709%2C49.420535%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22fvsEH%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7321%2C49.41432%5D%2C%5B8.718%2C49.403058%5D%2C%5B8.706%2C49.417%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22F%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.749409%2C49.4391%5D%2C%5B8.709%2C49.415160%5D%2C%5B8.709%2C49.435%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "format=csv&" + 
                    "keys=highway&" + 
                    "time=2016-03-31&" + 
                    "timeout=69")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.710964470635776 49.408370435947006, 8.705863960841521 49.41257085577757 ) and LINESTRING ( 8.709 49.420535, 8.704561 49.403252 ) [ (8.70676408244535, 49.41182957916265, NaN) ]"))
                .body("'path'", containsString("/elements/length/density/groupBy/boundary"));
    }
    
    
    @Test
    public void test_212_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density?" + 
                    "bcircles=8.745%2C49.435%2C925162434%7C8.7378%2C49.413%2C1&" + 
                    "format=geojson&" + 
                    "showMetadata=no&" + 
                    "time=2012-09-25")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El ángulo 5.790.155.160.297.373.700 es demasiado grande."))
                .body("'path'", containsString("/elements/length/density"));
    }
    
    
    @Test
    public void test_213_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density?" + 
                    "bpolys=O%3A8.704561%2C49.403252%2C8.718979%2C49.4274%2C8.705584%2C49.408%2C8.740367%2C49.429%2C8.704561%2C49.403252%7CR%3A8.704561%2C49.403252%2C8.7476%2C49.4123%2C8.738%2C49.4018%2C8.7072%2C49.414850%2C8.704561%2C49.403252%7CNjti%3A8.704561%2C49.403252%2C8.7202%2C49.40632%2C8.723156%2C49.4158%2C8.736%2C49.4107%2C8.704561%2C49.403252&" + 
                    "keys=highway&" + 
                    "time=2010-01-11&" + 
                    "timeout=84&" + 
                    "values=emergency_access_point")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.718979 49.4274 ) and LINESTRING ( 8.7072 49.41485, 8.704561 49.403252 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/length/density"));
    }
    
    
    @Test
    public void test_214_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22Z%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.71556%2C49.432820%5D%2C%5B8.706%2C49.4209%5D%2C%5B8.726184%2C49.409943%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22E%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.716%2C49.404138%5D%2C%5B8.705323%2C49.4228%5D%2C%5B8.708602%2C49.408%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "time=2015-09-21&" + 
                    "timeout=28")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.709267794747815 49.41590501455618, 8.71556 49.43282 ) and LINESTRING ( 8.706594758898667 49.420577131725494, 8.726184 49.409943 ) [ (8.710264682568214, 49.41858489264269, NaN) ]"))
                .body("'path'", containsString("/elements/length/density"));
    }
    
    
    @Test
    public void test_215_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/density?" + 
                    "bcircles=Ub%3A8.70214%2C49.4080%2C1%7CGTVKO%3A8.725%2C49.4301%2C69%7CIH%3A8.729%2C49.424%2C2%7CrAfbT%3A8.725%2C49.4279%2C26398583039&" + 
                    "format=geojson&" + 
                    "keys=highway&" + 
                    "values=street_lamp")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El ángulo 2.542.030.402.472.654.400.000.000.000.000 es demasiado grande."))
                .body("'path'", containsString("/elements/length/density"));
    }
    
    
    @Test
    public void test_216_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/density?" + 
                    "bpolys=8.704561%2C49.403252%2C8.7071%2C49.41844%2C8.706%2C49.40278%2C8.704572%2C49.40275%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.7078%2C49.410637%2C8.721%2C49.429%2C8.70413%2C49.4068%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.711%2C49.4366%2C8.7485%2C49.437%2C8.7045%2C49.41929%2C8.704561%2C49.403252&" + 
                    "format=csv&" + 
                    "keys=highway&" + 
                    "time=2017-05-11&" + 
                    "timeout=46&" + 
                    "values=secondary_link")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.7071 49.41844 ) and LINESTRING ( 8.704572 49.40275, 8.704561 49.403252 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/length/density"));
    }
    
    
    @Test
    public void test_217_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/density?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22d%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.720%2C49.426%5D%2C%5B8.70959%2C49.428310%5D%2C%5B8.725%2C49.40210%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22vA%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.736%2C49.411%5D%2C%5B8.7059%2C49.426544%5D%2C%5B8.729%2C49.4143%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22tA%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.741%2C49.426725%5D%2C%5B8.7287%2C49.439%5D%2C%5B8.742%2C49.437%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "keys=highway&" + 
                    "showMetadata=false&" + 
                    "time=2009-09-17&" + 
                    "timeout=29&" + 
                    "values=pedestrian")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.72 49.426 ) and LINESTRING ( 8.70959 49.42831, 8.717477306121326 49.41489492579883 ) [ (8.715149796887028, 49.418853655002664, NaN) ]"))
                .body("'path'", containsString("/elements/length/density"));
    }
    
    
    @Test
    public void test_218_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length?" + 
                    "bcircles=8.739%2C49.426319%2C88%7C8.718%2C49.4080%2C24%7C8.703162%2C49.431%2C747864459&" + 
                    "keys=highway&" + 
                    "time=2015-10-23&" + 
                    "values=traffic_mirror")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El ángulo 1.054.912.268.538.098.820 es demasiado grande."))
                .body("'path'", containsString("/elements/length"));
    }
    
    
    @Test
    public void test_219_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length?" + 
                    "bpolys=8.704561%2C49.403252%2C8.73167%2C49.420150%2C8.70935%2C49.412351%2C8.7047%2C49.426%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.721%2C49.403%2C8.71703%2C49.409%2C8.71965%2C49.4303%2C8.704561%2C49.403252&" + 
                    "format=json&" + 
                    "keys=highway&" + 
                    "showMetadata=no&" + 
                    "time=2009-07-06&" + 
                    "timeout=43&" + 
                    "values=give_way")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.73167 49.42015 ) and LINESTRING ( 8.7047 49.426, 8.704561 49.403252 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/length"));
    }
    
    
    @Test
    public void test_220_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22tuC%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.72161%2C49.403208%5D%2C%5B8.7048%2C49.406%5D%2C%5B8.70090%2C49.42392%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22L%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7374%2C49.410%5D%2C%5B8.708334%2C49.406%5D%2C%5B8.73734%2C49.41491%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "keys=highway&" + 
                    "time=2007-10-24&" + 
                    "timeout=38&" + 
                    "values=secondary_link")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.7374 49.41, 8.708334 49.406 ) and LINESTRING ( 8.73734 49.41491, 8.709904011943745 49.405152266427905 ) [ (8.714782985157331, 49.40688749537705, NaN) ]"))
                .body("'path'", containsString("/elements/length"));
    }
    
    
    @Test
    public void test_221_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length?" + 
                    "bcircles=SFGbV%3A8.7265%2C49.432577%2C8366783493%7CCwGjy%3A8.724%2C49.408180%2C14%7CBRKvP%3A8.72996%2C49.413%2C459%7CFIgCH%3A8.731%2C49.4268%2C757&" + 
                    "format=json&" + 
                    "time=2017-06-03&" + 
                    "values=elevator")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El ángulo 259.015.548.786.562.560.000.000.000 es demasiado grande."))
                .body("'path'", containsString("/elements/length"));
    }
    
    
    @Test
    public void test_222_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length?" + 
                    "bpolys=8.704561%2C49.403252%2C8.748%2C49.405%2C8.747%2C49.401%2C8.701%2C49.4281%2C8.704561%2C49.403252&" + 
                    "keys=highway&" + 
                    "time=2008-04-30&" + 
                    "timeout=62")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.748 49.405 ) and LINESTRING ( 8.747 49.401, 8.701 49.4281 ) [ (8.74070838329272, 49.40470658288625, NaN) ]"))
                .body("'path'", containsString("/elements/length"));
    }
    
    
    @Test
    public void test_223_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22FK%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.741%2C49.402968%5D%2C%5B8.734%2C49.4365%5D%2C%5B8.711%2C49.4259%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22JpPTy%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7095%2C49.407%5D%2C%5B8.70276%2C49.423%5D%2C%5B8.708%2C49.404%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "format=json&" + 
                    "time=2016-09-10")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.7095 49.407 ) and LINESTRING ( 8.706411364814329 49.40976031842133, 8.708 49.404 ) [ (8.707575417877889, 49.40553951532827, NaN) ]"))
                .body("'path'", containsString("/elements/length"));
    }
    
    
    @Test
    public void test_224_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/ratio/groupBy/boundary?" + 
                    "bcircles=Djp%3A8.72207%2C49.43389%2C2%7CsZH%3A8.70723%2C49.430%2C116311548%7CWouIc%3A8.742%2C49.4371%2C888&" + 
                    "keys=highway&" + 
                    "showMetadata=false&" + 
                    "time=2009-10-31&" + 
                    "timeout=72&" + 
                    "types2=line%2Cpolygon%2C&" + 
                    "values=secondary")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El ángulo 359.707.553.504,175 es demasiado grande."))
                .body("'path'", containsString("/elements/count/ratio/groupBy/boundary"));
    }
    
    
    @Test
    public void test_225_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/ratio/groupBy/boundary?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22d%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.703%2C49.4047%5D%2C%5B8.7167%2C49.439%5D%2C%5B8.711087%2C49.433%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22vuJQm%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.705%2C49.431%5D%2C%5B8.724%2C49.4226%5D%2C%5B8.736%2C49.431%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter2=maxspeed%21%3D*+and+type%3Anode+or+area%3A%281.0+..+1E6%29&" + 
                    "keys=highway&" + 
                    "keys2=highway&" + 
                    "time=2009-02-13&" + 
                    "timeout=39&" + 
                    "types2=polygon%2C&" + 
                    "values=secondary_link&" + 
                    "values2=street_lamp")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704649235188374 49.40882910707746, 8.712228266256291 49.427804345444585 ) and LINESTRING ( 8.710148872448833 49.42872365639104, 8.704561 49.403252 ) [ (8.707167761612315, 49.41513461483959, NaN) ]"))
                .body("'path'", containsString("/elements/count/ratio/groupBy/boundary"));
    }
    
    
    @Test
    public void test_226_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/ratio/groupBy/boundary?" + 
                    "bcircles=z%3A8.7046%2C49.4170%2C475502942&" + 
                    "keys=highway&" + 
                    "time=foo&" + 
                    "timeout=45&" + 
                    "types2=way%2Crelation&" + 
                    "values=street_lamp&" + 
                    "values2=foo")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 158.01101693842233 2.8104899261680368E16, 9.000000000000938 90.0 ) and LINESTRING ( 163.83011954521976 2.8125169056715876E16, 9.0 90.0 ) [ (9.000000000025636, 4750.0, NaN) ]"))
                .body("'path'", containsString("/elements/count/ratio/groupBy/boundary"));
    }
    
    
    @Test
    public void test_227_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/ratio/groupBy/boundary?" + 
                    "bcircles=8.715%2C49.419%2C1139780269%7C8.7123%2C49.437%2C7%7C8.722%2C49.4381%2C92%7C8.700%2C49.417306%2C32&" + 
                    "filter2=name%3D*+and+type%3Anode+and+area%3A%281.0+..+1E6%29&" + 
                    "keys=highway&" + 
                    "keys2=highway&" + 
                    "showMetadata=true&" + 
                    "time=2016-05-13&" + 
                    "timeout=24&" + 
                    "values=residential")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El ángulo 30.648.636.450.341.245.000 es demasiado grande."))
                .body("'path'", containsString("/elements/count/ratio/groupBy/boundary"));
    }
    
    
    @Test
    public void test_228_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/ratio/groupBy/boundary?" + 
                    "bpolys=8.704561%2C49.403252%2C8.738861%2C49.412%2C8.736225%2C49.40061%2C8.70046%2C49.4298%2C8.704561%2C49.403252&" + 
                    "keys=highway&" + 
                    "keys2=highway&" + 
                    "time=2015-01-20&" + 
                    "timeout=59&" + 
                    "values=turning_circle")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.738861 49.412 ) and LINESTRING ( 8.736225 49.40061, 8.70046 49.4298 ) [ (8.726219719130958, 49.4087759205527, NaN) ]"))
                .body("'path'", containsString("/elements/count/ratio/groupBy/boundary"));
    }
    
    
    @Test
    public void test_229_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/ratio/groupBy/boundary?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22o%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7021%2C49.4019%5D%2C%5B8.723%2C49.426%5D%2C%5B8.703%2C49.432%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22IUWw%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.737%2C49.417%5D%2C%5B8.705%2C49.40848%5D%2C%5B8.7080%2C49.439%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "format=json&" + 
                    "keys=highway&" + 
                    "keys2=highway&" + 
                    "time=2009-06-26&" + 
                    "timeout=49")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.7021 49.4019, 8.704721770445099 49.40492318984339 ) and LINESTRING ( 8.703 49.432, 8.704561 49.403252 ) [ (8.704485075572482, 49.404650254607496, NaN) ]"))
                .body("'path'", containsString("/elements/count/ratio/groupBy/boundary"));
    }
    
    
    @Test
    public void test_230_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/ratio?" + 
                    "bcircles=fl%3A8.729%2C49.40676%2C110108888793&" + 
                    "filter=oneway%3D*+or+type%3Away&" + 
                    "showMetadata=true&" + 
                    "timeout=96")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El ángulo 232.078.539.837.447.600.000.000.000.000.000.000 es demasiado grande."))
                .body("'path'", containsString("/elements/count/ratio"));
    }
    
    
    @Test
    public void test_231_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/ratio?" + 
                    "bpolys=8.704561%2C49.403252%2C8.7098%2C49.4265%2C8.711742%2C49.4232%2C8.704%2C49.415%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.738%2C49.424%2C8.718%2C49.404%2C8.710%2C49.422%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.703410%2C49.412%2C8.702%2C49.40502%2C8.720806%2C49.41966%2C8.704561%2C49.403252&" + 
                    "filter=building%21%3D*+and+not+area%3A%281.0+..+1E6%29&" + 
                    "format=geojson&" + 
                    "keys2=highway&" + 
                    "time=2008-11-01&" + 
                    "timeout=20&" + 
                    "values2=turning_circle")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.7098 49.4265 ) and LINESTRING ( 8.704561 49.403252, 8.70341 49.412 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/count/ratio"));
    }
    
    
    @Test
    public void test_232_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/ratio?" + 
                    "bcircles=pbzHT%3A8.709756%2C49.434%2C9%7CpRmqy%3A8.724%2C49.4088%2C71%7CK%3A8.727%2C49.41430%2C6%7CnRdcl%3A8.727%2C49.43068%2C927602416&" + 
                    "filter2=network%21%3D*+or+geometry%3Aline+or+length%3A%28+..+100%29&" + 
                    "keys=highway&" + 
                    "timeout=87&" + 
                    "values=secondary")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El ángulo 5.909.308.693.956.054.000 es demasiado grande."))
                .body("'path'", containsString("/elements/count/ratio"));
    }
    
    
    @Test
    public void test_233_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/ratio?" + 
                    "bpolys=8.704561%2C49.403252%2C8.7321%2C49.413%2C8.73665%2C49.438605%2C8.7024%2C49.429%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.710%2C49.409%2C8.7410%2C49.405938%2C8.705%2C49.435%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.749%2C49.4386%2C8.702%2C49.404%2C8.704712%2C49.4298%2C8.704561%2C49.403252&" + 
                    "format=csv&" + 
                    "keys=highway&" + 
                    "showMetadata=true&" + 
                    "time=2012-05-02&" + 
                    "timeout=59&" + 
                    "types2=node%2Cway%2C&" + 
                    "values=secondary_link")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.7321 49.413 ) and LINESTRING ( 8.7024 49.429, 8.704561 49.403252 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/count/ratio"));
    }
    
    
    @Test
    public void test_234_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/ratio?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22RTGG%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.708%2C49.433%5D%2C%5B8.701%2C49.412%5D%2C%5B8.7368%2C49.41810%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22CESc%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.701%2C49.401%5D%2C%5B8.70456%2C49.41037%5D%2C%5B8.700%2C49.4003%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22VQxR%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.703%2C49.413%5D%2C%5B8.7049%2C49.421626%5D%2C%5B8.7373%2C49.41980%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter2=type%3D*&" + 
                    "keys2=highway&" + 
                    "time=2015-04-12&" + 
                    "timeout=52&" + 
                    "types2=line%2Cpolygon%2Cother")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.706673560272218 49.42152604564639 ) and LINESTRING ( 8.703102760247196 49.4123582915505, 8.732480567899254 49.41736400737948 ) [ (8.705664182248954, 49.4127947349642, NaN) ]"))
                .body("'path'", containsString("/elements/count/ratio"));
    }
    
    
    @Test
    public void test_235_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/type?" + 
                    "bcircles=j%3A8.725%2C49.404%2C8%7CDZt%3A8.746%2C49.4241%2C94%7CU%3A8.735980%2C49.421%2C5%7ChYGZT%3A8.731%2C49.4316%2C2561320327&" + 
                    "format=geojson&" + 
                    "timeout=97")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El ángulo 19.974.654.400.014.010.000.000 es demasiado grande."))
                .body("'path'", containsString("/elements/count/groupBy/type"));
    }
    
    
    @Test
    public void test_236_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/type?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22C%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.701%2C49.4152%5D%2C%5B8.70369%2C49.410%5D%2C%5B8.706%2C49.423%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22nb%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7200%2C49.426%5D%2C%5B8.70240%2C49.407934%5D%2C%5B8.749%2C49.4070%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "format=csv&" + 
                    "time=2009-05-23&" + 
                    "timeout=64")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.72 49.426 ) and LINESTRING ( 8.70489851956144 49.40788392237617, 8.749 49.407 ) [ (8.707667011958431, 49.407828433708815, NaN) ]"))
                .body("'path'", containsString("/elements/count/groupBy/type"));
    }
    
    
    @Test
    public void test_237_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/type?" + 
                    "bpolys=gX%3A8.704561%2C49.403252%2C8.708%2C49.425702%2C8.74062%2C49.419%2C8.742%2C49.423%2C8.704561%2C49.403252%7COc%3A8.704561%2C49.403252%2C8.70325%2C49.4167%2C8.709%2C49.4215%2C8.714856%2C49.433%2C8.704561%2C49.403252%7CD%3A8.704561%2C49.403252%2C8.7032%2C49.433%2C8.709%2C49.437%2C8.700577%2C49.4035%2C8.704561%2C49.403252&" + 
                    "keys=highway&" + 
                    "time=2012-07-31&" + 
                    "timeout=76&" + 
                    "values=street_lamp")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.708 49.425702 ) and LINESTRING ( 8.704561 49.403252, 8.70325 49.4167 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/count/groupBy/type"));
    }
    
    
    @Test
    public void test_238_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/groupBy/type?" + 
                    "bcircles=8.7426%2C49.429%2C5%7C8.7109%2C49.401%2C8%7C8.706%2C49.421%2C2%7C8.7300%2C49.430%2C5193796091&" + 
                    "filter=addr%3Astreet%21%3D*+and+geometry%3Apoint&" + 
                    "format=csv&" + 
                    "time=2010-02-16&" + 
                    "timeout=63")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El ángulo 5.708.872.433.160.096.000.000.000 es demasiado grande."))
                .body("'path'", containsString("/elements/count/groupBy/type"));
    }
    
    
    @Test
    public void test_239_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/groupBy/type?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22dw%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.702%2C49.432%5D%2C%5B8.72648%2C49.418%5D%2C%5B8.733%2C49.43779%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22ay%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.709%2C49.439%5D%2C%5B8.707%2C49.404%5D%2C%5B8.7215%2C49.406%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=type%3D*+and+area%3A%281.0+..+1E6%29&" + 
                    "format=json&" + 
                    "showMetadata=true&" + 
                    "time=2012-02-20&" + 
                    "timeout=30")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.708391139240506 49.42834493670886, 8.72648 49.418 ) and LINESTRING ( 8.733 49.43779, 8.707135952839772 49.40637917469602 ) [ (8.719834215197203, 49.42180069392317, NaN) ]"))
                .body("'path'", containsString("/elements/count/groupBy/type"));
    }
    
    
    @Test
    public void test_240_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/groupBy/type?" + 
                    "bpolys=LUgG%3A8.704561%2C49.403252%2C8.7149%2C49.401%2C8.7378%2C49.418895%2C8.748067%2C49.4119%2C8.704561%2C49.403252&" + 
                    "format=geojson&" + 
                    "keys=highway&" + 
                    "showMetadata=yes&" + 
                    "time=2017-12-01&" + 
                    "timeout=100&" + 
                    "values=emergency_access_point")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.7149 49.401, 8.7378 49.418895 ) and LINESTRING ( 8.748067 49.4119, 8.704561 49.403252 ) [ (8.722292181844683, 49.406776554327976, NaN) ]"))
                .body("'path'", containsString("/elements/count/groupBy/type"));
    }
    
    
    @Test
    public void test_241_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/tag?" + 
                    "bcircles=8.707%2C49.4242%2C662346413&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=university%2Cdormitory%2Cdemolished&" + 
                    "keys=highway&" + 
                    "showMetadata=yes&" + 
                    "time=2010-10-23")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El ángulo 398.858.350.045.606.780 es demasiado grande."))
                .body("'path'", containsString("/elements/count/groupBy/tag"));
    }
    
    
    @Test
    public void test_242_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/tag?" + 
                    "bpolys=8.704561%2C49.403252%2C8.7070%2C49.418%2C8.731%2C49.413%2C8.716%2C49.431%2C8.704561%2C49.403252&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=pedestrian%2Croof%2Ccommercial&" + 
                    "keys=highway&" + 
                    "time=2016-06-30&" + 
                    "timeout=67")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.707 49.418, 8.731 49.413 ) and LINESTRING ( 8.716 49.431, 8.704561 49.403252 ) [ (8.710352845272123, 49.417301490568306, NaN) ]"))
                .body("'path'", containsString("/elements/count/groupBy/tag"));
    }
    
    
    @Test
    public void test_243_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/tag?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22eW%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7157%2C49.4302%5D%2C%5B8.707%2C49.437220%5D%2C%5B8.70541%2C49.40071%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22gTOWw%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7361%2C49.426%5D%2C%5B8.704845%2C49.437%5D%2C%5B8.725%2C49.42724%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "format=geojson&" + 
                    "groupByKey=highway&" + 
                    "showMetadata=true&" + 
                    "time=2015-02-26&" + 
                    "timeout=89")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.7157 49.4302 ) and LINESTRING ( 8.706946109147939 49.43598254401965, 8.705572397540658 49.40443901522605 ) [ (8.70563372280603, 49.405847182168685, NaN) ]"))
                .body("'path'", containsString("/elements/count/groupBy/tag"));
    }
    
    
    @Test
    public void test_244_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/groupBy/tag?" + 
                    "bcircles=v%3A8.7028%2C49.433%2C8292894403&" + 
                    "format=geojson&" + 
                    "groupByKey=building&" + 
                    "groupByValues=unclassified%2Celevator&" + 
                    "keys=highway&" + 
                    "showMetadata=no&" + 
                    "time=2013-04-22&" + 
                    "timeout=51&" + 
                    "values=stop")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El ángulo 241.290.167.822.458.700.000.000.000 es demasiado grande."))
                .body("'path'", containsString("/elements/count/groupBy/tag"));
    }
    
    
    @Test
    public void test_245_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/groupBy/tag?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22nQQ%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7231%2C49.400%5D%2C%5B8.704%2C49.412%5D%2C%5B8.730%2C49.4250%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "groupByKey=building&" + 
                    "keys=highway&" + 
                    "showMetadata=false&" + 
                    "time=2016-10-10&" + 
                    "timeout=64")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.7231 49.4, 8.704 49.412 ) and LINESTRING ( 8.73 49.425, 8.704561 49.403252 ) [ (8.710221498975653, 49.40809120483205, NaN) ]"))
                .body("'path'", containsString("/elements/count/groupBy/tag"));
    }
    
    
    @Test
    public void test_246_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/groupBy/tag?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22H%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.711%2C49.419%5D%2C%5B8.748%2C49.4322%5D%2C%5B8.73598%2C49.428%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22pyr%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.74485%2C49.417%5D%2C%5B8.7440%2C49.415%5D%2C%5B8.704%2C49.403%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22FZ%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.707%2C49.405305%5D%2C%5B8.7037%2C49.4186%5D%2C%5B8.7047%2C49.431655%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=lanes%3Aforward%3D*&" + 
                    "groupByKey=highway&" + 
                    "time=2009-10-14&" + 
                    "timeout=97")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.70639576664436 49.40773932801916, 8.7037 49.4186 ) and LINESTRING ( 8.7047 49.431655, 8.704561 49.403252 ) [ (8.704618011035082, 49.41490152826926, NaN) ]"))
                .body("'path'", containsString("/elements/count/groupBy/tag"));
    }
    
    
    @Test
    public void test_247_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/key?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22YS%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7442%2C49.4389%5D%2C%5B8.7358%2C49.401400%5D%2C%5B8.701%2C49.419%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=addr%3Astreet%21%3D*+or+length%3A%28+..+100%29&" + 
                    "groupByKeys=addr%3Acountry%2Csmoothness%2Cfoot&" + 
                    "showMetadata=false&" + 
                    "time=2012-06-30&" + 
                    "timeout=66")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.7442 49.4389 ) and LINESTRING ( 8.7358 49.4014, 8.701 49.419 ) [ (8.714487266618125, 49.41217885366439, NaN) ]"))
                .body("'path'", containsString("/elements/count/groupBy/key"));
    }
    
    
    @Test
    public void test_248_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/key?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22FgM%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.704%2C49.42871%5D%2C%5B8.715%2C49.406%5D%2C%5B8.700%2C49.4220%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22dG%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.742729%2C49.420%5D%2C%5B8.717688%2C49.410332%5D%2C%5B8.731%2C49.4374%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22i%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.743%2C49.408142%5D%2C%5B8.717%2C49.424%5D%2C%5B8.720319%2C49.432%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "groupByKeys=barrier%2Caddr%3Acity%2Caddr%3Ahousenumber&" + 
                    "keys=highway&" + 
                    "time=2009-12-29&" + 
                    "timeout=43")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.704 49.42871 ) and LINESTRING ( 8.709363105152864 49.41201268783694, 8.7 49.422 ) [ (8.704247707525463, 49.417469111972835, NaN) ]"))
                .body("'path'", containsString("/elements/count/groupBy/key"));
    }
    
    
    @Test
    public void test_249_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/groupBy/key?" + 
                    "bcircles=8.718861%2C49.402595%2C3%7C8.710881%2C49.438%2C771%7C8.737%2C49.433%2C4%7C8.700%2C49.4260%2C633661112054&" + 
                    "groupByKeys=lanes%2Cref&" + 
                    "timeout=52")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El ángulo 1.056.920.581.181.520.500.000 es demasiado grande."))
                .body("'path'", containsString("/elements/count/groupBy/key"));
    }
    
    
    @Test
    public void test_250_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/groupBy/key?" + 
                    "bpolys=QWr%3A8.704561%2C49.403252%2C8.70027%2C49.430%2C8.7081%2C49.4264%2C8.7030%2C49.409%2C8.704561%2C49.403252%7CnNGu%3A8.704561%2C49.403252%2C8.7173%2C49.428%2C8.733%2C49.412472%2C8.7066%2C49.4253%2C8.704561%2C49.403252%7Czj%3A8.704561%2C49.403252%2C8.7143%2C49.4158%2C8.70970%2C49.411740%2C8.704%2C49.420%2C8.704561%2C49.403252&" + 
                    "filter=tracktype%21%3D*+or+area%3A%281.0+..+1E6%29&" + 
                    "format=geojson&" + 
                    "groupByKeys=destination%2Cfoot&" + 
                    "showMetadata=yes&" + 
                    "time=2016-07-01&" + 
                    "timeout=49")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.70027 49.43 ) and LINESTRING ( 8.703 49.409, 8.704561 49.403252 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/count/groupBy/key"));
    }
    
    
    @Test
    public void test_251_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/groupBy/key?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22Jg%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7398%2C49.4078%5D%2C%5B8.7060%2C49.425%5D%2C%5B8.704290%2C49.43681%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22ZlAa%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.737441%2C49.407146%5D%2C%5B8.704%2C49.41367%5D%2C%5B8.7073%2C49.4291%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22U%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.700693%2C49.4075%5D%2C%5B8.70486%2C49.432%5D%2C%5B8.70429%2C49.4283%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=foot%21%3D*+or+not+geometry%3Apolygon+and+not+id%3A%281+..+9999%29&" + 
                    "format=csv&" + 
                    "groupByKeys=building%2Cmaxspeed%2Caddr%3Acountry&" + 
                    "time=2016-05-24&" + 
                    "timeout=80")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.736362665033132 49.40735637221745, 8.70447762117892 49.41357682095119 ) and LINESTRING ( 8.706821255983558 49.42458208275393, 8.704561 49.403252 ) [ (8.705631228005219, 49.41335176395724, NaN) ]"))
                .body("'path'", containsString("/elements/count/groupBy/key"));
    }
    
    
    @Test
    public void test_252_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=8.7359%2C49.418%2C3%7C8.724%2C49.4103%2C4%7C8.749%2C49.411%2C7&" + 
                    "filter=tracktype%21%3D*+and+id%3A%281+..+9999%29&" + 
                    "format=geojson&" + 
                    "groupByKey=highway&" + 
                    "showMetadata=no&" + 
                    "time=2008-06-27")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/utils/GroupByBoundaryGeoJsonGenerator_75_generateGroupByResultGeoJson
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Index 0 out of bounds for length 0"))
                .body("'path'", containsString("/elements/count/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_253_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=ytfxr%3A8.704561%2C49.403252%2C8.701512%2C49.425%2C8.704%2C49.418%2C8.703%2C49.4383%2C8.704561%2C49.403252%7CTrOQb%3A8.704561%2C49.403252%2C8.704%2C49.4007%2C8.705%2C49.416%2C8.7042%2C49.4386%2C8.704561%2C49.403252%7CGVy%3A8.704561%2C49.403252%2C8.7155%2C49.404709%2C8.713%2C49.4384%2C8.71630%2C49.40727%2C8.704561%2C49.403252&" + 
                    "format=json&" + 
                    "groupByKey=building&" + 
                    "keys=highway&" + 
                    "showMetadata=true&" + 
                    "timeout=99&" + 
                    "values=tertiary")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.701512 49.425 ) and LINESTRING ( 8.704561 49.403252, 8.704 49.4007 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/count/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_254_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22j%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7242%2C49.416%5D%2C%5B8.709%2C49.433%5D%2C%5B8.7166%2C49.422%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22idFXC%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.720%2C49.420%5D%2C%5B8.747%2C49.418911%5D%2C%5B8.7367%2C49.429%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22P%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.74602%2C49.439%5D%2C%5B8.7046%2C49.4203%5D%2C%5B8.704%2C49.435874%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "format=geojson&" + 
                    "groupByKey=building&" + 
                    "groupByValues=garage%2Cservice%2Cpath&" + 
                    "keys=highway&" + 
                    "showMetadata=yes&" + 
                    "time=2008-03-16&" + 
                    "timeout=85&" + 
                    "values=platform")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.723806554679022 49.41984646896128, 8.747 49.418911 ) and LINESTRING ( 8.7367 49.429, 8.722644603077676 49.417739588663125 ) [ (8.725204081470407, 49.419790102047365, NaN) ]"))
                .body("'path'", containsString("/elements/count/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_255_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=L%3A8.741322%2C49.411%2C537572028&" + 
                    "filter=highway+in+%28secondary%2Cpath%2Cunclassified%2Ctrack%2Cprimary%2Cresidential%2Ccycleway%2Cservice%2Cfootway%29+and+not+geometry%3Apoint&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=chapel%2Ccivic%2Cyes&" + 
                    "time=2008-09-30")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El ángulo 74.932.908.326.706.304 es demasiado grande."))
                .body("'path'", containsString("/elements/count/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_256_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=L%3A8.738942%2C49.403%2C751250654&" + 
                    "groupByKey=highway&" + 
                    "keys=highway&" + 
                    "time=2013-01-30&" + 
                    "timeout=27")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El ángulo 1.088.821.712.794.956.930 es demasiado grande."))
                .body("'path'", containsString("/elements/count/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_257_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=8.704561%2C49.403252%2C8.710%2C49.4208%2C8.707%2C49.435%2C8.744%2C49.402%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.712%2C49.409%2C8.702802%2C49.434%2C8.7047%2C49.4116%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.720095%2C49.438%2C8.721%2C49.40711%2C8.700%2C49.42001%2C8.704561%2C49.403252&" + 
                    "format=geojson&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=construction%2Cpath&" + 
                    "keys=highway&" + 
                    "showMetadata=no&" + 
                    "time=2010-02-22&" + 
                    "timeout=30")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.71 49.4208 ) and LINESTRING ( 8.7047 49.4116, 8.704561 49.403252 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/count/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_258_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22e%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.744%2C49.407217%5D%2C%5B8.728%2C49.4259%5D%2C%5B8.701%2C49.426%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22iRtWs%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.733186%2C49.4245%5D%2C%5B8.706%2C49.414%5D%2C%5B8.722750%2C49.422%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22vtU%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.733%2C49.418%5D%2C%5B8.7001%2C49.41414%5D%2C%5B8.731%2C49.41880%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=landuse%21%3D*+and+length%3A%28+..+100%29&" + 
                    "groupByKey=building&" + 
                    "timeout=76")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.730189938271591 49.42334283645449, 8.706 49.414 ) and LINESTRING ( 8.72275 49.422, 8.704561 49.403252 ) [ (8.720375032584078, 49.41955204304174, NaN) ]"))
                .body("'path'", containsString("/elements/count/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_259_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=Lxb%3A8.703%2C49.429664%2C535&" + 
                    "format=geojson&" + 
                    "groupByKey=highway&" + 
                    "keys=highway&" + 
                    "showMetadata=true&" + 
                    "timeout=89&" + 
                    "values=speed_camera")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/utils/GroupByBoundaryGeoJsonGenerator_75_generateGroupByResultGeoJson
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Index 0 out of bounds for length 0"))
                .body("'path'", containsString("/elements/count/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_260_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/boundary?" + 
                    "bcircles=PF%3A8.7038%2C49.4232%2C569206571&" + 
                    "filter=highway+in+%28secondary%2Cpath%2Cunclassified%2Ctrack%2Cprimary%2Cresidential%2Ccycleway%2Cservice%2Cfootway%29+or+area%3A%281.0+..+1E6%29&" + 
                    "format=geojson&" + 
                    "time=2015-03-08")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El ángulo 118.630.225.199.439.792 es demasiado grande."))
                .body("'path'", containsString("/elements/count/groupBy/boundary"));
    }
    
    
    @Test
    public void test_261_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/boundary?" + 
                    "bpolys=MFg%3A8.704561%2C49.403252%2C8.734%2C49.400%2C8.700%2C49.432%2C8.705%2C49.402%2C8.704561%2C49.403252%7COcebU%3A8.704561%2C49.403252%2C8.7172%2C49.41566%2C8.74575%2C49.433%2C8.7253%2C49.4036%2C8.704561%2C49.403252%7CsbrG%3A8.704561%2C49.403252%2C8.7399%2C49.41841%2C8.70648%2C49.431%2C8.73687%2C49.413561%2C8.704561%2C49.403252&" + 
                    "keys=highway&" + 
                    "time=2013-05-10&" + 
                    "timeout=62")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.734 49.4 ) and LINESTRING ( 8.705 49.402, 8.704561 49.403252 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/count/groupBy/boundary"));
    }
    
    
    @Test
    public void test_262_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/boundary?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22nVVz%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.70446%2C49.4027%5D%2C%5B8.730%2C49.401%5D%2C%5B8.702%2C49.43168%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22WcFLw%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.730%2C49.413%5D%2C%5B8.712%2C49.4171%5D%2C%5B8.7218%2C49.42201%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22W%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7354%2C49.4399%5D%2C%5B8.70467%2C49.428%5D%2C%5B8.7425%2C49.4381%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=type%3D*+or+type%3Anode+and+id%3A%281+..+9999%29&" + 
                    "showMetadata=yes&" + 
                    "timeout=69")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.715778592837102 49.41658259899135, 8.7354 49.4399 ) and LINESTRING ( 8.705223639007352 49.42814781268766, 8.7425 49.4381 ) [ (8.731389082167363, 49.435133564099665, NaN) ]"))
                .body("'path'", containsString("/elements/count/groupBy/boundary"));
    }
    
    
    @Test
    public void test_263_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/groupBy/boundary?" + 
                    "bcircles=DJZ%3A8.736%2C49.412%2C9%7CM%3A8.7116%2C49.429%2C81%7Cj%3A8.723%2C49.43531%2C9%7CdmyE%3A8.7231%2C49.4353%2C345341648017&" + 
                    "filter=sidewalk%3D*+or+type%3Arelation+and+length%3A%28+..+100%29&" + 
                    "showMetadata=false&" + 
                    "time=2013-04-15&" + 
                    "timeout=95")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El ángulo 2.182.975.905.878.135.400.000.000.000.000.000.000.000 es demasiado grande."))
                .body("'path'", containsString("/elements/count/groupBy/boundary"));
    }
    
    
    @Test
    public void test_264_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/groupBy/boundary?" + 
                    "bpolys=w%3A8.704561%2C49.403252%2C8.738036%2C49.41386%2C8.706%2C49.4175%2C8.715%2C49.427%2C8.704561%2C49.403252%7CL%3A8.704561%2C49.403252%2C8.74166%2C49.4081%2C8.701%2C49.4173%2C8.74874%2C49.417%2C8.704561%2C49.403252&" + 
                    "format=csv&" + 
                    "keys=highway&" + 
                    "time=2011-11-23&" + 
                    "timeout=98&" + 
                    "values=speed_camera")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.738036 49.41386 ) and LINESTRING ( 8.715 49.427, 8.704561 49.403252 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/count/groupBy/boundary"));
    }
    
    
    @Test
    public void test_265_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/groupBy/boundary?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22PLCsr%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.722096%2C49.407%5D%2C%5B8.7079%2C49.412%5D%2C%5B8.7022%2C49.4021%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22FE%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7488%2C49.400%5D%2C%5B8.709%2C49.405%5D%2C%5B8.700%2C49.408%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22i%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.722%2C49.43351%5D%2C%5B8.7079%2C49.433%5D%2C%5B8.71541%2C49.410357%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=network%21%3D*+or+type%3Arelation+and+length%3A%28+..+100%29&" + 
                    "format=geojson&" + 
                    "showMetadata=false&" + 
                    "time=2017-07-04&" + 
                    "timeout=95")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.709315510827267 49.41150144025526, 8.722 49.43351 ) and LINESTRING ( 8.7079 49.433, 8.71541 49.410357 ) [ (8.712942938593141, 49.41779530511791, NaN) ]"))
                .body("'path'", containsString("/elements/count/groupBy/boundary"));
    }
    
    
    @Test
    public void test_266_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/density/groupBy/type?" + 
                    "bpolys=8.704561%2C49.403252%2C8.723%2C49.4102%2C8.714%2C49.4243%2C8.704%2C49.411%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.7155%2C49.412157%2C8.71979%2C49.428%2C8.7049%2C49.430%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.7485%2C49.4300%2C8.745265%2C49.4128%2C8.733%2C49.4337%2C8.704561%2C49.403252&" + 
                    "filter=destination%21%3D*&" + 
                    "format=geojson&" + 
                    "showMetadata=false&" + 
                    "time=2010-03-10&" + 
                    "timeout=69")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.723 49.4102 ) and LINESTRING ( 8.704 49.411, 8.704561 49.403252 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/count/density/groupBy/type"));
    }
    
    
    @Test
    public void test_267_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/density/groupBy/type?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22Y%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.73105%2C49.402027%5D%2C%5B8.7210%2C49.414%5D%2C%5B8.728%2C49.4030%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22TG%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.742%2C49.42849%5D%2C%5B8.7061%2C49.439%5D%2C%5B8.732013%2C49.401781%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22rDk%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7119%2C49.4158%5D%2C%5B8.7305%2C49.4347%5D%2C%5B8.706%2C49.42193%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "format=csv&" + 
                    "keys=highway&" + 
                    "timeout=64&" + 
                    "values=traffic_signals")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.742 49.42849 ) and LINESTRING ( 8.717963126567696 49.42196091893169, 8.732013 49.401781 ) [ (8.722547252630177, 49.41537671069955, NaN) ]"))
                .body("'path'", containsString("/elements/count/density/groupBy/type"));
    }
    
    
    @Test
    public void test_268_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/density/groupBy/type?" + 
                    "bcircles=8.738%2C49.422%2C37%7C8.716%2C49.4355%2C2%7C8.706%2C49.420%2C776337119%7C8.7107%2C49.41779%2C108764402&" + 
                    "filter=bicycle%21%3D*+and+length%3A%28+..+100%29&" + 
                    "showMetadata=true&" + 
                    "time=2010-05-30&" + 
                    "timeout=59")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El ángulo 1.419.943.339.994.611.460 es demasiado grande."))
                .body("'path'", containsString("/elements/count/density/groupBy/type"));
    }
    
    
    @Test
    public void test_269_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/density/groupBy/type?" + 
                    "bpolys=Qg%3A8.704561%2C49.403252%2C8.700%2C49.419108%2C8.70455%2C49.407584%2C8.7323%2C49.4152%2C8.704561%2C49.403252%7CFJlU%3A8.704561%2C49.403252%2C8.700%2C49.404%2C8.704%2C49.419%2C8.7387%2C49.413%2C8.704561%2C49.403252%7CVBIoe%3A8.704561%2C49.403252%2C8.701%2C49.4012%2C8.704%2C49.438387%2C8.7065%2C49.403%2C8.704561%2C49.403252&" + 
                    "keys=highway&" + 
                    "timeout=100")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.7 49.419108 ) and LINESTRING ( 8.704561 49.403252, 8.7 49.404 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/count/density/groupBy/type"));
    }
    
    
    @Test
    public void test_270_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/density/groupBy/type?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22owonD%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.707%2C49.4089%5D%2C%5B8.71843%2C49.4381%5D%2C%5B8.713%2C49.40088%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22jX%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7425%2C49.4106%5D%2C%5B8.72946%2C49.4362%5D%2C%5B8.703%2C49.415%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22L%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.728%2C49.426%5D%2C%5B8.733%2C49.410%5D%2C%5B8.706910%2C49.425%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=bicycle%21%3D*+or+geometry%3Apoint+and+area%3A%281.0+..+1E6%29&" + 
                    "time=2010-05-02&" + 
                    "timeout=85")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.728 49.426 ) and LINESTRING ( 8.733 49.41, 8.711900233471715 49.42213095047621 ) [ (8.719507122738518, 49.417757499383754, NaN) ]"))
                .body("'path'", containsString("/elements/count/density/groupBy/type"));
    }
    
    
    @Test
    public void test_271_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/density/groupBy/tag?" + 
                    "bcircles=tlP%3A8.7371%2C49.4030%2C3%7Cv%3A8.727%2C49.413%2C3%7Cp%3A8.749%2C49.428%2C87%7CcsipJ%3A8.714%2C49.42483%2C9796898675&" + 
                    "groupByKey=building&" + 
                    "time=2012-08-11")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El ángulo 914.169.194.753.108.100.000.000.000 es demasiado grande."))
                .body("'path'", containsString("/elements/count/density/groupBy/tag"));
    }
    
    
    @Test
    public void test_272_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/density/groupBy/tag?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22sYLdJ%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.722%2C49.40243%5D%2C%5B8.70456%2C49.4328%5D%2C%5B8.7060%2C49.414%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22Ty%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.705%2C49.409%5D%2C%5B8.727%2C49.414%5D%2C%5B8.736%2C49.424924%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "format=json&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=give_way%2Ctraffic_mirror%2Cprimary&" + 
                    "keys=highway&" + 
                    "time=2016-07-10&" + 
                    "timeout=48&" + 
                    "values=tertiary")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.716700164694046 49.41165912833956, 8.727 49.414 ) and LINESTRING ( 8.736 49.424924, 8.716716282635737 49.411631060570684 ) [ (8.716784955076678, 49.411678398881065, NaN) ]"))
                .body("'path'", containsString("/elements/count/density/groupBy/tag"));
    }
    
    
    @Test
    public void test_273_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/density/groupBy/tag?" + 
                    "bpolys=8.704561%2C49.403252%2C8.7110%2C49.426%2C8.7040%2C49.40578%2C8.7045%2C49.432%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.712%2C49.4116%2C8.7020%2C49.4046%2C8.7082%2C49.436%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.710%2C49.408%2C8.703%2C49.4202%2C8.74042%2C49.406%2C8.704561%2C49.403252&" + 
                    "filter=network%21%3D*+and+geometry%3Apoint&" + 
                    "groupByKey=building&" + 
                    "groupByValues=traffic_signals%2Chotel%2Cyes&" + 
                    "showMetadata=no&" + 
                    "time=2010-10-29&" + 
                    "timeout=100")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.711 49.426 ) and LINESTRING ( 8.71 49.408, 8.703 49.4202 ) [ (8.707257777602088, 49.41277930189351, NaN) ]"))
                .body("'path'", containsString("/elements/count/density/groupBy/tag"));
    }
    
    
    @Test
    public void test_274_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/density/groupBy/tag?" + 
                    "bcircles=M%3A8.7292%2C49.435%2C216%7CoOw%3A8.705%2C49.43314%2C7%7Cjp%3A8.732563%2C49.407%2C2%7CL%3A8.749%2C49.4100%2C589300797792&" + 
                    "format=geojson&" + 
                    "groupByKey=building&" + 
                    "keys=highway&" + 
                    "time=2012-09-28&" + 
                    "timeout=52&" + 
                    "values=cycleway")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El ángulo 156.306.302.025.138.320.000.000.000.000.000.000.000.000 es demasiado grande."))
                .body("'path'", containsString("/elements/count/density/groupBy/tag"));
    }
    
    
    @Test
    public void test_275_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/density/groupBy/tag?" + 
                    "bpolys=AYcRB%3A8.704561%2C49.403252%2C8.742%2C49.434%2C8.7070%2C49.420%2C8.748384%2C49.43067%2C8.704561%2C49.403252%7CYW%3A8.704561%2C49.403252%2C8.740%2C49.406%2C8.704963%2C49.4197%2C8.741%2C49.416%2C8.704561%2C49.403252%7ChD%3A8.704561%2C49.403252%2C8.713%2C49.413344%2C8.704494%2C49.401579%2C8.704%2C49.415%2C8.704561%2C49.403252&" + 
                    "format=csv&" + 
                    "groupByKey=building&" + 
                    "groupByValues=emergency_access_point%2Cfootway&" + 
                    "keys=highway&" + 
                    "showMetadata=no&" + 
                    "time=2008-02-11&" + 
                    "timeout=65&" + 
                    "values=residential")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.742 49.434 ) and LINESTRING ( 8.704561 49.403252, 8.74 49.406 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/count/density/groupBy/tag"));
    }
    
    
    @Test
    public void test_276_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/density/groupBy/tag?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22AROC%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7273%2C49.420%5D%2C%5B8.740%2C49.431%5D%2C%5B8.705%2C49.411%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22jwECt%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7064%2C49.4385%5D%2C%5B8.745%2C49.40516%5D%2C%5B8.700%2C49.42677%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22hJVZO%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.729130%2C49.4046%5D%2C%5B8.704%2C49.420%5D%2C%5B8.70415%2C49.409%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "format=json&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=synagogue%2Chouse&" + 
                    "keys=highway&" + 
                    "showMetadata=false&" + 
                    "time=2008-04-03&" + 
                    "values=unclassified")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.7064 49.4385 ) and LINESTRING ( 8.717712289069338 49.41826416518248, 8.7 49.42677 ) [ (8.705646536311727, 49.42405840778452, NaN) ]"))
                .body("'path'", containsString("/elements/count/density/groupBy/tag"));
    }
    
    
    @Test
    public void test_277_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/density/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=ccVwE%3A8.711%2C49.4397%2C59&" + 
                    "filter=foot%3D*+and+type%3Away&" + 
                    "format=geojson&" + 
                    "groupByKey=highway&" + 
                    "showMetadata=false&" + 
                    "time=2009-09-21")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/utils/GroupByBoundaryGeoJsonGenerator_75_generateGroupByResultGeoJson
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Index 0 out of bounds for length 0"))
                .body("'path'", containsString("/elements/count/density/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_278_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/density/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=fbT%3A8.704561%2C49.403252%2C8.732%2C49.403%2C8.70448%2C49.406%2C8.715%2C49.405%2C8.704561%2C49.403252&" + 
                    "format=json&" + 
                    "groupByKey=building&" + 
                    "keys=highway&" + 
                    "time=2015-03-30&" + 
                    "timeout=83")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.732 49.403, 8.70448 49.406 ) and LINESTRING ( 8.715 49.405, 8.704561 49.403252 ) [ (8.714468993714073, 49.404911083534074, NaN) ]"))
                .body("'path'", containsString("/elements/count/density/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_279_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/density/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22inGVm%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.719%2C49.432%5D%2C%5B8.704727%2C49.40863%5D%2C%5B8.747%2C49.41085%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22NVPyq%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.738%2C49.404101%5D%2C%5B8.704%2C49.428%5D%2C%5B8.730%2C49.437020%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "groupByKey=highway&" + 
                    "keys=highway&" + 
                    "time=2008-01-06&" + 
                    "timeout=71&" + 
                    "values=speed_camera")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.713601272772856 49.421251152411806 ) and LINESTRING ( 8.704727 49.40863, 8.708772549100742 49.4088424552079 ) [ (8.70733084034816, 49.40876674273349, NaN) ]"))
                .body("'path'", containsString("/elements/count/density/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_280_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/density/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=8.700529%2C49.40087%2C2%7C8.734%2C49.428%2C58%7C8.74635%2C49.436%2C7%7C8.7467%2C49.421%2C368883884&" + 
                    "filter=destination%21%3D*+or+not+id%3A%281+..+9999%29&" + 
                    "format=json&" + 
                    "groupByKey=building&" + 
                    "groupByValues=public%2Ccommercial&" + 
                    "showMetadata=no&" + 
                    "timeout=98")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El ángulo 3.688.820.438.943.883,5 es demasiado grande."))
                .body("'path'", containsString("/elements/count/density/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_281_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/density/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=8.7193%2C49.430%2C6&" + 
                    "filter=network%21%3D*+and+id%3A%281+..+9999%29&" + 
                    "format=geojson&" + 
                    "groupByKey=highway&" + 
                    "time=2016-09-24&" + 
                    "timeout=74")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/utils/GroupByBoundaryGeoJsonGenerator_75_generateGroupByResultGeoJson
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Index 0 out of bounds for length 0"))
                .body("'path'", containsString("/elements/count/density/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_282_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/density/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=8.704561%2C49.403252%2C8.743243%2C49.426794%2C8.724%2C49.43980%2C8.728%2C49.430%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.706%2C49.4116%2C8.707%2C49.4361%2C8.702%2C49.4284%2C8.704561%2C49.403252&" + 
                    "format=geojson&" + 
                    "groupByKey=building&" + 
                    "keys=highway&" + 
                    "time=2011-11-20&" + 
                    "timeout=76&" + 
                    "values=emergency_access_point")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.743243 49.426794 ) and LINESTRING ( 8.728 49.43, 8.704561 49.403252 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/count/density/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_283_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/density/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22D%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.748084%2C49.41139%5D%2C%5B8.738%2C49.400%5D%2C%5B8.72578%2C49.420%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22i%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.723%2C49.4366%5D%2C%5B8.704%2C49.42688%5D%2C%5B8.7094%2C49.4240%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22ESOZl%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.74576%2C49.42392%5D%2C%5B8.72248%2C49.42974%5D%2C%5B8.709091%2C49.413%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "format=geojson&" + 
                    "groupByKey=building&" + 
                    "groupByValues=primary_link%2Cresidential%2Cdemolished&" + 
                    "keys=highway&" + 
                    "timeout=58&" + 
                    "values=residential")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.748084 49.41139 ) and LINESTRING ( 8.738 49.4, 8.728634207474636 49.41532862933775 ) [ (8.732788191223781, 49.40852996526386, NaN) ]"))
                .body("'path'", containsString("/elements/count/density/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_284_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/density/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=P%3A8.706%2C49.434%2C8%7CgJp%3A8.702%2C49.415028%2C15%7CeOu%3A8.747%2C49.42516%2C857738014&" + 
                    "filter=name%3D*+and+area%3A%281.0+..+1E6%29&" + 
                    "format=csv&" + 
                    "groupByKey=highway&" + 
                    "showMetadata=true")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El ángulo 3.155.628.071.353.077.200 es demasiado grande."))
                .body("'path'", containsString("/elements/count/density/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_285_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/density/groupBy/boundary?" + 
                    "bpolys=8.704561%2C49.403252%2C8.724%2C49.4066%2C8.70499%2C49.429747%2C8.717%2C49.416%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.7490%2C49.430%2C8.7213%2C49.418%2C8.705%2C49.436%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.749%2C49.423%2C8.717%2C49.4080%2C8.704%2C49.4345%2C8.704561%2C49.403252&" + 
                    "filter=foot%21%3D*+or+not+geometry%3Aline&" + 
                    "format=csv&" + 
                    "time=2011-07-30&" + 
                    "timeout=59")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.724 49.4066 ) and LINESTRING ( 8.717 49.416, 8.704561 49.403252 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/count/density/groupBy/boundary"));
    }
    
    
    @Test
    public void test_286_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/density/groupBy/boundary?" + 
                    "bpolys=mDMMW%3A8.704561%2C49.403252%2C8.739278%2C49.4355%2C8.7049%2C49.408%2C8.727%2C49.431%2C8.704561%2C49.403252&" + 
                    "filter=highway%3D*+and+not+type%3Anode+or+id%3A%281+..+9999%29&" + 
                    "showMetadata=false&" + 
                    "time=2014-01-10&" + 
                    "timeout=69")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.739278 49.4355, 8.7049 49.408 ) and LINESTRING ( 8.727 49.431, 8.704561 49.403252 ) [ (8.714813264610637, 49.4159299196228, NaN) ]"))
                .body("'path'", containsString("/elements/count/density/groupBy/boundary"));
    }
    
    
    @Test
    public void test_287_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/density/groupBy/boundary?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22B%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7196%2C49.403%5D%2C%5B8.732%2C49.416%5D%2C%5B8.70493%2C49.413481%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22W%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.706%2C49.407%5D%2C%5B8.707231%2C49.439%5D%2C%5B8.708%2C49.436655%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22ru%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.73460%2C49.416%5D%2C%5B8.7067%2C49.437873%5D%2C%5B8.713%2C49.43144%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "keys=highway&" + 
                    "time=2008-04-14&" + 
                    "timeout=68&" + 
                    "values=service")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.706046725246159 49.40821462865728, 8.707169214563395 49.43739387979583 ) and LINESTRING ( 8.707989804049532 49.436555966753865, 8.704561 49.403252 ) [ (8.70662823508713, 49.42333105019349, NaN) ]"))
                .body("'path'", containsString("/elements/count/density/groupBy/boundary"));
    }
    
    
    @Test
    public void test_288_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/density?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22oFr%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7204%2C49.430%5D%2C%5B8.7174%2C49.437%5D%2C%5B8.7208%2C49.4361%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "keys=highway&" + 
                    "showMetadata=yes&" + 
                    "time=2012-07-04&" + 
                    "timeout=98&" + 
                    "values=track")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.7204 49.43, 8.7174 49.437 ) and LINESTRING ( 8.7208 49.4361, 8.704561 49.403252 ) [ (8.719185412572978, 49.43283403732971, NaN) ]"))
                .body("'path'", containsString("/elements/count/density"));
    }
    
    
    @Test
    public void test_289_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/density?" + 
                    "bcircles=HPRv%3A8.7314%2C49.428%2C39761867809&" + 
                    "format=geojson&" + 
                    "keys=highway&" + 
                    "time=2016-01-29&" + 
                    "timeout=88")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El ángulo 67.340.589.649.993.860.000.000.000.000.000 es demasiado grande."))
                .body("'path'", containsString("/elements/count/density"));
    }
    
    
    @Test
    public void test_290_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/density?" + 
                    "bcircles=x%3A8.747%2C49.433102%2C721934068%7CF%3A8.7499%2C49.431%2C3&" + 
                    "filter=maxspeed%3D*+and+type%3Away+and+not+length%3A%28+..+100%29&" + 
                    "time=2012-05-30&" + 
                    "timeout=32")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El ángulo 795.725.554.977.228.670 es demasiado grande."))
                .body("'path'", containsString("/elements/count/density"));
    }
    
    
    @Test
    public void test_291_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/density?" + 
                    "bpolys=KmSkf%3A8.704561%2C49.403252%2C8.705%2C49.421%2C8.7189%2C49.4174%2C8.706%2C49.435488%2C8.704561%2C49.403252&" + 
                    "keys=highway&" + 
                    "showMetadata=no&" + 
                    "time=2012-05-11&" + 
                    "timeout=77")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.705 49.421, 8.7189 49.4174 ) and LINESTRING ( 8.706 49.435488, 8.704561 49.403252 ) [ (8.705349224938931, 49.420909553253225, NaN) ]"))
                .body("'path'", containsString("/elements/count/density"));
    }
    
    
    @Test
    public void test_292_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/density?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22p%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.744519%2C49.40909%5D%2C%5B8.70416%2C49.4245%5D%2C%5B8.724%2C49.400%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22i%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.72261%2C49.437%5D%2C%5B8.738%2C49.427%5D%2C%5B8.702240%2C49.402%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22W%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.72683%2C49.407493%5D%2C%5B8.719393%2C49.437%5D%2C%5B8.715%2C49.41804%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=bicycle%21%3D*+and+not+geometry%3Apolygon&" + 
                    "format=geojson&" + 
                    "showMetadata=yes&" + 
                    "time=2012-09-08&" + 
                    "timeout=100")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.716933983778098 49.426386991220745 ) and LINESTRING ( 8.705077543733312 49.4039837414243, 8.70224 49.402 ) [ (8.704877584117003, 49.40384394862766, NaN) ]"))
                .body("'path'", containsString("/elements/count/density"));
    }
    
    
    @Test
    public void test_293_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22IfS%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7079%2C49.423%5D%2C%5B8.705%2C49.4382%5D%2C%5B8.7028%2C49.437%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22TYlM%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.734665%2C49.4078%5D%2C%5B8.701%2C49.411%5D%2C%5B8.733%2C49.402%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "format=json&" + 
                    "keys=highway&" + 
                    "time=2012-11-20&" + 
                    "timeout=25&" + 
                    "values=unclassified")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.734665 49.4078 ) and LINESTRING ( 8.705649913669 49.409692211780595, 8.733 49.402 ) [ (8.720166040069918, 49.405609551230334, NaN) ]"))
                .body("'path'", containsString("/elements/count"));
    }
    
    
    @Test
    public void test_294_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count?" + 
                    "bcircles=gfFmQ%3A8.7239%2C49.412%2C3%7CphT%3A8.703%2C49.4129%2C823559929&" + 
                    "showMetadata=yes&" + 
                    "time=2017-02-08&" + 
                    "timeout=83")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El ángulo 2.274.784.134.222.147.330 es demasiado grande."))
                .body("'path'", containsString("/elements/count"));
    }
    
    
    @Test
    public void test_295_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22KNf%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.74184%2C49.406%5D%2C%5B8.711%2C49.400314%5D%2C%5B8.7073%2C49.42982%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=foot%3D*+and+type%3Anode+and+not+area%3A%281.0+..+1E6%29&" + 
                    "format=geojson&" + 
                    "time=2014-09-07&" + 
                    "timeout=100")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.74184 49.406 ) and LINESTRING ( 8.711 49.400314, 8.7073 49.42982 ) [ (8.710575979604378, 49.403695390754926, NaN) ]"))
                .body("'path'", containsString("/elements/count"));
    }
    
    
    @Test
    public void test_296_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22IsSPB%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7198%2C49.402%5D%2C%5B8.7204%2C49.438%5D%2C%5B8.709291%2C49.4106%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22U%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.74374%2C49.401%5D%2C%5B8.710%2C49.41225%5D%2C%5B8.7029%2C49.41111%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22ECCvF%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.721%2C49.437%5D%2C%5B8.739585%2C49.412%5D%2C%5B8.703%2C49.411547%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "keys=highway&" + 
                    "showMetadata=true&" + 
                    "time=2010-03-12&" + 
                    "timeout=45&" + 
                    "values=path")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.715003368512093 49.4246893777326 ) and LINESTRING ( 8.709708628286036 49.411630067066106, 8.703 49.411547 ) [ (8.70863557105566, 49.41161678033861, NaN) ]"))
                .body("'path'", containsString("/elements/count"));
    }
    
    
    @Test
    public void test_297_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/ratio/groupBy/boundary?" + 
                    "bcircles=8.7205%2C49.41708%2C7%7C8.7344%2C49.4325%2C6%7C8.728165%2C49.42137%2C9%7C8.7318%2C49.410%2C557670443232&" + 
                    "filter=bicycle%3D*+and+area%3A%281.0+..+1E6%29&" + 
                    "filter2=highway%21%3D*+or+id%3A%281+..+9999%29&" + 
                    "format=csv&" + 
                    "time=2009-12-16&" + 
                    "timeout=37")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El ángulo 100.531.917.416.677.130.000.000.000.000.000.000.000.000 es demasiado grande."))
                .body("'path'", containsString("/elements/area/ratio/groupBy/boundary"));
    }
    
    
    @Test
    public void test_298_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/ratio/groupBy/boundary?" + 
                    "bpolys=pCWq%3A8.704561%2C49.403252%2C8.7273%2C49.41271%2C8.723%2C49.434%2C8.70459%2C49.433%2C8.704561%2C49.403252%7CZQ%3A8.704561%2C49.403252%2C8.719%2C49.404%2C8.7295%2C49.4216%2C8.702681%2C49.428931%2C8.704561%2C49.403252&" + 
                    "filter2=ref%3D*+and+not+area%3A%281.0+..+1E6%29&" + 
                    "keys=highway&" + 
                    "keys2=highway&" + 
                    "time=2008-12-07&" + 
                    "timeout=92&" + 
                    "values=residential&" + 
                    "values2=primary")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.7273 49.41271 ) and LINESTRING ( 8.704561 49.403252, 8.719 49.404 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/area/ratio/groupBy/boundary"));
    }
    
    
    @Test
    public void test_299_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/ratio/groupBy/boundary?" + 
                    "bcircles=k%3A8.726%2C49.43603%2C2%7CQ%3A8.739%2C49.428080%2C8%7CFS%3A8.7456%2C49.409400%2C2%7Cyilvm%3A8.7272%2C49.433%2C8625249553&" + 
                    "filter=bicycle%21%3D*+or+geometry%3Apoint+or+area%3A%281.0+..+1E6%29&" + 
                    "filter2=ref%21%3D*+or+type%3Anode&" + 
                    "format=csv&" + 
                    "keys2=highway&" + 
                    "showMetadata=yes&" + 
                    "time=2016-01-31&" + 
                    "timeout=98")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El ángulo 330.415.763.542.453.640.000.000.000 es demasiado grande."))
                .body("'path'", containsString("/elements/area/ratio/groupBy/boundary"));
    }
    
    
    @Test
    public void test_300_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/ratio/groupBy/boundary?" + 
                    "bpolys=sK%3A8.704561%2C49.403252%2C8.7253%2C49.428552%2C8.7090%2C49.4018%2C8.724471%2C49.4153%2C8.704561%2C49.403252%7CG%3A8.704561%2C49.403252%2C8.708%2C49.422%2C8.7046%2C49.4062%2C8.7180%2C49.406%2C8.704561%2C49.403252&" + 
                    "format=json&" + 
                    "keys=highway&" + 
                    "showMetadata=false&" + 
                    "time=2014-11-24&" + 
                    "timeout=98&" + 
                    "values=path")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.7253 49.428552 ) and LINESTRING ( 8.704561 49.403252, 8.708 49.422 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/area/ratio/groupBy/boundary"));
    }
    
    
    @Test
    public void test_301_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/ratio/groupBy/boundary?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22q%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.731%2C49.4106%5D%2C%5B8.7085%2C49.4219%5D%2C%5B8.7232%2C49.417%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22Y%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.720%2C49.414%5D%2C%5B8.7097%2C49.409554%5D%2C%5B8.708887%2C49.40707%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22X%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.718%2C49.4340%5D%2C%5B8.7466%2C49.424%5D%2C%5B8.739736%2C49.420612%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter2=landuse%3D*+or+id%3A%281+..+9999%29&" + 
                    "showMetadata=yes&" + 
                    "time=2017-09-13&" + 
                    "timeout=37")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.725275194190928 49.413475124695225, 8.711953418711383 49.42016561638051 ) and LINESTRING ( 8.7232 49.417, 8.704561 49.403252 ) [ (8.721197551421703, 49.41552300750821, NaN) ]"))
                .body("'path'", containsString("/elements/area/ratio/groupBy/boundary"));
    }
    
    
    @Test
    public void test_302_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/ratio?" + 
                    "bcircles=QDg%3A8.726%2C49.437%2C9%7CM%3A8.705%2C49.407%2C2%7COBy%3A8.7288%2C49.4079%2C9%7Cg%3A8.747%2C49.4260%2C445074321040&" + 
                    "filter2=lanes%3D*&" + 
                    "format=geojson&" + 
                    "keys2=highway&" + 
                    "showMetadata=yes&" + 
                    "timeout=35&" + 
                    "types2=point%2Cpolygon%2Cother&" + 
                    "values2=cycleway")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El ángulo 16.590.593.774.512.056.000.000.000.000.000.000.000.000 es demasiado grande."))
                .body("'path'", containsString("/elements/area/ratio"));
    }
    
    
    @Test
    public void test_303_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/ratio?" + 
                    "bpolys=8.704561%2C49.403252%2C8.703%2C49.433568%2C8.730%2C49.434%2C8.7247%2C49.406%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.719%2C49.40001%2C8.745%2C49.406%2C8.71987%2C49.43980%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.733%2C49.41785%2C8.7019%2C49.404%2C8.7424%2C49.422%2C8.704561%2C49.403252&" + 
                    "filter2=destination%3D*+or+length%3A%28+..+100%29&" + 
                    "format=json&" + 
                    "showMetadata=no&" + 
                    "time=2017-07-22&" + 
                    "timeout=41&" + 
                    "types2=point%2Cpolygon%2C")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.703 49.433568 ) and LINESTRING ( 8.704561 49.403252, 8.719 49.40001 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/area/ratio"));
    }
    
    
    @Test
    public void test_304_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/ratio?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22iDqTK%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.743%2C49.4082%5D%2C%5B8.7010%2C49.4132%5D%2C%5B8.7003%2C49.422%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22zyskm%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7121%2C49.436683%5D%2C%5B8.749%2C49.402%5D%2C%5B8.7085%2C49.404588%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=foot%21%3D*+and+length%3A%28+..+100%29&" + 
                    "filter2=destination%21%3D*&" + 
                    "keys2=highway&" + 
                    "showMetadata=true&" + 
                    "timeout=77&" + 
                    "values2=traffic_signals")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.706652614096159 49.41252706975046, 8.701 49.4132 ) and LINESTRING ( 8.7003 49.422, 8.704561 49.403252 ) [ (8.702336195929831, 49.413040929055974, NaN) ]"))
                .body("'path'", containsString("/elements/area/ratio"));
    }
    
    
    @Test
    public void test_305_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/ratio?" + 
                    "bcircles=agMHe%3A8.718%2C49.434602%2C26%7Ca%3A8.718%2C49.434%2C7%7Cf%3A8.740%2C49.404416%2C45%7CY%3A8.748347%2C49.4270%2C896066283&" + 
                    "filter2=lanes%3Aforward%21%3D*+and+length%3A%28+..+100%29&" + 
                    "format=geojson&" + 
                    "keys=highway&" + 
                    "time=2018-02-17&" + 
                    "timeout=36&" + 
                    "types2=node%2Cway%2Crelation&" + 
                    "values=living_street")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El ángulo 4.478.201.445.114.592.800 es demasiado grande."))
                .body("'path'", containsString("/elements/area/ratio"));
    }
    
    
    @Test
    public void test_306_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/ratio?" + 
                    "bpolys=8.704561%2C49.403252%2C8.7113%2C49.405%2C8.70027%2C49.420660%2C8.707%2C49.428%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.706%2C49.401%2C8.720%2C49.42160%2C8.72138%2C49.4352%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.7150%2C49.41499%2C8.7019%2C49.411%2C8.724293%2C49.403%2C8.704561%2C49.403252&" + 
                    "filter=bicycle%3D*+or+geometry%3Aline+or+not+length%3A%28+..+100%29&" + 
                    "filter2=highway%21%3D*+and+id%3A%281+..+9999%29&" + 
                    "keys2=highway&" + 
                    "showMetadata=no&" + 
                    "time=2009-03-10&" + 
                    "timeout=87&" + 
                    "types2=point%2Cline%2Cpolygon%2C&" + 
                    "values2=crossing")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.7113 49.405 ) and LINESTRING ( 8.704561 49.403252, 8.706 49.401 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/area/ratio"));
    }
    
    
    @Test
    public void test_307_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/type?" + 
                    "bcircles=m%3A8.7342%2C49.4264%2C4%7CadkVP%3A8.744%2C49.421%2C1%7CY%3A8.704%2C49.4119%2C3%7CatsDG%3A8.72447%2C49.428670%2C866757733060&" + 
                    "format=geojson&" + 
                    "showMetadata=no&" + 
                    "timeout=26")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El ángulo 3.433.793.958.571.940.400.000.000.000.000.000.000.000.000 es demasiado grande."))
                .body("'path'", containsString("/elements/area/groupBy/type"));
    }
    
    
    @Test
    public void test_308_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/type?" + 
                    "bpolys=m%3A8.704561%2C49.403252%2C8.73686%2C49.4137%2C8.701%2C49.408%2C8.7444%2C49.405%2C8.704561%2C49.403252%7CkKdzr%3A8.704561%2C49.403252%2C8.7146%2C49.430%2C8.701%2C49.42030%2C8.7093%2C49.411%2C8.704561%2C49.403252%7CMhC%3A8.704561%2C49.403252%2C8.721%2C49.426%2C8.700674%2C49.408%2C8.7307%2C49.41810%2C8.704561%2C49.403252&" + 
                    "format=json&" + 
                    "keys=highway&" + 
                    "time=2009-11-13&" + 
                    "timeout=38&" + 
                    "values=unclassified")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.73686 49.4137 ) and LINESTRING ( 8.7093 49.411, 8.704561 49.403252 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/area/groupBy/type"));
    }
    
    
    @Test
    public void test_309_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/type?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22a%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.733%2C49.416%5D%2C%5B8.7296%2C49.41875%5D%2C%5B8.7042%2C49.434%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22B%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7053%2C49.408%5D%2C%5B8.713%2C49.4075%5D%2C%5B8.744%2C49.4344%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=ref%3D*&" + 
                    "timeout=34")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.7053 49.408, 8.713 49.4075 ) and LINESTRING ( 8.726523242670684 49.42059726571937, 8.704561 49.403252 ) [ (8.710172233722492, 49.40768362118685, NaN) ]"))
                .body("'path'", containsString("/elements/area/groupBy/type"));
    }
    
    
    @Test
    public void test_310_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/type?" + 
                    "bcircles=8.7241%2C49.430235%2C4%7C8.714859%2C49.413%2C271456696&" + 
                    "keys=highway&" + 
                    "time=2016-11-27&" + 
                    "timeout=37")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El ángulo 316.690.995.444.825,75 es demasiado grande."))
                .body("'path'", containsString("/elements/area/groupBy/type"));
    }
    
    
    @Test
    public void test_311_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/type?" + 
                    "bpolys=8.704561%2C49.403252%2C8.7460%2C49.405%2C8.73902%2C49.404%2C8.735%2C49.4274%2C8.704561%2C49.403252&" + 
                    "showMetadata=false&" + 
                    "time=2014-02-21&" + 
                    "timeout=100")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.746 49.405 ) and LINESTRING ( 8.73902 49.404, 8.735 49.4274 ) [ (8.738899659412153, 49.40470048998896, NaN) ]"))
                .body("'path'", containsString("/elements/area/groupBy/type"));
    }
    
    
    @Test
    public void test_312_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/type?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22DjwQn%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.736%2C49.4342%5D%2C%5B8.7064%2C49.435%5D%2C%5B8.7045%2C49.436%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22Cmne%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.71517%2C49.417%5D%2C%5B8.704536%2C49.4040%5D%2C%5B8.7211%2C49.4372%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22o%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.704137%2C49.428%5D%2C%5B8.7119%2C49.407%5D%2C%5B8.704%2C49.409%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "format=json&" + 
                    "keys=highway&" + 
                    "showMetadata=yes&" + 
                    "timeout=60&" + 
                    "values=footway")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.71517 49.417, 8.704559553059674 49.40402879347149 ) and LINESTRING ( 8.719851077191453 49.4346364573732, 8.704561 49.403252 ) [ (8.705498903696236, 49.40517714388293, NaN) ]"))
                .body("'path'", containsString("/elements/area/groupBy/type"));
    }
    
    
    @Test
    public void test_313_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/tag?" + 
                    "bpolys=ww%3A8.704561%2C49.403252%2C8.735%2C49.43261%2C8.702%2C49.438733%2C8.7015%2C49.416%2C8.704561%2C49.403252%7CWf%3A8.704561%2C49.403252%2C8.7364%2C49.4255%2C8.734%2C49.421%2C8.7094%2C49.428%2C8.704561%2C49.403252%7CUrL%3A8.704561%2C49.403252%2C8.70802%2C49.435%2C8.723%2C49.432278%2C8.727%2C49.412%2C8.704561%2C49.403252&" + 
                    "format=geojson&" + 
                    "groupByKey=highway&" + 
                    "keys=highway&" + 
                    "time=2016-09-30&" + 
                    "timeout=93&" + 
                    "values=track")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.735 49.43261 ) and LINESTRING ( 8.7015 49.416, 8.704561 49.403252 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/area/groupBy/tag"));
    }
    
    
    @Test
    public void test_314_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/tag?" + 
                    "bcircles=K%3A8.706%2C49.436%2C8%7CkEQPW%3A8.720%2C49.410%2C8%7CLQ%3A8.711%2C49.421%2C624%7CEva%3A8.710%2C49.428456%2C7954355726&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=secondary&" + 
                    "keys=highway&" + 
                    "time=2017-07-20&" + 
                    "values=track")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El ángulo 172.747.053.107.052.560.000.000.000 es demasiado grande."))
                .body("'path'", containsString("/elements/area/groupBy/tag"));
    }
    
    
    @Test
    public void test_315_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/tag?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22O%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.726%2C49.415751%5D%2C%5B8.737%2C49.432%5D%2C%5B8.702%2C49.410%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22mK%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.702398%2C49.4251%5D%2C%5B8.7045%2C49.433%5D%2C%5B8.70323%2C49.4129%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22gD%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.738%2C49.402%5D%2C%5B8.710%2C49.4101%5D%2C%5B8.7071%2C49.41345%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "groupByKey=building&" + 
                    "groupByValues=turning_circle%2Cstreet_lamp%2Ctrack&" + 
                    "time=2011-01-25&" + 
                    "timeout=69")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.703782037091297 49.41112013760024, 8.702398 49.4251 ) and LINESTRING ( 8.7045 49.433, 8.70323 49.4129 ) [ (8.703376413563209, 49.4152172540319, NaN) ]"))
                .body("'path'", containsString("/elements/area/groupBy/tag"));
    }
    
    
    @Test
    public void test_316_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/tag?" + 
                    "bpolys=Xby%3A8.704561%2C49.403252%2C8.7262%2C49.401398%2C8.74728%2C49.436%2C8.704393%2C49.4162%2C8.704561%2C49.403252%7CzJ%3A8.704561%2C49.403252%2C8.7005%2C49.435%2C8.702%2C49.421554%2C8.704%2C49.437%2C8.704561%2C49.403252&" + 
                    "format=csv&" + 
                    "groupByKey=highway&" + 
                    "keys=highway&" + 
                    "time=2008-10-23&" + 
                    "timeout=25")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.7262 49.401398 ) and LINESTRING ( 8.704561 49.403252, 8.7005 49.435 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/area/groupBy/tag"));
    }
    
    
    @Test
    public void test_317_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/key?" + 
                    "bcircles=sQxBX%3A8.739129%2C49.438%2C9%7CZszM%3A8.735503%2C49.409%2C213341029%7Cw%3A8.7164%2C49.422%2C8&" + 
                    "format=geojson&" + 
                    "groupByKeys=turn%3Alanes%2Cbicycle&" + 
                    "keys=highway&" + 
                    "showMetadata=yes&" + 
                    "timeout=56&" + 
                    "values=primary_link")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El ángulo 46.043.787.896.647,31 es demasiado grande."))
                .body("'path'", containsString("/elements/area/groupBy/key"));
    }
    
    
    @Test
    public void test_318_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/key?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22WlJ%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7336%2C49.432%5D%2C%5B8.700329%2C49.439%5D%2C%5B8.7025%2C49.404%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22e%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7197%2C49.4247%5D%2C%5B8.72157%2C49.407%5D%2C%5B8.703%2C49.430971%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22ibzUp%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.740%2C49.405%5D%2C%5B8.717%2C49.4331%5D%2C%5B8.709911%2C49.413%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=foot%21%3D*+or+length%3A%28+..+100%29&" + 
                    "groupByKeys=building%2Cbicycle&" + 
                    "showMetadata=no&" + 
                    "timeout=32")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.7197 49.4247 ) and LINESTRING ( 8.72157 49.407, 8.703 49.430971 ) [ (8.714054331816998, 49.416701566075105, NaN) ]"))
                .body("'path'", containsString("/elements/area/groupBy/key"));
    }
    
    
    @Test
    public void test_319_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/key?" + 
                    "bcircles=8.746807%2C49.42272%2C5%7C8.7462%2C49.435%2C406%7C8.74227%2C49.410%2C374%7C8.716342%2C49.410%2C364718326&" + 
                    "filter=oneway%3D*+and+not+id%3A%281+..+9999%29&" + 
                    "format=json&" + 
                    "groupByKeys=addr%3Ahousenumber%2Csource%3Amaxspeed%2Cdestination&" + 
                    "time=2012-06-21&" + 
                    "timeout=82")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El ángulo 3.362.323.064.537.689,5 es demasiado grande."))
                .body("'path'", containsString("/elements/area/groupBy/key"));
    }
    
    
    @Test
    public void test_320_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/key?" + 
                    "bpolys=t%3A8.704561%2C49.403252%2C8.7476%2C49.4137%2C8.701%2C49.40296%2C8.7458%2C49.412%2C8.704561%2C49.403252&" + 
                    "filter=bicycle%3D*+and+length%3A%28+..+100%29&" + 
                    "format=csv&" + 
                    "groupByKeys=surface%2Csmoothness%2Caddr%3Acountry&" + 
                    "time=2008-03-30&" + 
                    "timeout=61")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.7476 49.4137 ) and LINESTRING ( 8.701 49.40296, 8.7458 49.412 ) [ (8.714972277115393, 49.405779405917926, NaN) ]"))
                .body("'path'", containsString("/elements/area/groupBy/key"));
    }
    
    
    @Test
    public void test_321_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/key?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22houAZ%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.734%2C49.41854%5D%2C%5B8.742%2C49.438%5D%2C%5B8.7049%2C49.420%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22VYiCo%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.716%2C49.410%5D%2C%5B8.715%2C49.422%5D%2C%5B8.74998%2C49.4017%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22UTDK%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7015%2C49.409%5D%2C%5B8.708%2C49.417%5D%2C%5B8.70412%2C49.430%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=maxspeed%21%3D*+and+length%3A%28+..+100%29&" + 
                    "format=csv&" + 
                    "groupByKeys=oneway%2Ctracktype&" + 
                    "showMetadata=no&" + 
                    "time=2010-09-30")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.7015 49.409, 8.704758523787094 49.413010490814884 ) and LINESTRING ( 8.70412 49.43, 8.704561 49.403252 ) [ (8.70440723795028, 49.41257813901573, NaN) ]"))
                .body("'path'", containsString("/elements/area/groupBy/key"));
    }
    
    
    @Test
    public void test_322_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=Qyo%3A8.744%2C49.438%2C7&" + 
                    "format=geojson&" + 
                    "groupByKey=highway&" + 
                    "keys=highway&" + 
                    "showMetadata=no&" + 
                    "time=2016-08-22&" + 
                    "timeout=94&" + 
                    "values=steps")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/utils/GroupByBoundaryGeoJsonGenerator_75_generateGroupByResultGeoJson
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Index 0 out of bounds for length 0"))
                .body("'path'", containsString("/elements/area/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_323_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=ct%3A8.704561%2C49.403252%2C8.716%2C49.428%2C8.722%2C49.410317%2C8.7094%2C49.43363%2C8.704561%2C49.403252%7Cb%3A8.704561%2C49.403252%2C8.749041%2C49.407%2C8.7459%2C49.403%2C8.731517%2C49.4175%2C8.704561%2C49.403252%7CXD%3A8.704561%2C49.403252%2C8.7179%2C49.4034%2C8.74013%2C49.435%2C8.707%2C49.430%2C8.704561%2C49.403252&" + 
                    "filter=type%21%3D*+and+geometry%3Aline+or+length%3A%28+..+100%29&" + 
                    "format=csv&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=civic%2Cpath&" + 
                    "showMetadata=no&" + 
                    "time=2011-12-31&" + 
                    "timeout=51")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.716 49.428 ) and LINESTRING ( 8.731517 49.4175, 8.704561 49.403252 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/area/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_324_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22UF%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7030%2C49.410%5D%2C%5B8.704291%2C49.412%5D%2C%5B8.70438%2C49.4049%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22PLs%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.745%2C49.4234%5D%2C%5B8.746%2C49.418%5D%2C%5B8.70708%2C49.42746%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "format=csv&" + 
                    "groupByKey=building&" + 
                    "keys=highway&" + 
                    "showMetadata=true&" + 
                    "time=2011-06-27&" + 
                    "values=secondary_link")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.745 49.4234 ) and LINESTRING ( 8.746 49.418, 8.70708 49.42746 ) [ (8.738043336179219, 49.419933968133215, NaN) ]"))
                .body("'path'", containsString("/elements/area/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_325_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=UeIM%3A8.71139%2C49.436829%2C4%7CfjjD%3A8.727%2C49.4098%2C6323726996&" + 
                    "groupByKey=highway&" + 
                    "keys=highway&" + 
                    "time=2009-12-17&" + 
                    "timeout=87&" + 
                    "values=footway")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El ángulo 27.481.693.794.878.967.000.000.000 es demasiado grande."))
                .body("'path'", containsString("/elements/area/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_326_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=K%3A8.7437%2C49.416%2C994&" + 
                    "format=geojson&" + 
                    "groupByKey=highway&" + 
                    "keys=highway&" + 
                    "time=2009-06-27&" + 
                    "values=give_way")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/utils/GroupByBoundaryGeoJsonGenerator_75_generateGroupByResultGeoJson
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Index 0 out of bounds for length 0"))
                .body("'path'", containsString("/elements/area/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_327_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=eOZ%3A8.704561%2C49.403252%2C8.747%2C49.412%2C8.707%2C49.425%2C8.7378%2C49.4188%2C8.704561%2C49.403252&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=emergency_access_point%2Cship%2Capartments&" + 
                    "keys=highway&" + 
                    "showMetadata=no&" + 
                    "time=2009-01-24&" + 
                    "timeout=88&" + 
                    "values=living_street")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.747 49.412, 8.707 49.425 ) and LINESTRING ( 8.7378 49.4188, 8.704561 49.403252 ) [ (8.732994028615966, 49.41655194069981, NaN) ]"))
                .body("'path'", containsString("/elements/area/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_328_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22ExaAr%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7205%2C49.425001%5D%2C%5B8.70452%2C49.411%5D%2C%5B8.739%2C49.414943%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22gxO%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.705%2C49.41014%5D%2C%5B8.7045%2C49.413%5D%2C%5B8.704972%2C49.4106%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22fJqPG%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.706%2C49.4169%5D%2C%5B8.703%2C49.40278%5D%2C%5B8.700%2C49.4301%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "groupByKey=building&" + 
                    "keys=highway&" + 
                    "time=2015-07-07")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.7205 49.425001 ) and LINESTRING ( 8.705388394022252 49.41109930619576, 8.739 49.414943 ) [ (8.710762364231924, 49.41171385273105, NaN) ]"))
                .body("'path'", containsString("/elements/area/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_329_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=8.739538%2C49.404%2C120955380%7C8.7478%2C49.4005%2C7%7C8.70828%2C49.41672%2C8%7C8.703%2C49.400%2C29426454278&" + 
                    "filter=ref%3D*+and+type%3Away+and+not+length%3A%28+..+100%29&" + 
                    "groupByKey=building&" + 
                    "groupByValues=unclassified%2Chotel&" + 
                    "time=2007-11-18&" + 
                    "timeout=85")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El ángulo 490.132.083.195,995 es demasiado grande."))
                .body("'path'", containsString("/elements/area/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_330_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/boundary?" + 
                    "bcircles=8.717%2C49.4248%2C6%7C8.7214%2C49.4113%2C743705638%7C8.704%2C49.424182%2C81%7C8.745%2C49.403%2C39&" + 
                    "keys=highway&" + 
                    "time=2009-07-08&" + 
                    "timeout=33")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El ángulo 1.005.688.243.714.727.810 es demasiado grande."))
                .body("'path'", containsString("/elements/area/groupBy/boundary"));
    }
    
    
    @Test
    public void test_331_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/boundary?" + 
                    "bpolys=8.704561%2C49.403252%2C8.7028%2C49.4258%2C8.742%2C49.40977%2C8.746%2C49.420%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.739%2C49.436%2C8.70061%2C49.4378%2C8.70547%2C49.427%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.740%2C49.4112%2C8.708%2C49.4257%2C8.739%2C49.4176%2C8.704561%2C49.403252&" + 
                    "time=2015-11-22&" + 
                    "timeout=80")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.7028 49.4258 ) and LINESTRING ( 8.70547 49.427, 8.704561 49.403252 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/area/groupBy/boundary"));
    }
    
    
    @Test
    public void test_332_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/boundary?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22tLMN%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7286%2C49.432%5D%2C%5B8.705%2C49.418%5D%2C%5B8.738436%2C49.428%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22c%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.721%2C49.4265%5D%2C%5B8.72660%2C49.41940%5D%2C%5B8.726%2C49.4119%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22aZp%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.705%2C49.401%5D%2C%5B8.735%2C49.4123%5D%2C%5B8.7044%2C49.421%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=smoothness%21%3D*+or+not+type%3Arelation+or+length%3A%28+..+100%29&" + 
                    "format=geojson&" + 
                    "showMetadata=false&" + 
                    "time=2012-01-26&" + 
                    "timeout=100")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.722456628406253 49.424653203270644 ) and LINESTRING ( 8.717668751721078 49.42178895553328, 8.723370702219121 49.4234942882579 ) [ (8.72085953061587, 49.422743249974836, NaN) ]"))
                .body("'path'", containsString("/elements/area/groupBy/boundary"));
    }
    
    
    @Test
    public void test_333_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/boundary?" + 
                    "bcircles=8.723%2C49.42338%2C738741169&" + 
                    "filter=type%3D*+and+geometry%3Aline&" + 
                    "time=2009-11-03&" + 
                    "timeout=83")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El ángulo 955.078.213.151.793.920 es demasiado grande."))
                .body("'path'", containsString("/elements/area/groupBy/boundary"));
    }
    
    
    @Test
    public void test_334_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/boundary?" + 
                    "bpolys=d%3A8.704561%2C49.403252%2C8.726%2C49.4297%2C8.70292%2C49.4362%2C8.741%2C49.411564%2C8.704561%2C49.403252%7Ct%3A8.704561%2C49.403252%2C8.7375%2C49.4120%2C8.7278%2C49.41470%2C8.709%2C49.431%2C8.704561%2C49.403252&" + 
                    "format=json&" + 
                    "keys=highway&" + 
                    "showMetadata=true&" + 
                    "time=2010-10-05&" + 
                    "timeout=98")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.726 49.4297 ) and LINESTRING ( 8.741 49.411564, 8.704561 49.403252 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/area/groupBy/boundary"));
    }
    
    
    @Test
    public void test_335_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/boundary?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22Q%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.732458%2C49.4372%5D%2C%5B8.719%2C49.412%5D%2C%5B8.7241%2C49.4379%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22KnRc%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7251%2C49.4188%5D%2C%5B8.701657%2C49.43536%5D%2C%5B8.708005%2C49.410%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=landuse%3D*+and+area%3A%281.0+..+1E6%29&" + 
                    "showMetadata=no&" + 
                    "time=2011-10-22&" + 
                    "timeout=64")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.720188641270978 49.42226935548149, 8.732458 49.4372 ) and LINESTRING ( 8.720920369874225 49.42175246661617, 8.7241 49.4379 ) [ (8.721284819828265, 49.423603300696485, NaN) ]"))
                .body("'path'", containsString("/elements/area/groupBy/boundary"));
    }
    
    
    @Test
    public void test_336_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density/groupBy/type?" + 
                    "bcircles=kG%3A8.728%2C49.429%2C1%7Cfl%3A8.728%2C49.414976%2C6%7CJOjZq%3A8.748%2C49.420%2C1%7CsUKi%3A8.748%2C49.428%2C569706987&" + 
                    "format=csv&" + 
                    "keys=highway&" + 
                    "timeout=49")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El ángulo 119.563.139.253.385.904 es demasiado grande."))
                .body("'path'", containsString("/elements/area/density/groupBy/type"));
    }
    
    
    @Test
    public void test_337_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density/groupBy/type?" + 
                    "bpolys=dAYsp%3A8.704561%2C49.403252%2C8.717%2C49.438%2C8.700%2C49.4324%2C8.706%2C49.4352%2C8.704561%2C49.403252%7CizMn%3A8.704561%2C49.403252%2C8.712916%2C49.4094%2C8.704%2C49.439%2C8.70888%2C49.413%2C8.704561%2C49.403252&" + 
                    "time=2009-07-31&" + 
                    "timeout=71")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.717 49.438 ) and LINESTRING ( 8.706 49.4352, 8.704561 49.403252 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/area/density/groupBy/type"));
    }
    
    
    @Test
    public void test_338_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/density/groupBy/type?" + 
                    "bcircles=8.727%2C49.418%2C3%7C8.7058%2C49.400%2C602509541&" + 
                    "keys=highway&" + 
                    "showMetadata=no&" + 
                    "time=2010-03-21&" + 
                    "timeout=72&" + 
                    "values=stop")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El ángulo 186.266.501.901.517.440 es demasiado grande."))
                .body("'path'", containsString("/elements/area/density/groupBy/type"));
    }
    
    
    @Test
    public void test_339_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/density/groupBy/type?" + 
                    "bpolys=uv%3A8.704561%2C49.403252%2C8.727227%2C49.4162%2C8.703%2C49.427%2C8.7082%2C49.433638%2C8.704561%2C49.403252&" + 
                    "format=json&" + 
                    "keys=highway&" + 
                    "time=2012-02-23&" + 
                    "timeout=51&" + 
                    "values=living_street")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.727227 49.4162, 8.703 49.427 ) and LINESTRING ( 8.7082 49.433638, 8.704561 49.403252 ) [ (8.707181787488176, 49.425135827594325, NaN) ]"))
                .body("'path'", containsString("/elements/area/density/groupBy/type"));
    }
    
    
    @Test
    public void test_340_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/density/groupBy/type?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22F%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.740%2C49.406645%5D%2C%5B8.7054%2C49.4304%5D%2C%5B8.705%2C49.428%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22Aj%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.749%2C49.4253%5D%2C%5B8.702%2C49.43927%5D%2C%5B8.7438%2C49.4360%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22Dzpb%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.704%2C49.438%5D%2C%5B8.70914%2C49.417%5D%2C%5B8.722%2C49.4021%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "format=csv&" + 
                    "keys=highway&" + 
                    "showMetadata=yes&" + 
                    "time=2014-08-26&" + 
                    "timeout=85&" + 
                    "values=steps")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.749 49.4253, 8.702 49.43927 ) and LINESTRING ( 8.7438 49.436, 8.714120143460274 49.41122984933452 ) [ (8.735711745147976, 49.429249721708146, NaN) ]"))
                .body("'path'", containsString("/elements/area/density/groupBy/type"));
    }
    
    
    @Test
    public void test_341_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density/groupBy/tag?" + 
                    "bcircles=8.732087%2C49.409%2C61%7C8.73450%2C49.43865%2C42%7C8.717%2C49.403%2C2%7C8.7309%2C49.43294%2C733012858619&" + 
                    "filter=building%21%3D*+or+id%3A%281+..+9999%29&" + 
                    "format=csv&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=turning_circle%2Chotel%2Cgive_way&" + 
                    "showMetadata=false&" + 
                    "timeout=72")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El ángulo 899.049.096.414.371.400.000.000.000.000.000.000.000.000 es demasiado grande."))
                .body("'path'", containsString("/elements/area/density/groupBy/tag"));
    }
    
    
    @Test
    public void test_342_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density/groupBy/tag?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22bGlTg%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.71626%2C49.4269%5D%2C%5B8.710%2C49.41939%5D%2C%5B8.70341%2C49.4194%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22N%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.727%2C49.4021%5D%2C%5B8.703%2C49.401%5D%2C%5B8.7199%2C49.42455%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22eXy%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.72131%2C49.4229%5D%2C%5B8.738%2C49.419196%5D%2C%5B8.712%2C49.424%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=emergency_access_point%2Cstreet_lamp&" + 
                    "showMetadata=true&" + 
                    "timeout=94")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.72131 49.4229 ) and LINESTRING ( 8.738 49.419196, 8.71458870112563 49.42352168768433 ) [ (8.72085324879465, 49.42236419203041, NaN) ]"))
                .body("'path'", containsString("/elements/area/density/groupBy/tag"));
    }
    
    
    @Test
    public void test_343_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/density/groupBy/tag?" + 
                    "bcircles=TL%3A8.7118%2C49.417%2C713%7CEvWVp%3A8.716%2C49.415%2C50%7Cy%3A8.711%2C49.438%2C4%7CFY%3A8.713%2C49.430%2C440752333595&" + 
                    "filter=name%3D*+and+not+geometry%3Aline+or+not+length%3A%28+..+100%29&" + 
                    "format=json&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=dormitory%2Ctraffic_signals%2Croof&" + 
                    "time=2010-02-24&" + 
                    "timeout=36")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El ángulo 15.354.811.473.898.400.000.000.000.000.000.000.000.000 es demasiado grande."))
                .body("'path'", containsString("/elements/area/density/groupBy/tag"));
    }
    
    
    @Test
    public void test_344_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/density/groupBy/tag?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22PQUHm%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.729116%2C49.4148%5D%2C%5B8.7042%2C49.409225%5D%2C%5B8.705928%2C49.4392%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22OOQiR%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.710%2C49.400%5D%2C%5B8.740%2C49.417%5D%2C%5B8.7005%2C49.405%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "format=geojson&" + 
                    "groupByKey=building&" + 
                    "groupByValues=demolished%2Cship&" + 
                    "keys=highway&" + 
                    "showMetadata=false&" + 
                    "timeout=73")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.729116 49.4148, 8.7042 49.409225 ) and LINESTRING ( 8.705928 49.4392, 8.704675711583977 49.40626857060779 ) [ (8.704793183354644, 49.40935772584693, NaN) ]"))
                .body("'path'", containsString("/elements/area/density/groupBy/tag"));
    }
    
    
    @Test
    public void test_345_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/density/groupBy/tag?" + 
                    "bpolys=8.704561%2C49.403252%2C8.7194%2C49.404%2C8.731%2C49.4129%2C8.708505%2C49.400%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.722773%2C49.41984%2C8.702100%2C49.435%2C8.7066%2C49.425179%2C8.704561%2C49.403252&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=chapel%2Coffice&" + 
                    "time=2013-04-20&" + 
                    "timeout=20")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.7194 49.404 ) and LINESTRING ( 8.708505 49.4, 8.704561 49.403252 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/area/density/groupBy/tag"));
    }
    
    
    @Test
    public void test_346_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=CJeEm%3A8.739%2C49.4385%2C49&" + 
                    "filter=maxspeed%3D*+and+area%3A%281.0+..+1E6%29&" + 
                    "format=geojson&" + 
                    "groupByKey=highway&" + 
                    "showMetadata=yes&" + 
                    "time=2014-07-10&" + 
                    "timeout=36")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/utils/GroupByBoundaryGeoJsonGenerator_75_generateGroupByResultGeoJson
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Index 0 out of bounds for length 0"))
                .body("'path'", containsString("/elements/area/density/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_347_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=EZ%3A8.704561%2C49.403252%2C8.745%2C49.4020%2C8.7041%2C49.413%2C8.7384%2C49.43298%2C8.704561%2C49.403252%7Cbou%3A8.704561%2C49.403252%2C8.7119%2C49.407%2C8.709%2C49.40197%2C8.707%2C49.42350%2C8.704561%2C49.403252%7CAaDDX%3A8.704561%2C49.403252%2C8.7099%2C49.429%2C8.73915%2C49.420%2C8.704%2C49.4334%2C8.704561%2C49.403252&" + 
                    "groupByKey=building&" + 
                    "keys=highway&" + 
                    "timeout=100")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.745 49.402 ) and LINESTRING ( 8.704561 49.403252, 8.7119 49.407 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/area/density/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_348_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22FTku%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7255%2C49.416124%5D%2C%5B8.704%2C49.4305%5D%2C%5B8.726%2C49.418307%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22ow%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.712875%2C49.421921%5D%2C%5B8.74982%2C49.426635%5D%2C%5B8.709310%2C49.418162%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=oneway%21%3D*+and+length%3A%28+..+100%29&" + 
                    "format=geojson&" + 
                    "groupByKey=building&" + 
                    "groupByValues=give_way%2Cuniversity%2Csecondary&" + 
                    "showMetadata=false&" + 
                    "time=2016-05-06&" + 
                    "timeout=29")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.712875 49.421921 ) and LINESTRING ( 8.719320672444809 49.42025581455505, 8.70931 49.418162 ) [ (8.711395205972236, 49.41859813799563, NaN) ]"))
                .body("'path'", containsString("/elements/area/density/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_349_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/density/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=TIIRE%3A8.7320%2C49.402%2C24%7CXM%3A8.74957%2C49.429%2C3%7CNCcm%3A8.727%2C49.431%2C2%7CtWD%3A8.7230%2C49.404%2C3001635116&" + 
                    "format=csv&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=footway%2Capartments%2Csecondary&" + 
                    "showMetadata=yes&" + 
                    "time=2010-03-11&" + 
                    "timeout=73")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El ángulo 70.746.103.457.151.850.000.000 es demasiado grande."))
                .body("'path'", containsString("/elements/area/density/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_350_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/density/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=8.704561%2C49.403252%2C8.70660%2C49.4272%2C8.720%2C49.401%2C8.7470%2C49.4293%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.7259%2C49.408984%2C8.7331%2C49.4160%2C8.7049%2C49.408%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.710%2C49.417%2C8.747%2C49.4309%2C8.7148%2C49.407%2C8.704561%2C49.403252&" + 
                    "filter=addr%3Acity%3D*+or+length%3A%28+..+100%29&" + 
                    "groupByKey=building&" + 
                    "groupByValues=path%2Cfootway&" + 
                    "showMetadata=no&" + 
                    "time=2014-04-10&" + 
                    "timeout=91")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.7066 49.4272 ) and LINESTRING ( 8.704561 49.403252, 8.7259 49.408984 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/area/density/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_351_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/density/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22l%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7281%2C49.4091%5D%2C%5B8.7043%2C49.433%5D%2C%5B8.7320%2C49.432%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22oO%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.741%2C49.43244%5D%2C%5B8.707%2C49.404%5D%2C%5B8.704836%2C49.4390%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=ref%21%3D*+or+geometry%3Aline&" + 
                    "format=json&" + 
                    "groupByKey=highway&" + 
                    "showMetadata=no&" + 
                    "time=2014-10-21&" + 
                    "timeout=91")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.720894765838436 49.41633550825468, 8.705267011587646 49.43202892533846 ) and LINESTRING ( 8.732 49.432, 8.706895052179572 49.40569740005315 ) [ (8.718930996380955, 49.41830752884434, NaN) ]"))
                .body("'path'", containsString("/elements/area/density/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_352_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density/groupBy/boundary?" + 
                    "bcircles=8.734032%2C49.407794%2C300341735%7C8.7143%2C49.41525%2C9&" + 
                    "format=geojson&" + 
                    "keys=highway&" + 
                    "time=2012-11-06")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El ángulo 710.668.300.107.450,4 es demasiado grande."))
                .body("'path'", containsString("/elements/area/density/groupBy/boundary"));
    }
    
    
    @Test
    public void test_353_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density/groupBy/boundary?" + 
                    "bpolys=8.704561%2C49.403252%2C8.706%2C49.409%2C8.705%2C49.400%2C8.7089%2C49.4195%2C8.704561%2C49.403252&" + 
                    "format=geojson&" + 
                    "keys=highway&" + 
                    "showMetadata=true&" + 
                    "time=2014-01-21&" + 
                    "timeout=81")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.706 49.409, 8.705 49.4 ) and LINESTRING ( 8.7089 49.4195, 8.704561 49.403252 ) [ (8.705931601105117, 49.40838440994606, NaN) ]"))
                .body("'path'", containsString("/elements/area/density/groupBy/boundary"));
    }
    
    
    @Test
    public void test_354_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density/groupBy/boundary?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22P%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.740%2C49.401%5D%2C%5B8.70453%2C49.437%5D%2C%5B8.738%2C49.4141%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22Cz%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.742%2C49.404%5D%2C%5B8.746%2C49.423%5D%2C%5B8.70593%2C49.4026%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22cp%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.715%2C49.405%5D%2C%5B8.7019%2C49.408%5D%2C%5B8.73288%2C49.415%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "format=json&" + 
                    "keys=highway&" + 
                    "time=2010-09-05&" + 
                    "values=track")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.737139839072489 49.40390289803751 ) and LINESTRING ( 8.711864676071537 49.40562139735112, 8.706916642765012 49.40310230876981 ) [ (8.707318897894154, 49.40330710050014, NaN) ]"))
                .body("'path'", containsString("/elements/area/density/groupBy/boundary"));
    }
    
    
    @Test
    public void test_355_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/density/groupBy/boundary?" + 
                    "bcircles=l%3A8.749%2C49.435%2C1243293844%7CQJuj%3A8.73477%2C49.4289%2C5%7CRaQX%3A8.7471%2C49.419955%2C4%7CsA%3A8.703%2C49.432328%2C644&" + 
                    "format=geojson&" + 
                    "keys=highway&" + 
                    "time=2012-06-23&" + 
                    "timeout=91&" + 
                    "values=street_lamp")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El ángulo 61.597.373.233.092.800.000 es demasiado grande."))
                .body("'path'", containsString("/elements/area/density/groupBy/boundary"));
    }
    
    
    @Test
    public void test_356_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/density/groupBy/boundary?" + 
                    "bpolys=QyUcf%3A8.704561%2C49.403252%2C8.738%2C49.4320%2C8.740%2C49.420778%2C8.709%2C49.4200%2C8.704561%2C49.403252%7CQ%3A8.704561%2C49.403252%2C8.7469%2C49.423%2C8.734%2C49.437%2C8.737%2C49.421248%2C8.704561%2C49.403252%7CdExQ%3A8.704561%2C49.403252%2C8.746%2C49.410%2C8.712%2C49.417%2C8.71261%2C49.417%2C8.704561%2C49.403252&" + 
                    "filter=smoothness%21%3D*&" + 
                    "time=2009-07-23&" + 
                    "timeout=100")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.738 49.432 ) and LINESTRING ( 8.737 49.421248, 8.704561 49.403252 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/area/density/groupBy/boundary"));
    }
    
    
    @Test
    public void test_357_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/density/groupBy/boundary?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22E%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.702278%2C49.405377%5D%2C%5B8.725%2C49.4142%5D%2C%5B8.701%2C49.418%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22e%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.70776%2C49.4254%5D%2C%5B8.70487%2C49.422%5D%2C%5B8.70917%2C49.403%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22d%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7329%2C49.4377%5D%2C%5B8.700%2C49.428%5D%2C%5B8.703%2C49.40200%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=maxspeed%3D*+and+type%3Away+and+id%3A%281+..+9999%29&" + 
                    "format=csv&" + 
                    "timeout=89")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.70776 49.4254 ) and LINESTRING ( 8.70487 49.422, 8.708130884658956 49.40759143987903 ) [ (8.706334348309868, 49.41552962374709, NaN) ]"))
                .body("'path'", containsString("/elements/area/density/groupBy/boundary"));
    }
    
    
    @Test
    public void test_358_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density?" + 
                    "bcircles=Y%3A8.71457%2C49.429%2C138066216%7CbepG%3A8.7144%2C49.43795%2C4&" + 
                    "filter=source%3Amaxspeed%21%3D*+or+length%3A%28+..+100%29&" + 
                    "time=2014-11-22&" + 
                    "timeout=95")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El ángulo 1.419.134.456.017,716 es demasiado grande."))
                .body("'path'", containsString("/elements/area/density"));
    }
    
    
    @Test
    public void test_359_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22lp%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.717735%2C49.4127%5D%2C%5B8.712%2C49.4081%5D%2C%5B8.724%2C49.427%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22Z%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.716198%2C49.4072%5D%2C%5B8.711%2C49.419%5D%2C%5B8.718%2C49.406%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22xVl%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.705559%2C49.438115%5D%2C%5B8.717%2C49.438926%5D%2C%5B8.703346%2C49.422%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "keys=highway&" + 
                    "showMetadata=false&" + 
                    "time=2011-04-21&" + 
                    "timeout=97&" + 
                    "values=platform")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.717735 49.4127 ) and LINESTRING ( 8.712 49.4081, 8.724 49.427 ) [ (8.712567745474983, 49.40899419912309, NaN) ]"))
                .body("'path'", containsString("/elements/area/density"));
    }
    
    
    @Test
    public void test_360_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/density?" + 
                    "bcircles=w%3A8.746%2C49.4265%2C493171073&" + 
                    "filter=ref%3D*+and+area%3A%281.0+..+1E6%29&" + 
                    "showMetadata=yes&" + 
                    "time=2012-07-28")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El ángulo 37.690.106.820.432.600 es demasiado grande."))
                .body("'path'", containsString("/elements/area/density"));
    }
    
    
    @Test
    public void test_361_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/density?" + 
                    "bpolys=rfURE%3A8.704561%2C49.403252%2C8.749%2C49.43336%2C8.70637%2C49.403%2C8.7248%2C49.423633%2C8.704561%2C49.403252%7CDyvve%3A8.704561%2C49.403252%2C8.70221%2C49.422%2C8.747%2C49.4214%2C8.733%2C49.43308%2C8.704561%2C49.403252%7CjK%3A8.704561%2C49.403252%2C8.7466%2C49.42807%2C8.7047%2C49.4288%2C8.701%2C49.426%2C8.704561%2C49.403252&" + 
                    "filter=maxspeed%21%3D*+or+area%3A%281.0+..+1E6%29&" + 
                    "showMetadata=true&" + 
                    "time=2012-11-20&" + 
                    "timeout=69")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.749 49.43336 ) and LINESTRING ( 8.704561 49.403252, 8.70221 49.422 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/area/density"));
    }
    
    
    @Test
    public void test_362_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/density?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22LbVQQ%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.749%2C49.4199%5D%2C%5B8.739%2C49.433%5D%2C%5B8.70300%2C49.407406%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22Ezp%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7407%2C49.434%5D%2C%5B8.724%2C49.43205%5D%2C%5B8.7041%2C49.43264%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22BHZq%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7166%2C49.400551%5D%2C%5B8.714964%2C49.4050%5D%2C%5B8.74923%2C49.4048%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=maxspeed%21%3D*+and+length%3A%28+..+100%29&" + 
                    "time=2010-06-15&" + 
                    "timeout=37")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.7166 49.400551, 8.714964 49.405 ) and LINESTRING ( 8.74923 49.4048, 8.704561 49.403252 ) [ (8.715467790262057, 49.40362997379224, NaN) ]"))
                .body("'path'", containsString("/elements/area/density"));
    }
    
    
    @Test
    public void test_363_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area?" + 
                    "bcircles=Aw%3A8.71357%2C49.401%2C46%7CCHf%3A8.711%2C49.403709%2C86%7Ck%3A8.7046%2C49.401893%2C332790260&" + 
                    "filter=destination%21%3D*+and+area%3A%281.0+..+1E6%29&" + 
                    "showMetadata=yes&" + 
                    "time=2017-06-04&" + 
                    "timeout=72")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El ángulo 1.613.346.812.903.250 es demasiado grande."))
                .body("'path'", containsString("/elements/area"));
    }
    
    
    @Test
    public void test_364_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area?" + 
                    "bpolys=8.704561%2C49.403252%2C8.71832%2C49.41428%2C8.703%2C49.431%2C8.74954%2C49.416%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.7163%2C49.409268%2C8.7106%2C49.428%2C8.732044%2C49.414%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.741%2C49.401%2C8.72362%2C49.406%2C8.702%2C49.420%2C8.704561%2C49.403252&" + 
                    "filter=type%21%3D*&" + 
                    "format=json&" + 
                    "showMetadata=false&" + 
                    "time=2008-06-22&" + 
                    "timeout=57")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.71832 49.41428 ) and LINESTRING ( 8.704561 49.403252, 8.7163 49.409268 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/area"));
    }
    
    
    @Test
    public void test_365_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area?" + 
                    "bcircles=I%3A8.701%2C49.4078%2C4711282591%7Cs%3A8.732617%2C49.422117%2C2&" + 
                    "format=json&" + 
                    "keys=highway&" + 
                    "values=path")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El ángulo 2.607.539.087.191.067.000.000.000 es demasiado grande."))
                .body("'path'", containsString("/elements/area"));
    }
    
    
    @Test
    public void test_366_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area?" + 
                    "bpolys=ez%3A8.704561%2C49.403252%2C8.73257%2C49.4280%2C8.718%2C49.427%2C8.722%2C49.404%2C8.704561%2C49.403252&" + 
                    "format=csv&" + 
                    "keys=highway&" + 
                    "showMetadata=no&" + 
                    "time=2010-04-01&" + 
                    "timeout=32&" + 
                    "values=residential")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.73257 49.428 ) and LINESTRING ( 8.718 49.427, 8.722 49.404 ) [ (8.719789934378277, 49.41670787732492, NaN) ]"))
                .body("'path'", containsString("/elements/area"));
    }
    
    
    @Test
    public void test_367_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22it%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7386%2C49.415%5D%2C%5B8.705%2C49.43648%5D%2C%5B8.704%2C49.43618%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22do%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7060%2C49.410531%5D%2C%5B8.745626%2C49.4320%5D%2C%5B8.704622%2C49.407%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "format=csv&" + 
                    "keys=highway&" + 
                    "showMetadata=yes&" + 
                    "types=polygon%2C")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.706 49.410531 ) and LINESTRING ( 8.728418693759346 49.42150876363242, 8.704622 49.407 ) [ (8.705395137495962, 49.40747137931419, NaN) ]"))
                .body("'path'", containsString("/elements/area"));
    }
    
    
    @Test
    public void test_368_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/groupBy/tag?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22E%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.727%2C49.414%5D%2C%5B8.7002%2C49.43273%5D%2C%5B8.742%2C49.421%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22leke%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7495%2C49.4376%5D%2C%5B8.741%2C49.41964%5D%2C%5B8.704%2C49.40959%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22vlh%22%7D%2C%22ge_metry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.747987%2C49.4213%5D%2C%5B8.702%2C49.414%5D%2C%5B8.7047%2C49.40130%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=evomaster_5210_input&" + 
                    "groupByKey=evomaster_5211_input&" + 
                    "groupByValues=cycleway%2Cturning_circle&" + 
                    "keys=foo&" + 
                    "showMetadata=foo&" + 
                    "time=foo")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_343_checkGeometryTypeOfFeature
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/elements/count/groupBy/tag"));
    }
    
    
    @Test
    public void test_369_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/key?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22D%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.702%2C49.4022%5D%2C%5B8.718807%2C49.4228%5D%2C%5B8.726%2C49.415%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22Mss%22%7D%2C%22geometry%22%3A%7B%22ty%C2%80e%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7376%2C49.43185%5D%2C%5B8.703%2C49.417%5D%2C%5B8.7026%2C49.426058%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=foot%3D*+or+type%3Anode+or+area%3A%281.0+..+1E6%29&" + 
                    "format=foo&" + 
                    "groupByKeys=evomaster_6552_input&" + 
                    "time=evomaster_6553_input&" + 
                    "timeout=79&" + 
                    "types=foo")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_343_checkGeometryTypeOfFeature
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/elements/length/groupBy/key"));
    }
    
    
    @Test
    public void test_370_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/ratio/groupBy/boundary?" + 
                    "bcircles=3.44D%2C83.922367%2C4%7C400.1%2C79.86.%2C8&" + 
                    "filter=atr6Pr37LBQ9B&" + 
                    "format=CSV&" + 
                    "keys2=evomasterO112391_intu&" + 
                    "showMetadata=evomaster_228835_input&" + 
                    "timeout=23&" + 
                    "types2=evomaster_2%2B2464_input&" + 
                    "values=evomaster_449620_input&" + 
                    "values2=49gU_")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_114_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/area/ratio/groupBy/boundary"));
    }
    
    
    @Test
    public void test_371_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/groupBy/tag?" + 
                    "bboxes=Cl%3A8.6679%2C49.404163%2C8.721963%2C49.393%7Ci%3A8..50%2C49.429%2C8.737%2C49.39779%7CuN%3A8.669%2C49.42176%2C8.757012%2C49.393&" + 
                    "format=foo&" + 
                    "groupByKey=highwayR&" + 
                    "groupByValues=foo&" + 
                    "keys=highway&" + 
                    "showMetadata=true&" + 
                    "types=foo")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_72_createBboxes
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/perimeter/groupBy/tag"));
    }
    
    
    @Test
    public void test_372_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density/groupBy/boundary?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22uKOpP%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.70845%2C49.43454%5D%2C%5B8.704%2C49.4261%5D%2C%5B8.722%2C49.427500%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22Y%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.726%2C49.414%5D%2C%5B8.707%2C49.434%5D%2C%5B8.720%2C49.432%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22A%22%7D%2C%22geqmetry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.738%2C49.438%5D%2C%5B8.725%2C49.40696%5D%2C%5B8.700%2C49.4290%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=addr%3Acountry%3D*+or+type%3Anode+or+length%3A%28+..+100%29&" + 
                    "format=evomaster_211601_input&" + 
                    "showMetadata=yes&" + 
                    "time=foo")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_343_checkGeometryTypeOfFeature
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/elements/area/density/groupBy/boundary"));
    }
    
    
    @Test
    public void test_373_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/ratio/groupBy/boundary?" + 
                    "bcircles=z%3A8.7046%2C49.4170%2C4755029429&" + 
                    "keys=xighway&" + 
                    "keys2=foo&" + 
                    "timeout=45&" + 
                    "types2=way%2Crelation&" + 
                    "values=street_lamp&" + 
                    "values2=foo")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/executor/ElementsRequestExecutor_871_aggregateBasicFiltersRatioGroupByBoundary
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("class org.locationtech.jts.geom.LineString cannot be cast to class org.locationtech.jts.geom.MultiPolygon (org.locationtech.jts.geom.LineString and org.locationtech.jts.geom.MultiPolygon are in unnamed module of loader 'app')"))
                .body("'path'", containsString("/elements/count/ratio/groupBy/boundary"));
    }
    
    
    @Test
    public void test_374_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/key?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22ffatures%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22A%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7397%2C49.43223%5D%2C%5B8.712%2C49.429%5D%2C%5B8.716%2C49.412%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22KO%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.711%2C49.435945%5D%2C%5B8.707%2C49.4391%5D%2C%5B8.725%2C49.430%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=evomaster_233971_input&" + 
                    "format=csv&" + 
                    "groupByKeys=evomaster_278696_input&" + 
                    "keys=evomaster_233972_input&" + 
                    "showMetadata=evomaster_233973_input&" + 
                    "time=foo&" + 
                    "timeout=63&" + 
                    "types=evomaster_278697_input&" + 
                    "values=foo")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_237_createGeometryFromGeoJson
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/elements/length/groupBy/key"));
    }
    
    
    @Test
    public void test_375_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/groupBy/tag?" + 
                    "bcircles=I%3A8.708%2C49.423%2C9%7CS%3A8.7.7%2C49.4136%2C1&" + 
                    "filter=foo&" + 
                    "format=foo&" + 
                    "groupByKey=evomaster_1738_input&" + 
                    "groupByValues=foo&" + 
                    "keys=highway&" + 
                    "showMetadata=true&" + 
                    "time=rrT&" + 
                    "types=foo")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_114_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/perimeter/groupBy/tag"));
    }
    
    
    @Test
    public void test_376_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/density/groupBy/boundary?" + 
                    "bboxes=Xcm%3A8.6659%2C49.405%2C8.7202%2C49.396%7CzOf%3A8..99%2C49.4121%2C8.737%2C49.399&" + 
                    "filter=source%3Amaxspeed%3D*+and+geometry%3Aline&" + 
                    "format=evomaster_258423_input&" + 
                    "keys=foo&" + 
                    "showMetadata=false&" + 
                    "timeout=54&" + 
                    "values=foo")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_72_createBboxes
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/users/count/density/groupBy/boundary"));
    }
    
    
    @Test
    public void test_377_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/ratio/groupBy/boundary?" + 
                    "bcircles=z%3A8.704.%2C01.0160%2C475502942%29&" + 
                    "filter=enomaster_267893_input&" + 
                    "filter2=m8oT2JhAqQT&" + 
                    "keys=evomaster_267785_input&" + 
                    "keys2=foo&" + 
                    "showMetadata=foo&" + 
                    "timeout=45&" + 
                    "types=poLyGoN&" + 
                    "types2=evomaster_271333_input&" + 
                    "values=evomUster_262426UUn%60mU")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_114_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/count/ratio/groupBy/boundary"));
    }
    
    
    @Test
    public void test_378_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/density/groupBy/tag?" + 
                    "bcircles=hp%3A8.712%2C49.4.8%2C8&" + 
                    "filter=network%21%3D*+or+not+length%3A%28+..+100&" + 
                    "groupByKey=fukhwjs&" + 
                    "groupByValues=evomaster_320103_input&" + 
                    "showMetadata=true&" + 
                    "time=%2FAN3WJK1&" + 
                    "timeout=74")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_114_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/users/count/density/groupBy/tag"));
    }
    
    
    @Test
    public void test_379_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/ratio/groupBy/boundary?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22xv%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.729%2C49.42800%5D%2C%5B8.702%2C49.412153%5D%2C%5B8.728%2C49.40129%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22on%22%7D%2C%22geometri%22%3A%7B%22type%22%3A%22Polygo%7E%22%2C%22coordinates%22%3A%5B%5B%5B0.704561%2C49.403252%5D%2C%5B8.710%2C49.403%5D%2C%5B8.74425%2C49.424%5D%2C%5B8.7175%2C49.427371%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=evomaster_349054_input&" + 
                    "filter2=evomaster_349055_input&" + 
                    "format=cSV&" + 
                    "keys=evomaster_349056_input&" + 
                    "keys2=highwayy&" + 
                    "time=evomaster_349057_input&" + 
                    "types=evomaster_348288_input&" + 
                    "types2=u9P1xX6b&" + 
                    "values=evomaster_348279_input&" + 
                    "values2=cvemdslerWU48UU4_iUpUt")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_343_checkGeometryTypeOfFeature
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/elements/area/ratio/groupBy/boundary"));
    }
    
    
    @Test
    public void test_380_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/groupBy/key?" + 
                    "bpolys=%7B%22twpe%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22Jg%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7398%2C49.4078%5D%2C%5B8.7060%2C49.425%5D%2C%5B8.704290%2C49.43681%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22ZlAa%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.737441%2C49.407146%5D%2C%5B8.704%2C49.41367%5D%2C%5B8.7073%2C49.4291%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22U%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.700693%2C49.4075%5D%2C%5B8.70486%2C49.432%5D%2C%5B8.70429%2C49.4283%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=foot%21%3D*+or+not+geometry%3Apolzgon+and+not+id%3A%281+..+9999%29&" + 
                    "format=csv&" + 
                    "groupByKeys=building%2Cmaxspeed%2Caddr%3Ecountry&" + 
                    "time=evomaster_356206_input&" + 
                    "timeout=40")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_233_createGeometryFromGeoJson
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/elements/count/groupBy/key"));
    }
    
    
    @Test
    public void test_381_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/density/groupBy/tag?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22xAPtm%22%7D%2C%22gfometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7042%2C49.424209%5D%2C%5B8.706%2C49.433%5D%2C%5B8.71616%2C49.416%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22X%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.714700%2C49.41214%5D%2C%5B8.723%2C49.403%5D%2C%5B8.708788%2C49.4094%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=foo&" + 
                    "format=evomaster_499104_input&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=civic%2Cspeed_camera%2Cemergency_access_point&" + 
                    "keys=foo&" + 
                    "showMetadata=evomaster_499105_input&" + 
                    "types=foo")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_343_checkGeometryTypeOfFeature
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/elements/length/density/groupBy/tag"));
    }
    
    
    @Test
    public void test_382_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/density?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22zJQxk%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.710%2C49.412%5D%2C%5B8.714825%2C49.413912%5D%2C%5B8.70435%2C49.433%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22jP%22%7D%2C%22_eometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.747%2C49.4050%5D%2C%5B8.7077%2C49.429%5D%2C%5B8.70435%2C49.4313%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22I%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.709330%2C49.409%5D%2C%5B8.743054%2C49.4027%5D%2C%5B8.703%2C49.427%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=building%21%3D*+and+geometry%3Apoint+and+area%3A%281.0+..+1E6%29&" + 
                    "format=foo&" + 
                    "keys=foo&" + 
                    "time=b%3FP94&" + 
                    "timeout=44&" + 
                    "types=foo")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_343_checkGeometryTypeOfFeature
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/users/count/density"));
    }
    
    
    @Test
    public void test_383_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area?" + 
                    "bboxes=ZG%3A8.69.97%2C49.412%2C8.7178%2C49.389226&" + 
                    "filter=foo&" + 
                    "format=foo&" + 
                    "keys=highway&" + 
                    "showMetadata=yes&" + 
                    "time=fI&" + 
                    "timeout=41&" + 
                    "types=point%2Cline%2C&" + 
                    "values=foo")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_63_createBboxes
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/area"));
    }
    
    
    @Test
    public void test_384_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/density/groupBy/tag?" + 
                    "bpolys=%7B%22tyte%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22kARvj%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygmn%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7112%2C49.4076%5D%2C%5B8.7042%2C49.427%5D%2C%5B8.7223%2C49.4100%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=evomaster_588752_input&" + 
                    "format=cSV&" + 
                    "groupByKey=hggfwUi&" + 
                    "groupByValues=foo&" + 
                    "keys=GPLBrtMuDRZDcvf16&" + 
                    "showMetadata=fqo&" + 
                    "time=_5eXRC&" + 
                    "timeout=0.8743542677681828&" + 
                    "values=foo")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_233_createGeometryFromGeoJson
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/elements/perimeter/density/groupBy/tag"));
    }
    
    
    @Test
    public void test_385_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/density/groupBy/tag?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22heatures%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22kARvj%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygmn%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7112%2C49.4076%5D%2C%5B8.7042%2C49.427%5D%2C%5B8.7223%2C49.4100%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=evomaster_589446_input&" + 
                    "format=cSV&" + 
                    "groupByKey=evomaster_589447_input&" + 
                    "groupByValues=evomaster_589448_input&" + 
                    "keys=GPLBrtMuDRZDSvf1&" + 
                    "showMetadata=foo&" + 
                    "time=foo&" + 
                    "timeout=0.8743542677681828")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_237_createGeometryFromGeoJson
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/elements/perimeter/density/groupBy/tag"));
    }
    
    
    @Test
    public void test_386_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/density/groupBy/tag?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22k%3CRvj%22%7D%2C%22geometr%C2%89%22%3A%7B%22type%22%3A%22NulsgYn%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7112%2C49.8076%5D%2C%5B8.7042%2C49.427%5D%2C%5B8.7223%2C49.4100%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=3rp%5DWowr&" + 
                    "format=csV&" + 
                    "groupByKey=cQwfI&" + 
                    "keys=UUooELteUWfU7UUUWYsUieA&" + 
                    "showMetadata=jqa8SjquQynJtWh&" + 
                    "time=evomaster_5976%2B5_input&" + 
                    "types=s%7FJxfZ")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_343_checkGeometryTypeOfFeature
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/elements/perimeter/density/groupBy/tag"));
    }
    
    
    @Test
    public void test_387_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/density?" + 
                    "bboxes=dKf%3A8..5137%2C49.4061%2C8.700%2C49.385&" + 
                    "format=json&" + 
                    "keys=evomaster_643555_input&" + 
                    "showMetadata=foo&" + 
                    "time=%1FRP1%2FD&" + 
                    "types=foo")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_63_createBboxes
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/users/count/density"));
    }
    
    
    @Test
    public void test_388_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/boundary?" + 
                    "bcircles=ci%3A8.70.4%2C49.427%2C4%7Cn%3A8.7034%2C49.409%2C5%7CMGaVm%3A8.721%2C49.4326%2C5%7CoQ%3A8.726%2C49.400%2C3793755249&" + 
                    "format=evomaster_1871_input&" + 
                    "showMetadata=no&" + 
                    "time=2012-01-03&" + 
                    "types=pHMDEZsQP&" + 
                    "values=foo")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_114_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/perimeter/groupBy/boundary"));
    }
    
    
    @Test
    public void test_389_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/density?" + 
                    "bboxes=dKf%3A8.65137%2C49.4.61%2C8.700%2C49.38&" + 
                    "format=json&" + 
                    "keys=evomaster_647376_input&" + 
                    "time=evomaster_766385_input")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_64_createBboxes
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/users/count/density"));
    }
    
    
    @Test
    public void test_390_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/density?" + 
                    "bboxes=dKf%3A8.65137%2C49.4061%2C8.70.%2C49.385&" + 
                    "filter=&" + 
                    "format=evomaster_811472_input&" + 
                    "keys=%5Dv_masJUro3X7X8_grutt&" + 
                    "time=%2FbP1&" + 
                    "values=evomaster_811473_input")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_65_createBboxes
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/users/count/density"));
    }
    
    
    @Test
    public void test_391_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/ratio?" + 
                    "bcircles=FI%3A8.723.%2C49.422%2C3&" + 
                    "format=evomaster_868374_input&" + 
                    "keys2=highway&" + 
                    "timeout=93&" + 
                    "values=foo&" + 
                    "values2=pedestrian")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_114_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/perimeter/ratio"));
    }
    
    
    @Test
    public void test_392_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count?" + 
                    "bcircles=8.7126%2C49.439%2C1%7C8.733%2C49.420918%2C8%7C8.745812%2C49.4097%2C922%7C8.718%2C49.4.14%2C18&" + 
                    "format=foo&" + 
                    "time=foo&" + 
                    "types=foo&" + 
                    "values=foo")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_114_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/count"));
    }
    
    
    @Test
    public void test_393_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/type?" + 
                    "bcircles=CfsH%3A8.7164%2C49.4196%2C1%7CSh%3A8.7.4%2C49.438890%2C2%7Chql%3A8.737%2C49.4069%2C6%7CrxU%3A8.719%2C49.429859%2C66&" + 
                    "filter=evomaster_1757_input&" + 
                    "keys=highway&" + 
                    "showMetadata=fUo&" + 
                    "time=evomaster_882455_input&" + 
                    "timeout=84&" + 
                    "types=foo&" + 
                    "values=foo")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_114_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/perimeter/groupBy/type"));
    }
    
    
    @Test
    public void test_394_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density/groupBy/tag?" + 
                    "bcircles=riYQn%3A8.743%2C49.4044%2C9%7CEzzQq%3A8.719949%2C49.42.%2C2&" + 
                    "filter=evomaster_900592_inpu&" + 
                    "format=evomaster_9377_input&" + 
                    "groupByKey=cmjmas%60VnoU577bUUo&" + 
                    "groupByValues=UvpUakeer_8575UrntUU&" + 
                    "showMetadata=YES&" + 
                    "time=evomaster_8436_input&" + 
                    "timeout=93&" + 
                    "types=evomaster_10579_input")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_114_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/length/density/groupBy/tag"));
    }
    
    
    @Test
    public void test_395_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density/groupBy/boundary?" + 
                    "bboxes=8.6629%2C49.4.625%2C8.730%2C49.3977&" + 
                    "filter=type%21%3D*+and+type%3Away&" + 
                    "format=csv&" + 
                    "keys=foo&" + 
                    "showMetadata=no&" + 
                    "time=2017-02-22")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_64_createBboxes
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/length/density/groupBy/boundary"));
    }
    
    
    @Test
    public void test_396_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/ratio?" + 
                    "bboxes=Eh%3A8.681%2C49.40283%2C8.7.0%2C49.3973&" + 
                    "format=foo&" + 
                    "keys=evomaster_969861_input&" + 
                    "showMetadata=evomaster_969858_input&" + 
                    "types=noo&" + 
                    "types2=waw4&" + 
                    "values2=evomaster_969862_input")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_65_createBboxes
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/count/ratio"));
    }
    
    
    @Test
    public void test_397_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/density/groupBy/tag?" + 
                    "bboxes=P%3A8..93%2C49.402035%2C8.73734%2C49.398&" + 
                    "filter=foo&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=foo&" + 
                    "keys=foo&" + 
                    "showMetadata=np&" + 
                    "time=evomaster_971239_input&" + 
                    "timeout=80&" + 
                    "values=evomaster_971240_input")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_63_createBboxes
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/users/count/density/groupBy/tag"));
    }
    
    
    @Test
    public void test_398_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/ratio/groupBy/boundary?" + 
                    "bboxes=8..52%2C49.403%2C8.738%2C49.386&" + 
                    "filter=evomaster_972746_input&" + 
                    "format=foo&" + 
                    "keys=foo&" + 
                    "keys2=highway&" + 
                    "showMetadata=true&" + 
                    "timeout=59&" + 
                    "values2=evomaster_972747_input")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_63_createBboxes
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/perimeter/ratio/groupBy/boundary"));
    }
    
    
    @Test
    public void test_399_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density/groupBy/tag?" + 
                    "bpolys=riYQn%3A8.743%2C49.4044%2C9%7CEzzQq%3A8.719949%2C49.42.%2C2&" + 
                    "filter=evomastev_9096_in&" + 
                    "format=pHDTJdl&" + 
                    "groupByKey=cmqmastdn_U978_UUpu&" + 
                    "groupByValues=UvpUakeer_8575UrnpUU&" + 
                    "keys=evomaster_9097_inpu&" + 
                    "showMetadata=evomaster_8993_input&" + 
                    "time=evomaster_8436_input&" + 
                    "timeout=93&" + 
                    "types=evomaster_30579_input&" + 
                    "values=evomaster_10580_input")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_175_createBpolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/length/density/groupBy/tag"));
    }
    
    
    @Test
    public void test_400_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/density/groupBy/tag?" + 
                    "bpolys=%2C&" + 
                    "filter=2txllssoYfY&" + 
                    "groupByKey=05wBQsp&" + 
                    "showMetadata=2lPJp&" + 
                    "time=evomaster_1156702_input&" + 
                    "types=4N1_YBNhW3X")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_156_createBpolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Index 0 out of bounds for length 0"))
                .body("'path'", containsString("/elements/perimeter/density/groupBy/tag"));
    }
    
    
    @Test
    public void test_401_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density/groupBy/tag?" + 
                    "bboxes=8.704561%2C49.003252%2C8.7232%2C49.424%2C8.70456%2C49.416%2C8.720%2C49.4376%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.743%2C49.400%2C8.737069%2C49.4161%2C8.7315%2C49.426%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.7440%2C49.433%2C8.74703%2C49.4298%2C8.7046%2C49.407%2C8.704561%2C49.40325&" + 
                    "format=Csv&" + 
                    "groupByKey=4egSnQg6RmS&" + 
                    "groupByValues=evomaster_19317_input&" + 
                    "keys=evomaster_16939_input&" + 
                    "showMetadata=&" + 
                    "time=foo&" + 
                    "timeout=93&" + 
                    "types=UvomUUUeUU1593K_iuvuU&" + 
                    "values=83yZUBua2EJ")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_74_createBboxes
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Index 30 out of bounds for length 30"))
                .body("'path'", containsString("/elements/length/density/groupBy/tag"));
    }
    
    
    @Test
    public void test_402_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/ratio/groupBy/boundary?" + 
                    "bboxes=8.652%2C49.4.3%2C8.738%2C49.386&" + 
                    "filter=evomaster_1214374_input&" + 
                    "format=foo&" + 
                    "keys2=highway&" + 
                    "showMetadata=true&" + 
                    "timeout=59&" + 
                    "values2=stop_line")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_64_createBboxes
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/perimeter/ratio/groupBy/boundary"));
    }
    
    
    @Test
    public void test_403_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/key?" + 
                    "bboxes=ApR%3A8..60%2C49.41763%2C8.7256%2C49.3888&" + 
                    "format=json&" + 
                    "groupByKeys=foo&" + 
                    "showMetadata=true&" + 
                    "time=2013-11-12")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_63_createBboxes
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/length/groupBy/key"));
    }
    
    
    @Test
    public void test_404_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22fdatures%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22aLobe%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.738%2C49.405%5D%2C%5B8.7396%2C49.4158%5D%2C%5B8.712087%2C49.428%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=evomaster_14615_input&" + 
                    "groupByKey=evomaster_14616_input&" + 
                    "groupByValues=foo&" + 
                    "types=evomaster_1245635_input&" + 
                    "values=unclassified")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_237_createGeometryFromGeoJson
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/elements/count/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_405_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density/groupBy/tag?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22deatures%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22uFGSX%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.726%2C49.409%5D%2C%5B8.736%2C49.427%5D%2C%5B8.74133%2C49.407%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=evomaster_1281045_input&" + 
                    "format=foo&" + 
                    "groupByKey=highway&" + 
                    "keys=foo&" + 
                    "showMetadata=fooj&" + 
                    "time=foo&" + 
                    "timeout=85")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_237_createGeometryFromGeoJson
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/elements/area/density/groupBy/tag"));
    }
    
    
    @Test
    public void test_406_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/density?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22fealures%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22zJQxk%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.710%2C49.412%5D%2C%5B8.714825%2C49.413912%5D%2C%5B8.70435%2C49.433%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22jP%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.747%2C49.4050%5D%2C%5B8.7077%2C49.429%5D%2C%5B8.70435%2C49.4313%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22I%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.709330%2C49.409%5D%2C%5B8.743054%2C49.4027%5D%2C%5B8.703%2C49.427%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=building%21%3D*+and+geometry%3Apoint+and+area%3A%281.0+..+1E6%29&" + 
                    "format=foo&" + 
                    "time=%2F%3FP9D&" + 
                    "timeout=44&" + 
                    "types=foo")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_237_createGeometryFromGeoJson
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/users/count/density"));
    }
    
    
    @Test
    public void test_407_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/density/groupBy/tag?" + 
                    "bboxes=P%3A8.693%2C49.40.035%2C8.73734%2C49.398&" + 
                    "filter=foo&" + 
                    "groupByKey=highway&" + 
                    "keys=fooA&" + 
                    "showMetadata=no&" + 
                    "time=%2F%2FP3M18D&" + 
                    "timeout=80")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_64_createBboxes
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/users/count/density/groupBy/tag"));
    }
    
    
    @Test
    public void test_408_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density/groupBy/tag?" + 
                    "bpolys=riYQn%3A8.743%2C49.4.44%2C9%7CEzzQq%3A8.719949%2C49.426%2C2&" + 
                    "filter=evomastev_9896_inp&" + 
                    "format=CSV&" + 
                    "groupByKey=cmjmaw%60VnoU577bUUor&" + 
                    "groupByValues=UvpWakeer_8575UrntUU&" + 
                    "keys=AFMRbPo&" + 
                    "showMetadata=tRUE&" + 
                    "time=riYQn%3A8.743%2C49.4044%2C9%7CEzzQq%3A8.719949%2C49.426%2C2&" + 
                    "timeout=93")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_186_createBpolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/length/density/groupBy/tag"));
    }
    
    
    @Test
    public void test_409_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/ratio?" + 
                    "bcircles=WcGmZ%3A8.715%2C49.438.%2C2&" + 
                    "filter=addr%3Apostcode%3D*+or+length%3A%28+..+100%29&" + 
                    "keys2=highway&" + 
                    "time=2009-11-18&" + 
                    "timeout=76&" + 
                    "types2=point%2Cline%2Cother&" + 
                    "values2=secondary_link")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_114_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/length/ratio"));
    }
    
    
    @Test
    public void test_410_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/groupBy/boundary?" + 
                    "bboxes=8.675%2C49.406%2C8.7.1%2C49.383%7C8.697%2C49.40360%2C8.7162%2C49.389704%7C8.6624%2C49.411%2C8.7387%2C49.397&" + 
                    "filter=&" + 
                    "format=geojson&" + 
                    "keys=evomaster_1357662_input&" + 
                    "showMetadata=evomaster_1357663_input&" + 
                    "time=%2F%2FP8M24D&" + 
                    "types=foo&" + 
                    "values=evomaster_1357664_input")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_65_createBboxes
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/users/count/groupBy/boundary"));
    }
    
    
    @Test
    public void test_411_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/density/groupBy/boundary/groupBy/tag?" + 
                    "bboxes=8.6.9%2C49.4101%2C8.707%2C49.3812%7C8.659%2C49.4179%2C8.750%2C49.381&" + 
                    "filter=evomaster_1383606_input&" + 
                    "format=csu&" + 
                    "groupByKey=building&" + 
                    "keys=foo&" + 
                    "time=2010-02-09")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_63_createBboxes
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/perimeter/density/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_412_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/density/groupBy/type?" + 
                    "bcircles=8.7.7%2C49.418%2C3%7C8.7058%2C49.400%2C602509541&" + 
                    "filter=foo&" + 
                    "format=foo&" + 
                    "keys=highway&" + 
                    "showMetadata=no&" + 
                    "time=2010-03-21&" + 
                    "types=evomaster_1847_input&" + 
                    "values=slop")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_114_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/area/density/groupBy/type"));
    }
    
    
    @Test
    public void test_413_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/groupBy/boundary?" + 
                    "bboxes=8.675%2C49.406%2C8.701%2C49.383%7C6.697%2C49.4.360%2C8.7162%2C49.369704%7C8.6624%2C49.411%2C8.7387%2C49.397&" + 
                    "filter=natural%3Dwoof+and+type%3Anode&" + 
                    "format=evomaster_1423968_input&" + 
                    "showMetadata=true&" + 
                    "time=%2F%2FP8M24D")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_73_createBboxes
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/users/count/groupBy/boundary"));
    }
    
    
    @Test
    public void test_414_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area?" + 
                    "bboxes=ZG%3A8.69097%2C49.412%2C8.7178%2C49.38922.&" + 
                    "filter=foo&" + 
                    "format=foo&" + 
                    "keys=evomaster_1434618_input&" + 
                    "showMetadata=yes&" + 
                    "time=_I&" + 
                    "timeout=41&" + 
                    "types=point%2Cline%2B")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_66_createBboxes
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/area"));
    }
    
    
    @Test
    public void test_415_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/key?" + 
                    "bboxes=ApR%3A8.660%2C49.41763%2C8.7.56%2C49.3888&" + 
                    "format=json&" + 
                    "groupByKeys=foo&" + 
                    "showMetadata=true&" + 
                    "time=2013-11-12&" + 
                    "values=stop_line")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_65_createBboxes
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/length/groupBy/key"));
    }
    
    
    @Test
    public void test_416_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/groupBy/boundary?" + 
                    "bboxes=8.675%2C49.40.%2C8.701%2C49.383%7C8.697%2C49.40360%2C8.7162%2C49.369704%7C8.6624%2C49.411%2C8.7387%2C49.397&" + 
                    "filter=natural%3Dwood+and+type%3Anode&" + 
                    "format=geojson&" + 
                    "showMetadata=evomaster_1459803_input&" + 
                    "time=%2F%2FP8M24D&" + 
                    "types=foo&" + 
                    "values=foo")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_64_createBboxes
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/users/count/groupBy/boundary"));
    }
    
    
    @Test
    public void test_417_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/groupBy/boundary?" + 
                    "bboxes=8.675%2C49.406%2C8.701%2C49.383%7C8.697%2C49.40360%2C8.7162%2C49.369704%7C8.6.24%2C49.411%2C8.7387%2C49.39&" + 
                    "filter=natural%3Dwood+and+type%3Anode&" + 
                    "format=evomaster_1464297_input&" + 
                    "keys=foo&" + 
                    "showMetadata=trque&" + 
                    "time=evomaster_1464299_input&" + 
                    "values=foo")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_72_createBboxes
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/users/count/groupBy/boundary"));
    }
    
    
    @Test
    public void test_418_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/type?" + 
                    "bcircles=tEdl%3A8.7125%2C39.42.%2C56&" + 
                    "format=jrov&" + 
                    "keys=&" + 
                    "showMetadata=foo&" + 
                    "types=LinE")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_114_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/area/groupBy/type"));
    }
    
    
    @Test
    public void test_419_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density/groupBy/boundary?" + 
                    "bcircles=B%3A8.705412%2C49.4.7%2C401&" + 
                    "filter=surface%3D*+and+geometry%3Apolygon+and+not+lenglh%3A%28+..+100%29&" + 
                    "format=csv&" + 
                    "keys=evomaster_1499269_input&" + 
                    "showMetadata=false&" + 
                    "time=UU11U05%2CU5&" + 
                    "types=foo&" + 
                    "values=tertiary")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_114_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/area/density/groupBy/boundary"));
    }
    
    
    @Test
    public void test_420_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/groupBy/boundary?" + 
                    "bcircles=vRW%3A8.714%2C49.433.4%2C8&" + 
                    "filter=addr%3Apostcode%21%3D*+or+area%3A%281.0+..+1E6%29&" + 
                    "format=evomaster_1781_input&" + 
                    "keys=highway&" + 
                    "time=foo&" + 
                    "values=foo")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_114_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/perimeter/groupBy/boundary"));
    }
    
    
    @Test
    public void test_421_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/ratio?" + 
                    "bboxes=Ay%3A8..5679%2C49.407%2C8.7370%2C49.394&" + 
                    "format=csv&" + 
                    "keys=highway&" + 
                    "keys2=evomaster_1611271_input&" + 
                    "showMetadata=true&" + 
                    "time=2011-12-26&" + 
                    "timeout=29&" + 
                    "values=path&" + 
                    "values2=evomaster_1611272_input")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_63_createBboxes
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/area/ratio"));
    }
    
    
    @Test
    public void test_422_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/ratio?" + 
                    "bpolys=RawuF%3A8.704561%2C49.403252%2C8.70549%2C49.4177%2C8.7.41%2C49.43580%2C8.705%2C49.436%2C8.704561%2C49.403252&" + 
                    "filter=fo&" + 
                    "filter2=foo&" + 
                    "format=ckv&" + 
                    "keys=highway&" + 
                    "keys2=highwaw&" + 
                    "time=evomaster_1611288_input&" + 
                    "timeout=34&" + 
                    "types2=point%2Cline%2Cpolygon%2C&" + 
                    "values=street_lamp&" + 
                    "values2=street_lamp")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_161_createBpolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/length/ratio"));
    }
    
    
    @Test
    public void test_423_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/groupBy/boundary?" + 
                    "bboxes=8.675%2C49.406%2C8.701%2C49.383%7C8.697%2C49.40360%2C8.7162%2C49.3697.4%7C8.6624%2C49.411%2C8.7387%2C49.397&" + 
                    "filter=natural%3Dwood+and+type%3Anode&" + 
                    "format=geojson&" + 
                    "keys=foo&" + 
                    "showMetadata=true&" + 
                    "time=%2F%2FP8M2%3CD&" + 
                    "types=foo&" + 
                    "values=foo")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_75_createBboxes
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/users/count/groupBy/boundary"));
    }
    
    
    @Test
    public void test_424_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/type?" + 
                    "bpolys=8.704561%2C49.403252%2C8.7008%2C49.434%2C8.702%2C49.422%2C8.71735%2C49.400%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.72297%2C49.427%2C8.705350%2C49.426%2C8.714936%2C49.43573%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.734%2C49.415%2C8.740%2C49.401%2C8.7373%2C49.4300%2C8.7045.1%2C49.403252&" + 
                    "format=foo&" + 
                    "showMetadata=foo&" + 
                    "time=foo&" + 
                    "timeout=84&" + 
                    "types=foo")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_175_createBpolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/perimeter/groupBy/type"));
    }
    
    
    @Test
    public void test_425_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/density?" + 
                    "bcircles=dQzav%3A8.70111%2C49.419852%2C9%7CxM%3A8.7181%2C49.426%2C8%7CidXuC%3A8.7170%2C49.40.132%2C7&" + 
                    "filter=foo&" + 
                    "keys=highway&" + 
                    "time=%3F%2FP8D")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_114_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/users/count/density"));
    }
    
    
    @Test
    public void test_426_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/ratio/groupBy/boundary?" + 
                    "bboxes=8.652%2C49.403%2C8.738%2C49.38.&" + 
                    "filter=network%21%3D*+or+not+geometry%3Apolygon+and+id%3A%281+..+9999%29&" + 
                    "keys2=highway&" + 
                    "showMetadata=true&" + 
                    "time=foo&" + 
                    "timeout=59&" + 
                    "types2=true&" + 
                    "values2=evomaster_1686312_input")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_66_createBboxes
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/perimeter/ratio/groupBy/boundary"));
    }
    
    
    @Test
    public void test_427_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/type?" + 
                    "bpolys=8.704561%2C49.403252%2C8.7.08%2C49.434%2C8.702%2C49.422%2C8.71735%2C49.400%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.72297%2C49.427%2C8.705350%2C49.426%2C8.714936%2C49.43573%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.734%2C49.415%2C8.740%2C49.401%2C8.7373%2C49.4300%2C8.704561%2C49.403252&" + 
                    "filter=evomaster_1757_input&" + 
                    "format=foo&" + 
                    "showMetadata=foo&" + 
                    "time=foo&" + 
                    "timeout=64")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_161_createBpolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/perimeter/groupBy/type"));
    }
    
    
    @Test
    public void test_428_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/boundary?" + 
                    "bcircles=8.735%2C49.8.15%2C4&" + 
                    "filter=oneway%21%3D*+and+geometry%3Apoint&" + 
                    "format=csv&" + 
                    "values=foo")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_114_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/area/groupBy/boundary"));
    }
    
    
    @Test
    public void test_429_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/density/groupBy/type?" + 
                    "bboxes=8.727%2C49.418%2C3%7C8.7058%2C49.400%2C602509541&" + 
                    "filter=foo&" + 
                    "keys=hihhUayB&" + 
                    "showMetadata=no&" + 
                    "time=201%2C-03-21&" + 
                    "timeout=0.9140627180722781&" + 
                    "types=fom")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_74_createBboxes
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/elements/area/density/groupBy/type"));
    }
    
    
    @Test
    public void test_430_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/ratio/groupBy/boundary?" + 
                    "bcircles=bD%3A8.71.50%2C49.4341%2C1&" + 
                    "format=foo&" + 
                    "keys=foom&" + 
                    "showMetadata=false&" + 
                    "types2=foo")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_114_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/perimeter/ratio/groupBy/boundary"));
    }
    
    
    @Test
    public void test_431_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/density/groupBy/boundary?" + 
                    "bcircles=PexnN%3A8.72914%2C49.407%2C6%7CkHz%3A8.714%2C49.421%2C682169597%7CMy%3A8.730%2C49.41.%2C8%7CnFy%3A8.72333%2C49.400%2C3&" + 
                    "filter=foo&" + 
                    "format=foo&" + 
                    "showMetadata=yes&" + 
                    "time=foo&" + 
                    "types=foo&" + 
                    "values=evomaster_1860247_input")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_114_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/perimeter/density/groupBy/boundary"));
    }
    
    
    @Test
    public void test_432_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count?" + 
                    "bboxes=IWs%3A8.6505%2C49.40.%2C8.743%2C49.393&" + 
                    "filter=foo&" + 
                    "time=foo")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_64_createBboxes
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/count"));
    }
    
    
    @Test
    public void test_433_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=8.7.9%2C49.455%2C617&" + 
                    "filter=bicycle%3D*+and+geometry%3Apoint+and+not+length%3A%28+..+100%29&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=civic%2Cchurch%2Cfootway&" + 
                    "keys=foo&" + 
                    "time=foo")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_114_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/perimeter/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_434_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count?" + 
                    "bboxes=IWs%3A8.65.5%2C49.400%2C8.743%2C49.393&" + 
                    "keys=foo")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_63_createBboxes
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/count"));
    }
    
    
    @Test
    public void test_435_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area?" + 
                    "bboxes=ZG%3A8.69097%2C49.41.%2C8.7178%2C49.389226&" + 
                    "keys=highway&" + 
                    "showMetadata=yes&" + 
                    "time=evomaster_352831_input&" + 
                    "timeout=41&" + 
                    "types=point%2Cline%2C")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_64_createBboxes
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/area"));
    }
    
    
    @Test
    public void test_436_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/tag?" + 
                    "bboxes=WDjE%3A8.69037%2C49.416%2C8.734.6%2C49.399%7CyCf%3A8.6983%2C49.4118%2C8.75873%2C49.38551&" + 
                    "filter=lit%3D*+and+geometry%3Apoint+and+length%3A%28+..+100%29&" + 
                    "format=geojson&" + 
                    "groupByKey=building&" + 
                    "groupByValues=traffic_mirvor%2Cyes")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_65_createBboxes
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/length/groupBy/tag"));
    }
    
    
    @Test
    public void test_437_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/boundary?" + 
                    "bcircles=9%2C-35%2C45.4754.&" + 
                    "filter=ojiwey%21%3D*+and+geometry%3Apoin&" + 
                    "format=cqu&" + 
                    "keys=fqo&" + 
                    "showMetadata=fooY")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_119_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/area/groupBy/boundary"));
    }
    
    
    @Test
    public void test_438_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/density/groupBy/tag?" + 
                    "bpolys=P%3A8.693%2C49.4.4035%2C8.73734%2C49.&" + 
                    "filter=pY%5DU&" + 
                    "format=fn&" + 
                    "groupByKey=lhihwUz6&" + 
                    "groupByValues=ftox&" + 
                    "keys=fpo&" + 
                    "time=%2Fj%2FT5U2U&" + 
                    "values=6%2B")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_186_createBpolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/users/count/density/groupBy/tag"));
    }
    
    
    @Test
    public void test_439_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/density/groupBy/tag?" + 
                    "bpolys=P%3A8.693%2C49.40403508.73734%2C&" + 
                    "filter=tUQQ3D&" + 
                    "format=c&" + 
                    "groupByKey=lUhhwUz47&" + 
                    "groupByValues=fup&" + 
                    "keys=fpg&" + 
                    "showMetadata=ipd&" + 
                    "time=%2Fl.Z7Y%2F&" + 
                    "types=eo&" + 
                    "values=6%27%3F")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_161_createBpolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/users/count/density/groupBy/tag"));
    }
    
    
    @Test
    public void test_440_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/density/groupBy/tag?" + 
                    "bpolys=P%3A8%2C693%2C49.4.4035%2C8&" + 
                    "filter=UUfWjQ&" + 
                    "groupByKey=VV%3AwUj&" + 
                    "groupByValues=6it&" + 
                    "keys=pK&" + 
                    "time=QNU&" + 
                    "values=%3A%3AA")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_175_createBpolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/users/count/density/groupBy/tag"));
    }
    
    
    @Test
    public void test_441_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/density/groupBy/tag?" + 
                    "bpolys=DXxZ%3A8.704561%2C49.403252%2C8.7421%2C49.433%2C8.701%2C49.433%2C8.7285%2C49.43421%2C8.704561%2C49.403252%7CSPNhs%3A8.704561%2C49.403252%2C8.748%2C49.429874%2C8.742%2C49.400588%2C8.747%2C49.42860%2C8.704561%2C49.403252&" + 
                    "format=geojson&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=footway%2Csecondary_link%2Cunclassified&" + 
                    "showMetadata=false")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.7421 49.433 ) and LINESTRING ( 8.7285 49.43421, 8.704561 49.403252 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/users/count/density/groupBy/tag"));
    }
    
    
    @Test
    public void test_442_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/density/groupBy/boundary?" + 
                    "bpolys=hRvcL%3A8.704561%2C49.403252%2C8.718490%2C49.429%2C8.7030%2C49.403358%2C8.704%2C49.41344%2C8.704561%2C49.403252%7CIyErt%3A8.704561%2C49.403252%2C8.737%2C49.4226%2C8.7391%2C49.430%2C8.7302%2C49.437%2C8.704561%2C49.403252%7CBP%3A8.704561%2C49.403252%2C8.73826%2C49.4182%2C8.705%2C49.424%2C8.703%2C49.4046%2C8.704561%2C49.403252&" + 
                    "format=geojson&" + 
                    "keys=highway&" + 
                    "showMetadata=true&" + 
                    "values=traffic_signals")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.71849 49.429 ) and LINESTRING ( 8.704 49.41344, 8.704561 49.403252 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/users/count/density/groupBy/boundary"));
    }
    
    
    @Test
    public void test_443_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density/groupBy/tag?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22dwCce%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.707%2C49.4282%5D%2C%5B8.70427%2C49.427%5D%2C%5B8.70712%2C49.415%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22b%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.728%2C49.4036%5D%2C%5B8.724%2C49.424%5D%2C%5B8.704%2C49.417%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "format=geojson&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=platform%2Cpath%2Chotel&" + 
                    "keys=highway&" + 
                    "showMetadata=false&" + 
                    "timeout=67")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.705972545430775 49.41769039090077, 8.707 49.4282 ) and LINESTRING ( 8.70427 49.427, 8.706442008078476 49.41785470282747 ) [ (8.706120821003926, 49.419207069457144, NaN) ]"))
                .body("'path'", containsString("/elements/length/density/groupBy/tag"));
    }
    
    
    @Test
    public void test_444_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=8.720444%2C49.410%2C693967126%7C8.737%2C49.43382%2C2%7C8.724%2C49.4265%2C4&" + 
                    "format=csv&" + 
                    "groupByKey=building&" + 
                    "groupByValues=cycleway%2Cresidential%2Cstop&" + 
                    "keys=highway&" + 
                    "showMetadata=false&" + 
                    "time=2017-10-01&" + 
                    "values=stop")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El ángulo 577.915.016.447.917.820 es demasiado grande."))
                .body("'path'", containsString("/elements/length/density/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_445_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/key?" + 
                    "bcircles=r%3A8.712%2C49.430055%2C3%7CDO%3A8.7432%2C49.411%2C4%7CT%3A8.7245%2C49.428%2C4%7CwuF%3A8.721%2C49.433448%2C51446620868&" + 
                    "format=json&" + 
                    "groupByKeys=ref%2Clanes%3Aforward&" + 
                    "keys=highway&" + 
                    "showMetadata=true&" + 
                    "timeout=36&" + 
                    "values=stop")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El ángulo 529.397.000.437.417.850.000.000.000.000.000 es demasiado grande."))
                .body("'path'", containsString("/elements/count/groupBy/key"));
    }
    
    
    @Test
    public void test_446_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/tag?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22irroO%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7392%2C49.4312%5D%2C%5B8.70459%2C49.402%5D%2C%5B8.704348%2C49.4397%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22J%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.71130%2C49.40736%5D%2C%5B8.71734%2C49.4240%5D%2C%5B8.711%2C49.425001%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22JqXBQ%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.742%2C49.43935%5D%2C%5B8.7316%2C49.402%5D%2C%5B8.70483%2C49.4142%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "groupByKey=building&" + 
                    "groupByValues=chapel%2Ctrack%2Cemergency_access_point&" + 
                    "keys=highway&" + 
                    "timeout=31&" + 
                    "values=stop")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704581834341692 49.40327208809173, 8.742 49.43935 ) and LINESTRING ( 8.71332929816345 49.410326580590436, 8.70483 49.4142 ) [ (8.712357654363128, 49.4107693917359, NaN) ]"))
                .body("'path'", containsString("/elements/area/groupBy/tag"));
    }
    
    
    @Test
    public void test_447_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/key?" + 
                    "bpolys=8.704561%2C49.403252%2C8.717%2C49.407%2C8.709560%2C49.41578%2C8.706%2C49.416%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.704%2C49.433302%2C8.739%2C49.4394%2C8.70318%2C49.439%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.704%2C49.43676%2C8.708434%2C49.431%2C8.7049%2C49.400387%2C8.704561%2C49.403252&" + 
                    "groupByKeys=turn%3Alanes%2Chighway%2Ctype&" + 
                    "time=2009-11-07&" + 
                    "timeout=49")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.717 49.407 ) and LINESTRING ( 8.704561 49.403252, 8.704 49.433302 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/area/groupBy/key"));
    }
    
    
    @Test
    public void test_448_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density/groupBy/tag?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22z%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.748%2C49.4076%5D%2C%5B8.7034%2C49.4054%5D%2C%5B8.731%2C49.409%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "groupByKey=building&" + 
                    "keys=highway&" + 
                    "showMetadata=no&" + 
                    "time=2010-08-21&" + 
                    "values=footway")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.748 49.4076, 8.7034 49.4054 ) and LINESTRING ( 8.731 49.409, 8.704561 49.403252 ) [ (8.717681451297967, 49.40610446620752, NaN) ]"))
                .body("'path'", containsString("/elements/area/density/groupBy/tag"));
    }
    
    
    @Test
    public void test_449_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/key?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22A%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7397%2C49.43223%5D%2C%5B8.712%2C49.429%5D%2C%5B8.716%2C49.412%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22ie%22%3A%22KO%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.711%2C49.435945%5D%2C%5B8.707%2C49.4391%5D%2C%5B8.725%2C49.430%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "format=evomaster_40285_input&" + 
                    "groupByKeys=evomaster_39757_input&" + 
                    "keys=evomaster_39758_input&" + 
                    "showMetadata=evomaster_39759_input&" + 
                    "time=fwo&" + 
                    "types=evomaster_39760_input&" + 
                    "values=evomaster_40286_input")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.7397 49.43223 ) and LINESTRING ( 8.714880681255568 49.41675710466383, 8.716 49.412 ) [ (8.715864942020959, 49.41257399641092, NaN) ]"))
                .body("'path'", containsString("/elements/length/groupBy/key"));
    }
    
    
    @Test
    public void test_450() throws Exception {
        
        try{
            given().accept("*/*")
                    .get(baseUrlOfSut + "/users/count/groupBy/type?" + 
                        "bcircles=8.7193%2C49.427290%2C91%7C8.724%2C49.413%2C23&" + 
                        "format=json&" + 
                        "timeout=95")
                    .then();
        } catch(Exception e){
        }
    }
    
    
    @Test
    public void test_451_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/ratio/groupBy/boundary?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22u%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.737239%2C49.4010%5D%2C%5B8.727%2C49.43219%5D%2C%5B8.7023%2C49.417685%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22d%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7326%2C49.4250%5D%2C%5B8.71987%2C49.405%5D%2C%5B8.7078%2C49.415%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter2=destination%21%3D*+or+type%3Arelation&" + 
                    "format=json&" + 
                    "keys=highway&" + 
                    "types2=polygon%2C&" + 
                    "values=turning_circle")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.730017808350922 49.42299716452141 ) and LINESTRING ( 8.71987 49.405, 8.7078 49.415 ) [ (8.71355744896796, 49.41022995114502, NaN) ]"))
                .body("'path'", containsString("/elements/area/ratio/groupBy/boundary"));
    }
    
    
    @Test
    public void test_452_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/boundary?" + 
                    "bpolys=8.704561%2C49.403252%2C8.749120%2C49.4080%2C8.7238%2C49.427%2C8.7475%2C49.41124%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.706%2C49.40909%2C8.703%2C49.404%2C8.70588%2C49.416629%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.7392%2C49.416%2C8.701%2C49.438%2C8.745882%2C49.4164%2C8.704561%2C49.403252&" + 
                    "filter=maxspeed%3D*+and+not+length%3A%28+..+100%29&" + 
                    "format=geojson&" + 
                    "showMetadata=false")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.74912 49.408 ) and LINESTRING ( 8.704561 49.403252, 8.706 49.40909 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/length/groupBy/boundary"));
    }
    
    
    @Test
    public void test_453_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/density/groupBy/boundary?" + 
                    "bcircles=Tp%3A8.72057%2C49.4028%2C47897957453%7CGVmOl%3A8.741%2C49.4327%2C52&" + 
                    "format=geojson&" + 
                    "keys=highway&" + 
                    "showMetadata=no&" + 
                    "values=service")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El ángulo 297.382.275.352.561.500.000.000.000.000.000 es demasiado grande."))
                .body("'path'", containsString("/elements/count/density/groupBy/boundary"));
    }
    
    
    @Test
    public void test_454_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/density?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22bEHMr%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.706%2C49.40558%5D%2C%5B8.70308%2C49.405%5D%2C%5B8.725%2C49.422%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22PtqGS%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.716%2C49.40616%5D%2C%5B8.7416%2C49.410585%5D%2C%5B8.7042%2C49.420%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22cv%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.724%2C49.417%5D%2C%5B8.7182%2C49.4368%5D%2C%5B8.732%2C49.4232%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "keys=highway&" + 
                    "timeout=23&" + 
                    "values=service")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.724 49.417, 8.723057335889214 49.42021806024027 ) and LINESTRING ( 8.732 49.4232, 8.704561 49.403252 ) [ (8.723907253244583, 49.41731661823401, NaN) ]"))
                .body("'path'", containsString("/elements/count/density"));
    }
    
    
    @Test
    public void test_455_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count?" + 
                    "bpolys=Yqt%3A8.704561%2C49.403252%2C8.740%2C49.413%2C8.7252%2C49.4231%2C8.711%2C49.4175%2C8.704561%2C49.403252%7CbRDIs%3A8.704561%2C49.403252%2C8.721%2C49.4308%2C8.702%2C49.403%2C8.736%2C49.438%2C8.704561%2C49.403252%7CTZPu%3A8.704561%2C49.403252%2C8.70050%2C49.419%2C8.706%2C49.426%2C8.70451%2C49.41968%2C8.704561%2C49.403252&" + 
                    "format=json&" + 
                    "keys=highway&" + 
                    "time=2014-03-24&" + 
                    "values=residential")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.74 49.413 ) and LINESTRING ( 8.704561 49.403252, 8.7005 49.419 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/count"));
    }
    
    
    @Test
    public void test_456_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density?" + 
                    "bpolys=ultY%3A8.704561%2C49.403252%2C8.7172%2C49.412744%2C8.703%2C49.42739%2C8.740%2C49.431%2C8.704561%2C49.403252&" + 
                    "format=json&" + 
                    "showMetadata=false&" + 
                    "timeout=46")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.7172 49.412744, 8.703 49.42739 ) and LINESTRING ( 8.74 49.431, 8.704561 49.403252 ) [ (8.716977294474747, 49.412973700360766, NaN) ]"))
                .body("'path'", containsString("/elements/area/density"));
    }
    
    
    @Test
    public void test_457_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/density?" + 
                    "bpolys=S%3A8.704561%2C49.403252%2C8.725995%2C49.424%2C8.744062%2C49.41227%2C8.714%2C49.4119%2C8.704561%2C49.403252%7CTbK%3A8.704561%2C49.403252%2C8.746%2C49.40759%2C8.703006%2C49.4016%2C8.70590%2C49.4021%2C8.704561%2C49.403252%7COl%3A8.704561%2C49.403252%2C8.7055%2C49.40343%2C8.70139%2C49.426%2C8.735%2C49.4096%2C8.704561%2C49.403252&" + 
                    "format=json&" + 
                    "keys=highway&" + 
                    "values=crossing")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.725995 49.424 ) and LINESTRING ( 8.7059 49.4021, 8.704561 49.403252 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/perimeter/density"));
    }
    
    
    @Test
    public void test_458() throws Exception {
        
        try{
            given().accept("*/*")
                    .get(baseUrlOfSut + "/users/count/groupBy/type?" + 
                        "bcircles=MLQmA%3A8.714156%2C49.413%2C57%7Ct%3A8.706%2C49.4181%2C1&" + 
                        "showMetadata=no")
                    .then();
        } catch(Exception e){
        }
    }
    
    
    @Test
    public void test_459_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/density?bpolys=jYFd%3A8.704561%2C49.403252%2C8.749800%2C49.413990%2C8.709%2C49.432%2C8.7023%2C49.422%2C8.704561%2C49.403252%7CkAK%3A8.704561%2C49.403252%2C8.729%2C49.40122%2C8.721%2C49.404054%2C8.700%2C49.40104%2C8.704561%2C49.403252%7Ch%3A8.704561%2C49.403252%2C8.701%2C49.413%2C8.7049%2C49.4247%2C8.7046%2C49.405%2C8.704561%2C49.403252")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.7498 49.41399 ) and LINESTRING ( 8.7 49.40104, 8.704561 49.403252 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/users/count/density"));
    }
    
    
    @Test
    public void test_460() throws Exception {
        
        try{
            given().accept("*/*")
                    .post(baseUrlOfSut + "/users/count/density?" + 
                        "bcircles=R%3A8.73644%2C49.415%2C71%7CZp%3A8.726%2C49.402%2C4&" + 
                        "showMetadata=yes&" + 
                        "timeout=52")
                    .then();
        } catch(Exception e){
        }
    }
    
    
    @Test
    public void test_461_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/type?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22Y%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.73406%2C49.419%5D%2C%5B8.712%2C49.4017%5D%2C%5B8.7395%2C49.4345%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "format=csv&" + 
                    "keys=highway&" + 
                    "timeout=67&" + 
                    "values=speed_camera")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.73406 49.419 ) and LINESTRING ( 8.712 49.4017, 8.7395 49.4345 ) [ (8.720382878432291, 49.41169848773015, NaN) ]"))
                .body("'path'", containsString("/users/count/groupBy/type"));
    }
    
    
    @Test
    public void test_462() throws Exception {
        
        try{
            given().accept("*/*")
                    .post(baseUrlOfSut + "/users/count/density?" + 
                        "bpolys=bB%3A8.704561%2C49.403252%2C8.72355%2C49.405743%2C8.704%2C49.4357%2C8.744201%2C49.4082%2C8.704561%2C49.403252&" + 
                        "filter=foot%21%3D*&" + 
                        "showMetadata=false&" + 
                        "time=%2F%2FP7M24D&" + 
                        "timeout=59")
                    .then();
        } catch(Exception e){
        }
    }
    
    
    @Test
    public void test_463() throws Exception {
        
        try{
            given().accept("*/*")
                    .post(baseUrlOfSut + "/users/count/groupBy/type?" + 
                        "bpolys=8.704561%2C49.403252%2C8.7109%2C49.4388%2C8.743%2C49.424787%2C8.736%2C49.426754%2C8.704561%2C49.403252&" + 
                        "format=json&" + 
                        "showMetadata=yes&" + 
                        "time=%2F%2FP2M10D&" + 
                        "timeout=91")
                    .then();
        } catch(Exception e){
        }
    }
    
    
    @Test
    public void test_464_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/key?" + 
                    "bpolys=X%3A8.704561%2C49.403252%2C8.7241%2C49.41931%2C8.704508%2C49.402%2C8.737904%2C49.423%2C8.704561%2C49.403252%7CEKS%3A8.704561%2C49.403252%2C8.717%2C49.438%2C8.7098%2C49.423%2C8.705330%2C49.434%2C8.704561%2C49.403252&" + 
                    "filter=lanes%3D*+or+type%3Anode+and+not+area%3A%281.0+..+1E6%29&" + 
                    "format=csv&" + 
                    "groupByKeys=network%2Cbuilding&" + 
                    "showMetadata=false&" + 
                    "time=2013-10-11")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.7241 49.41931 ) and LINESTRING ( 8.704561 49.403252, 8.717 49.438 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/perimeter/groupBy/key"));
    }
    
    
    @Test
    public void test_465() throws Exception {
        
        try{
            given().accept("*/*")
                    .post(baseUrlOfSut + "/users/count/groupBy/type?" + 
                        "bboxes=va%3A8.653%2C49.4282%2C8.70433%2C49.3925&" + 
                        "filter=maxspeed%21%3D*+and+type%3Arelation+and+length%3A%28+..+100%29&" + 
                        "format=csv&" + 
                        "showMetadata=yes&" + 
                        "timeout=46")
                    .then();
        } catch(Exception e){
        }
    }
    
    
    @Test
    public void test_466_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/ratio/groupBy/boundary?" + 
                    "bcircles=U%3A8.715%2C49.433%2C1%7CPM%3A8.7370%2C49.43088%2C9%7CY%3A8.713038%2C49.404%2C5%7CpzKhT%3A8.736%2C49.4297%2C68811622337&" + 
                    "filter=lit%3D*+and+geometry%3Apolygon+and+id%3A%281+..+9999%29&" + 
                    "format=geojson&" + 
                    "time=2009-09-30&" + 
                    "types2=line%2C")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El ángulo 5.419.462.659.962.426.000.000.000.000.000.000 es demasiado grande."))
                .body("'path'", containsString("/elements/perimeter/ratio/groupBy/boundary"));
    }
    
    
    @Test
    public void test_467_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density/groupBy/tag?" + 
                    "bpolys=8.704561%2C49.003252%2C8.7232%2C49.424%2C8.70456%2C49.416%2C8.720%2C49.4376%2C8.704561%2C49.003252%7C8.704561%2C49.403252%2C8.743%2C49.400%2C8.737069%2C49.4161%2C8.7315%2C49.426%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.7440%2C49.433%2C8.74703%2C49.4298%2C8.7046%2C49.407%2C8.704561%2C49.40325&" + 
                    "filter=evomaster_19591_input&" + 
                    "format=emXE&" + 
                    "groupByKey=4efSnQg6Ro&" + 
                    "keys=evomaster_16261_input&" + 
                    "showMetadata=evomaster_19592_input&" + 
                    "time=evomaster_19593_input&" + 
                    "timeout=93&" + 
                    "types=YFdhp5H8i&" + 
                    "values=83yZUBua2EJ")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.7232 49.424, 8.70456 49.416 ) and LINESTRING ( 8.72 49.4376, 8.719219058846061 49.41562965034449 ) [ (8.719459522132953, 49.422394644692254, NaN) ]"))
                .body("'path'", containsString("/elements/length/density/groupBy/tag"));
    }
    
    
    @Test
    public void test_468_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/boundary?" + 
                    "bcircles=baK%3A8.703%2C49.4228%2C859358932&" + 
                    "format=csv&" + 
                    "keys=highway&" + 
                    "showMetadata=true&" + 
                    "timeout=46&" + 
                    "values=elevator")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El ángulo 3.202.392.497.809.959.900 es demasiado grande."))
                .body("'path'", containsString("/elements/perimeter/groupBy/boundary"));
    }
    
    
    @Test
    public void test_469_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/type?" + 
                    "bpolys=E%3A8.704561%2C49.403252%2C8.709176%2C49.42353%2C8.701%2C49.4047%2C8.732%2C49.434%2C8.704561%2C49.403252%7CJXK%3A8.704561%2C49.403252%2C8.709778%2C49.411%2C8.7316%2C49.421%2C8.749%2C49.437%2C8.704561%2C49.403252%7CpmNiW%3A8.704561%2C49.403252%2C8.7189%2C49.427%2C8.7277%2C49.408%2C8.742%2C49.421%2C8.704561%2C49.403252&" + 
                    "format=geojson&" + 
                    "keys=highway&" + 
                    "showMetadata=true&" + 
                    "time=%2F%2FP1Y4M11D&" + 
                    "timeout=82&" + 
                    "values=traffic_signals")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.709176 49.42353 ) and LINESTRING ( 8.704561 49.403252, 8.7189 49.427 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/users/count/groupBy/type"));
    }
    
    
    @Test
    public void test_470() throws Exception {
        
        try{
            given().accept("*/*")
                    .post(baseUrlOfSut + "/users/count/groupBy/type?" + 
                        "bcircles=Njosz%3A8.748%2C49.406%2C7%7Cpqaq%3A8.731%2C49.4193%2C5%7CH%3A8.705%2C49.420%2C8%7CfejhD%3A8.7128%2C49.412%2C344&" + 
                        "filter=bicycle%21%3D*+and+not+geometry%3Apolygon+and+not+id%3A%281+..+9999%29&" + 
                        "showMetadata=true&" + 
                        "time=%2F%2FP6M5D")
                    .then();
        } catch(Exception e){
        }
    }
    
    
    @Test
    public void test_471() throws Exception {
        
        try{
            given().accept("*/*")
                    .post(baseUrlOfSut + "/users/count/groupBy/boundary?" + 
                        "bboxes=ZZuT%3A8.6894%2C49.413947%2C8.730533%2C49.384&" + 
                        "filter=maxspeed%21%3D*+and+not+geometry%3Aline+and+length%3A%28+..+100%29&" + 
                        "showMetadata=no&" + 
                        "timeout=39")
                    .then();
        } catch(Exception e){
        }
    }
    
    
    @Test
    public void test_472() throws Exception {
        
        try{
            given().accept("*/*")
                    .post(baseUrlOfSut + "/users/count/groupBy/tag?" + 
                        "bcircles=dn%3A8.7290%2C49.420%2C4&" + 
                        "filter=foot%21%3D*+or+geometry%3Aline+or+id%3A%281+..+9999%29&" + 
                        "format=geojson&" + 
                        "groupByKey=highway&" + 
                        "showMetadata=yes&" + 
                        "timeout=80")
                    .then();
        } catch(Exception e){
        }
    }
    
    
    @Test
    public void test_473() throws Exception {
        
        try{
            given().accept("*/*")
                    .post(baseUrlOfSut + "/users/count/groupBy/type?" + 
                        "bcircles=c%3A8.740%2C49.42715%2C87&" + 
                        "filter=foot%3D*+or+area%3A%281.0+..+1E6%29")
                    .then();
        } catch(Exception e){
        }
    }
    
    
    @Test
    public void test_474() throws Exception {
        
        try{
            given().accept("*/*")
                    .post(baseUrlOfSut + "/users/count/groupBy/type?" + 
                        "bboxes=W%3A8.669%2C49.424366%2C8.755%2C49.388%7CEys%3A8.6536%2C49.414%2C8.711%2C49.382%7CcRw%3A8.668817%2C49.4255%2C8.733%2C49.396&" + 
                        "filter=lit%21%3D*+or+not+length%3A%28+..+100%29&" + 
                        "time=%2F%2FP18D&" + 
                        "timeout=88")
                    .then();
        } catch(Exception e){
        }
    }
    
    
    @Test
    public void test_475_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/type?" + 
                    "bpolys=8.704561%2C49.403252%2C8.705%2C49.433%2C8.7093%2C49.426325%2C8.704710%2C49.43894%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.700009%2C49.43152%2C8.747%2C49.43358%2C8.725%2C49.409%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.7294%2C49.423%2C8.7438%2C49.41386%2C8.7061%2C49.4265%2C8.704561%2C49.403252&" + 
                    "format=json&" + 
                    "showMetadata=yes&" + 
                    "time=%2F%2FP2Y22D&" + 
                    "timeout=61")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.705 49.433 ) and LINESTRING ( 8.704561 49.403252, 8.700009 49.43152 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/users/count/groupBy/type"));
    }
    
    
    @Test
    public void test_476() throws Exception {
        
        given().accept("text/csv")
                .get(baseUrlOfSut + "/users/count/groupBy/type?" + 
                    "bcircles=vbWuq%3A8.718%2C49.433%2C88%7CZjwM%3A8.723%2C49.40147%2C72%7CKdwZZ%3A8.746%2C49.4099%2C7&" + 
                    "format=csv&" + 
                    "keys=highway&" + 
                    "showMetadata=true&" + 
                    "time=%2F%2FP1Y1M1D&" + 
                    "timeout=89&" + 
                    "values=stop")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_477() throws Exception {
        
        given().accept("text/csv")
                .get(baseUrlOfSut + "/users/count/groupBy/tag?" + 
                    "bcircles=f%3A8.7071%2C49.4126%2C1&" + 
                    "format=csv&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=construction%2Cplatform&" + 
                    "keys=highway&" + 
                    "showMetadata=true&" + 
                    "time=%2F%2FP3Y1M1D&" + 
                    "timeout=79&" + 
                    "values=elevator")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_478() throws Exception {
        
        given().accept("text/csv")
                .get(baseUrlOfSut + "/users/count/groupBy/key?" + 
                    "bcircles=g%3A8.749%2C49.4150%2C48&" + 
                    "format=csv&" + 
                    "groupByKeys=addr%3Acity%2Chighway%2Cbarrier&" + 
                    "keys=highway&" + 
                    "time=%2F%2FP5M8D&" + 
                    "timeout=52&" + 
                    "values=secondary_link")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_479() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/groupBy/boundary?" + 
                    "bcircles=IaNyT%3A8.747%2C49.4092%2C8%7CHFN%3A8.74950%2C49.411%2C421&" + 
                    "keys=highway&" + 
                    "showMetadata=yes&" + 
                    "time=%2F%2FP10M11D")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(893.0))
                .body("'metadata'.'description'", containsString("Number of distinct active users per time interval aggregated on the boundary."));
    }
    
    
    @Test
    public void test_480() throws Exception {
        
        given().accept("text/csv")
                .get(baseUrlOfSut + "/users/count/density/groupBy/type?" + 
                    "bcircles=f%3A8.7160%2C49.4325%2C8&" + 
                    "filter=smoothness%21%3D*+and+geometry%3Aline+and+area%3A%281.0+..+1E6%29&" + 
                    "format=csv&" + 
                    "showMetadata=false&" + 
                    "time=%2F%2FP3Y3M1D&" + 
                    "timeout=90")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_481() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/density/groupBy/tag?" + 
                    "bcircles=eij%3A8.749788%2C49.419203%2C838%7Can%3A8.726%2C49.4208%2C4&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=elevator%2Cservice&" + 
                    "keys=highway&" + 
                    "time=%2F%2FP2Y8M5D&" + 
                    "timeout=97")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_482() throws Exception {
        
        given().accept("text/csv")
                .get(baseUrlOfSut + "/users/count/density/groupBy/tag?" + 
                    "bcircles=8.723%2C49.425%2C2%7C8.735%2C49.42503%2C7&" + 
                    "format=csv&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=bus_stop%2Csecondary&" + 
                    "keys=highway&" + 
                    "time=%2F%2FP4M6D")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_483() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/density/groupBy/boundary?" + 
                    "bcircles=8.709%2C49.403%2C741&" + 
                    "format=geojson&" + 
                    "keys=highway&" + 
                    "time=%2F%2FP17D&" + 
                    "timeout=59")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'type'", containsString("FeatureCollection"));
    }
    
    
    @Test
    public void test_484() throws Exception {
        
        given().accept("text/csv")
                .get(baseUrlOfSut + "/users/count/density/groupBy/boundary?" + 
                    "bcircles=8.708668%2C49.42229%2C549&" + 
                    "format=csv&" + 
                    "keys=highway&" + 
                    "time=%2F%2FP7M7D&" + 
                    "timeout=61&" + 
                    "values=traffic_signals")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_485() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/density?" + 
                    "bcircles=AaXzi%3A8.7413%2C49.427679%2C62%7CWJ%3A8.7262%2C49.4372%2C67&" + 
                    "format=json&" + 
                    "keys=highway&" + 
                    "showMetadata=true&" + 
                    "time=%2F%2FP23D&" + 
                    "timeout=99")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(400.0))
                .body("'metadata'.'description'", containsString("Density of distinct active users per time interval (number of users per square-kilometer)."));
    }
    
    
    @Test
    public void test_486() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count?" + 
                    "bcircles=8.7303%2C49.403%2C34%7C8.734910%2C49.431%2C3&" + 
                    "keys=highway&" + 
                    "showMetadata=no&" + 
                    "time=%2F%2FP7M16D&" + 
                    "timeout=64")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_487() throws Exception {
        
        given().accept("text/csv")
                .get(baseUrlOfSut + "/users/count?" + 
                    "bcircles=Q%3A8.733390%2C49.411%2C2&" + 
                    "format=csv&" + 
                    "keys=highway&" + 
                    "time=%2F%2FP3M28D&" + 
                    "timeout=20")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_488() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/ratio/groupBy/boundary?" + 
                    "bcircles=v%3A8.71042%2C49.424%2C8%7CAk%3A8.729221%2C49.435%2C8&" + 
                    "keys=highway&" + 
                    "time=2008-02-18&" + 
                    "timeout=31&" + 
                    "types2=point%2C&" + 
                    "values=turning_circle")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_489() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/ratio?" + 
                    "bcircles=kCd%3A8.7173%2C49.4270%2C7%7Cohem%3A8.7048%2C49.426%2C6&" + 
                    "format=json&" + 
                    "keys=highway&" + 
                    "showMetadata=no&" + 
                    "time=2009-05-12&" + 
                    "types2=point%2Cline%2Cpolygon%2C&" + 
                    "values=unclassified")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_490() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/groupBy/type?" + 
                    "bcircles=8.74451%2C49.430%2C9%7C8.74919%2C49.431%2C6&" + 
                    "keys=highway&" + 
                    "time=2008-08-13&" + 
                    "timeout=80")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_491() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/groupBy/tag?" + 
                    "bcircles=8.749%2C49.400%2C19%7C8.731%2C49.433%2C699&" + 
                    "groupByKey=building&" + 
                    "keys=highway&" + 
                    "time=2015-09-27&" + 
                    "timeout=53")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_492() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/groupBy/key?" + 
                    "bcircles=TQ%3A8.7232%2C49.425%2C620%7Cb%3A8.7174%2C49.431%2C3&" + 
                    "groupByKeys=addr%3Ahousenumber%2Coneway&" + 
                    "keys=highway&" + 
                    "time=2008-08-07&" + 
                    "timeout=75")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_493() throws Exception {
        
        given().accept("text/csv")
                .get(baseUrlOfSut + "/elements/perimeter/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=st%3A8.745%2C49.4143%2C8%7CiSM%3A8.7469%2C49.423%2C3%7Cj%3A8.73056%2C49.418%2C3&" + 
                    "format=csv&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=stop_line&" + 
                    "keys=highway&" + 
                    "showMetadata=no&" + 
                    "time=2013-03-03")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_494() throws Exception {
        
        given().accept("text/csv")
                .get(baseUrlOfSut + "/elements/perimeter/groupBy/boundary?" + 
                    "bcircles=8.733360%2C49.426084%2C3%7C8.720%2C49.411%2C1&" + 
                    "format=csv&" + 
                    "keys=highway&" + 
                    "showMetadata=no&" + 
                    "time=2012-01-01&" + 
                    "values=secondary_link")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_495() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/density/groupBy/type?" + 
                    "bcircles=lV%3A8.73359%2C49.4023%2C16%7CcSDIE%3A8.730%2C49.4042%2C87%7CoR%3A8.722%2C49.424751%2C38&" + 
                    "filter=turn%3D*&" + 
                    "time=2013-08-10&" + 
                    "timeout=56")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_496() throws Exception {
        
        given().accept("text/csv")
                .get(baseUrlOfSut + "/elements/perimeter/density/groupBy/tag?" + 
                    "bcircles=fa%3A8.7076%2C49.434%2C71&" + 
                    "format=csv&" + 
                    "groupByKey=building&" + 
                    "groupByValues=tertiary%2Ccommercial%2Cschool&" + 
                    "keys=highway&" + 
                    "showMetadata=no&" + 
                    "time=2017-04-01&" + 
                    "timeout=47&" + 
                    "values=path")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_497() throws Exception {
        
        given().accept("text/csv")
                .post(baseUrlOfSut + "/elements/perimeter/density/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=TQH%3A8.7345%2C49.422%2C47&" + 
                    "format=csv&" + 
                    "groupByKey=building&" + 
                    "groupByValues=construction%2Cgive_way&" + 
                    "keys=highway&" + 
                    "time=2010-04-10&" + 
                    "timeout=32")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_498() throws Exception {
        
        given().accept("text/csv")
                .get(baseUrlOfSut + "/elements/perimeter/density/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=Yf%3A8.703616%2C49.4149%2C3&" + 
                    "format=csv&" + 
                    "groupByKey=building&" + 
                    "keys=highway&" + 
                    "time=2012-05-10&" + 
                    "timeout=27&" + 
                    "values=stop")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_499() throws Exception {
        
        given().accept("text/csv")
                .get(baseUrlOfSut + "/elements/perimeter/density/groupBy/boundary?" + 
                    "bcircles=hT%3A8.718%2C49.415%2C1&" + 
                    "format=csv&" + 
                    "time=2016-06-11&" + 
                    "timeout=30")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_500() throws Exception {
        
        given().accept("text/csv")
                .get(baseUrlOfSut + "/elements/perimeter/density?" + 
                    "bcircles=8.739%2C49.437%2C46%7C8.738%2C49.414308%2C9%7C8.7120%2C49.422%2C44&" + 
                    "format=csv&" + 
                    "keys=highway&" + 
                    "showMetadata=true&" + 
                    "time=2011-08-23&" + 
                    "timeout=100")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_501() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter?" + 
                    "bcircles=8.741%2C49.4117%2C3&" + 
                    "format=json&" + 
                    "showMetadata=no&" + 
                    "time=2016-07-20&" + 
                    "timeout=88")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_502() throws Exception {
        
        given().accept("text/csv")
                .get(baseUrlOfSut + "/elements/perimeter?" + 
                    "bcircles=8.748%2C49.4232%2C1&" + 
                    "format=csv&" + 
                    "keys=highway&" + 
                    "time=2014-09-09&" + 
                    "timeout=87")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_503() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/ratio/groupBy/boundary?" + 
                    "bcircles=CJD%3A8.734%2C49.4368%2C8%7CUMC%3A8.7001%2C49.425%2C4&" + 
                    "filter2=destination%3D*+and+not+id%3A%281+..+9999%29&" + 
                    "format=geojson&" + 
                    "keys=highway&" + 
                    "keys2=highway&" + 
                    "showMetadata=no&" + 
                    "time=2017-09-30&" + 
                    "timeout=29&" + 
                    "types2=point%2Cline%2Cpolygon%2Cother")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'type'", containsString("FeatureCollection"));
    }
    
    
    @Test
    public void test_504() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/ratio/groupBy/boundary?" + 
                    "bcircles=j%3A8.74876%2C49.430%2C7%7Cc%3A8.7016%2C49.401%2C6&" + 
                    "filter2=maxspeed%3D*+or+length%3A%28+..+100%29&" + 
                    "format=geojson&" + 
                    "keys=highway&" + 
                    "keys2=highway&" + 
                    "showMetadata=true&" + 
                    "time=2014-06-10&" + 
                    "types2=point%2Cline%2Cpolygon%2Cother&" + 
                    "values=cycleway&" + 
                    "values2=primary_link")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(598.0))
                .body("'metadata'.'description'", containsString("Total length of items in meters satisfying types2, keys2, values2 parameters (= value2 output), as well as items selected by types, keys, values parameters (= value output) and ratio of value2:value, aggregated on the boundary objects."))
                .body("'type'", containsString("FeatureCollection"));
    }
    
    
    @Test
    public void test_505() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/ratio?" + 
                    "bcircles=NJ%3A8.7011%2C49.429182%2C5&" + 
                    "keys=highway&" + 
                    "keys2=highway&" + 
                    "showMetadata=false&" + 
                    "time=2014-02-26&" + 
                    "timeout=54&" + 
                    "types2=polygon%2Cother&" + 
                    "values2=service")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_506() throws Exception {
        
        given().accept("text/csv")
                .get(baseUrlOfSut + "/elements/length/ratio?" + 
                    "bcircles=mbP%3A8.7003%2C49.409%2C4&" + 
                    "filter2=foot%3D*+or+geometry%3Aline&" + 
                    "format=csv&" + 
                    "keys=highway&" + 
                    "keys2=highway&" + 
                    "showMetadata=true&" + 
                    "time=2009-07-18&" + 
                    "timeout=23&" + 
                    "values=pedestrian&" + 
                    "values2=elevator")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_507() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/type?" + 
                    "bcircles=E%3A8.710%2C49.416%2C91%7Czs%3A8.704%2C49.431248%2C6&" + 
                    "format=geojson&" + 
                    "keys=highway&" + 
                    "time=2008-01-30")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_508() throws Exception {
        
        given().accept("text/csv")
                .get(baseUrlOfSut + "/elements/length/groupBy/type?" + 
                    "bcircles=hd%3A8.731%2C49.41552%2C80&" + 
                    "format=csv&" + 
                    "keys=highway&" + 
                    "showMetadata=false&" + 
                    "time=2017-11-20&" + 
                    "timeout=46")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_509() throws Exception {
        
        given().accept("text/csv")
                .get(baseUrlOfSut + "/elements/length/groupBy/tag?" + 
                    "bcircles=xio%3A8.735%2C49.43616%2C9%7CL%3A8.715446%2C49.428%2C8%7CiCr%3A8.745%2C49.42021%2C38&" + 
                    "format=csv&" + 
                    "groupByKey=highway&" + 
                    "keys=highway&" + 
                    "time=2015-08-01&" + 
                    "timeout=60")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_510() throws Exception {
        
        given().accept("text/csv")
                .get(baseUrlOfSut + "/elements/length/groupBy/key?" + 
                    "bcircles=8.74501%2C49.420%2C37%7C8.7260%2C49.413830%2C7&" + 
                    "filter=foot%3D*+or+area%3A%281.0+..+1E6%29&" + 
                    "format=csv&" + 
                    "groupByKeys=ref%2Cmaxspeed%2Caddr%3Acountry&" + 
                    "showMetadata=no&" + 
                    "time=2012-01-03&" + 
                    "timeout=100")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_511() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=eLdt%3A8.744%2C49.434%2C9%7CAQHVz%3A8.7431%2C49.424%2C3%7CVruks%3A8.709%2C49.4025%2C66%7Cu%3A8.717498%2C49.404%2C891&" + 
                    "groupByKey=highway&" + 
                    "keys=highway&" + 
                    "time=2017-06-20&" + 
                    "timeout=68")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_512() throws Exception {
        
        given().accept("text/csv")
                .get(baseUrlOfSut + "/elements/length/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=VRRYC%3A8.726%2C49.407%2C8%7CxQ%3A8.724%2C49.419%2C2&" + 
                    "format=csv&" + 
                    "groupByKey=building&" + 
                    "keys=highway&" + 
                    "time=2008-08-19&" + 
                    "timeout=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_513() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/groupBy/boundary?" + 
                    "bcircles=Nn%3A8.717%2C49.4146%2C712%7CA%3A8.709748%2C49.402%2C7&" + 
                    "keys=highway&" + 
                    "time=2014-01-30&" + 
                    "timeout=71")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_514() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density/groupBy/type?" + 
                    "bcircles=8.734%2C49.416%2C9%7C8.745%2C49.4168%2C186&" + 
                    "filter=name%21%3D*+or+length%3A%28+..+100%29&" + 
                    "showMetadata=no&" + 
                    "time=2017-08-31&" + 
                    "timeout=85")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_515() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/density/groupBy/type?" + 
                    "bcircles=SOHCN%3A8.7326%2C49.4223%2C9&" + 
                    "keys=highway&" + 
                    "showMetadata=yes&" + 
                    "time=2016-04-19&" + 
                    "timeout=97")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(195.0))
                .body("'metadata'.'description'", containsString("Density of selected items (length of items in meters divided by the area in square kilometers), aggregated on the type."));
    }
    
    
    @Test
    public void test_516() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density/groupBy/tag?" + 
                    "bcircles=RxDgE%3A8.717%2C49.432459%2C9&" + 
                    "groupByKey=highway&" + 
                    "keys=highway&" + 
                    "showMetadata=no&" + 
                    "time=2011-03-03&" + 
                    "timeout=45")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'groupByResult'", hasItems());
    }
    
    
    @Test
    public void test_517() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/density/groupBy/tag?" + 
                    "bcircles=N%3A8.738523%2C49.4220%2C502%7CT%3A8.73499%2C49.409094%2C8&" + 
                    "format=geojson&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=church%2Cservice%2Croof&" + 
                    "keys=highway&" + 
                    "time=2015-02-20&" + 
                    "timeout=35")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_518() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=8.7242%2C49.4223%2C94%7C8.728%2C49.4256%2C499&" + 
                    "groupByKey=building&" + 
                    "groupByValues=emergency_access_point%2Chouse%2Csecondary_link&" + 
                    "keys=highway&" + 
                    "showMetadata=no&" + 
                    "time=2016-06-25&" + 
                    "timeout=53")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_519() throws Exception {
        
        given().accept("text/csv")
                .get(baseUrlOfSut + "/elements/length/density/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=K%3A8.746%2C49.415%2C28&" + 
                    "format=csv&" + 
                    "groupByKey=highway&" + 
                    "keys=highway&" + 
                    "time=2013-01-28&" + 
                    "timeout=58")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_520() throws Exception {
        
        given().accept("text/csv")
                .get(baseUrlOfSut + "/elements/length/density/groupBy/boundary?" + 
                    "bcircles=8.701%2C49.4129%2C7%7C8.7059%2C49.4256%2C1&" + 
                    "format=csv&" + 
                    "keys=highway&" + 
                    "time=2010-03-13&" + 
                    "timeout=85")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_521() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/density?" + 
                    "bcircles=R%3A8.731%2C49.4048%2C2&" + 
                    "keys=highway&" + 
                    "showMetadata=true&" + 
                    "time=2009-06-19&" + 
                    "timeout=25")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(189.0))
                .body("'metadata'.'description'", containsString("Density of selected items (length of items in meters divided by the area in square kilometers)."));
    }
    
    
    @Test
    public void test_522() throws Exception {
        
        given().accept("text/csv")
                .post(baseUrlOfSut + "/elements/length?" + 
                    "bcircles=soGrv%3A8.747%2C49.4118%2C2%7CJe%3A8.701%2C49.402%2C3%7Cmh%3A8.728%2C49.435670%2C12%7CD%3A8.739032%2C49.435%2C4&" + 
                    "format=csv&" + 
                    "keys=highway&" + 
                    "showMetadata=yes&" + 
                    "time=2018-03-27&" + 
                    "timeout=92")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_523() throws Exception {
        
        given().accept("text/csv")
                .get(baseUrlOfSut + "/elements/length?" + 
                    "bcircles=Z%3A8.716%2C49.4084%2C4%7CN%3A8.734%2C49.401%2C9&" + 
                    "format=csv&" + 
                    "keys=highway&" + 
                    "showMetadata=false&" + 
                    "time=2015-07-10")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_524() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/ratio/groupBy/boundary?" + 
                    "bcircles=Yuuah%3A8.73820%2C49.4065%2C31%7CJrjWe%3A8.721%2C49.414%2C6%7Cn%3A8.728%2C49.424%2C2&" + 
                    "keys=highway&" + 
                    "time=2008-06-25&" + 
                    "timeout=23&" + 
                    "types2=point%2Cpolygon%2C")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_525() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/ratio?" + 
                    "bcircles=R%3A8.737%2C49.40036%2C9&" + 
                    "format=json&" + 
                    "keys=highway&" + 
                    "keys2=highway&" + 
                    "showMetadata=no&" + 
                    "time=2008-12-31&" + 
                    "timeout=57&" + 
                    "types2=point%2Cline%2Cpolygon%2Cother")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_526() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/ratio?" + 
                    "bcircles=8.728197%2C49.43377%2C4%7C8.710%2C49.423%2C1%7C8.7113%2C49.4000%2C387%7C8.7237%2C49.431%2C56&" + 
                    "keys=highway&" + 
                    "keys2=highway&" + 
                    "time=2017-09-05&" + 
                    "timeout=68&" + 
                    "types2=point%2Cline%2Cpolygon%2C&" + 
                    "values2=secondary")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_527() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/type?" + 
                    "bcircles=8.708%2C49.4363%2C7%7C8.728%2C49.4388%2C68%7C8.729%2C49.4053%2C8%7C8.735%2C49.422303%2C98&" + 
                    "showMetadata=no&" + 
                    "time=2011-09-11&" + 
                    "timeout=62")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_528() throws Exception {
        
        given().accept("text/csv")
                .get(baseUrlOfSut + "/elements/count/groupBy/type?" + 
                    "bcircles=GFjRV%3A8.747%2C49.4121%2C74&" + 
                    "format=csv&" + 
                    "keys=highway&" + 
                    "showMetadata=no&" + 
                    "time=2011-06-06&" + 
                    "timeout=76&" + 
                    "values=traffic_signals")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_529() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/tag?" + 
                    "bcircles=8.7144%2C49.4104%2C9&" + 
                    "groupByKey=building&" + 
                    "groupByValues=primary_link%2Cpublic%2Cresidential&" + 
                    "time=2015-03-02&" + 
                    "timeout=46")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_530() throws Exception {
        
        given().accept("text/csv")
                .get(baseUrlOfSut + "/elements/count/groupBy/tag?" + 
                    "bcircles=D%3A8.7166%2C49.40379%2C47&" + 
                    "format=csv&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=bus_stop%2Cservice%2Cdemolished&" + 
                    "keys=highway&" + 
                    "showMetadata=no&" + 
                    "time=2007-10-11&" + 
                    "timeout=65")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_531() throws Exception {
        
        given().accept("text/csv")
                .post(baseUrlOfSut + "/elements/count/groupBy/key?" + 
                    "bcircles=gAp%3A8.721%2C49.433%2C8%7Ck%3A8.71490%2C49.425809%2C98&" + 
                    "format=csv&" + 
                    "groupByKeys=building%2Ctype%2Coneway&" + 
                    "keys=highway&" + 
                    "showMetadata=yes&" + 
                    "time=2011-04-30&" + 
                    "timeout=44")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_532() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/groupBy/key?" + 
                    "bcircles=gvv%3A8.729%2C49.417%2C4&" + 
                    "groupByKeys=source%3Amaxspeed%2Cref%2Csmoothness&" + 
                    "keys=highway&" + 
                    "time=2010-09-20")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_533() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=V%3A8.747%2C49.427%2C789%7CmSE%3A8.71652%2C49.40400%2C5%7CG%3A8.74253%2C49.425%2C8%7CR%3A8.74605%2C49.410%2C7&" + 
                    "filter=addr%3Astreet%21%3D*+or+id%3A%281+..+9999%29&" + 
                    "groupByKey=building&" + 
                    "showMetadata=true&" + 
                    "time=2010-05-06&" + 
                    "timeout=69")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(579.0))
                .body("'metadata'.'description'", containsString("Total count of items in absolute values, aggregated on the boundary and on the tag."));
    }
    
    
    @Test
    public void test_534() throws Exception {
        
        given().accept("text/csv")
                .get(baseUrlOfSut + "/elements/count/groupBy/boundary?" + 
                    "bcircles=tJsPp%3A8.702%2C49.433%2C26&" + 
                    "format=csv&" + 
                    "keys=highway&" + 
                    "showMetadata=false&" + 
                    "time=2016-06-13&" + 
                    "timeout=63")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_535() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/density/groupBy/type?" + 
                    "bcircles=Yd%3A8.72412%2C49.4380%2C1&" + 
                    "keys=highway&" + 
                    "showMetadata=false&" + 
                    "time=2013-01-20&" + 
                    "timeout=98")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_536() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/density/groupBy/type?" + 
                    "bcircles=YRqz%3A8.722373%2C49.419%2C7&" + 
                    "filter=highway%3D*+or+id%3A%281+..+9999%29&" + 
                    "showMetadata=no&" + 
                    "time=2009-09-30&" + 
                    "timeout=100")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_537() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/density/groupBy/tag?" + 
                    "bcircles=E%3A8.74364%2C49.41877%2C8&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=elevator&" + 
                    "keys=highway&" + 
                    "showMetadata=yes&" + 
                    "time=2008-12-16")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(198.0))
                .body("'metadata'.'description'", containsString("Density of selected items (count of items in absolute values divided by the area in square kilometers), aggregated on the tag."));
    }
    
    
    @Test
    public void test_538() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/density/groupBy/tag?" + 
                    "bcircles=zNQz%3A8.70118%2C49.416%2C1%7Cv%3A8.727%2C49.4384%2C6&" + 
                    "groupByKey=building&" + 
                    "groupByValues=chapel%2Csecondary_link%2Celevator&" + 
                    "keys=highway&" + 
                    "showMetadata=false&" + 
                    "time=2016-02-10&" + 
                    "timeout=21")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_539() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/density/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=8.741%2C49.418490%2C9%7C8.722%2C49.403980%2C6&" + 
                    "groupByKey=highway&" + 
                    "keys=highway&" + 
                    "showMetadata=no&" + 
                    "time=2011-03-16")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_540() throws Exception {
        
        given().accept("text/csv")
                .get(baseUrlOfSut + "/elements/count/density/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=jkk%3A8.7044%2C49.41695%2C3&" + 
                    "format=csv&" + 
                    "groupByKey=building&" + 
                    "showMetadata=true&" + 
                    "time=2011-06-24&" + 
                    "timeout=65")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_541() throws Exception {
        
        given().accept("text/csv")
                .post(baseUrlOfSut + "/elements/count/density/groupBy/boundary?" + 
                    "bcircles=l%3A8.723%2C49.430422%2C99%7CftJ%3A8.7349%2C49.433483%2C14%7CAN%3A8.73524%2C49.42636%2C66%7Cjo%3A8.733%2C49.434615%2C2&" + 
                    "filter=bicycle%3D*+or+geometry%3Apolygon+or+id%3A%281+..+9999%29&" + 
                    "format=csv&" + 
                    "time=2012-02-02&" + 
                    "timeout=64")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_542() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/density/groupBy/boundary?" + 
                    "bcircles=p%3A8.735%2C49.4010%2C94&" + 
                    "format=geojson&" + 
                    "keys=highway&" + 
                    "showMetadata=no&" + 
                    "time=2016-12-21&" + 
                    "timeout=87")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'type'", containsString("FeatureCollection"));
    }
    
    
    @Test
    public void test_543() throws Exception {
        
        given().accept("text/csv")
                .get(baseUrlOfSut + "/elements/count/density?" + 
                    "bcircles=yGhU%3A8.727%2C49.4327%2C4&" + 
                    "format=csv&" + 
                    "keys=highway&" + 
                    "time=2010-11-17&" + 
                    "timeout=63")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_544() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count?" + 
                    "bcircles=Rac%3A8.746183%2C49.415%2C1%7CYuyW%3A8.705%2C49.415%2C3&" + 
                    "filter=maxspeed%21%3D*+or+type%3Away+or+not+id%3A%281+..+9999%29&" + 
                    "format=geojson&" + 
                    "showMetadata=no&" + 
                    "time=2015-12-26&" + 
                    "timeout=32")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_545() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count?" + 
                    "bcircles=8.70786%2C49.427%2C9&" + 
                    "keys=highway&" + 
                    "showMetadata=true&" + 
                    "time=2012-07-10")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(217.0))
                .body("'metadata'.'description'", containsString("Total count of items in absolute values."));
    }
    
    
    @Test
    public void test_546() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/ratio/groupBy/boundary?" + 
                    "bcircles=8.74145%2C49.417%2C6%7C8.7120%2C49.421%2C3&" + 
                    "format=json&" + 
                    "keys=highway&" + 
                    "time=2009-10-30&" + 
                    "types2=polygon%2Cother")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_547() throws Exception {
        
        given().accept("text/csv")
                .post(baseUrlOfSut + "/elements/area/ratio?" + 
                    "bcircles=AaZCf%3A8.701844%2C49.428%2C42%7CFKP%3A8.732%2C49.4184%2C4&" + 
                    "format=csv&" + 
                    "keys=highway&" + 
                    "keys2=highway&" + 
                    "showMetadata=no&" + 
                    "time=2012-04-03&" + 
                    "timeout=58&" + 
                    "types2=relation&" + 
                    "values2=pedestrian")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_548() throws Exception {
        
        given().accept("text/csv")
                .get(baseUrlOfSut + "/elements/area/ratio?" + 
                    "bcircles=cBJJR%3A8.721%2C49.404%2C2%7Cf%3A8.719%2C49.403%2C562%7CDUyjn%3A8.749%2C49.4278%2C946%7Ckae%3A8.7046%2C49.4085%2C4&" + 
                    "filter2=type%21%3D*+and+geometry%3Aline+or+length%3A%28+..+100%29&" + 
                    "format=csv&" + 
                    "keys=highway&" + 
                    "keys2=highway&" + 
                    "showMetadata=false&" + 
                    "time=2018-05-02&" + 
                    "timeout=75&" + 
                    "types2=point%2Cpolygon%2Cother&" + 
                    "values2=secondary")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_549() throws Exception {
        
        given().accept("text/csv")
                .post(baseUrlOfSut + "/elements/area/groupBy/type?" + 
                    "bcircles=fSoQf%3A8.737%2C49.413%2C99&" + 
                    "format=csv&" + 
                    "keys=highway&" + 
                    "time=2010-12-11&" + 
                    "timeout=21&" + 
                    "values=speed_camera")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_550() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/type?" + 
                    "bcircles=iKM%3A8.723%2C49.4358%2C1&" + 
                    "format=geojson&" + 
                    "keys=highway&" + 
                    "showMetadata=true&" + 
                    "time=2008-06-21&" + 
                    "timeout=79")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(215.0))
                .body("'metadata'.'description'", containsString("Total area of items in square meters, aggregated on the type."));
    }
    
    
    @Test
    public void test_551() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/tag?" + 
                    "bcircles=K%3A8.7345%2C49.4070%2C3%7CWF%3A8.7496%2C49.4314%2C30%7CENZds%3A8.710527%2C49.432371%2C8&" + 
                    "groupByKey=highway&" + 
                    "keys=highway&" + 
                    "showMetadata=yes&" + 
                    "time=2018-04-11&" + 
                    "timeout=50")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(215.0))
                .body("'metadata'.'description'", containsString("Total area of items in square meters, aggregated on the tag."));
    }
    
    
    @Test
    public void test_552() throws Exception {
        
        given().accept("text/csv")
                .get(baseUrlOfSut + "/elements/area/groupBy/tag?" + 
                    "bcircles=8.724%2C49.409%2C631&" + 
                    "format=csv&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=station&" + 
                    "keys=highway&" + 
                    "showMetadata=false&" + 
                    "time=2015-09-02&" + 
                    "timeout=91")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_553() throws Exception {
        
        given().accept("text/csv")
                .post(baseUrlOfSut + "/elements/area/groupBy/key?" + 
                    "bcircles=8.725335%2C49.4151%2C84&" + 
                    "format=csv&" + 
                    "groupByKeys=highway%2Clanes%3Abackward&" + 
                    "keys=highway&" + 
                    "time=2008-12-25&" + 
                    "timeout=85")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_554() throws Exception {
        
        given().accept("text/csv")
                .get(baseUrlOfSut + "/elements/area/groupBy/key?" + 
                    "bcircles=8.748%2C49.412%2C6&" + 
                    "format=csv&" + 
                    "groupByKeys=tracktype%2Cbicycle&" + 
                    "keys=highway&" + 
                    "showMetadata=no&" + 
                    "time=2013-12-11&" + 
                    "timeout=83&" + 
                    "values=cycleway")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_555() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=8.704%2C49.4026%2C9&" + 
                    "format=json&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=unclassified%2Cliving_street%2Cplatform&" + 
                    "keys=highway&" + 
                    "time=2012-10-13&" + 
                    "timeout=99")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_556() throws Exception {
        
        given().accept("text/csv")
                .get(baseUrlOfSut + "/elements/area/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=8.737%2C49.40745%2C2%7C8.74529%2C49.414%2C8&" + 
                    "filter=barrier%3D*+and+geometry%3Aline+and+length%3A%28+..+100%29&" + 
                    "format=csv&" + 
                    "groupByKey=building&" + 
                    "showMetadata=no&" + 
                    "time=2008-01-28&" + 
                    "timeout=62")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_557() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/boundary?" + 
                    "bcircles=kjzGj%3A8.7043%2C49.4009%2C7&" + 
                    "keys=highway&" + 
                    "time=2009-03-27&" + 
                    "timeout=100")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_558() throws Exception {
        
        given().accept("text/csv")
                .post(baseUrlOfSut + "/elements/area/density/groupBy/type?" + 
                    "bcircles=RW%3A8.738%2C49.4131%2C49&" + 
                    "format=csv&" + 
                    "keys=highway&" + 
                    "showMetadata=yes&" + 
                    "time=2009-04-11&" + 
                    "timeout=69&" + 
                    "values=track")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_559() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/density/groupBy/type?" + 
                    "bcircles=8.711650%2C49.4001%2C20&" + 
                    "keys=highway&" + 
                    "showMetadata=yes&" + 
                    "time=2015-09-03&" + 
                    "timeout=100")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(188.0))
                .body("'metadata'.'description'", containsString("Density of selected items (area of items in square meters divided by the area in square kilometers), aggregated on the type."));
    }
    
    
    @Test
    public void test_560() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density/groupBy/tag?" + 
                    "bcircles=m%3A8.7190%2C49.4345%2C2&" + 
                    "groupByKey=highway&" + 
                    "keys=highway&" + 
                    "showMetadata=no&" + 
                    "time=2014-03-09&" + 
                    "timeout=32&" + 
                    "values=crossing")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'groupByResult'", hasItems());
    }
    
    
    @Test
    public void test_561() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/density/groupBy/tag?" + 
                    "bcircles=riLAu%3A8.702%2C49.424%2C962&" + 
                    "groupByKey=highway&" + 
                    "keys=highway&" + 
                    "showMetadata=no&" + 
                    "time=2009-04-07")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_562() throws Exception {
        
        given().accept("text/csv")
                .get(baseUrlOfSut + "/elements/area/density/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=R%3A8.72132%2C49.430%2C3%7CVHN%3A8.738%2C49.438%2C5&" + 
                    "format=csv&" + 
                    "groupByKey=building&" + 
                    "groupByValues=service%2Cresidential&" + 
                    "keys=highway&" + 
                    "showMetadata=true&" + 
                    "time=2012-03-16&" + 
                    "timeout=84")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_563() throws Exception {
        
        given().accept("text/csv")
                .post(baseUrlOfSut + "/elements/area/density/groupBy/boundary?" + 
                    "bcircles=8.745893%2C49.433%2C99%7C8.710%2C49.4079%2C3%7C8.70162%2C49.407%2C6%7C8.704%2C49.4022%2C86&" + 
                    "format=csv&" + 
                    "keys=highway&" + 
                    "time=2010-10-11&" + 
                    "timeout=98")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_564() throws Exception {
        
        given().accept("text/csv")
                .get(baseUrlOfSut + "/elements/area/density/groupBy/boundary?" + 
                    "bcircles=a%3A8.74230%2C49.401523%2C5&" + 
                    "filter=maxspeed%21%3D*+or+geometry%3Aline+or+length%3A%28+..+100%29&" + 
                    "format=csv&" + 
                    "showMetadata=no&" + 
                    "time=2012-11-26&" + 
                    "timeout=97")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_565() throws Exception {
        
        given().accept("text/csv")
                .get(baseUrlOfSut + "/elements/area/density?" + 
                    "bcircles=HZs%3A8.7186%2C49.403%2C9%7CtOAcO%3A8.72101%2C49.438%2C2%7CLI%3A8.744%2C49.416858%2C4&" + 
                    "format=csv&" + 
                    "keys=highway&" + 
                    "showMetadata=true&" + 
                    "time=2015-12-25&" + 
                    "timeout=30")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_566() throws Exception {
        
        given().accept("text/csv")
                .post(baseUrlOfSut + "/elements/area?" + 
                    "bcircles=e%3A8.72839%2C49.405%2C5%7CRIpV%3A8.7106%2C49.41924%2C10&" + 
                    "format=csv&" + 
                    "keys=highway&" + 
                    "time=2016-04-14&" + 
                    "timeout=90")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_567() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/type?" + 
                    "bpolys=p%3A8.704561%2C49.403252%2C8.712%2C49.4117%2C8.724%2C49.4203%2C8.71265%2C49.4133%2C8.704561%2C49.403252&" + 
                    "filter=addr%3Astreet%3D*+and+id%3A%281+..+9999%29&" + 
                    "format=json&" + 
                    "showMetadata=false&" + 
                    "time=%2F%2FP1Y16D")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_568() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/boundary?" + 
                    "bcircles=xItp%3A8.7272%2C49.433%2C7&" + 
                    "filter=oneway%3D*+and+area%3A%281.0+..+1E6%29&" + 
                    "time=%2F%2FP6M12D")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_569() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/density/groupBy/tag?" + 
                    "bboxes=zp%3A8.693%2C49.418311%2C8.7267%2C49.392%7CT%3A8.685%2C49.4079%2C8.7528%2C49.393%7CE%3A8.6992%2C49.427%2C8.743%2C49.3908%7CNQV%3A8.6918%2C49.424%2C8.746%2C49.390&" + 
                    "format=geojson&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=school%2Cunclassified%2Ccommercial&" + 
                    "keys=highway&" + 
                    "time=%2F%2FP25D&" + 
                    "values=cycleway")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_570() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/density/groupBy/tag?" + 
                    "bboxes=h%3A8.687%2C49.41309%2C8.705%2C49.398%7CP%3A8.658%2C49.419%2C8.709%2C49.383&" + 
                    "format=json&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=traffic_mirror%2Cplatform%2Cchapel&" + 
                    "keys=highway&" + 
                    "showMetadata=true&" + 
                    "time=%2F%2FP3Y2M28D&" + 
                    "values=give_way")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(503.0))
                .body("'metadata'.'description'", containsString("Density of distinct active users per time interval (number of users per square-kilometer) aggregated on the tag."));
    }
    
    
    @Test
    public void test_571() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/density/groupBy/boundary?" + 
                    "bcircles=8.736%2C49.427137%2C3%7C8.7044%2C49.42151%2C54%7C8.700%2C49.422%2C20&" + 
                    "keys=highway&" + 
                    "time=%2F%2FP2M7D")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_572() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/density/groupBy/boundary?" + 
                    "bcircles=Bkp%3A8.73523%2C49.414%2C834&" + 
                    "filter=destination%3D*&" + 
                    "showMetadata=true&" + 
                    "timeout=53")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(313.0))
                .body("'metadata'.'description'", containsString("Density of distinct active users per time interval (number of users per square-kilometer) aggregated on the boundary."));
    }
    
    
    @Test
    public void test_573() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/ratio?" + 
                    "bpolys=dN%3A8.704561%2C49.403252%2C8.708705%2C49.417%2C8.702%2C49.436234%2C8.705%2C49.4144%2C8.704561%2C49.403252&" + 
                    "filter2=destination%21%3D*+or+id%3A%281+..+9999%29&" + 
                    "keys=highway&" + 
                    "keys2=highway&" + 
                    "time=2010-10-30&" + 
                    "types2=relation&" + 
                    "values=secondary&" + 
                    "values2=secondary_link")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_574() throws Exception {
        
        given().accept("text/csv")
                .post(baseUrlOfSut + "/elements/perimeter/ratio/groupBy/boundary?" + 
                    "bcircles=8.737%2C49.4193%2C4&" + 
                    "filter=natural%3Dwood+or+area%3A%281.0+..+1E6%29&" + 
                    "filter2=name%21%3D*+or+type%3Anode&" + 
                    "format=csv")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_575() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/ratio/groupBy/boundary?" + 
                    "bpolys=8.704561%2C49.403252%2C8.74681%2C49.42770%2C8.740%2C49.439%2C8.708%2C49.435%2C8.704561%2C49.403252&" + 
                    "format=json&" + 
                    "keys=highway&" + 
                    "showMetadata=true&" + 
                    "time=2012-05-13&" + 
                    "timeout=45&" + 
                    "types2=line%2Cother&" + 
                    "values=emergency_access_point")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(637.0))
                .body("'metadata'.'description'", containsString("Total perimeter of items in meters satisfying types2, keys2, values2 parameters (= value2 output), as well as items selected by types, keys, values parameters (= value output) and ratio of value2:value, aggregated on the boundary objects."));
    }
    
    
    @Test
    public void test_576() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/key?" + 
                    "bcircles=bwd%3A8.7230%2C49.426%2C6&" + 
                    "groupByKeys=barrier%2Caddr%3Astreet%2Cmaxspeed&" + 
                    "timeout=51")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_577() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/density/groupBy/tag?" + 
                    "bcircles=EYrJN%3A8.7005%2C49.426%2C68%7CtU%3A8.719%2C49.41842%2C49%7CbC%3A8.708333%2C49.417%2C8%7CSx%3A8.7350%2C49.41856%2C51&" + 
                    "format=json&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=house%2Cchurch&" + 
                    "showMetadata=yes&" + 
                    "timeout=80")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(558.0))
                .body("'metadata'.'description'", containsString("Density of selected items (perimeter of items in meters divided by the area in square kilometers), aggregated on the tag."));
    }
    
    
    @Test
    public void test_578() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density/groupBy/tag?" + 
                    "bboxes=8.694%2C49.410902%2C8.717%2C49.389&" + 
                    "filter=lanes%21%3D*&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=steps%2Chouse&" + 
                    "showMetadata=yes")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(606.0))
                .body("'metadata'.'description'", containsString("Density of selected items (length of items in meters divided by the area in square kilometers), aggregated on the tag."));
    }
    
    
    @Test
    public void test_579() throws Exception {
        
        given().accept("text/csv")
                .post(baseUrlOfSut + "/elements/length/density/groupBy/boundary/groupBy/tag?" + 
                    "bboxes=LWQNc%3A8.677%2C49.423504%2C8.71852%2C49.388&" + 
                    "format=csv&" + 
                    "groupByKey=building")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_580() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/key?" + 
                    "bcircles=XH%3A8.73955%2C49.411%2C9%7CFJu%3A8.747%2C49.4363%2C8&" + 
                    "groupByKeys=addr%3Astreet%2Csidewalk")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_581() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/density/groupBy/boundary?" + 
                    "bboxes=8.663%2C49.416%2C8.722%2C49.395&" + 
                    "format=json&" + 
                    "keys=highway&" + 
                    "time=2015-10-07&" + 
                    "values=emergency_access_point")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_582() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count?" + 
                    "bcircles=xv%3A8.740%2C49.434%2C29%7CpWs%3A8.7240%2C49.4264%2C97%7CD%3A8.747%2C49.4367%2C46%7CFh%3A8.716%2C49.4232%2C7&" + 
                    "filter=foot%3D*+and+length%3A%28+..+100%29&" + 
                    "format=json&" + 
                    "showMetadata=yes")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(197.0))
                .body("'metadata'.'description'", containsString("Total count of items in absolute values."));
    }
    
    
    @Test
    public void test_583() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/tag?" + 
                    "bboxes=ZQ%3A8.697872%2C49.409%2C8.733%2C49.395&" + 
                    "filter=smoothness%21%3D*+or+area%3A%281.0+..+1E6%29&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=emergency_access_point%2Cresidential%2Cpath")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_584() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/key?" + 
                    "bboxes=8.6989%2C49.4180%2C8.71723%2C49.396%7C8.6746%2C49.4239%2C8.7298%2C49.396%7C8.6691%2C49.4115%2C8.723%2C49.3983&" + 
                    "filter=landuse%3D*+or+not+length%3A%28+..+100%29&" + 
                    "format=geojson&" + 
                    "groupByKeys=addr%3Apostcode%2Cmaxspeed&" + 
                    "showMetadata=false&" + 
                    "time=2010-05-26&" + 
                    "timeout=38")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_585() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density/groupBy/tag?" + 
                    "bboxes=U%3A8.651%2C49.427%2C8.707553%2C49.398&" + 
                    "format=geojson&" + 
                    "groupByKey=highway&" + 
                    "keys=highway&" + 
                    "showMetadata=false&" + 
                    "timeout=53&" + 
                    "values=platform")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_586() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area?" + 
                    "bboxes=8.660%2C49.423%2C8.74511%2C49.3991%7C8.66010%2C49.402%2C8.70930%2C49.380&" + 
                    "keys=highway&" + 
                    "showMetadata=no&" + 
                    "time=2010-11-13&" + 
                    "timeout=68&" + 
                    "types=point%2Cline%2C&" + 
                    "values=turning_circle")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_587() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area?" + 
                    "bboxes=ZG%3A8.69097%2C49.412%2C8.7178%2C49.389226&" + 
                    "keys=highway&" + 
                    "showMetadata=yes&" + 
                    "time=2012-10-28&" + 
                    "timeout=41&" + 
                    "types=point%2Cline%2C")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(69.0))
                .body("'metadata'.'description'", containsString("Total area of items in square meters."));
    }
    
    
    @Test
    public void test_588() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area?" + 
                    "bcircles=voI%3A8.74401%2C49.42406%2C2%7CInrIE%3A8.7436%2C49.4156%2C1&" + 
                    "format=geojson&" + 
                    "time=2017-06-30&" + 
                    "timeout=72&" + 
                    "types=point%2Cline%2Cother")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_589() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/density/groupBy/tag?" + 
                    "bcircles=8.717%2C49.439%2C35&" + 
                    "format=geojson&" + 
                    "groupByKey=building&" + 
                    "keys=highway&" + 
                    "time=2009-03-24&" + 
                    "timeout=58&" + 
                    "values=crossing")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'groupByResult'", hasItems());
    }
    
    
    @Test
    public void test_590() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/type?" + 
                    "bpolys=t%3A8.704561%2C49.403252%2C8.715%2C49.425932%2C8.7041%2C49.4369%2C8.7409%2C49.4171%2C8.704561%2C49.403252&" + 
                    "format=geojson&" + 
                    "keys=highway&" + 
                    "showMetadata=true&" + 
                    "time=2015-08-07")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(209.0))
                .body("'metadata'.'description'", containsString("Total length of items in meters, aggregated on the type."));
    }
    
    
    @Test
    public void test_591() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/tag?" + 
                    "bcircles=meCn%3A8.7382%2C49.416956%2C87&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=primary_link%2Cfootway%2Csecondary&" + 
                    "time=2015-09-16&" + 
                    "timeout=81")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_592() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/key?" + 
                    "bcircles=jJzRU%3A8.70177%2C49.43663%2C7&" + 
                    "groupByKeys=addr%3Ahousenumber%2Cbarrier&" + 
                    "keys=highway&" + 
                    "showMetadata=yes&" + 
                    "time=2012-10-16&" + 
                    "timeout=46&" + 
                    "values=primary_link")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(188.0))
                .body("'metadata'.'description'", containsString("Total length of items in meters, aggregated on the key."));
    }
    
    
    @Test
    public void test_593() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density/groupBy/type?" + 
                    "bboxes=fV%3A8.685137%2C49.403%2C8.7033%2C49.387&" + 
                    "keys=highway&" + 
                    "showMetadata=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(196.0))
                .body("'metadata'.'description'", containsString("Density of selected items (length of items in meters divided by the area in square kilometers), aggregated on the type."));
    }
    
    
    @Test
    public void test_594() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/type?" + 
                    "bboxes=8.68167%2C49.419%2C8.7375%2C49.3905&" + 
                    "format=geojson&" + 
                    "timeout=100")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_595() throws Exception {
        
        given().accept("text/csv")
                .post(baseUrlOfSut + "/elements/count/groupBy/tag?" + 
                    "bcircles=8.722%2C49.40122%2C9%7C8.7138%2C49.419%2C6%7C8.721%2C49.436%2C5%7C8.705%2C49.42640%2C89&" + 
                    "format=csv&" + 
                    "groupByKey=building&" + 
                    "groupByValues=platform%2Cstation&" + 
                    "keys=highway&" + 
                    "showMetadata=true&" + 
                    "timeout=50&" + 
                    "values=cycleway")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_596() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/density/groupBy/type?" + 
                    "bcircles=hwK%3A8.70747%2C49.4233%2C98%7CGvou%3A8.7421%2C49.418%2C2&" + 
                    "keys=highway&" + 
                    "values=give_way")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_597() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/density/groupBy/tag?" + 
                    "bboxes=8.69886%2C49.4278%2C8.732%2C49.38263%7C8.6582%2C49.4040%2C8.756%2C49.384198&" + 
                    "groupByKey=highway&" + 
                    "keys=highway&" + 
                    "time=2009-06-24&" + 
                    "values=turning_circle")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'groupByResult'", hasItems());
    }
    
    
    @Test
    public void test_598() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/density/groupBy/boundary/groupBy/tag?" + 
                    "bboxes=8.68537%2C49.41866%2C8.711%2C49.380&" + 
                    "filter=natural%3Dwood&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=public%2Cturning_circle&" + 
                    "showMetadata=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(225.0))
                .body("'metadata'.'description'", containsString("Density of selected items (count of items in absolute values divided by the area in square kilometers), aggregated on the boundary and on the tag."));
    }
    
    
    @Test
    public void test_599() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/type?" + 
                    "bcircles=8.733%2C49.424%2C2%7C8.74572%2C49.408%2C5&" + 
                    "filter=name%3D*+and+not+type%3Anode&" + 
                    "showMetadata=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_600() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density/groupBy/type?" + 
                    "bboxes=8.661%2C49.409378%2C8.746%2C49.391%7C8.677%2C49.402%2C8.70284%2C49.381&" + 
                    "format=json&" + 
                    "showMetadata=no&" + 
                    "time=2011-09-25")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_601() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=pzvN%3A8.737%2C49.4018%2C8&" + 
                    "groupByKey=building&" + 
                    "time=2008-06-22")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_602() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/type?" + 
                    "bcircles=8.737%2C49.401476%2C24%7C8.7419%2C49.427%2C1&" + 
                    "keys=highway&" + 
                    "showMetadata=false&" + 
                    "time=%2F%2FP5M6D&" + 
                    "values=primary_link")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_603() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count?" + 
                    "bboxes=c%3A8.663%2C49.4003%2C8.756%2C49.384&" + 
                    "keys=highway&" + 
                    "showMetadata=yes&" + 
                    "time=%2F%2FP3M6D&" + 
                    "values=primary")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(543.0))
                .body("'metadata'.'description'", containsString("Number of distinct active users per time interval."));
    }
    
    
    @Test
    public void test_604() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/boundary/groupBy/tag?" + 
                    "bboxes=l%3A8.6841%2C49.42889%2C8.747%2C49.399%7CHPIHN%3A8.688%2C49.417062%2C8.718%2C49.399&" + 
                    "filter=oneway%3D*+or+not+id%3A%281+..+9999%29&" + 
                    "groupByKey=highway&" + 
                    "showMetadata=true&" + 
                    "time=2012-12-21")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(998.0))
                .body("'metadata'.'description'", containsString("Total perimeter of items in meters, aggregated on the boundary and on the tag."));
    }
    
    
    @Test
    public void test_605() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=Nem%3A8.7145%2C49.4164%2C51%7CcEujP%3A8.719%2C49.41613%2C504&" + 
                    "filter=maxspeed%3D*+or+geometry%3Apoint+and+id%3A%281+..+9999%29&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=emergency_access_point%2Cprimary%2Cturning_circle&" + 
                    "time=2014-11-27")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_606() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/boundary?" + 
                    "bboxes=v%3A8.6612%2C49.420%2C8.7348%2C49.396&" + 
                    "filter=type%21%3D*+and+id%3A%281+..+9999%29&" + 
                    "showMetadata=false&" + 
                    "time=2017-05-26&" + 
                    "timeout=79")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_607() throws Exception {
        
        given().accept("text/csv")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/boundary?" + 
                    "bcircles=8.740873%2C49.421%2C86%7C8.7349%2C49.4363%2C8&" + 
                    "filter=smoothness%3D*+or+id%3A%281+..+9999%29&" + 
                    "format=csv&" + 
                    "showMetadata=no&" + 
                    "time=2012-10-08&" + 
                    "timeout=82")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_608() throws Exception {
        
        given().accept("text/csv")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/boundary?" + 
                    "bcircles=8.7207%2C49.428%2C6&" + 
                    "filter=highway%21%3D*+and+geometry%3Apolygon+and+length%3A%28+..+100%29&" + 
                    "format=csv&" + 
                    "showMetadata=false&" + 
                    "timeout=100")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_609() throws Exception {
        
        given().accept("text/csv")
                .get(baseUrlOfSut + "/elements/perimeter/groupBy/boundary?" + 
                    "bpolys=wrz%3A8.704561%2C49.403252%2C8.716%2C49.400%2C8.7113%2C49.417%2C8.7052%2C49.408%2C8.704561%2C49.403252&" + 
                    "format=csv&" + 
                    "showMetadata=yes")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_610() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/density/groupBy/boundary/groupBy/tag?" + 
                    "bboxes=C%3A8.6674%2C49.407%2C8.748%2C49.390&" + 
                    "format=json&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=synagogue%2Chut&" + 
                    "keys=highway&" + 
                    "showMetadata=yes&" + 
                    "time=2016-12-08&" + 
                    "values=pedestrian")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(239.0))
                .body("'metadata'.'description'", containsString("Density of selected items (perimeter of items in meters divided by the area in square kilometers), aggregated on the boundary and on the tag."));
    }
    
    
    @Test
    public void test_611() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/ratio/groupBy/boundary?" + 
                    "bcircles=wNYEU%3A8.704%2C49.4236%2C42&" + 
                    "filter=turn%3Alanes%21%3D*+or+not+type%3Arelation+and+not+area%3A%281.0+..+1E6%29&" + 
                    "filter2=landuse%21%3D*+and+not+length%3A%28+..+100%29&" + 
                    "format=json&" + 
                    "time=2008-12-04&" + 
                    "types2=point%2Cline%2Cother")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_612() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/groupBy/type?" + 
                    "bpolys=CNlVs%3A8.704561%2C49.403252%2C8.729%2C49.418666%2C8.711%2C49.43924%2C8.70584%2C49.435089%2C8.704561%2C49.403252&" + 
                    "keys=highway&" + 
                    "showMetadata=yes&" + 
                    "timeout=65")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(634.0))
                .body("'metadata'.'description'", containsString("Number of distinct active users per time interval aggregated on the type."));
    }
    
    
    @Test
    public void test_613() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/key?" + 
                    "bcircles=BG%3A8.7175%2C49.424%2C5&" + 
                    "groupByKeys=lanes%2Cbicycle&" + 
                    "keys=highway&" + 
                    "showMetadata=yes&" + 
                    "timeout=66")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(218.0))
                .body("'metadata'.'description'", containsString("Total perimeter of items in meters, aggregated on the key."));
    }
    
    
    @Test
    public void test_614() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter?" + 
                    "bboxes=q%3A8.668%2C49.401%2C8.751%2C49.394%7CDl%3A8.6907%2C49.4143%2C8.724794%2C49.3933%7CY%3A8.693%2C49.410%2C8.74844%2C49.391&" + 
                    "filter=barrier%3D*+or+geometry%3Apoint&" + 
                    "format=json")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_615() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/ratio/groupBy/boundary?" + 
                    "bboxes=JvORg%3A8.671%2C49.406%2C8.7115%2C49.397&" + 
                    "format=geojson&" + 
                    "keys=highway&" + 
                    "time=2013-06-10&" + 
                    "values=platform")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'type'", containsString("FeatureCollection"));
    }
    
    
    @Test
    public void test_616() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/boundary?" + 
                    "bcircles=8.700117%2C49.40838%2C2&" + 
                    "format=geojson&" + 
                    "time=2014-12-10")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'type'", containsString("FeatureCollection"));
    }
    
    
    @Test
    public void test_617() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density/groupBy/boundary?" + 
                    "bcircles=qpBn%3A8.747%2C49.413389%2C4%7CJ%3A8.7322%2C49.414%2C3&" + 
                    "format=geojson&" + 
                    "keys=highway&" + 
                    "time=2009-09-21&" + 
                    "timeout=98&" + 
                    "values=cycleway")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'type'", containsString("FeatureCollection"));
    }
    
    
    @Test
    public void test_618() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length?" + 
                    "bboxes=bn%3A8.693%2C49.4003%2C8.7211%2C49.393&" + 
                    "keys=highway&" + 
                    "showMetadata=yes&" + 
                    "timeout=72&" + 
                    "values=secondary")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(219.0))
                .body("'metadata'.'description'", containsString("Total length of items in meters."));
    }
    
    
    @Test
    public void test_619() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/ratio?" + 
                    "bcircles=8.7423%2C49.431%2C12%7C8.711%2C49.4278%2C46%7C8.71902%2C49.4291%2C90%7C8.725%2C49.41729%2C4&" + 
                    "filter2=highway%3D*+or+type%3Arelation&" + 
                    "format=json&" + 
                    "keys=highway&" + 
                    "timeout=45&" + 
                    "types2=polygon%2C")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_620() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/ratio/groupBy/boundary?" + 
                    "bcircles=q%3A8.717%2C49.405%2C75&" + 
                    "filter2=foot%21%3D*+or+not+geometry%3Apoint+or+not+id%3A%281+..+9999%29&" + 
                    "timeout=62")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_621() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density/groupBy/boundary?" + 
                    "bboxes=8.673811%2C49.4011%2C8.7312%2C49.380%7C8.6592%2C49.41793%2C8.75146%2C49.3905&" + 
                    "timeout=88")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_622() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area?" + 
                    "bboxes=mMv%3A8.657%2C49.414%2C8.759%2C49.3973&" + 
                    "format=json&" + 
                    "showMetadata=yes&" + 
                    "time=2012-12-29&" + 
                    "timeout=80")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(1045.0))
                .body("'metadata'.'description'", containsString("Total area of items in square meters."));
    }
    
    
    @Test
    public void test_623() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area?" + 
                    "bcircles=ZPHhB%3A8.729%2C49.415%2C8%7CwNSIb%3A8.719%2C49.420%2C9%7CcMbPO%3A8.7034%2C49.4055%2C6&" + 
                    "keys=highway&" + 
                    "showMetadata=false&" + 
                    "time=2012-08-25&" + 
                    "types=point%2Cline%2Cpolygon%2Cother")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_624() throws Exception {
        
        given().accept("text/csv")
                .post(baseUrlOfSut + "/users/count/groupBy/type?" + 
                    "bboxes=Q%3A8.691%2C49.423%2C8.75778%2C49.391%7CKX%3A8.653137%2C49.41011%2C8.700%2C49.3955&" + 
                    "format=csv&" + 
                    "keys=highway")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_625() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/groupBy/key?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22WCP%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7143%2C49.4236%5D%2C%5B8.73636%2C49.4158%5D%2C%5B8.727133%2C49.4113%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=service%3Ddriveway+and+type%3Away&" + 
                    "groupByKeys=bicycle%2Caddr%3Acountry&" + 
                    "timeout=30")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_626() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/tag?" + 
                    "bboxes=LE%3A8.670261%2C49.4225%2C8.7133%2C49.385%7Cvs%3A8.65243%2C49.4140%2C8.7384%2C49.382%7CsNS%3A8.677%2C49.4142%2C8.751%2C49.380%7Ce%3A8.666%2C49.415%2C8.7541%2C49.38062&" + 
                    "format=json&" + 
                    "groupByKey=building&" + 
                    "keys=highway&" + 
                    "showMetadata=false&" + 
                    "timeout=35&" + 
                    "values=residential")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_627() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/ratio?" + 
                    "bboxes=QEWU%3A8.657%2C49.427354%2C8.732%2C49.3902%7CACQts%3A8.664%2C49.421%2C8.742035%2C49.380&" + 
                    "filter2=tracktype%3D*+or+geometry%3Aline&" + 
                    "keys2=highway&" + 
                    "time=2008-09-13&" + 
                    "timeout=77")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_628() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/boundary/groupBy/tag?" + 
                    "bboxes=STiGU%3A8.6822%2C49.40891%2C8.753%2C49.391&" + 
                    "filter=sidewalk%3D*+and+not+id%3A%281+..+9999%29&" + 
                    "groupByKey=highway&" + 
                    "showMetadata=no")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_629() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22q%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7364%2C49.40553%5D%2C%5B8.708%2C49.418%5D%2C%5B8.7043%2C49.4372%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22F%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.717%2C49.431%5D%2C%5B8.732%2C49.408%5D%2C%5B8.717%2C49.401337%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22Sxh%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.730%2C49.423%5D%2C%5B8.70424%2C49.43589%5D%2C%5B8.704%2C49.4389%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "format=geojson&" + 
                    "groupByKey=building&" + 
                    "groupByValues=church%2Cresidential%2Cpublic&" + 
                    "keys=highway&" + 
                    "time=2015-09-11&" + 
                    "timeout=27&" + 
                    "values=secondary")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'type'", containsString("FeatureCollection"));
    }
    
    
    @Test
    public void test_630() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/density?" + 
                    "bboxes=FC%3A8.655%2C49.420%2C8.7261%2C49.386%7CjF%3A8.6672%2C49.42740%2C8.7187%2C49.3954&" + 
                    "keys=highway&" + 
                    "time=2017-06-14&" + 
                    "timeout=61&" + 
                    "values=service")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_631() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/ratio/groupBy/boundary?" + 
                    "bcircles=IA%3A8.715%2C49.4213%2C2%7CnoaAW%3A8.716%2C49.4172%2C87&" + 
                    "filter2=destination%21%3D*+or+geometry%3Apolygon&" + 
                    "format=geojson&" + 
                    "keys=highway&" + 
                    "keys2=highway&" + 
                    "types2=polygon%2C&" + 
                    "values=crossing")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'type'", containsString("FeatureCollection"));
    }
    
    
    @Test
    public void test_632() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/ratio?" + 
                    "bboxes=8.686%2C49.420%2C8.74548%2C49.395%7C8.6962%2C49.405%2C8.757%2C49.381&" + 
                    "filter2=surface%3D*&" + 
                    "keys=highway&" + 
                    "showMetadata=yes&" + 
                    "time=2018-03-26&" + 
                    "types2=other&" + 
                    "values=service")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(1200.0))
                .body("'metadata'.'description'", containsString("Total area of items in square meters satisfying types2, keys2, values2 parameters (= value2 output), as well as items selected by types, keys, values parameters (= value output) and ratio of value2:value."));
    }
    
    
    @Test
    public void test_633() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/boundary/groupBy/tag?" + 
                    "bboxes=8.69640%2C49.402%2C8.70680%2C49.398%7C8.670%2C49.423%2C8.742161%2C49.3896&" + 
                    "groupByKey=highway&" + 
                    "timeout=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_634() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/ratio?" + 
                    "bcircles=WcGmZ%3A8.715%2C69.4380%2C2&" + 
                    "filter2=evomaster_1777294_input&" + 
                    "keys=fooV&" + 
                    "keys2=highway&" + 
                    "time=2009-11%2F%2F&" + 
                    "timeout=0.6140800644226535&" + 
                    "types2=point%2Cline%2Cother&" + 
                    "values=foo")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_635() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/tag?" + 
                    "bboxes=8.684%2C49.42645%2C8.749483%2C49.386%7C8.672239%2C49.4122%2C8.7429%2C49.382&" + 
                    "groupByKey=building&" + 
                    "keys=highway&" + 
                    "showMetadata=no&" + 
                    "time=2011-09-19&" + 
                    "timeout=55")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_636() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/ratio/groupBy/boundary?" + 
                    "bboxes=yn%3A8.653%2C49.428%2C8.725%2C49.3853%7CI%3A8.6616%2C49.4228%2C8.716%2C49.380%7CdA%3A8.6713%2C49.4076%2C8.752050%2C49.382%7Chy%3A8.688%2C49.41308%2C8.7145%2C49.38702&" + 
                    "keys=highway&" + 
                    "showMetadata=yes&" + 
                    "time=2008-09-03&" + 
                    "types2=line%2Cother")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(1159.0))
                .body("'metadata'.'description'", containsString("Total count of items in absolute values satisfying types2, keys2, values2 parameters (= value2 output), as well as items selected by types, keys, values parameters (= value output) and ratio of value2:value, aggregated on the boundary objects."));
    }
    
    
    @Test
    public void test_637() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/boundary?" + 
                    "bcircles=8.748%2C49.409825%2C1&" + 
                    "filter=maxspeed%21%3D*+and+geometry%3Aline+or+not+length%3A%28+..+100%29&" + 
                    "time=2016-01-24&" + 
                    "timeout=40")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_638() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/boundary?" + 
                    "bcircles=8.7295%2C49.4016%2C3&" + 
                    "format=geojson&" + 
                    "keys=highway&" + 
                    "timeout=84")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'type'", containsString("FeatureCollection"));
    }
    
    
    @Test
    public void test_639() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density?" + 
                    "bcircles=8.734%2C49.434%2C6%7C8.739%2C49.414%2C164&" + 
                    "filter=destination%21%3D*+and+area%3A%281.0+..+1E6%29&" + 
                    "format=geojson&" + 
                    "timeout=49")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_640() throws Exception {
        
        given().accept("text/csv")
                .get(baseUrlOfSut + "/elements/area?" + 
                    "bcircles=8.741%2C49.4342%2C7&" + 
                    "format=csv&" + 
                    "keys=highway&" + 
                    "showMetadata=no&" + 
                    "time=2013-05-30&" + 
                    "types=point%2Cother")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_641() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area?" + 
                    "bcircles=w%3A8.7469%2C49.4191%2C3&" + 
                    "time=2017-03-08&" + 
                    "timeout=59&" + 
                    "types=point%2Cline%2Cother")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_642() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/ratio/groupBy/boundary?" + 
                    "bboxes=R%3A8.668%2C49.41866%2C8.749%2C49.399%7Cz%3A8.675%2C49.4195%2C8.70940%2C49.381&" + 
                    "keys=highway&" + 
                    "keys2=highway&" + 
                    "timeout=58&" + 
                    "types2=line%2Cother&" + 
                    "values=footway")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_643() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/ratio/groupBy/boundary?" + 
                    "bboxes=q%3A8.6859%2C49.424%2C8.741%2C49.390&" + 
                    "filter=surface%21%3D*+or+length%3A%28+..+100%29&" + 
                    "filter2=addr%3Astreet%3D*+and+not+id%3A%281+..+9999%29&" + 
                    "keys2=highway&" + 
                    "timeout=69&" + 
                    "values2=track")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_644() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/type?" + 
                    "bboxes=8.695%2C49.409%2C8.7559%2C49.389&" + 
                    "filter=maxspeed%3D*+or+type%3Away+and+not+id%3A%281+..+9999%29&" + 
                    "showMetadata=no")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_645() throws Exception {
        
        given().accept("text/csv")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/boundary?" + 
                    "bboxes=iqZKy%3A8.65189%2C49.424%2C8.702%2C49.3942%7CzWx%3A8.682937%2C49.41766%2C8.723%2C49.399&" + 
                    "format=csv&" + 
                    "showMetadata=yes&" + 
                    "time=2014-11-24")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_646() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density?" + 
                    "bcircles=KaJC%3A8.7474%2C49.40606%2C66&" + 
                    "format=json")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_647() throws Exception {
        
        given().accept("text/csv")
                .post(baseUrlOfSut + "/users/count/groupBy/key?" + 
                    "bboxes=y%3A8.682148%2C49.407%2C8.759%2C49.399&" + 
                    "format=csv&" + 
                    "groupByKeys=building%2Caddr%3Acountry&" + 
                    "keys=highway&" + 
                    "timeout=92")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_648() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/type?" + 
                    "bboxes=dLBhi%3A8.696%2C49.41143%2C8.720%2C49.393%7Cu%3A8.6855%2C49.4137%2C8.750%2C49.397%7Ci%3A8.661%2C49.403%2C8.723%2C49.398%7CD%3A8.664%2C49.4003%2C8.724%2C49.38464&" + 
                    "keys=highway&" + 
                    "showMetadata=yes&" + 
                    "time=%2F%2FP19D&" + 
                    "timeout=63")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(808.0))
                .body("'metadata'.'description'", containsString("Number of distinct active users per time interval aggregated on the type."));
    }
    
    
    @Test
    public void test_649() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/type?" + 
                    "bboxes=oT%3A8.661%2C49.4010%2C8.7396%2C49.3894%7CFmZ%3A8.674%2C49.423%2C8.700%2C49.391&" + 
                    "filter=source%3Amaxspeed%3D*+and+id%3A%281+..+9999%29&" + 
                    "format=json")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_650() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/tag?" + 
                    "bboxes=JA%3A8.679891%2C49.420317%2C8.7566%2C49.387&" + 
                    "groupByKey=highway&" + 
                    "keys=highway&" + 
                    "showMetadata=yes&" + 
                    "time=%2F%2FP3M10D&" + 
                    "values=tertiary")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(336.0))
                .body("'metadata'.'description'", containsString("Number of distinct active users per time interval aggregated on the tag."));
    }
    
    
    @Test
    public void test_651() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/key?" + 
                    "bcircles=XHCaX%3A8.711594%2C49.4096%2C6&" + 
                    "format=json&" + 
                    "groupByKeys=sidewalk%2Caddr%3Ahousenumber%2Csource%3Amaxspeed&" + 
                    "keys=highway&" + 
                    "showMetadata=yes")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(325.0))
                .body("'metadata'.'description'", containsString("Number of distinct active users per time interval aggregated on the key."));
    }
    
    
    @Test
    public void test_652() throws Exception {
        
        given().accept("text/csv")
                .post(baseUrlOfSut + "/users/count/groupBy/tag?" + 
                    "bcircles=D%3A8.736%2C49.4362%2C4&" + 
                    "format=csv&" + 
                    "groupByKey=highway&" + 
                    "keys=highway&" + 
                    "showMetadata=true&" + 
                    "time=%2F%2FP9M6D&" + 
                    "timeout=88")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_653() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/ratio/groupBy/boundary?" + 
                    "bcircles=D%3A8.72474%2C49.416%2C3&" + 
                    "filter2=ref%21%3D*+and+type%3Anode&" + 
                    "format=json&" + 
                    "keys=highway&" + 
                    "keys2=highway&" + 
                    "showMetadata=true&" + 
                    "types2=point%2Cother&" + 
                    "values=traffic_mirror&" + 
                    "values2=street_lamp")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(513.0))
                .body("'metadata'.'description'", containsString("Total perimeter of items in meters satisfying types2, keys2, values2 parameters (= value2 output), as well as items selected by types, keys, values parameters (= value output) and ratio of value2:value, aggregated on the boundary objects."));
    }
    
    
    @Test
    public void test_654() throws Exception {
        
        given().accept("text/csv")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/boundary/groupBy/tag?" + 
                    "bboxes=JBHhb%3A8.69857%2C49.412921%2C8.7520%2C49.380&" + 
                    "filter=ref%21%3D*+or+type%3Anode&" + 
                    "format=csv&" + 
                    "groupByKey=building&" + 
                    "groupByValues=roof%2Cprimary_link&" + 
                    "showMetadata=no")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_655() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/ratio?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22jQ%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7182%2C49.415%5D%2C%5B8.7056%2C49.410361%5D%2C%5B8.745%2C49.434%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter2=highway+in+%28secondary%2Cpath%2Cunclassified%2Ctrack%2Cprimary%2Cresidential%2Ccycleway%2Cservice%2Cfootway%29+and+geometry%3Apolygon&" + 
                    "format=json&" + 
                    "keys=highway&" + 
                    "keys2=highway&" + 
                    "showMetadata=true&" + 
                    "time=2009-02-20&" + 
                    "timeout=60&" + 
                    "types2=point%2Cother")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(205.0))
                .body("'metadata'.'description'", containsString("Total perimeter of items in meters satisfying types2, keys2, values2 parameters (= value2 output), as well as items selected by types, keys, values parameters (= value output) and ratio of value2:value."));
    }
    
    
    @Test
    public void test_656() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/boundary?" + 
                    "bboxes=8.666%2C49.42971%2C8.7129%2C49.384&" + 
                    "filter=maxspeed%3D*+or+area%3A%281.0+..+1E6%29&" + 
                    "format=geojson&" + 
                    "showMetadata=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(1102.0))
                .body("'metadata'.'description'", containsString("Total perimeter of items in meters."))
                .body("'type'", containsString("FeatureCollection"));
    }
    
    
    @Test
    public void test_657() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/ratio/groupBy/boundary?" + 
                    "bboxes=EGwIG%3A8.6836%2C49.423%2C8.71799%2C49.3928&" + 
                    "filter2=lanes%3Abackward%3D*&" + 
                    "keys=highway&" + 
                    "keys2=highway&" + 
                    "showMetadata=no&" + 
                    "types2=way%2C&" + 
                    "values=unclassified")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_658() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/density/groupBy/type?" + 
                    "bboxes=8.686%2C49.415%2C8.71646%2C49.395%7C8.6662%2C49.4067%2C8.716%2C49.397&" + 
                    "format=geojson&" + 
                    "keys=highway&" + 
                    "showMetadata=yes&" + 
                    "time=2013-10-12&" + 
                    "timeout=96")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(210.0))
                .body("'metadata'.'description'", containsString("Density of selected items (perimeter of items in meters divided by the area in square kilometers), aggregated on the type."));
    }
    
    
    @Test
    public void test_659() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/boundary?" + 
                    "bcircles=kiY%3A8.713%2C49.434%2C1&" + 
                    "showMetadata=yes&" + 
                    "time=%2F%2FP1Y9M6D&" + 
                    "timeout=65")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(7454.0))
                .body("'metadata'.'description'", containsString("Number of distinct active users per time interval aggregated on the boundary."));
    }
    
    
    @Test
    public void test_660() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/type?" + 
                    "bcircles=ZyOVe%3A8.7003%2C49.4072%2C9%7CDIUN%3A8.7242%2C49.4205%2C6&" + 
                    "keys=highway&" + 
                    "showMetadata=yes&" + 
                    "timeout=26&" + 
                    "values=street_lamp")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(200.0))
                .body("'metadata'.'description'", containsString("Total perimeter of items in meters, aggregated on the type."));
    }
    
    
    @Test
    public void test_661() throws Exception {
        
        given().accept("text/csv")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/tag?" + 
                    "bcircles=sPYk%3A8.701669%2C49.431%2C2%7Cym%3A8.705%2C49.429%2C1%7Cbs%3A8.740420%2C49.40908%2C1%7CN%3A8.707%2C49.412731%2C6&" + 
                    "format=csv&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=turning_circle%2Cuniversity&" + 
                    "keys=highway&" + 
                    "showMetadata=true&" + 
                    "timeout=58")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_662() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/ratio/groupBy/boundary?" + 
                    "bboxes=WB%3A8.6771%2C49.41396%2C8.7078%2C49.3885&" + 
                    "filter=type%21%3D*&" + 
                    "filter2=ref%3D*+and+geometry%3Aline+and+area%3A%281.0+..+1E6%29&" + 
                    "keys2=highway&" + 
                    "showMetadata=yes&" + 
                    "time=2017-09-26&" + 
                    "types2=point%2Cline%2Cpolygon%2Cother")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(621.0))
                .body("'metadata'.'description'", containsString("Total perimeter of items in meters satisfying types2, keys2, values2 parameters (= value2 output), as well as items selected by types, keys, values parameters (= value output) and ratio of value2:value, aggregated on the boundary objects."));
    }
    
    
    @Test
    public void test_663() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/density/groupBy/boundary?" + 
                    "bpolys=8.704561%2C49.403252%2C8.731%2C49.402%2C8.7045%2C49.431%2C8.701442%2C49.410740%2C8.704561%2C49.403252&" + 
                    "keys=highway&" + 
                    "showMetadata=false&" + 
                    "timeout=58")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_664() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/density/groupBy/type?" + 
                    "bcircles=8.7380%2C49.410%2C84%7C8.7371%2C49.40452%2C1%7C8.708%2C49.4012%2C60&" + 
                    "format=json&" + 
                    "keys=highway&" + 
                    "showMetadata=true&" + 
                    "values=elevator")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(896.0))
                .body("'metadata'.'description'", containsString("Density of distinct active users per time interval (number of users per square-kilometer) aggregated on the type."));
    }
    
    
    @Test
    public void test_665() throws Exception {
        
        given().accept("text/csv")
                .post(baseUrlOfSut + "/elements/perimeter/density?" + 
                    "bboxes=QM%3A8.69375%2C49.4248%2C8.724%2C49.399%7CJAmDF%3A8.6825%2C49.400%2C8.705817%2C49.389%7Cm%3A8.656366%2C49.412%2C8.748%2C49.391%7CW%3A8.6703%2C49.415%2C8.706%2C49.383143&" + 
                    "format=csv&" + 
                    "keys=highway&" + 
                    "showMetadata=no&" + 
                    "timeout=75&" + 
                    "values=tertiary")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_666() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/ratio?" + 
                    "bboxes=usHz%3A8.672835%2C49.413%2C8.743%2C49.382%7Cp%3A8.690743%2C49.414%2C8.7186%2C49.385&" + 
                    "format=json&" + 
                    "keys=highway&" + 
                    "values=secondary")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_667() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/type?" + 
                    "bpolys=ze%3A8.704561%2C49.403252%2C8.7118%2C49.405%2C8.7445%2C49.426338%2C8.724%2C49.42973%2C8.704561%2C49.403252&" + 
                    "format=geojson&" + 
                    "keys=highway&" + 
                    "showMetadata=true&" + 
                    "time=%2F%2FP5M22D&" + 
                    "timeout=99&" + 
                    "values=tertiary")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(732.0))
                .body("'metadata'.'description'", containsString("Number of distinct active users per time interval aggregated on the type."));
    }
    
    
    @Test
    public void test_668() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/ratio/groupBy/boundary?" + 
                    "bcircles=CH%3A8.73540%2C49.414%2C9%7Cw%3A8.744%2C49.40691%2C7%7Ct%3A8.724%2C49.432%2C5&" + 
                    "filter2=maxspeed%3D*+and+length%3A%28+..+100%29&" + 
                    "keys=highway&" + 
                    "keys2=highway&" + 
                    "showMetadata=false&" + 
                    "time=2015-06-26&" + 
                    "timeout=94&" + 
                    "types2=point%2Cline%2C&" + 
                    "values=bus_stop&" + 
                    "values2=residential")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_669() throws Exception {
        
        given().accept("text/csv")
                .post(baseUrlOfSut + "/users/count/density?" + 
                    "bcircles=8.7031%2C49.4239%2C2&" + 
                    "filter=bicycle%21%3D*+and+geometry%3Aline+and+length%3A%28+..+100%29&" + 
                    "format=csv&" + 
                    "time=%2F%2FP3Y7M8D&" + 
                    "timeout=48")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_670() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/density?" + 
                    "bboxes=Mw%3A8.6621%2C49.425%2C8.738%2C49.380%7Co%3A8.678%2C49.4088%2C8.742310%2C49.3901%7CR%3A8.683839%2C49.411%2C8.72168%2C49.383%7CzVTUC%3A8.6918%2C49.4089%2C8.75870%2C49.38000&" + 
                    "keys=highway&" + 
                    "values=bus_stop")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_671() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/density?" + 
                    "bboxes=8.6675%2C49.419999%2C8.744%2C49.382&" + 
                    "filter=landuse%21%3D*+and+id%3A%281+..+9999%29&" + 
                    "timeout=25")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_672() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area?" + 
                    "bboxes=TJ%3A8.663045%2C49.4232%2C8.757%2C49.387%7CILvyY%3A8.672%2C49.41150%2C8.7121%2C49.391%7CvK%3A8.680%2C49.408%2C8.749%2C49.392%7CarfF%3A8.6513%2C49.40805%2C8.7526%2C49.383&" + 
                    "format=geojson&" + 
                    "keys=highway&" + 
                    "showMetadata=true&" + 
                    "timeout=93&" + 
                    "types=polygon%2C&" + 
                    "values=secondary_link")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(238.0))
                .body("'metadata'.'description'", containsString("Total area of items in square meters."));
    }
    
    
    @Test
    public void test_673() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=8.727%2C49.412%2C38%7C8.71321%2C49.437%2C3&" + 
                    "format=geojson&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=hotel%2Croof&" + 
                    "keys=highway&" + 
                    "showMetadata=no&" + 
                    "time=2010-08-20&" + 
                    "timeout=37&" + 
                    "values=pedestrian")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'type'", containsString("FeatureCollection"));
    }
    
    
    @Test
    public void test_674() throws Exception {
        
        given().accept("text/csv")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/type?" + 
                    "bboxes=8.68405%2C49.426%2C8.71858%2C49.398%7C8.656966%2C49.4243%2C8.72375%2C49.398%7C8.671%2C49.406%2C8.731%2C49.39293&" + 
                    "filter=ref%3D*+or+type%3Arelation+or+length%3A%28+..+100%29&" + 
                    "format=csv&" + 
                    "time=2016-12-15")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_675() throws Exception {
        
        given().accept("text/csv")
                .post(baseUrlOfSut + "/users/count/groupBy/boundary?" + 
                    "bcircles=TXs%3A8.738967%2C49.402%2C85&" + 
                    "format=csv&" + 
                    "keys=highway&" + 
                    "time=%2F%2FP8M15D&" + 
                    "timeout=91&" + 
                    "values=stop")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_676() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/tag?" + 
                    "bboxes=YeehX%3A8.685%2C49.402%2C8.7423%2C49.3908%7CU%3A8.678%2C49.4073%2C8.736732%2C49.3937&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=hospital%2Cstreet_lamp%2Ctower&" + 
                    "keys=highway&" + 
                    "time=%2F%2FP6M1D&" + 
                    "timeout=65&" + 
                    "values=turning_circle")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_677() throws Exception {
        
        given().accept("text/csv")
                .post(baseUrlOfSut + "/elements/perimeter/ratio/groupBy/boundary?" + 
                    "bboxes=Wp%3A8.677%2C49.417%2C8.737%2C49.397%7CHN%3A8.666%2C49.41020%2C8.749%2C49.381&" + 
                    "format=csv&" + 
                    "keys=highway&" + 
                    "keys2=highway&" + 
                    "time=2011-09-07&" + 
                    "timeout=44&" + 
                    "types2=line%2Cpolygon%2C")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_678() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/boundary?" + 
                    "bcircles=8.732%2C49.402%2C2%7C8.700%2C49.4068%2C7&" + 
                    "format=geojson&" + 
                    "keys=highway&" + 
                    "timeout=74&" + 
                    "values=cycleway")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'type'", containsString("FeatureCollection"));
    }
    
    
    @Test
    public void test_679() throws Exception {
        
        given().accept("text/csv")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/key?" + 
                    "bboxes=D%3A8.66776%2C49.401%2C8.747%2C49.382&" + 
                    "format=csv&" + 
                    "groupByKeys=surface&" + 
                    "keys=highway&" + 
                    "showMetadata=yes&" + 
                    "timeout=74&" + 
                    "values=street_lamp")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_680() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/type?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22iVes%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.72970%2C49.4107%5D%2C%5B8.706%2C49.413%5D%2C%5B8.704%2C49.415%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22yQdG%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.701%2C49.40639%5D%2C%5B8.701648%2C49.43341%5D%2C%5B8.7045%2C49.407%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22QIGBt%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.701%2C49.439%5D%2C%5B8.7092%2C49.417671%5D%2C%5B8.745%2C49.4275%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "keys=highway&" + 
                    "showMetadata=false&" + 
                    "timeout=21")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_681() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/key?" + 
                    "bcircles=XHCaX%3A8.711594%2C49.4096%2C6&" + 
                    "filter=tracktype%3D*+and+area%3A%281.0+..+1E6%29&" + 
                    "format=json&" + 
                    "groupByKeys=lanes%2Chighway")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_682() throws Exception {
        
        given().accept("text/csv")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/boundary?" + 
                    "bcircles=8.719135%2C49.414356%2C44%7C8.733%2C49.4092%2C53%7C8.732%2C49.424%2C1&" + 
                    "format=csv&" + 
                    "keys=highway&" + 
                    "timeout=44&" + 
                    "values=platform")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_683() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/ratio?" + 
                    "bcircles=nhLF%3A8.72842%2C49.4300%2C9%7Cp%3A8.7234%2C49.4143%2C5&" + 
                    "filter=highway%3D*+and+geometry%3Aline&" + 
                    "filter2=oneway%21%3D*+and+geometry%3Apoint+and+id%3A%281+..+9999%29&" + 
                    "format=json&" + 
                    "keys2=highway&" + 
                    "showMetadata=no&" + 
                    "time=2016-02-28&" + 
                    "values2=track")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_684() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/boundary?" + 
                    "bcircles=pU%3A8.718%2C49.435%2C7&" + 
                    "format=json&" + 
                    "keys=highway&" + 
                    "time=2017-02-26&" + 
                    "values=street_lamp")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_685() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/type?" + 
                    "bcircles=y%3A8.722071%2C49.405%2C32&" + 
                    "keys=highway&" + 
                    "time=%2F%2FP6M10D&" + 
                    "values=steps")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_686() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/type?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22ty%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7422%2C49.424%5D%2C%5B8.723%2C49.413444%5D%2C%5B8.7022%2C49.420%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "format=json&" + 
                    "keys=highway&" + 
                    "showMetadata=true&" + 
                    "timeout=83&" + 
                    "values=footway")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(479.0))
                .body("'metadata'.'description'", containsString("Number of distinct active users per time interval aggregated on the type."));
    }
    
    
    @Test
    public void test_687() throws Exception {
        
        given().accept("text/csv")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/tag?" + 
                    "bboxes=8.696%2C49.4092%2C8.756%2C49.382%7C8.653%2C49.42818%2C8.74919%2C49.395%7C8.664%2C49.4203%2C8.717%2C49.399&" + 
                    "filter=name%3D*+or+not+geometry%3Apoint&" + 
                    "format=csv&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=synagogue%2Cprimary_link%2Cresidential&" + 
                    "showMetadata=false&" + 
                    "time=2016-01-28")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_688() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/boundary/groupBy/tag?" + 
                    "bboxes=8.669%2C49.403%2C8.743538%2C49.393&" + 
                    "groupByKey=building&" + 
                    "showMetadata=true&" + 
                    "time=2007-11-24")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(897.0))
                .body("'metadata'.'description'", containsString("Total perimeter of items in meters, aggregated on the boundary and on the tag."));
    }
    
    
    @Test
    public void test_689() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/type?" + 
                    "bboxes=Mk%3A8.654150%2C49.426%2C8.729%2C49.399%7CKF%3A8.696%2C49.421907%2C8.717%2C49.3980&" + 
                    "keys=highway&" + 
                    "time=%2F%2FP5M6D&" + 
                    "timeout=99&" + 
                    "values=primary_link")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_690() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/ratio/groupBy/boundary?" + 
                    "bcircles=8.74033%2C49.4093%2C5%7C8.742%2C49.400%2C68&" + 
                    "filter2=oneway%3D*+or+id%3A%281+..+9999%29&" + 
                    "keys2=highway&" + 
                    "time=2011-08-10&" + 
                    "timeout=20&" + 
                    "types2=line%2C&" + 
                    "values2=secondary_link")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_691() throws Exception {
        
        given().accept("text/csv")
                .post(baseUrlOfSut + "/elements/perimeter/ratio?" + 
                    "bcircles=8.727822%2C49.4100%2C8%7C8.701662%2C49.43614%2C5%7C8.74435%2C49.43259%2C7&" + 
                    "format=csv&" + 
                    "keys=highway&" + 
                    "keys2=highway&" + 
                    "types2=way%2C&" + 
                    "values2=crossing")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_692() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/ratio/groupBy/boundary?" + 
                    "bpolys=EH%3A8.704561%2C49.403252%2C8.7096%2C49.42708%2C8.7474%2C49.43018%2C8.704449%2C49.43040%2C8.704561%2C49.403252&" + 
                    "format=geojson&" + 
                    "keys=highway&" + 
                    "types2=point%2Cpolygon%2C&" + 
                    "values=turning_circle")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'type'", containsString("FeatureCollection"));
    }
    
    
    @Test
    public void test_693() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/tag?" + 
                    "bcircles=X%3A8.7082%2C49.425%2C1&" + 
                    "filter=addr%3Astreet%21%3D*+or+type%3Anode&" + 
                    "format=json&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=residential%2Cfootway%2Cpedestrian&" + 
                    "keys=highway&" + 
                    "showMetadata=yes&" + 
                    "time=%2F%2FP1Y2D")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The keys, values and types parameters must be empty, when you set the filter parameter."));
    }
    
    
    @Test
    public void test_694() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/groupBy/tag?" + 
                    "bcircles=Mxihm%3A8.7355%2C49.405%2C4%7CfCB%3A8.7273%2C49.43460%2C4&" + 
                    "filter=addr%3Acountry%21%3D*+or+area%3A%281.0+..+1E6%29&" + 
                    "groupByKey=highway&" + 
                    "keys=highway&" + 
                    "showMetadata=false")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The keys, values and types parameters must be empty, when you set the filter parameter."));
    }
    
    
    @Test
    public void test_695() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/key?" + 
                    "bcircles=8.705%2C49.42024%2C9&" + 
                    "filter=surface%3D*&" + 
                    "groupByKeys=destination%2Clanes%3Abackward&" + 
                    "keys=highway&" + 
                    "time=%2F%2FP2Y8D")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The keys, values and types parameters must be empty, when you set the filter parameter."));
    }
    
    
    @Test
    public void test_696() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/groupBy/key?" + 
                    "bcircles=MH%3A8.74746%2C49.420607%2C7%7CU%3A8.713%2C49.438%2C5%7Cj%3A8.7033%2C49.437708%2C9&" + 
                    "filter=network%21%3D*+and+geometry%3Apolygon+or+id%3A%281+..+9999%29&" + 
                    "groupByKeys=foo&" + 
                    "keys=highway&" + 
                    "timeout=97")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The keys, values and types parameters must be empty, when you set the filter parameter."));
    }
    
    
    @Test
    public void test_697() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/groupBy/boundary?" + 
                    "bboxes=8.675%2C49.406%2C8.701%2C49.383%7C8.697%2C49.40360%2C8.7162%2C49.389704%7C8.6624%2C49.411%2C8.7387%2C49.397&" + 
                    "filter=natural%3Dwood+and+type%3Anode&" + 
                    "format=geojson&" + 
                    "keys=foo&" + 
                    "showMetadata=true&" + 
                    "time=%2F%2FP8M04D")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The keys, values and types parameters must be empty, when you set the filter parameter."));
    }
    
    
    @Test
    public void test_698() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/density/groupBy/type?" + 
                    "bcircles=qXpsR%3A8.7064%2C49.42600%2C85%7CzeKmM%3A8.702%2C49.432%2C4%7CxA%3A8.737%2C49.41674%2C5%7CW%3A8.7480%2C49.415%2C887&" + 
                    "bpolys=vuCWv%3A8.704561%2C49.403252%2C8.7165%2C49.426816%2C8.712%2C49.438%2C8.735%2C49.406%2C8.704561%2C49.403252&" + 
                    "format=json&" + 
                    "showMetadata=true&" + 
                    "time=%2F%2FP3M20D&" + 
                    "timeout=95&" + 
                    "values=speed_camera")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_699() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/density/groupBy/type?" + 
                    "bboxes=x%3A8.66275%2C49.415%2C8.74456%2C49.3937&" + 
                    "bcircles=8.701%2C49.400%2C2&" + 
                    "keys=highway&" + 
                    "showMetadata=true&" + 
                    "time=%2F%2FP7M19D&" + 
                    "timeout=85")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_700() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/density/groupBy/tag?" + 
                    "bboxes=jEO%3A8.6630%2C49.418%2C8.7289%2C49.3999%7CD%3A8.691269%2C49.410%2C8.750775%2C49.3857&" + 
                    "filter=landuse%21%3D*&" + 
                    "format=csv&" + 
                    "groupByKey=foo&" + 
                    "keys=highway&" + 
                    "showMetadata=true&" + 
                    "time=%2F%2FP6M26D&" + 
                    "timeout=49")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The keys, values and types parameters must be empty, when you set the filter parameter."));
    }
    
    
    @Test
    public void test_701() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/density/groupBy/tag?" + 
                    "bcircles=hp%3A8.712%2C49.408%2C8&" + 
                    "filter=network%21%3D*+or+not+length%3A%28+..+100%29&" + 
                    "format=geojson&" + 
                    "groupByKey=highway&" + 
                    "showMetadata=true&" + 
                    "time=%2F%2FP3Y6M2D&" + 
                    "timeout=74&" + 
                    "values=traffic_mirror")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The keys, values and types parameters must be empty, when you set the filter parameter."));
    }
    
    
    @Test
    public void test_702() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/density/groupBy/boundary?" + 
                    "bcircles=tWK%3A8.74493%2C49.401%2C1%7CYMSr%3A8.746%2C49.405%2C32%7CUTJZz%3A8.7220%2C49.4148%2C3&" + 
                    "filter=foo&" + 
                    "keys=higdway&" + 
                    "showMetadata=foo&" + 
                    "timeout=69&" + 
                    "values=traffic_mirror")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given parameter showMetadata can only contain the values 'true', 'yes', 'false', or 'no'."));
    }
    
    
    @Test
    public void test_703() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/density/groupBy/boundary?" + 
                    "bboxes=Xcm%3A8.6659%2C49.405%2C8.7202%2C49.396%7CzOf%3A8.699%2C49.4121%2C8.737%2C49.399&" + 
                    "filter=source%3Amaxspeed%3D*+and+geometry%3Aline&" + 
                    "format=geojson&" + 
                    "keys=foo&" + 
                    "showMetadata=false&" + 
                    "time=%2F%2FP4M11D")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The keys, values and types parameters must be empty, when you set the filter parameter."));
    }
    
    
    @Test
    public void test_704() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/density?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22zJQxk%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.710%2C49.412%5D%2C%5B8.714825%2C49.413912%5D%2C%5B8.70435%2C49.433%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22jP%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.747%2C49.4050%5D%2C%5B8.7077%2C49.429%5D%2C%5B8.70435%2C49.4313%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22I%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.709330%2C49.409%5D%2C%5B8.743054%2C49.4027%5D%2C%5B8.703%2C49.427%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=building%21%3D*+and+geometry%3Apoint+and+area%3A%281.0+..+1E6%29&" + 
                    "keys=foo&" + 
                    "time=%2F%2FP9D&" + 
                    "timeout=44&" + 
                    "values=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The keys, values and types parameters must be empty, when you set the filter parameter."));
    }
    
    
    @Test
    public void test_705() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count?" + 
                    "bcircles=tUhK%3A8.748%2C49.420345%2C234&" + 
                    "format=csv&" + 
                    "time=%2F%2FP2Y22D&" + 
                    "values=primary_link")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("There cannot be more input values in the values|values2 than in the keys|keys2 parameter, as values_n must fit to keys_n."));
    }
    
    
    @Test
    public void test_706() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/ratio/groupBy/boundary?" + 
                    "bcircles=ao%3A8.70237%2C49.423%2C4%7CXg%3A8.749%2C49.4271%2C5&" + 
                    "format=json&" + 
                    "keys2=highway&" + 
                    "time=2009-10-20&" + 
                    "timeout=80&" + 
                    "values2=cycleway")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The filter2 parameter has to be defined when using a /ratio endpoint."));
    }
    
    
    @Test
    public void test_707() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/ratio?" + 
                    "bcircles=8.725%2C49.427547%2C9%7C8.724%2C49.419%2C92&" + 
                    "filter=destination%3D*+and+not+length%3A%28+..+100%29&" + 
                    "format=csv&" + 
                    "showMetadata=false&" + 
                    "time=2015-05-04")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The filter2 parameter has to be defined when using a /ratio endpoint."));
    }
    
    
    @Test
    public void test_708() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/groupBy/type?" + 
                    "bcircles=8.732%2C49.407%2C2&" + 
                    "filter=foot%3D*+or+length%3A%28+..+100%29&" + 
                    "showMetadata=yes&" + 
                    "time=2015-06-30&" + 
                    "values=emergency_access_point")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The keys, values and types parameters must be empty, when you set the filter parameter."));
    }
    
    
    @Test
    public void test_709() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/tag?" + 
                    "bcircles=8.7174%2C49.4020%2C55%7C8.734%2C49.4076%2C4%7C8.724797%2C49.412279%2C1&" + 
                    "groupByKey=foo&" + 
                    "showMetadata=false&" + 
                    "time=2009-01-19&" + 
                    "timeout=57&" + 
                    "values=path")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("There cannot be more input values in the values|values2 than in the keys|keys2 parameter, as values_n must fit to keys_n."));
    }
    
    
    @Test
    public void test_710() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/groupBy/tag?" + 
                    "bcircles=I%3A8.708%2C49.423%2C9%7CS%3A8.727%2C49.4136%2C1&" + 
                    "filter=foo&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=foo&" + 
                    "keys=highway&" + 
                    "showMetadata=true&" + 
                    "time=evomaster_1736_input&" + 
                    "timeout=53")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_711() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/key?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22ACnj%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7219%2C49.405%5D%2C%5B8.7463%2C49.408%5D%2C%5B8.737%2C49.4211%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=destination%21%3D*+or+type%3Away+and+not+area%3A%281.0+..+1E6%29&" + 
                    "format=json&" + 
                    "groupByKeys=oneway%2Caddr%3Astreet%2Cdestination&" + 
                    "showMetadata=yes&" + 
                    "values=unclassified")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The keys, values and types parameters must be empty, when you set the filter parameter."));
    }
    
    
    @Test
    public void test_712() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=JoE%3A8.7068%2C49.40667%2C8&" + 
                    "format=foo&" + 
                    "groupByKey=evomaster_526_input&" + 
                    "time=foo&" + 
                    "values=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given 'format' parameter is invalid. Please choose between 'geojson'(only available for /groupBy/boundary and data extraction requests), 'json', or 'csv'."));
    }
    
    
    @Test
    public void test_713() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/groupBy/boundary/groupBy/tag?" + 
                    "bboxes=hb%3A8.683600%2C49.427%2C8.708564%2C49.384&" + 
                    "filter=source%3Amaxspeed%3D*&" + 
                    "groupByKey=foo&" + 
                    "groupByValues=office%2Ctower&" + 
                    "keys=highway&" + 
                    "time=2008-06-24&" + 
                    "values=track")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The keys, values and types parameters must be empty, when you set the filter parameter."));
    }
    
    
    @Test
    public void test_714() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/boundary?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22o%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.700%2C49.437802%5D%2C%5B8.7043%2C49.436532%5D%2C%5B8.711%2C49.425%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22g%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinetes%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7030%2C49.4156%5D%2C%5B8.749%2C49.416%5D%2C%5B8.716%2C49.419%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=addr%3Acity%3D*&" + 
                    "showMetadata=foo&" + 
                    "time=evomaster_10918_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided GeoJSON cannot be converted."));
    }
    
    
    @Test
    public void test_715() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/groupBy/boundary?" + 
                    "bcircles=bk%3A8.702%2C49.40282%2C55&" + 
                    "filter=foot%3D*+and+not+area%3A%281.0+..+1E6%29&" + 
                    "showMetadata=no&" + 
                    "timeout=37&" + 
                    "values=living_street")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The keys, values and types parameters must be empty, when you set the filter parameter."));
    }
    
    
    @Test
    public void test_716() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/density/groupBy/type?" + 
                    "bcircles=8.737%2C49.41295%2C15%7C8.703%2C49.4294%2C7&" + 
                    "filter=bicycle%3D*+and+type%3Arelation+and+id%3A%281+..+9999%29&" + 
                    "format=json&" + 
                    "keys=highway&" + 
                    "time=2008-04-06&" + 
                    "timeout=24")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The keys, values and types parameters must be empty, when you set the filter parameter."));
    }
    
    
    @Test
    public void test_717() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/density/groupBy/type?" + 
                    "bcircles=l%3A8.742%2C49.416%2C96&" + 
                    "filter=service%3Ddriveway+or+not+length%3A%28+..+100%29&" + 
                    "keys=highway&" + 
                    "showMetadata=yes&" + 
                    "time=2010-10-13")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The keys, values and types parameters must be empty, when you set the filter parameter."));
    }
    
    
    @Test
    public void test_718() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/density/groupBy/tag?" + 
                    "bcircles=WYngA%3A8.736%2C49.4049%2C9%7CG%3A8.738%2C49.42936%2C64&" + 
                    "filter=foot%3D*+and+geometry%3Aline+or+length%3A%28+..+100%29&" + 
                    "format=json&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=platform%2Csteps%2Cship&" + 
                    "keys=highway&" + 
                    "time=2010-06-20&" + 
                    "values=stop")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The keys, values and types parameters must be empty, when you set the filter parameter."));
    }
    
    
    @Test
    public void test_719() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/density/groupBy/boundary/groupBy/tag?" + 
                    "bboxes=kgCfs%3A8.681%2C49.41737%2C8.7335%2C49.3981&" + 
                    "filter=building%21%3D*+or+length%3A%28+..+100%29&" + 
                    "format=json&" + 
                    "groupByKey=foo&" + 
                    "groupByValues=dormitory%2Csynagogue&" + 
                    "keys=highway&" + 
                    "time=2011-08-19&" + 
                    "values=platform")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The keys, values and types parameters must be empty, when you set the filter parameter."));
    }
    
    
    @Test
    public void test_720() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/density/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=8.719026%2C49.43990%2C7%7C8.711%2C49.4197%2C6%7C8.707%2C49.423%2C5%7C8.7273%2C49.426722%2C22&" + 
                    "filter=foo&" + 
                    "groupByKey=heghway&" + 
                    "groupByValues=foo&" + 
                    "keys=foo&" + 
                    "time=foo&" + 
                    "values=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_721() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/density/groupBy/boundary?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22pEC%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.744528%2C49.402%5D%2C%5B8.7450%2C49.416%5D%2C%5B8.70491%2C49.411688%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "keys=evomaster_6380_input&" + 
                    "timeout=31&" + 
                    "types=foo&" + 
                    "values=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Parameter 'types' (and 'types2') can only have 'node' and/or 'way' and/or 'relation' OR 'point' and/or 'line' and/or 'polygon' and/or 'other'"));
    }
    
    
    @Test
    public void test_722() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/density/groupBy/boundary?" + 
                    "bcircles=OY%3A8.7073%2C49.4205%2C6&" + 
                    "filter=highway+in+%28secondary%2Cpath%2Cunclassified%2Ctrack%2Cprimary%2Cresidential%2Ccycleway%2Cservice%2Cfootway%29+or+not+area%3A%281.0+..+1E6%29&" + 
                    "format=geojson&" + 
                    "keys=highway&" + 
                    "timeout=86")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The keys, values and types parameters must be empty, when you set the filter parameter."));
    }
    
    
    @Test
    public void test_723() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/density?" + 
                    "bcircles=akD%3A8.710%2C49.431%2C7&" + 
                    "filter=landuse%21%3D*+or+length%3A%28+..+100%29&" + 
                    "format=csv&" + 
                    "keys=highway&" + 
                    "timeout=38")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The keys, values and types parameters must be empty, when you set the filter parameter."));
    }
    
    
    @Test
    public void test_724() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/density?" + 
                    "bboxes=8.6799%2C49.412%2C8.733%2C49.384&" + 
                    "filter=bicycle%21%3D*+and+type%3Anode+or+length%3A%28+..+100%29&" + 
                    "keys=highway&" + 
                    "timeout=80")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The keys, values and types parameters must be empty, when you set the filter parameter."));
    }
    
    
    @Test
    public void test_725() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter?" + 
                    "bcircles=SZbIO%3A8.710306%2C49.412%2C52%7CveB%3A8.728%2C49.40075%2C43%7CBXehT%3A8.7106%2C49.4272%2C6%7Ctn%3A8.745795%2C49.416%2C3&" + 
                    "filter=highway%21%3D*+or+geometry%3Aline&" + 
                    "keys=highway&" + 
                    "showMetadata=no&" + 
                    "time=2014-04-25&" + 
                    "timeout=63")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The keys, values and types parameters must be empty, when you set the filter parameter."));
    }
    
    
    @Test
    public void test_726() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter?" + 
                    "bcircles=8.711434%2C49.420%2C2&" + 
                    "filter=highway%3D*+or+id%3A%281+..+9999%29&" + 
                    "format=json&" + 
                    "showMetadata=true&" + 
                    "time=2015-11-20&" + 
                    "values=track")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The keys, values and types parameters must be empty, when you set the filter parameter."));
    }
    
    
    @Test
    public void test_727() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/ratio/groupBy/boundary?" + 
                    "bcircles=8.7056%2C49.4159%2C340%7C8.71836%2C49.4029%2C4%7C8.715%2C49.42769%2C7&" + 
                    "filter=barrier%21%3D*+and+not+type%3Anode+and+id%3A%281+..+9999%29&" + 
                    "format=csv&" + 
                    "keys2=highway&" + 
                    "showMetadata=false&" + 
                    "time=2010-01-29&" + 
                    "timeout=92&" + 
                    "types2=way%2C&" + 
                    "values2=footway")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The filter2 parameter has to be defined when using a /ratio endpoint."));
    }
    
    
    @Test
    public void test_728() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/ratio/groupBy/boundary?" + 
                    "bcircles=E%3A8.74813%2C49.420415%2C6%7CDnmLZ%3A8.70809%2C49.41722%2C1&" + 
                    "filter=smoothness%3D*+and+not+type%3Away&" + 
                    "keys2=highway&" + 
                    "showMetadata=yes&" + 
                    "time=2015-02-15&" + 
                    "timeout=85&" + 
                    "types2=other&" + 
                    "values2=secondary_link")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The filter2 parameter has to be defined when using a /ratio endpoint."));
    }
    
    
    @Test
    public void test_729() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/ratio?" + 
                    "bcircles=Lret%3A8.735%2C49.432%2C6%7CeJT%3A8.743%2C49.438888%2C1&" + 
                    "filter=maxspeed%3D*+and+type%3Anode+and+id%3A%281+..+9999%29&" + 
                    "format=csv&" + 
                    "keys2=highway&" + 
                    "time=2014-08-12&" + 
                    "timeout=44&" + 
                    "values2=crossing")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The filter2 parameter has to be defined when using a /ratio endpoint."));
    }
    
    
    @Test
    public void test_730() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/ratio?" + 
                    "bcircles=TevgZ%3A8.709644%2C49.408955%2C2&" + 
                    "keys2=highway&" + 
                    "showMetadata=false&" + 
                    "time=2016-04-10&" + 
                    "timeout=92&" + 
                    "types2=line%2Cpolygon%2Cother&" + 
                    "values2=footway")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The filter2 parameter has to be defined when using a /ratio endpoint."));
    }
    
    
    @Test
    public void test_731() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/type?" + 
                    "bcircles=Z%3A8.7123%2C49.431%2C7&" + 
                    "filter=network%3D*+and+length%3A%28+..+100%29&" + 
                    "keys=highway&" + 
                    "time=2016-01-20&" + 
                    "timeout=69")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The keys, values and types parameters must be empty, when you set the filter parameter."));
    }
    
    
    @Test
    public void test_732() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/groupBy/type?" + 
                    "filter=ref%21%3D*+and+type%3Anode+and+id%3A%281+..+9999%29&" + 
                    "format=json&" + 
                    "time=2009-07-20&" + 
                    "timeout=63")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("You need to define one of the boundary parameters (bboxes, bcircles, bpolys)."));
    }
    
    
    @Test
    public void test_733() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/tag?" + 
                    "bcircles=FhD%3A8.7007%2C49.426725%2C2&" + 
                    "filter=name%3D*+or+type%3Arelation+or+not+length%3A%28+..+100%29&" + 
                    "format=json&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=path%2Cchurch%2Ctower&" + 
                    "keys=highway&" + 
                    "time=2007-12-25&" + 
                    "timeout=53&" + 
                    "values=traffic_signals")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The keys, values and types parameters must be empty, when you set the filter parameter."));
    }
    
    
    @Test
    public void test_734() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/groupBy/tag?" + 
                    "bboxes=gv%3A8.6592%2C49.402%2C8.758%2C49.3904%7CX%3A8.6608%2C49.427278%2C8.7471%2C49.3972&" + 
                    "bcircles=fda%3A8.720055%2C49.4004%2C4&" + 
                    "filter=ref%21%3D*+or+id%3A%281+..+9999%29&" + 
                    "groupByKey=foo&" + 
                    "groupByValues=track&" + 
                    "time=2008-07-14&" + 
                    "timeout=88&" + 
                    "values=steps")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_735() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/key?" + 
                    "bboxes=ApR%3A8.660%2C49.41763%2C8.7256%2C49.3888&" + 
                    "filter=foo&" + 
                    "format=json&" + 
                    "groupByKeys=foo&" + 
                    "showMetadata=true&" + 
                    "time=2013-11-12&" + 
                    "values=stop_line5")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The keys, values and types parameters must be empty, when you set the filter parameter."));
    }
    
    
    @Test
    public void test_736() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/groupBy/key?" + 
                    "bboxes=8.686%2C49.428%2C8.7332%2C49.391%7C8.656%2C49.402302%2C8.708824%2C49.387&" + 
                    "filter=maxspeed%21%3D*&" + 
                    "format=geojson&" + 
                    "groupByKeys=foo&" + 
                    "keys=highway&" + 
                    "time=2013-11-20&" + 
                    "timeout=74")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The keys, values and types parameters must be empty, when you set the filter parameter."));
    }
    
    
    @Test
    public void test_737() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/boundary/groupBy/tag?" + 
                    "bboxes=Tw%3A8.696%2C49.40406%2C8.747%2C49.396&" + 
                    "filter=maxspeed%21%3D*+and+geometry%3Aline&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=university%2Cprimary%2Chospital&" + 
                    "keys=highway&" + 
                    "time=2017-10-25&" + 
                    "timeout=36")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The keys, values and types parameters must be empty, when you set the filter parameter."));
    }
    
    
    @Test
    public void test_738() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=8.730%2C49.40618%2C70%7C8.737%2C49.415%2C40%7C8.7498%2C49.415%2C1&" + 
                    "filter=landuse%21%3D*+and+id%3A%281+..+9999%29&" + 
                    "format=geojson&" + 
                    "groupByKey=foo&" + 
                    "groupByValues=street_lamp&" + 
                    "keys=highway&" + 
                    "showMetadata=true&" + 
                    "time=2014-11-02&" + 
                    "values=traffic_mirror")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The keys, values and types parameters must be empty, when you set the filter parameter."));
    }
    
    
    @Test
    public void test_739() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/boundary?" + 
                    "bcircles=ju%3A8.74880%2C49.426181%2C9&" + 
                    "filter=landuse%21%3D*+or+length%3A%28+..+100%29&" + 
                    "keys=highway&" + 
                    "showMetadata=no&" + 
                    "timeout=22")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The keys, values and types parameters must be empty, when you set the filter parameter."));
    }
    
    
    @Test
    public void test_740() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/groupBy/boundary?" + 
                    "bcircles=8.735729%2C49.4265%2C6&" + 
                    "filter=service%3Ddriveway&" + 
                    "format=json&" + 
                    "time=2010-06-13&" + 
                    "timeout=53&" + 
                    "values=residential")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The keys, values and types parameters must be empty, when you set the filter parameter."));
    }
    
    
    @Test
    public void test_741() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density/groupBy/type?" + 
                    "bboxes=l%3A8.660%2C49.423%2C8.728%2C49.393%7CVG%3A8.687%2C49.403%2C8.7467%2C49.3913%7CFzAQZ%3A8.67100%2C49.406%2C8.7282%2C49.383%7Cw%3A8.696%2C49.4100%2C8.748%2C49.381678&" + 
                    "filter=foo&" + 
                    "format=geojson&" + 
                    "keys=foo&" + 
                    "time=2016-06-20&" + 
                    "values=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The keys, values and types parameters must be empty, when you set the filter parameter."));
    }
    
    
    @Test
    public void test_742() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/density/groupBy/type?" + 
                    "bcircles=r%3A8.707%2C49.426%2C5&" + 
                    "format=cSv&" + 
                    "keys=evomaster_58%3C5_input&" + 
                    "time=LC&" + 
                    "timeout=62&" + 
                    "types=foo&" + 
                    "values=evomaster_5884_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Parameter 'types' (and 'types2') can only have 'node' and/or 'way' and/or 'relation' OR 'point' and/or 'line' and/or 'polygon' and/or 'other'"));
    }
    
    
    @Test
    public void test_743() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/density/groupBy/tag?" + 
                    "bcircles=J%3A8.733%2C49.417%2C865&" + 
                    "filter=building%3D*+or+type%3Arelation&" + 
                    "format=csv&" + 
                    "groupByKey=foo&" + 
                    "time=2013-03-01&" + 
                    "values=primary_link")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The keys, values and types parameters must be empty, when you set the filter parameter."));
    }
    
    
    @Test
    public void test_744() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=8.734%2C49.4169%2C7&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=church%2Ctertiary&" + 
                    "showMetadata=true&" + 
                    "timeout=61&" + 
                    "values=steps")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("There cannot be more input values in the values|values2 than in the keys|keys2 parameter, as values_n must fit to keys_n."));
    }
    
    
    @Test
    public void test_745() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/density/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=R%3A8.73682%2C49.407638%2C1&" + 
                    "filter=oneway%3D*&" + 
                    "format=json&" + 
                    "groupByKey=building&" + 
                    "groupByValues=station%2Ctrack&" + 
                    "keys=highway&" + 
                    "time=2008-02-02&" + 
                    "timeout=99")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The keys, values and types parameters must be empty, when you set the filter parameter."));
    }
    
    
    @Test
    public void test_746() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density/groupBy/boundary?" + 
                    "bboxes=uUOGX%3A8.663%2C49.42769%2C8.756%2C49.380&" + 
                    "filter=building%21%3D*+or+not+geometry%3Aline&" + 
                    "time=2018-02-16&" + 
                    "timeout=21&" + 
                    "values=footway")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The keys, values and types parameters must be empty, when you set the filter parameter."));
    }
    
    
    @Test
    public void test_747() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/density/groupBy/boundary?" + 
                    "format=geojson&" + 
                    "timeout=61")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("You need to define one of the boundary parameters (bboxes, bcircles, bpolys)."));
    }
    
    
    @Test
    public void test_748() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density?" + 
                    "bboxes=Lu%3A8.69697%2C49.410%2C8.7368%2C49.384%7CN%3A8.668052%2C49.40052%2C8.70539%2C49.397%7Cbl%3A8.680%2C49.4009%2C8.7438%2C49.387&" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22OnWSh%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.730%2C49.4127%5D%2C%5B8.708%2C49.43334%5D%2C%5B8.70456%2C49.420%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22wjj%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.737%2C49.43409%5D%2C%5B8.7045%2C49.420%5D%2C%5B8.70181%2C49.410%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22w%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.726%2C49.409%5D%2C%5B8.709%2C49.40098%5D%2C%5B8.711%2C49.439%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "keys=highway&" + 
                    "showMetadata=yes&" + 
                    "time=2013-10-09&" + 
                    "timeout=85&" + 
                    "values=primary")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_749() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/density?" + 
                    "bboxes=SY%3A8.673%2C49.41700%2C8.7533%2C49.389&" + 
                    "bpolys=D%3A8.704561%2C49.403252%2C8.722679%2C49.410%2C8.705%2C49.426%2C8.747%2C49.4130%2C8.704561%2C49.403252%7CvMYr%3A8.704561%2C49.403252%2C8.743%2C49.437%2C8.70475%2C49.4243%2C8.702307%2C49.4130%2C8.704561%2C49.403252%7Cd%3A8.704561%2C49.403252%2C8.702%2C49.418%2C8.7371%2C49.403%2C8.70621%2C49.439%2C8.704561%2C49.403252&" + 
                    "filter=network%21%3D*+and+type%3Anode+and+area%3A%281.0+..+1E6%29&" + 
                    "format=json&" + 
                    "time=2014-01-01&" + 
                    "timeout=50")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_750() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length?" + 
                    "keys=highway&" + 
                    "showMetadata=false&" + 
                    "time=2015-01-01&" + 
                    "timeout=31&" + 
                    "values=traffic_mirror")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("You need to define one of the boundary parameters (bboxes, bcircles, bpolys)."));
    }
    
    
    @Test
    public void test_751() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length?" + 
                    "bcircles=8.72034%2C49.406940%2C5%7C8.7426%2C49.439%2C8%7C8.736%2C49.416%2C53&" + 
                    "filter=name%21%3D*+and+not+id%3A%281+..+9999%29&" + 
                    "format=csv&" + 
                    "keys=highway&" + 
                    "time=2015-07-21&" + 
                    "timeout=78")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The keys, values and types parameters must be empty, when you set the filter parameter."));
    }
    
    
    @Test
    public void test_752() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/ratio/groupBy/boundary?" + 
                    "bcircles=YiJEj%3A8.743%2C49.410441%2C8&" + 
                    "keys2=highway&" + 
                    "time=2009-10-19&" + 
                    "timeout=37&" + 
                    "types2=point%2Cline%2Cother")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The filter2 parameter has to be defined when using a /ratio endpoint."));
    }
    
    
    @Test
    public void test_753() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/ratio/groupBy/boundary?" + 
                    "bcircles=j%3A8.714%2C49.4006%2C49%7CyK%3A8.716%2C49.41328%2C1&" + 
                    "filter=ref%21%3D*+or+length%3A%28+..+100%29&" + 
                    "format=geojson&" + 
                    "keys2=highway&" + 
                    "showMetadata=false&" + 
                    "time=2014-01-12&" + 
                    "timeout=58&" + 
                    "values2=secondary_link")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The filter2 parameter has to be defined when using a /ratio endpoint."));
    }
    
    
    @Test
    public void test_754() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/ratio?" + 
                    "bcircles=UAeC%3A8.7081%2C49.412530%2C8%7CCl%3A8.706%2C49.432223%2C3&" + 
                    "filter=bicycle%21%3D*+and+area%3A%281.0+..+1E6%29&" + 
                    "keys2=highway&" + 
                    "showMetadata=false&" + 
                    "time=2011-05-28&" + 
                    "timeout=82&" + 
                    "types2=point%2Cline%2C&" + 
                    "values2=residential")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The filter2 parameter has to be defined when using a /ratio endpoint."));
    }
    
    
    @Test
    public void test_755() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/ratio?" + 
                    "bcircles=svLsv%3A8.70658%2C49.43814%2C76%7CoVzLi%3A8.702%2C49.4294%2C255&" + 
                    "filter=maxspeed%3D*+and+geometry%3Aline&" + 
                    "showMetadata=false&" + 
                    "time=2016-05-14&" + 
                    "timeout=94&" + 
                    "types2=point%2C")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The filter2 parameter has to be defined when using a /ratio endpoint."));
    }
    
    
    @Test
    public void test_756() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/type?" + 
                    "bcircles=qTQ%3A8.743%2C49.40193%2C8&" + 
                    "filter=highway%21%3D*+or+not+length%3A%28+..+100%29&" + 
                    "format=csv&" + 
                    "keys=highway&" + 
                    "timeout=96")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The keys, values and types parameters must be empty, when you set the filter parameter."));
    }
    
    
    @Test
    public void test_757() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/groupBy/type?" + 
                    "bcircles=8.720%2C49.402%2C5%7C8.735%2C49.4293%2C55%7C8.7142%2C49.408%2C5%7C8.714%2C49.407%2C997&" + 
                    "filter=bicycle%21%3D*+or+geometry%3Aline+or+length%3A%28+..+100%29&" + 
                    "keys=highway&" + 
                    "time=2008-03-20")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The keys, values and types parameters must be empty, when you set the filter parameter."));
    }
    
    
    @Test
    public void test_758() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/tag?" + 
                    "bcircles=PCagD%3A8.738%2C49.4023%2C1%7CV%3A8.738%2C49.422%2C18&" + 
                    "filter=maxspeed%3D*+or+not+type%3Away+and+area%3A%281.0+..+1E6%29&" + 
                    "format=json&" + 
                    "groupByKey=building&" + 
                    "keys=highway&" + 
                    "showMetadata=false&" + 
                    "time=2010-01-23&" + 
                    "values=service")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The keys, values and types parameters must be empty, when you set the filter parameter."));
    }
    
    
    @Test
    public void test_759() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/groupBy/tag?" + 
                    "bcircles=se%3A8.70500%2C49.438%2C72&" + 
                    "format=csv&" + 
                    "groupByKey=foo&" + 
                    "groupByValues=public%2Ctower%2Capartments&" + 
                    "time=2016-11-26&" + 
                    "timeout=66&" + 
                    "values=secondary_link")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("There cannot be more input values in the values|values2 than in the keys|keys2 parameter, as values_n must fit to keys_n."));
    }
    
    
    @Test
    public void test_760() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/key?" + 
                    "bcircles=8.708%2C49.4294%2C2&" + 
                    "filter=foo&" + 
                    "groupByKeys=Voo&" + 
                    "keys=highway&" + 
                    "showMetadata=yes&" + 
                    "time=%5Eoo&" + 
                    "types=foo&" + 
                    "values=fwo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Parameter 'types' (and 'types2') can only have 'node' and/or 'way' and/or 'relation' OR 'point' and/or 'line' and/or 'polygon' and/or 'other'"));
    }
    
    
    @Test
    public void test_761() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/groupBy/key?" + 
                    "bcircles=HIPBd%3A8.72906%2C49.4352%2C613&" + 
                    "filter=highway%3D*+or+not+geometry%3Aline&" + 
                    "format=csv&" + 
                    "groupByKeys=bicycle%2Chighway%2Cref&" + 
                    "keys=highway&" + 
                    "showMetadata=yes&" + 
                    "timeout=69")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The keys, values and types parameters must be empty, when you set the filter parameter."));
    }
    
    
    @Test
    public void test_762() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/groupBy/boundary/groupBy/tag?" + 
                    "bboxes=x%3A8.676%2C49.411%2C8.723%2C49.3835%7Cs%3A8.67218%2C49.406133%2C8.741%2C49.38397&" + 
                    "filter=lit%21%3D*+and+type%3Anode&" + 
                    "format=json&" + 
                    "groupByKey=building&" + 
                    "showMetadata=true&" + 
                    "time=2014-05-20&" + 
                    "timeout=37&" + 
                    "values=bus_stop")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The keys, values and types parameters must be empty, when you set the filter parameter."));
    }
    
    
    @Test
    public void test_763() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/boundary?" + 
                    "bcircles=8.74364%2C49.4093%2C4&" + 
                    "bpolys=Zh%3A8.704561%2C49.403252%2C8.71940%2C49.4317%2C8.7018%2C49.4397%2C8.70564%2C49.4038%2C8.704561%2C49.403252%7CE%3A8.704561%2C49.403252%2C8.7484%2C49.43157%2C8.7000%2C49.4059%2C8.702%2C49.411%2C8.704561%2C49.403252%7Cu%3A8.704561%2C49.403252%2C8.7175%2C49.437452%2C8.720227%2C49.42394%2C8.727%2C49.428%2C8.704561%2C49.403252&" + 
                    "keys=highway&" + 
                    "time=2012-10-19&" + 
                    "timeout=66")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_764() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/groupBy/boundary?" + 
                    "bcircles=8.737%2C49.422%2C8%7C8.748%2C49.4127%2C1%7C8.7102%2C49.431%2C57&" + 
                    "filter=building%21%3D*+and+length%3A%28+..+100%29&" + 
                    "keys=highway&" + 
                    "showMetadata=false&" + 
                    "time=2017-06-03&" + 
                    "timeout=68")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The keys, values and types parameters must be empty, when you set the filter parameter."));
    }
    
    
    @Test
    public void test_765() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/density/groupBy/type?" + 
                    "bboxes=O%3A8.665%2C49.415961%2C8.7240%2C49.382&" + 
                    "bcircles=Qa%3A8.721%2C49.4192%2C6%7CvRpuD%3A8.749182%2C49.417%2C61%7CSq%3A8.7235%2C49.428803%2C3%7CfxXA%3A8.73337%2C49.42968%2C689256506&" + 
                    "bpolys=8.704561%2C49.403252%2C8.728%2C49.405%2C8.7028%2C49.417%2C8.700%2C49.4303%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.737%2C49.415%2C8.7071%2C49.428%2C8.710918%2C49.424%2C8.704561%2C49.403252&" + 
                    "keys=highway&" + 
                    "showMetadata=true&" + 
                    "time=2012-03-22&" + 
                    "timeout=39")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_766() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/density/groupBy/type?" + 
                    "bcircles=8.732%2C49.417%2C92&" + 
                    "bpolys=8.704561%2C49.403252%2C8.722%2C49.40516%2C8.712%2C49.4169%2C8.703%2C49.434294%2C8.704561%2C49.403252&" + 
                    "format=csv&" + 
                    "keys=highway&" + 
                    "showMetadata=no&" + 
                    "time=2016-11-21&" + 
                    "timeout=49")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_767() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/density/groupBy/tag?" + 
                    "bboxes=SO%3A8.659%2C49.419%2C8.725%2C49.381&" + 
                    "filter=maxspeed%21%3D*+or+geometry%3Apoint+or+area%3A%281.0+..+1E6%29&" + 
                    "format=geojson&" + 
                    "groupByKey=building&" + 
                    "time=2017-04-27&" + 
                    "values=footway")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The keys, values and types parameters must be empty, when you set the filter parameter."));
    }
    
    
    @Test
    public void test_768() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/density/groupBy/tag?" + 
                    "bboxes=OH%3A8.6507%2C49.425%2C8.736%2C49.397&" + 
                    "filter=highway+in+%28secondary%2Cpath%2Cunclassified%2Ctrack%2Cprimary%2Cresidential%2Ccycleway%2Cservice%2Cfootway%29+and+id%3A%281+..+9999%29&" + 
                    "groupByKey=foo&" + 
                    "groupByValues=steps%2Ctrack%2Cliving_street&" + 
                    "keys=highway&" + 
                    "showMetadata=yes&" + 
                    "time=2013-03-24&" + 
                    "timeout=79")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The keys, values and types parameters must be empty, when you set the filter parameter."));
    }
    
    
    @Test
    public void test_769() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/density/groupBy/boundary/groupBy/tag?" + 
                    "bboxes=C%3A8.674299%2C49.4058%2C8.729%2C49.396&" + 
                    "filter=type%21%3D*+and+type%3Arelation+or+length%3A%28+..+100%29&" + 
                    "format=json&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=university%2Cbus_stop%2Cfootway&" + 
                    "keys=highway&" + 
                    "showMetadata=false&" + 
                    "time=2011-08-01&" + 
                    "timeout=43&" + 
                    "values=crossing")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The keys, values and types parameters must be empty, when you set the filter parameter."));
    }
    
    
    @Test
    public void test_770() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/density/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=8.744%2C49.43998%2C5%7C8.744954%2C49.433%2C2&" + 
                    "format=geojson&" + 
                    "groupByKey=building&" + 
                    "groupByValues=crossing&" + 
                    "keys=highway&" + 
                    "showMetadata=false&" + 
                    "time=foo&" + 
                    "timeout=38&" + 
                    "values=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_771() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/density/groupBy/boundary?" + 
                    "bboxes=OO%3A8.683%2C49.42601%2C8.717%2C49.38843%7CZbruS%3A8.680%2C49.410%2C8.74140%2C49.383%7CVqR%3A8.682%2C49.407%2C8.712%2C49.3814%7CS%3A8.688%2C49.428538%2C8.731%2C49.383358&" + 
                    "filter=bicycle%3D*+or+not+id%3A%281+..+9999%29&" + 
                    "format=csv&" + 
                    "showMetadata=no&" + 
                    "values=primary_link")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The keys, values and types parameters must be empty, when you set the filter parameter."));
    }
    
    
    @Test
    public void test_772() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/density/groupBy/boundary?" + 
                    "bboxes=GF%3A8.684340%2C49.414753%2C8.7168%2C49.3932%7Cq%3A8.675%2C49.417919%2C8.746%2C49.380&" + 
                    "filter=surface%3D*&" + 
                    "format=csv&" + 
                    "showMetadata=true&" + 
                    "values=street_lamp")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The keys, values and types parameters must be empty, when you set the filter parameter."));
    }
    
    
    @Test
    public void test_773() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/density?" + 
                    "bboxes=N%3A8.6993%2C49.415846%2C8.72281%2C49.397&" + 
                    "filter=barrier%21%3D*&" + 
                    "keys=highway&" + 
                    "showMetadata=no&" + 
                    "time=2014-05-05&" + 
                    "timeout=53&" + 
                    "values=bus_stop")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The keys, values and types parameters must be empty, when you set the filter parameter."));
    }
    
    
    @Test
    public void test_774() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/density?" + 
                    "bpolys=m&" + 
                    "filter=QOiw_Q8egVV&" + 
                    "keys=IiVi3fipfBAPTXir&" + 
                    "types=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_775() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count?" + 
                    "bboxes=uR%3A8.6796%2C49.40026%2C8.746%2C49.385&" + 
                    "bcircles=8.733%2C49.4007%2C2%7C8.724%2C49.420%2C789%7C8.721697%2C49.41764%2C7&" + 
                    "filter=addr%3Astreet%3D*+and+geometry%3Aline+and+not+area%3A%281.0+..+1E6%29&" + 
                    "keys=highway&" + 
                    "showMetadata=false&" + 
                    "timeout=35&" + 
                    "values=bus_stop")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_776() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count?" + 
                    "bcircles=8.7126%2C49.439%2C1%7C8.733%2C49.420918%2C8%7C8.745812%2C49.4097%2C922%7C8.718%2C49.4214%2C18&" + 
                    "keys=foo&" + 
                    "time=foo&" + 
                    "values=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_777() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/ratio/groupBy/boundary?" + 
                    "bcircles=oQ%3A8.74522%2C49.410%2C9%7CtoZPf%3A8.731%2C49.4351%2C8&" + 
                    "keys2=highway&" + 
                    "time=2011-02-02&" + 
                    "types2=polygon%2C")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The filter2 parameter has to be defined when using a /ratio endpoint."));
    }
    
    
    @Test
    public void test_778() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/ratio?" + 
                    "bcircles=8.733%2C49.422%2C4%7C8.71556%2C49.414%2C93%7C8.73047%2C49.422%2C58%7C8.729564%2C49.415%2C12&" + 
                    "filter=maxspeed%3D*+and+id%3A%281+..+9999%29&" + 
                    "keys2=highway&" + 
                    "showMetadata=true&" + 
                    "time=2009-11-30&" + 
                    "timeout=91&" + 
                    "types2=point%2C")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The filter2 parameter has to be defined when using a /ratio endpoint."));
    }
    
    
    @Test
    public void test_779() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/ratio?" + 
                    "bcircles=FgD%3A8.719315%2C49.434%2C3&" + 
                    "filter=oneway%21%3D*+and+length%3A%28+..+100%29&" + 
                    "keys2=highway&" + 
                    "showMetadata=no&" + 
                    "time=2017-05-09&" + 
                    "timeout=46&" + 
                    "values2=steps")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The filter2 parameter has to be defined when using a /ratio endpoint."));
    }
    
    
    @Test
    public void test_780() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/type?" + 
                    "bcircles=8.70873%2C49.4268%2C3&" + 
                    "filter=smoothness%21%3D*+and+type%3Away+and+length%3A%28+..+100%29&" + 
                    "keys=highway&" + 
                    "time=2015-05-01&" + 
                    "timeout=61&" + 
                    "values=path")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The keys, values and types parameters must be empty, when you set the filter parameter."));
    }
    
    
    @Test
    public void test_781() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/type?" + 
                    "bcircles=8.7020%2C49.4346%2C7&" + 
                    "filter=foo&" + 
                    "keys=highway&" + 
                    "showMetadata=true&" + 
                    "time=2017-06-21&" + 
                    "timeout=42")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The keys, values and types parameters must be empty, when you set the filter parameter."));
    }
    
    
    @Test
    public void test_782() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/tag?" + 
                    "bboxes=i%3A8.699362%2C49.4048%2C8.75454%2C49.393&" + 
                    "groupByKey=building&" + 
                    "groupByValues=platform&" + 
                    "showMetadata=no&" + 
                    "values=elevator")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("There cannot be more input values in the values|values2 than in the keys|keys2 parameter, as values_n must fit to keys_n."));
    }
    
    
    @Test
    public void test_783() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/tag?" + 
                    "bboxes=aNG%3A8.699%2C49.4280%2C8.706%2C49.3954&" + 
                    "bpolys=JZ%3A8.704561%2C49.403252%2C8.724%2C49.402696%2C8.70923%2C49.414%2C8.702257%2C49.4328%2C8.704561%2C49.403252%7Cb%3A8.704561%2C49.403252%2C8.739%2C49.4219%2C8.7327%2C49.418%2C8.704586%2C49.4014%2C8.704561%2C49.403252%7CuJ%3A8.704561%2C49.403252%2C8.732932%2C49.426%2C8.742%2C49.422%2C8.739%2C49.424845%2C8.704561%2C49.403252&" + 
                    "format=json&" + 
                    "groupByKey=highway&" + 
                    "keys=highway&" + 
                    "showMetadata=yes&" + 
                    "time=2010-08-13&" + 
                    "timeout=52")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_784() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/key?" + 
                    "bcircles=OaHST%3A8.717412%2C49.4154%2C145&" + 
                    "groupByKeys=foo&" + 
                    "time=2015-09-14&" + 
                    "timeout=61&" + 
                    "values=pedestrian")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("There cannot be more input values in the values|values2 than in the keys|keys2 parameter, as values_n must fit to keys_n."));
    }
    
    
    @Test
    public void test_785() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/key?" + 
                    "bboxes=CWOB%3A8.6757%2C49.413%2C8.716%2C49.38635%7CsY%3A8.695%2C49.42457%2C8.726%2C49.383%7Ct%3A8.6628%2C49.411%2C8.749805%2C49.385&" + 
                    "filter=oneway%3D*+and+length%3A%28+..+100%29&" + 
                    "format=json&" + 
                    "groupByKeys=foo&" + 
                    "keys=highway&" + 
                    "time=2014-06-20&" + 
                    "timeout=77&" + 
                    "values=service")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The keys, values and types parameters must be empty, when you set the filter parameter."));
    }
    
    
    @Test
    public void test_786() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=u%3A8.741%2C49.431%2C9%7CUyPCK%3A8.736445%2C49.42621%2C13%7CM%3A8.717%2C49.4173%2C8&" + 
                    "filter=smoothness%3D*+or+length%3A%28+..+100%29&" + 
                    "format=json&" + 
                    "groupByKey=highway&" + 
                    "keys=highway&" + 
                    "showMetadata=true")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The keys, values and types parameters must be empty, when you set the filter parameter."));
    }
    
    
    @Test
    public void test_787() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/boundary/groupBy/tag?" + 
                    "bboxes=NKRKq%3A8.675%2C49.415%2C8.7422%2C49.399&" + 
                    "filter=highway+in+%28secondary%2Cpath%2Cunclassified%2Ctrack%2Cprimary%2Cresidential%2Ccycleway%2Cservice%2Cfootway%29+or+length%3A%28+..+100%29&" + 
                    "groupByKey=foo&" + 
                    "groupByValues=turning_circle%2Ccommercial&" + 
                    "showMetadata=true&" + 
                    "timeout=21&" + 
                    "values=platform")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The keys, values and types parameters must be empty, when you set the filter parameter."));
    }
    
    
    @Test
    public void test_788() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/boundary?" + 
                    "bcircles=Ts%3A8.71522%2C49.432%2C743%7CVUDKt%3A8.734%2C49.4191%2C6%7CH%3A8.70302%2C49.434996%2C2%7Cyo%3A8.7341%2C49.40568%2C14&" + 
                    "filter=maxspeed%21%3D*+or+type%3Anode+and+area%3A%281.0+..+1E6%29&" + 
                    "format=json&" + 
                    "keys=highway&" + 
                    "time=2017-08-10&" + 
                    "values=path")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The keys, values and types parameters must be empty, when you set the filter parameter."));
    }
    
    
    @Test
    public void test_789() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/boundary?" + 
                    "bboxes=VX%3A8.682%2C49.40785%2C8.747%2C49.396&" + 
                    "filter=natural%3Dwood+and+geometry%3Apoint+or+not+length%3A%28+..+100%29&" + 
                    "format=csv&" + 
                    "keys=highway&" + 
                    "showMetadata=true&" + 
                    "time=2010-03-29&" + 
                    "timeout=84&" + 
                    "values=platform")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The keys, values and types parameters must be empty, when you set the filter parameter."));
    }
    
    
    @Test
    public void test_790() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density/groupBy/type?" + 
                    "bboxes=gUltZ%3A8.6892%2C49.429%2C8.7520%2C49.386&" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22X%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7043%2C49.4390%5D%2C%5B8.733%2C49.410%5D%2C%5B8.722%2C49.416%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "timeout=100")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_791() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/density/groupBy/type?" + 
                    "bcircles=c%3A8.748%2C49.4055%2C5&" + 
                    "filter=addr%3Acountry%3D*+and+not+type%3Arelation+or+area%3A%281.0+..+1E6%29&" + 
                    "keys=highway&" + 
                    "time=2018-01-15")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The keys, values and types parameters must be empty, when you set the filter parameter."));
    }
    
    
    @Test
    public void test_792() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density/groupBy/tag?" + 
                    "bboxes=8.682766%2C49.412%2C8.729%2C49.393%7C8.683949%2C49.418%2C8.713%2C49.383%7C8.6532%2C49.417%2C8.707%2C49.3942%7C8.668%2C49.409352%2C8.723440%2C49.394493&" + 
                    "filter=ref%3D*+and+id%3A%281+..+9999%29&" + 
                    "format=json&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=tower%2Cservice&" + 
                    "showMetadata=no&" + 
                    "time=2016-03-19&" + 
                    "timeout=32&" + 
                    "values=steps")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The keys, values and types parameters must be empty, when you set the filter parameter."));
    }
    
    
    @Test
    public void test_793() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/density/groupBy/tag?" + 
                    "bcircles=e%3A8.724%2C49.439%2C9%7CQh%3A8.71074%2C49.419753%2C69%7CwR%3A8.7046%2C49.430%2C2&" + 
                    "filter=tracktype%3D*+or+length%3A%28+..+100%29&" + 
                    "format=json&" + 
                    "groupByKey=foo&" + 
                    "keys=highway&" + 
                    "showMetadata=yes&" + 
                    "time=2011-06-16&" + 
                    "timeout=32")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The keys, values and types parameters must be empty, when you set the filter parameter."));
    }
    
    
    @Test
    public void test_794() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=8.710%2C49.4348%2C92&" + 
                    "filter=service%3Ddriveway+or+id%3A%281+..+9999%29&" + 
                    "format=json&" + 
                    "groupByKey=building&" + 
                    "groupByValues=service%2Celevator%2Cchapel&" + 
                    "keys=highway&" + 
                    "time=2010-09-26")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The keys, values and types parameters must be empty, when you set the filter parameter."));
    }
    
    
    @Test
    public void test_795() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/density/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=8.7094%2C49.4182%2C9%7C8.713278%2C49.4177%2C30&" + 
                    "format=geojson&" + 
                    "groupByKey=foo&" + 
                    "showMetadata=true&" + 
                    "time=2008-09-23&" + 
                    "values=cycleway")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("There cannot be more input values in the values|values2 than in the keys|keys2 parameter, as values_n must fit to keys_n."));
    }
    
    
    @Test
    public void test_796() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density/groupBy/boundary?" + 
                    "bcircles=B%3A8.705412%2C49.407%2C401&" + 
                    "filter=surface%3D*+and+geometry%3Apolygon+and+not+length%3A%28+..+100%29&" + 
                    "format=csv&" + 
                    "showMetadata=false&" + 
                    "time=2011-05-15&" + 
                    "values=tertiary")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The keys, values and types parameters must be empty, when you set the filter parameter."));
    }
    
    
    @Test
    public void test_797() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/density/groupBy/boundary?" + 
                    "bcircles=P%3A8.711%2C49.406%2C839&" + 
                    "filter=network%3D*+or+not+id%3A%281+..+9999%29&" + 
                    "format=json&" + 
                    "keys=highway&" + 
                    "showMetadata=false&" + 
                    "timeout=73&" + 
                    "values=speed_camera")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The keys, values and types parameters must be empty, when you set the filter parameter."));
    }
    
    
    @Test
    public void test_798() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density?" + 
                    "bcircles=8.715%2C49.418%2C4%7C8.7403%2C49.4399%2C2&" + 
                    "filter=foo&" + 
                    "format=foo&" + 
                    "keys=highway&" + 
                    "showMetadata=foo&" + 
                    "time=2009-07-06&" + 
                    "types=foo&" + 
                    "values=evomaster_12226_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given parameter showMetadata can only contain the values 'true', 'yes', 'false', or 'no'."));
    }
    
    
    @Test
    public void test_799() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/density?" + 
                    "bcircles=ShSlC%3A8.746%2C49.418%2C3&" + 
                    "filter=surface%3D*+and+geometry%3Aline+or+length%3A%28+..+100%29&" + 
                    "format=csv&" + 
                    "keys=highway&" + 
                    "showMetadata=true&" + 
                    "time=2008-11-04&" + 
                    "timeout=76&" + 
                    "values=pedestrian")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The keys, values and types parameters must be empty, when you set the filter parameter."));
    }
    
    
    @Test
    public void test_800() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area?" + 
                    "bpolys=y&" + 
                    "format=JhLrEY4&" + 
                    "time=6CRHiJbh&" + 
                    "types=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_801() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area?" + 
                    "bcircles=8.741%2C49.4342%2C7&" + 
                    "filter=foo&" + 
                    "format=csv&" + 
                    "keys=highway&" + 
                    "showMetadata=no&" + 
                    "time=2013-05-30&" + 
                    "types=point%2Cother")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The keys, values and types parameters must be empty, when you set the filter parameter."));
    }
    
    
    @Test
    public void test_802() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/type?" + 
                    "bboxes=8.67161%2C49.407%2C8.7585%2C49.381%7C8.654%2C49.410%2C8.721798%2C49.3992%7C8.6766%2C49.40241%2C8.70697%2C49.3885%7C8.6937%2C49.411%2C8.735303%2C49.396&" + 
                    "bcircles=ZS%3A8.71480%2C49.416689%2C56&" + 
                    "filter=lit%21%3D*+or+geometry%3Apoint&" + 
                    "format=json&" + 
                    "values=crossing")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_803() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/boundary?" + 
                    "bcircles=5%2C084%2C%3C1%2F%3C%3B162J&" + 
                    "keys=&" + 
                    "showMetadata=16%29%3B8UU3O971UUwa&" + 
                    "time=5%2C-79%2C83%2F%3C%3B122I%3A&" + 
                    "types=YNTySYCcd&" + 
                    "values=bA")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Each bcircle must consist of a lon/lat coordinate pair plus a buffer in meters."));
    }
    
    
    @Test
    public void test_804() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/boundary?" + 
                    "bcircles=5%2C056%2CU7%2F%3F%3B626J&" + 
                    "format=m%5BF&" + 
                    "keys=T%5EZJPVZ%5BLGY7M&" + 
                    "showMetadata=W6-%3FUSU3S971UUv&" + 
                    "time=9--79%2C83%2F%3C%3D022I&" + 
                    "timeout=&" + 
                    "types=YNTySUCcd&" + 
                    "values=k")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Each bcircle must consist of a lon/lat coordinate pair plus a buffer in meters."));
    }
    
    
    @Test
    public void test_805() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/boundary?" + 
                    "bcircles=5%2C072%2C81%2F%3C%3B122J&" + 
                    "filter=T%5EZIPVZ%5BLFY7M&" + 
                    "format=mZD&" + 
                    "keys=j&" + 
                    "showMetadata=16-%3B8UU3O971UUwa&" + 
                    "time=5%2C-79%2C83%2F%3C%3B122I%3A&" + 
                    "types=YNTySYCcd&" + 
                    "values=bA")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Each bcircle must consist of a lon/lat coordinate pair plus a buffer in meters."));
    }
    
    
    @Test
    public void test_806() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/ratio/groupBy/boundary?" + 
                    "bcircles=8.744%2C-5.969983%2C4%7C8.7%274%2C69.414%2C8&" + 
                    "filter=evomaster_1017309_input&" + 
                    "filter2=evomaster_1004185_inpu&" + 
                    "format=cSV&" + 
                    "showMetadata=a%7Daea&" + 
                    "time=evomaster_1010719Oinput&" + 
                    "types=evomYster_73%2518_input&" + 
                    "values=evomaster_1010720_inpu")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Each bcircle must consist of a lon/lat coordinate pair plus a buffer in meters."));
    }
    
    
    @Test
    public void test_807() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/ratio/groupBy/boundary?" + 
                    "bcircles=-836D%2C83.620345%2C4%7C000%3E0%2C78.840%2C8&" + 
                    "filter=T1c&" + 
                    "keys=evomaster_160537_input&" + 
                    "keys2=Uhi2z4v5AdGdf&" + 
                    "showMetadata=zc31AHcIck&" + 
                    "types=evomaster_150045ginput&" + 
                    "values=afK&" + 
                    "values2=jxc45C1ME0d1FI")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Each bcircle must consist of a lon/lat coordinate pair plus a buffer in meters."));
    }
    
    
    @Test
    public void test_808() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/ratio/groupBy/boundary?" + 
                    "bcircles=4.744%2C05.620745%2C4%7C80724%2C79.864%2C8&" + 
                    "bpolys=foo&" + 
                    "filter=nXkQ4CreYLE_sBK&" + 
                    "filter2=evomaster_83433_input&" + 
                    "format=evomaster_450%225_inpu&" + 
                    "keys=0SZM7N1rzI0wq%3E&" + 
                    "showMetadata=BAH&" + 
                    "time=Gk%2F&" + 
                    "timeout=evomaster_83434_input&" + 
                    "types=eUUmaUudUa60334UinpUt&" + 
                    "types2=evomaster_83435_input&" + 
                    "values=evomaster_83436_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_809() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density/groupBy/tag?" + 
                    "bcircles=riYQn%3A8.743%2C49.4044%2C9%7CEzzQq%3A8.719949%2C49.426%2C2&" + 
                    "filter=ezomastev_9096_inp&" + 
                    "format=CSV&" + 
                    "groupByKey=cmjmas%60VnoU577bUUor&" + 
                    "keys=AFMRbPo&" + 
                    "showMetadata=Yes&" + 
                    "time=evomaster_77577_input&" + 
                    "timeout=93&" + 
                    "types=poiNt&" + 
                    "values=rv2bxluz5Oi5fq3d")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_810() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/boundary?" + 
                    "bcircles=5%2C064%2C81%2F%3C%3B122J&" + 
                    "filter=T%5EZIPVZ%5BLFY7M&" + 
                    "format=mZH&" + 
                    "showMetadata=16-%3B8UU3O971UUwa&" + 
                    "types=YNTySYCcd&" + 
                    "values=bA")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Each bcircle must consist of a lon/lat coordinate pair plus a buffer in meters."));
    }
    
    
    @Test
    public void test_811() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/ratio/groupBy/boundary?" + 
                    "bcircles=3.00D%2C63.660305%2C4%7C280.0%2C79.760%2C8&" + 
                    "format=evomestdz_450%225_inp&" + 
                    "timeout=02&" + 
                    "types=evo%7Daster_150045gXnpet&" + 
                    "types2=nEHp7D&" + 
                    "values2=evomaster_353646_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Each bcircle must consist of a lon/lat coordinate pair plus a buffer in meters."));
    }
    
    
    @Test
    public void test_812() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density/groupBy/tag?" + 
                    "bcircles=riYQn%3A8.743%2C49.4044%2C9%7CEzzQq%3A8.719949%2C49.426%2C2&" + 
                    "filter=evomastev_9096_inp&" + 
                    "format=CSV&" + 
                    "groupByKey=cmjmas%60VnoU577bUUor&" + 
                    "groupByValues=UvpUakeer_8575UrntUU&" + 
                    "keys=AFMRbPo&" + 
                    "showMetadata=YES&" + 
                    "time=riYQn%3A8.743%2C49.4044%2C9%7CEzzQq%3A8.719949%2C49.426%2C2&" + 
                    "timeout=93&" + 
                    "values=rv2bxluz5Oi5fq3d")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_813() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/density?" + 
                    "bboxes=dKf%3A8.65137%2C49.4061%2C8.700%2C49.385&" + 
                    "filter=&" + 
                    "format=json&" + 
                    "keys=evomaster_1301864_input&" + 
                    "time=%2BRP%2FU%2F%3E")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_814() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/groupBy/type?" + 
                    "bcircles=UZ%3A8.743%2C49.40344%2C56%7CFGtgR%3A8.725%2C49.429%2C430%7CiCVAa%3A8.733%2C49.4137%2C32&" + 
                    "bpolys=8.704561%2C49.403252%2C8.742%2C49.414%2C8.7029%2C49.417%2C8.746%2C49.407%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.723%2C49.433%2C8.701%2C49.406%2C8.737%2C49.408%2C8.704561%2C49.403252&" + 
                    "filter=turn%3Alanes%21%3D*+or+geometry%3Apoint&" + 
                    "showMetadata=true&" + 
                    "timeout=42")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_815() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/groupBy/tag?" + 
                    "bcircles=I%3A8.708%2C49.423%2C9%7CS%3A8.727%2C49.4136%2C1&" + 
                    "filter=f%7Fo&" + 
                    "groupByKey=evomaster_513614_input&" + 
                    "groupByValues=foo&" + 
                    "keys=highway&" + 
                    "showMetadata=true&" + 
                    "time=&" + 
                    "values=fo%60")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The keys, values and types parameters must be empty, when you set the filter parameter."));
    }
    
    
    @Test
    public void test_816() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/density/groupBy/tag?" + 
                    "bcircles=hp%3A8.712%2C49.408%2C8&" + 
                    "filter=network%21%3D*+or+not+length%3A%28+..+100%29&" + 
                    "format=geojson&" + 
                    "groupByKey=highwaq&" + 
                    "groupByValues=foo&" + 
                    "showMetadata=true&" + 
                    "time=%2FAN3WJK1D&" + 
                    "timeout=74&" + 
                    "values=evomaster_2326_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_817() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/ratio/groupBy/boundary?" + 
                    "bcircles=o%3A8.7046%2C00.00E0%2Cd7fV02UDU&" + 
                    "filter=m8oT2JhAqOT&" + 
                    "filter2=evomaster_561101_input&" + 
                    "keys=evomaster%5D383291_i%5Eput&" + 
                    "showMetadata=Pp1&" + 
                    "time=fooD&" + 
                    "timeout=43&" + 
                    "values2=evomaster_267894_inp")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Each bcircle must consist of a lon/lat coordinate pair plus a buffer in meters."));
    }
    
    
    @Test
    public void test_818() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/type?" + 
                    "bcircles=8.739%2C49.419%2C3%7C8.745%2C49.4195%2C8%7C8.710%2C49.409%2C2%7C8.7350%2C49.424%2C8&" + 
                    "filter=bicycle%3D*+and+not+type%3Away+or+length%3A%28+..+100%29&" + 
                    "keys=highway&" + 
                    "timeout=91")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The keys, values and types parameters must be empty, when you set the filter parameter."));
    }
    
    
    @Test
    public void test_819() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/density/groupBy/tag?" + 
                    "bcircles=hp%3A8.712%2C49.408%2C8&" + 
                    "filter=network%21%3D*+or+not+length%3A%28+..+100%29&" + 
                    "format=geojson&" + 
                    "groupByKey=highwaq&" + 
                    "groupByValues=foo&" + 
                    "keys=foo&" + 
                    "showMetadata=true&" + 
                    "time=b%2FP3k6mcD&" + 
                    "timeout=74")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_820() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density/groupBy/tag?" + 
                    "bcircles=riYQn%3A8.743%2C49.4044%2C9%7CEzzQq%3A8.719949%2C49.426%2C2&" + 
                    "filter=evkmastev_%3B096_inp&" + 
                    "groupByKey=clUUUsUUUUY%3D787EUpU&" + 
                    "groupByValues=UvpUakeer_8575UrnpU&" + 
                    "keys=evomaster_11111_input&" + 
                    "showMetadata=yes&" + 
                    "time=evomaster_8436_input&" + 
                    "timeout=93&" + 
                    "types=&" + 
                    "values=evomasuer_10580_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_821() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/tag?" + 
                    "bcircles=NM%3A8.7336%2C49.42615%2C3&" + 
                    "filter=foot%3D*+and+length%3A%28+..+100%29&" + 
                    "groupByKey=highway&" + 
                    "time=2007-10-15&" + 
                    "timeout=77&" + 
                    "types=foo&" + 
                    "values=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Parameter 'types' (and 'types2') can only have 'node' and/or 'way' and/or 'relation' OR 'point' and/or 'line' and/or 'polygon' and/or 'other'"));
    }
    
    
    @Test
    public void test_822() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/groupBy/tag?" + 
                    "bboxes=Cl%3A8.6679%2C49.404163%2C8.721963%2C49.393%C2%84i%3A8.650%2C49.429%2C8.737%2C49.39779%7CuN%3A8.669%2C49.42176%2C8.757012%2C49.393&" + 
                    "groupByKey=highway&" + 
                    "keys=evomaster_3492_input&" + 
                    "showMetadata=true&" + 
                    "time=evomaster_1736_input&" + 
                    "timeout=53&" + 
                    "types=foo&" + 
                    "values=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_823() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/density/groupBy/tag?" + 
                    "bpolys=epsyle%5Dc%22IeatureUolle_tUoUU%2CUUeatUrfw%22%3A%5B%7B%22UwUi%22U%22FUUtere%22UUprmpUrtUUUU%3A%7B%22Ud%22U%22v0%7D%2C%22geoueUUu%22%3A%7BUtUpe%22U%22PolygUnUUUcUorTiUatfU0%3A%5B%5B%5B8.7045U1U%3CUU00U242%5D%2CYU.70U9%2C49.41UU%2C%5B8.UUU0%2C4UU4U3%5D%2CUUU7049UUUU4U4U%2CUU.7U456UUUU.D032UU%5D%5DU%7D%7D%2CUUxyUe%22U%22UUatUre%22UUpropeUtiUU%22%3A%7B%22UUU%3A0o%22%7D%2C0geUmetpyU%3A%7B%22UypUUU%22UomUgUU%22%2CUeooUdUUaUes%22%3A%5B%5B%5BU.3045U104U.40U252%5D%2CU8.7UUU4U.5UU4%5DU%5B8.U03%2C4U.UUU%5D%2C%5B8.728U1%2C89.41U5YUU8.7UUU6U%2C49%3EU032U2%5DU%5DU%7D%5D%7D&" + 
                    "filter=foo&" + 
                    "format=foo&" + 
                    "groupByKey=evomaster_3895_input&" + 
                    "showMetadata=evomaster_11382_input&" + 
                    "types=foo&" + 
                    "values=evomaster_11383_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_824() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density/groupBy/tag?" + 
                    "bboxes=evomaster_2115_input&" + 
                    "bcircles=riYQn%3A8.743%2C49.4044%2C9%7CEzzQq%3A8.719949%2C49.426%2C2&" + 
                    "bpolys=8.704561%2C49.003252%2C8.7232%2C49.424%2C8.70456%2C49.416%2C8.720%2C49.4376%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.743%2C49.400%2C8.737069%2C49.4161%2C8.7315%2C49.426%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.7440%2C49.433%2C8.74703%2C49.4298%2C8.7046%2C49.407%2C8.704561%2C49.403252&" + 
                    "filter=evomaster_16716_input&" + 
                    "format=foo&" + 
                    "groupByKey=%2CIfOcrL8Ru&" + 
                    "groupByValues=eromaster_2199_input&" + 
                    "keys=A0IB5&" + 
                    "showMetadata=foo&" + 
                    "timeout=93&" + 
                    "types=GwLe77ydWyqRbZ&" + 
                    "values=evomaster_2116_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("You need to give one groupByKey parameter, if you want to use groupBy/tag."));
    }
    
    
    @Test
    public void test_825() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count?" + 
                    "bcircles=tUhK%3A8.748%2B49.420345%2C234&" + 
                    "filter=foo&" + 
                    "format=csv&" + 
                    "showMetadata=foo&" + 
                    "time=%2F%2FP2I22D&" + 
                    "values=primary_link")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_826() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/density/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=8.744%2C49.43998%2C5%7C8.744954%2C492433%2C2&" + 
                    "bpolys=foo&" + 
                    "filter=evomaster_32252_input&" + 
                    "format=evomaster_32195_input&" + 
                    "groupByKey=evomaster_12%2C38_inpu&" + 
                    "groupByValues=evomaster_12437_input&" + 
                    "keys=evomaster_32253_input&" + 
                    "showMetadata=evomaster_32254_input&" + 
                    "time=foo&" + 
                    "timeout=38&" + 
                    "values=evomaster_32196_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("You need to give one groupByKey parameter, if you want to use groupBy/tag."));
    }
    
    
    @Test
    public void test_827() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/ratio/groupBy/boundary?" + 
                    "bcircles=8f74b%2C49.b%3AV343%60dR8.7UU%2C4U2424U8&" + 
                    "filter=evomasxer_34016_input&" + 
                    "filter2=evomaster_34017_inpu&" + 
                    "format=evomaster_12293_input&" + 
                    "keys=VhKSMcHjXvS07ZVO&" + 
                    "keys2=evomaster_34798_input&" + 
                    "showMetadata=evomaster_-3524_input&" + 
                    "time=evomaster_34799_input&" + 
                    "timeout=43&" + 
                    "types=evomaster_13525_input&" + 
                    "types2=AjSIOp&" + 
                    "values=evomaster_34800_input&" + 
                    "values2=GkvDwF")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_828() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/ratio/groupBy/boundary?" + 
                    "bcircles=9.00D%2C83.621345%2C4%7C00060%2C79%1E840%2C8&" + 
                    "filter2=evomaster_794382_input&" + 
                    "format=csV&" + 
                    "keys=evomaster_160537_input&" + 
                    "showMetadata=ZyTM&" + 
                    "time=evomastera160487ginpu&" + 
                    "timeout=0&" + 
                    "types=evkmaster%5D150845ginput&" + 
                    "values=cf%3C&" + 
                    "values2=evomaster_409305_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Each bcircle must consist of a lon/lat coordinate pair plus a buffer in meters."));
    }
    
    
    @Test
    public void test_829() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/ratio/groupBy/boundary?" + 
                    "bcircles=4.744%2C02.620345%2C4%7C606.1%2C59.860%2C8&" + 
                    "filter=mW%3EIoe8eeI7&" + 
                    "filter2=dDuUk%24KP54DN3KS&" + 
                    "format=CSV&" + 
                    "keys=0SZMGN1rzI0wq%3E&" + 
                    "keys2=evomaster_114428_input&" + 
                    "showMetadata=evomaster_118-69_input&" + 
                    "time=evqlaster_83981_input&" + 
                    "timeout=43&" + 
                    "types=evoUauooz_60D04_alq&" + 
                    "values=bfWT")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Each bcircle must consist of a lon/lat coordinate pair plus a buffer in meters."));
    }
    
    
    @Test
    public void test_830() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/density/groupBy/tag?" + 
                    "bboxes=foo&" + 
                    "bcircles=hp%3A8.712%2C49.408%2C8&" + 
                    "filter=network%21%3D*+or+not+length%3A%28+..+100%29&" + 
                    "format=geojson&" + 
                    "groupByKey=hp%3A8.712%2C49.408%2C8&" + 
                    "groupByValues=foo&" + 
                    "showMetadata=evomaster_365786_input&" + 
                    "time=b%2FP3k6mc&" + 
                    "timeout=7B&" + 
                    "values=loTzPFtWctEuellF")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("You need to give one groupByKey parameter, if you want to use groupBy/tag."));
    }
    
    
    @Test
    public void test_831() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/density?" + 
                    "bboxes=dKli8.hd13%3A%2CX9.406d%2C8.h00%2CU9.U85&" + 
                    "filter=&" + 
                    "format=json&" + 
                    "keys=evomaster_1063368_input&" + 
                    "time=3RG1%3C")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_832() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/density?" + 
                    "bboxes=dKf%3A8.65137%2C49.4061%2C8.700%2C49.38&" + 
                    "filter=&" + 
                    "format=json&" + 
                    "time=%2BRP%2FU%2F")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_833() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/ratio?" + 
                    "bcircles=WcGmZ%3A8.715%2C69.4380%2C2&" + 
                    "filter=addr%3Apostcode%3D*+or+length%3A%28+..+100%29&" + 
                    "filter2=evomaster_1777294_input&" + 
                    "keys=fpoV&" + 
                    "keys2=hqghwUy&" + 
                    "time=3%2F09011%2F%2F8&" + 
                    "timeout=0.61408&" + 
                    "types2=poiot%2ClUfe%2Cother&" + 
                    "values=Uoo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_834() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/tag?" + 
                    "format=geojson&" + 
                    "groupByKey=foo&" + 
                    "groupByValues=path&" + 
                    "showMetadata=yes")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("You need to define one of the boundary parameters (bboxes, bcircles, bpolys)."));
    }
    
    
    @Test
    public void test_835() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/density/groupBy/boundary?" + 
                    "bboxes=8.650%2C49.404%2C8.7%3A71%2C49.39518&" + 
                    "filter=network%3D*+and+geometry%3Apolygon+and+length%3A%28+..+100%29&" + 
                    "format=geojson&" + 
                    "keys=foo&" + 
                    "showMetadata=true&" + 
                    "time=2008-06-30&" + 
                    "types=foo&" + 
                    "values=ohb0Jp5CndXO")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("One or more boundary object(s) have a custom id (or at least a colon), whereas other(s) don't. You can either set custom ids for all your boundary objects, or for none."));
    }
    
    
    @Test
    public void test_836() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/groupBy/tag?" + 
                    "bcircles=I%3A8.708%2C49.423%2C9%7CS%3A8.727%2C49.4136%2C1&" + 
                    "filter=foo&" + 
                    "groupByKey=evomaster_390397_input&" + 
                    "keys=highway&" + 
                    "showMetadata=&" + 
                    "types=Cl%3A8.6679%2C49.404163%2C8.721963%2C49.393%7Ci%3A8.650%2C49.429%2C8.737%2C49.39779%7CuN%3A8.669%2C49.42176%2C8.757012%2C49.393&" + 
                    "values=evomaster_390416_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Parameter 'types' (and 'types2') cannot have more than 4 entries."));
    }
    
    
    @Test
    public void test_837() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/boundary?" + 
                    "bcircles=Uz%3A8.74787%2C49.409%2C5&" + 
                    "format=json&" + 
                    "values=footway")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("There cannot be more input values in the values|values2 than in the keys|keys2 parameter, as values_n must fit to keys_n."));
    }
    
    
    @Test
    public void test_838() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/ratio/groupBy/boundary?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureComlection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22xv%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.729%2C49.42800%5D%2C%5B8.702%2C49.412153%5D%2C%5B8.728%2C49.40129%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22on%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B0.704561%2C49.403252%5D%2C%5B8.710%2C49.403%5D%2C%5B8.74425%2C49.424%5D%2C%5B8.7175%2C49.427371%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=foo&" + 
                    "filter2=i&" + 
                    "format=Csv&" + 
                    "keys=foo&" + 
                    "keys2=highway&" + 
                    "showMetadata=false&" + 
                    "time=evomaster_284212_input&" + 
                    "types=fom&" + 
                    "values=goo&" + 
                    "values2=evomaster_284213_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given GeoJSON has to be of the type 'FeatureCollection'."));
    }
    
    
    @Test
    public void test_839() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/ratio/groupBy/boundary?" + 
                    "bcircles=8.744%2C-50969985%2C4%7C8.7%274%2C69.414%2C8&" + 
                    "filter2=evomaster_1004185_inpu&" + 
                    "keys2=uhAs%3BTIxRRExkmM3&" + 
                    "types=evomYster_73%2518_input&" + 
                    "types2=evomikter_1003335_inpt&" + 
                    "values=evomaster_1010720_inpu&" + 
                    "values2=evomaster_1017%2F07_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Each bcircle must consist of a lon/lat coordinate pair plus a buffer in meters."));
    }
    
    
    @Test
    public void test_840() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/groupBy/tag?" + 
                    "bboxes=Cl%3A8.6679%2C49.404163%2C8.721963%2C49.393%7Ci%3A8.650%2C49.429%2C8.737%2C49.39779%7CuN%3A8.669%2C49.42176%2C8.757012%2C49.393&" + 
                    "filter=foo&" + 
                    "format=foo&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=foo&" + 
                    "keys=highway&" + 
                    "showMetadata=true&" + 
                    "time=2013-12-23&" + 
                    "types=foo&" + 
                    "values=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given 'format' parameter is invalid. Please choose between 'geojson'(only available for /groupBy/boundary and data extraction requests), 'json', or 'csv'."));
    }
    
    
    @Test
    public void test_841() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density/groupBy/tag?" + 
                    "bpolys=riYQn%3A8.743%2C49.4044%2C9%7CEzzQq%3A8.719949%2C49.42%3A%2C2&" + 
                    "filter=evomastev_9096_inp&" + 
                    "groupByKey=cmqmastdn_U978_UUpu&" + 
                    "groupByValues=UvpUakeer_8575UrnpUU&" + 
                    "keys=evomaster_9097_enpu&" + 
                    "showMetadata=yES&" + 
                    "time=evomaster_8436_input&" + 
                    "timeout=13&" + 
                    "types=evomaster_10579_inpu&" + 
                    "values=h10t")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_842() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density/groupBy/tag?" + 
                    "bboxes=8.6882%2C49.410%2C8.721%2C49.3916&" + 
                    "filter=evomaster_25_input&" + 
                    "groupByKey=foo&" + 
                    "showMetadata=foo&" + 
                    "timeout=93&" + 
                    "types=foo&" + 
                    "values=evomaster_24_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given parameter showMetadata can only contain the values 'true', 'yes', 'false', or 'no'."));
    }
    
    
    @Test
    public void test_843() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/type?" + 
                    "bboxes=waEr%3A8.662012%2C49.42699%2C8.722573%2C49.386&" + 
                    "filter=barrier%21%3D*+or+id%3A%281+..+9999%29&" + 
                    "keys=evomaster_44_input&" + 
                    "time=evomaster_45_input&" + 
                    "timeout=65&" + 
                    "values=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_844() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/key?" + 
                    "bboxes=CH&" + 
                    "bcircles=6RyFYpLgU&" + 
                    "bpolys=RE339TknHvUhz&" + 
                    "filter=ys0DlOxE2G&" + 
                    "format=hBfxucUI3EvSoX2&" + 
                    "groupByKeys=%2C&" + 
                    "keys=rxmoj&" + 
                    "showMetadata=evomaster_1254248_input&" + 
                    "time=kojP4l&" + 
                    "timeout=m4WDUGK&" + 
                    "values=yY6Rv")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("You need to give one groupByKeys parameter, if you want to use groupBy/key."));
    }
    
    
    @Test
    public void test_845() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/groupBy/type?" + 
                    "bboxes=szm7E&" + 
                    "filter=oWg1O&" + 
                    "format=1&" + 
                    "keys=_NssbH2N8WXjlF&" + 
                    "timeout=Ri5j4n8CLgu_&" + 
                    "types=ISfKrHXU&" + 
                    "values=5m4hLY")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_846() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/type?" + 
                    "bboxes=waEr%3A8.662012%2C49.42699%2C%28.722573%2C49.386&" + 
                    "filter=evomaster_46_input&" + 
                    "format=foo&" + 
                    "keys=1oYDy&" + 
                    "time=evomaster_45_input&" + 
                    "timeout=65&" + 
                    "types=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Apart from the custom ids, the bboxeses array must contain double-parseable values in the following order: minLon, minLat, maxLon, maxLat."));
    }
    
    
    @Test
    public void test_847() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=PjWt%3A8.704561%2C49.403252%2C8.725%2C49.429%2C8.700%2C49.431%2C8.7343%2C49.%3C04%2C8.704561%2C49.403252&" + 
                    "filter=foo&" + 
                    "format=foo&" + 
                    "groupByKey=evomaster_389_input&" + 
                    "keys=foo&" + 
                    "showMetadata=foo&" + 
                    "time=evomaster_390_input&" + 
                    "values=track")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The bpolys parameter must contain double-parseable values in form of lon/lat coordinate pairs."));
    }
    
    
    @Test
    public void test_848() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/density/groupBy/type?" + 
                    "bcircles=8.727%2C49.418%2C3%7C827058%2C49.400%2C602509541&" + 
                    "filter=foo&" + 
                    "format=foo&" + 
                    "showMetadata=no&" + 
                    "timeout=72&" + 
                    "values=stop")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Each bcircle must consist of a lon/lat coordinate pair plus a buffer in meters."));
    }
    
    
    @Test
    public void test_849() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/density/groupBy/tag?" + 
                    "bcircles=hp%3A8.712%2C49.408%2C8&" + 
                    "format=geojson&" + 
                    "groupByKey=highwYq&" + 
                    "groupByValues=evomaster_3332_input&" + 
                    "keys=evomaster_3333_input&" + 
                    "showMetadata=true&" + 
                    "time=%2F%2FP3Y6MBD&" + 
                    "timeout=74")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The interval (period) of the provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_850() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/density/groupBy/tag?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22v%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.003252%5D%2C%5B8.7089%2C49.419%5D%2C%5B8.7040%2C49.423%5D%2C%5B8.7049%2C49.433%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22o%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.728%2C49.4306%5D%2C%5B8.703%2C49.438%5D%2C%5B8.72831%2C49.4145%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=evomaster_3894_input&" + 
                    "format=foo&" + 
                    "groupByKey=evomaster_3895_input&" + 
                    "showMetadata=true&" + 
                    "values=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided GeoJSON cannot be converted."));
    }
    
    
    @Test
    public void test_851() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/density/groupBy/type?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22oh%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.71604%2C49.439%5D%2C%5B8.70004%2C49.430%5D%2C%5B8.70003%2C49.419%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22e%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.736%2C49.409%5D%2C%5B8.71827%2C49.40866%5D%2C%5B8.703%2C49.42282%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7E%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22HzI%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7442%2C49.4167%5D%2C%5B8.7049%2C49.434%5D%2C%5B8.70452%2C49.431%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=building%3D*+and+id%3A%281+..+9999%29&" + 
                    "format=foo&" + 
                    "keys=evomaster_5885_input&" + 
                    "time=evomaster_5886_input&" + 
                    "timeout=62")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in reading of the given GeoJSON."));
    }
    
    
    @Test
    public void test_852() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density/groupBy/tag?" + 
                    "bpolys=8.704561%2C49.003252%2C8.7232%2C49.424%2C8.70456%2C49.416%2C8.720%2C49.4376%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.743%2C49.400%2C8.737069%2C49.4161%2C8.7315%2C49.426%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.7440%2C49.433%2C8.74703%2C49.4298%2C8.7046%2C49.407%2C8.704561%2C49.4032%252&" + 
                    "filter=evomaster_8433_input&" + 
                    "format=CSV&" + 
                    "groupByKey=4IfOcqL8RN&" + 
                    "groupByValues=ouh0nj&" + 
                    "keys=evomaster_4931_input&" + 
                    "showMetadata=foo&" + 
                    "types=eSF9XuXn3byzZojh")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The bpolys parameter must contain double-parseable values in form of lon/lat coordinate pairs."));
    }
    
    
    @Test
    public void test_853() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density/groupBy/boundary?" + 
                    "bboxes=nqD4&" + 
                    "filter=9f&" + 
                    "showMetadata=WmEL8o&" + 
                    "timeout=yCJh&" + 
                    "types=c_rF&" + 
                    "values=w88irb1egEvGViMj")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density/groupBy/boundary?" + 
                    "bpolys=&" + 
                    "keys=feW57&" + 
                    "time=iFvsKSPUYREV")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("You need to define one of the boundary parameters (bboxes, bcircles, bpolys)."));
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density/groupBy/boundary?" + 
                    "bcircles=Ejc5KwXk7SzW&" + 
                    "format=SAqGd5rb2VxM&" + 
                    "keys=Stdug&" + 
                    "timeout=d3&" + 
                    "types=iX9O")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/density/groupBy/boundary")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("You need to define one of the boundary parameters (bboxes, bcircles, bpolys)."));
    }
    
    
    @Test
    public void test_854() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/density?" + 
                    "bboxes=dKf%3A8.65137%2C49.4061%2C8.700%2C49.385&" + 
                    "format=json&" + 
                    "keys=evomaster_647376_input&" + 
                    "time=%2BRP1%2F")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_855() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/ratio/groupBy/boundary?" + 
                    "bcircles=NsP%3A8.701%2C49.424%2C90%7CMIB%3A8.7499%2C49.423%2C39%7CwZ%3A8.7170%2C49.4236%2C23%7CKOmZ%3A8.7229%2C49.415833%2C6&" + 
                    "filter=highway%21%3D*+or+id%3A%281+..+9999%29&" + 
                    "keys2=highway&" + 
                    "time=2015-05-03&" + 
                    "values2=street_lamp")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The filter2 parameter has to be defined when using a /ratio endpoint."));
    }
    
    
    @Test
    public void test_856() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/density?" + 
                    "bboxes=dKf%3A8.65137%2C49.4061%2C8.700%2C49.385&" + 
                    "filter=evomaster_37797_input&" + 
                    "format=json&" + 
                    "keys=evomaster_37798_gnput&" + 
                    "time=%2F%2FP1%2FD")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_857() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/density?" + 
                    "bboxes=dKf%3A8.65137%2C49.4061%2C8.700%2C49.385&" + 
                    "filter=evomaster_37797_input&" + 
                    "format=json&" + 
                    "keys=evomaster_37798_gnput&" + 
                    "time=%2FRP1%2FD")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_858() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/density/groupBy/tag?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22k%3BRvj%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22NtltiQn%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7112%2C49.8076%5D%2C%5B8.7042%2C49.427%5D%2C%5B8.7223%2C49.4100%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=BiX8vlVl%3FiriVA&" + 
                    "format=csv&" + 
                    "groupByKey=kR%7BiU&" + 
                    "groupByValues=evomYspdra598035_inpu&" + 
                    "keys=EUookRterWTU72U4U%5DUUhnA&" + 
                    "showMetadata=jqa8SjquQynJtWh&" + 
                    "timeout=0.5963373183452851&" + 
                    "values=Ge66No5kK")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given custom ids cannot contain semicolons, if you want to use csv as output format."));
    }
    
    
    @Test
    public void test_859() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/density?" + 
                    "bboxes=dKf%3A8.65137%2C49.4061%2C8.700%2C49.385&" + 
                    "format=json&" + 
                    "keys=&" + 
                    "time=%2BRP%2F%2FG")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_860() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/boundary/groupBy/tag?" + 
                    "bboxes=Ym%3A8.6885%2C49.40994%2C8.711%2C49.3802%7CyGfCY%3A8.6803%2C49.4111%2C8.700%2C49.38743&" + 
                    "filter=evomaster_6441_input&" + 
                    "groupByKey=evomaster_6442_input&" + 
                    "groupByValues=foo&" + 
                    "showMetadata=true&" + 
                    "timeout=82")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Invalid filter syntax. Please look at the additional info and examples about the filter parameter at https://docs.ohsome.org/ohsome-api. Detailed error message: line 1, column 21: whitespaces, EQUALS (=), NOT_EQUALS (!=) or in expected, EOF encountered."));
    }
    
    
    @Test
    public void test_861() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/ratio?" + 
                    "bcircles=WcGmZ%3A8.715%2C49.4380%2C2&" + 
                    "filter2=evomaster_1777294_input&" + 
                    "keys=fooV&" + 
                    "keys2=highway&" + 
                    "time=2009-11%2F%2F8&" + 
                    "timeout=0.6140800644226535&" + 
                    "types2=point%2Cline%2Cother&" + 
                    "values=foo&" + 
                    "values2=secondary_link")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The interval (period) of the provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_862() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/density?" + 
                    "bcircles=VfbZsahFvy69dR6&" + 
                    "bpolys=A3ZUqcoUa&" + 
                    "filter=18922AB84&" + 
                    "format=wiPKQD&" + 
                    "keys=&" + 
                    "types=khWF")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/density?" + 
                    "bboxes=Lh8SS6_HHYZ9p&" + 
                    "filter=OfT10MAT&" + 
                    "keys=eiCgMEMH_c1ImoT&" + 
                    "showMetadata=RBY5Tv&" + 
                    "time=cVZGKQDlo63ka7k&" + 
                    "values=n0UXzo2phv0tr")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/density?" + 
                    "bcircles=sz0_5JX7dHYKacnB&" + 
                    "bpolys=U4JKE54sfbE1&" + 
                    "filter=ydBnk&" + 
                    "format=9Ou1T1ZsTU764YNZ&" + 
                    "timeout=ycgX&" + 
                    "types=XAuy2r&" + 
                    "values=Xy2OpTzhHH9ubW")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/density?" + 
                    "bboxes=oKR6iZlnQ&" + 
                    "bcircles=IRPjPqJxisf&" + 
                    "format=5kd547roLuS4_&" + 
                    "keys=H78hmJE6r4485eA&" + 
                    "showMetadata=d&" + 
                    "time=EK0JnpL&" + 
                    "timeout=420")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout is too long. It has to be shorter than 100.0 seconds"));
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/density?" + 
                    "bcircles=Cx0V7kdBZL&" + 
                    "bpolys=oVPKGKBVXHbe39sW&" + 
                    "filter=dcd5ceub&" + 
                    "format=WCnqGyWu6PZc&" + 
                    "showMetadata=_7MHPW8kg&" + 
                    "time=fu")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/density?" + 
                    "bboxes=k7s&" + 
                    "bcircles=7W_d2zL2&" + 
                    "bpolys=x152p6k1SmF&" + 
                    "filter=DGNAhfM&" + 
                    "showMetadata=YcPo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/density?" + 
                    "bboxes=tGtZZkzkBjKna7l&" + 
                    "bpolys=&" + 
                    "filter=DEBMXiHmXPmM&" + 
                    "format=lftmZon&" + 
                    "keys=ZyNYy7&" + 
                    "showMetadata=ay3KmslhVlddB&" + 
                    "time=iUmZWHpb4FkfTEQT&" + 
                    "timeout=CAg9M5gY2I8CG")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/density?" + 
                    "bcircles=PcjF&" + 
                    "bpolys=jNE&" + 
                    "showMetadata=plBtGZA&" + 
                    "timeout=8havPeVR6Q5&" + 
                    "values=Q8d7OMvs4kBd4b")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_863() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count?" + 
                    "bboxes=JouTA7&" + 
                    "bcircles=&" + 
                    "format=ui2JhXt50eJs&" + 
                    "types=U")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_864() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/groupBy/key?" + 
                    "bcircles=lQ3&" + 
                    "bpolys=&" + 
                    "format=fWVPuUPuIOCbcB&" + 
                    "groupByKeys=&" + 
                    "showMetadata=VUmVxliz")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_865() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/tag?" + 
                    "bpolys=G&" + 
                    "filter=yGLxWmOZJ&" + 
                    "groupByKey=k6d&" + 
                    "groupByValues=17OWuGn&" + 
                    "time=ckGohcvJaGXIV0rl&" + 
                    "types=rfQbd0gbTSSN&" + 
                    "values=dIgVbQIjDjlzP")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_866() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/ratio/groupBy/boundary?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22xv%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.729%2C49.42800%5D%2C%5B8.702%2C49.412153%5D%2C%5B8.728%2C49.40129%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22on%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygo%7E%22%2C%22coordinates%22%3A%5B%5B%5B0.704561%2C49.403252%5D%2C%5B8.710%2C49.403%5D%2C%5B8.74425%2C49.424%5D%2C%5B8.7175%2C49.427371%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter2=evomaster_348278_input&" + 
                    "format=json&" + 
                    "keys2=highway&" + 
                    "showMetadata=false&" + 
                    "time=foo&" + 
                    "types=foo&" + 
                    "types2=foo&" + 
                    "values=evomaster_348279_input&" + 
                    "values2=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The geometry of each feature in the GeoJSON has to be of type 'Polygon' or 'MultiPolygon'."));
    }
    
    
    @Test
    public void test_867() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/density?" + 
                    "bboxes=dKf%3A8.65137%2C49.4062%2C8.700%2C49.38&" + 
                    "filter=evomaster_37797_input&" + 
                    "format=json&" + 
                    "keys=%5Dv_masJUro3X7X8_grut&" + 
                    "time=%2F&" + 
                    "values=evomaster_819103_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The keys, values and types parameters must be empty, when you set the filter parameter."));
    }
    
    
    @Test
    public void test_868() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/ratio?" + 
                    "bpolys=UyvJv%3A8.704561%2C49.403252%2C8.739%2C49.401585%2C8.70496%2C49.434%2C8.702%2C49.4284%2C8.704561%2C49.403252&" + 
                    "filter=ref%21%3D*+and+length%3A%28+..+100%29&" + 
                    "format=geojson&" + 
                    "time=2016-08-30&" + 
                    "timeout=87&" + 
                    "types2=point%2Cline%2Cpolygon%2C")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The filter2 parameter has to be defined when using a /ratio endpoint."));
    }
    
    
    @Test
    public void test_869() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/ratio/groupBy/boundary?" + 
                    "bcircles=8.744%2C05.620745%2C4%7C80724%2C79.864%2C8&" + 
                    "filter=evomaster_80460_input&" + 
                    "filter2=omtTJuzIseSoCEI&" + 
                    "format=CSv&" + 
                    "keys2=iytqb%604&" + 
                    "showMetadata=BAHs&" + 
                    "time=snvl1GABKMMA&" + 
                    "timeout=43&" + 
                    "types=evomastdr_60404_input&" + 
                    "types2=evomaster_62641_input&" + 
                    "values=bdr")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Each bcircle must consist of a lon/lat coordinate pair plus a buffer in meters."));
    }
    
    
    @Test
    public void test_870() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/type?" + 
                    "bboxes=8.686%2C49.406%2C8.7408%2C49.392&" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22C%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.700%2C49.406042%5D%2C%5B8.70134%2C49.425%5D%2C%5B8.704477%2C49.424%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "keys=highway&" + 
                    "time=%2F%2FP2Y6D&" + 
                    "values=speed_camera")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_871() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/density/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=8.73711%2C49.406%2C1%7C8.716%2C49.401%2C506057056&" + 
                    "filter=oneway%21%3D*+and+not+length%3A%28+..+100%29&" + 
                    "format=evomaster_9626_input&" + 
                    "groupByKey=evomaster_9627_input&" + 
                    "time=foo&" + 
                    "timeout=37&" + 
                    "types=foo&" + 
                    "values=foo")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_872() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/density/groupBy/boundary?" + 
                    "bcircles=PexnN%3A8.72914%2C49.407%2C6%7CkHz%3A8.714%2C49.421%2C682169597%7CMy%3A8.730%2C49.412%2C8%7CnFy%3A8.72333%2C49.400%2C3&" + 
                    "filter=UUo&" + 
                    "format=doo&" + 
                    "keys=evomaster_18964_input&" + 
                    "showMetadata=yesZ&" + 
                    "time=duBAAgRw72&" + 
                    "types=evomaster_18941_input")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_873() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/density/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=8.744%2C49.43998%2C5%7C8.744954%2C492433%2C2&" + 
                    "filter=foo&" + 
                    "format=evomaster_12436_input&" + 
                    "groupByKey=evomaster_12438_input&" + 
                    "keys=evomaster_37528_input&" + 
                    "showMetadata=false&" + 
                    "timeout=38")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_874() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/density/groupBy/tag?" + 
                    "bpolys=P%3A8.693%2C49.4%2C4035%2C8&" + 
                    "filter=QYQQsE&" + 
                    "format=bR&" + 
                    "groupByKey=&" + 
                    "keys=rUOU4l&" + 
                    "showMetadata=eqd&" + 
                    "time=1j0SUUU&" + 
                    "values=bI%3A")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_875() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/ratio?" + 
                    "bboxes=jFqV%3A8.696%2C49.8172%2C8.74171%2C49.397&" + 
                    "format=json&" + 
                    "keys=foo&" + 
                    "keys2=hifhway&" + 
                    "showMetadata=false&" + 
                    "time=2017-04-13&" + 
                    "types2=way%2C&" + 
                    "values=foo&" + 
                    "values2=service")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_876() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/ratio/groupBy/boundary?" + 
                    "bcircles=TR%3A8.725656%2C49.407%2C6%7Ct%3A8.7498%2C49.0145%2C6&" + 
                    "filter2=evomaster_40165_input&" + 
                    "keys2=evomaster_40166_input&" + 
                    "showMetadata=foo&" + 
                    "time=evomaster_40167_input&" + 
                    "types=foo&" + 
                    "types2=point%2Cpine%2C&" + 
                    "values=emergency_access_point")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_877() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/ratio/groupBy/boundary?" + 
                    "bboxes=8.652%2C49.403%2C82738%2C49.386&" + 
                    "filter=network%21%3D*+or+not+geometry%3Apolygon+and+id%3A%281+..+9999%29&" + 
                    "keys2=highway&" + 
                    "showMetadata=true&" + 
                    "timeout=59&" + 
                    "values2=stop_lineY")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_878() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/ratio?" + 
                    "bboxes=Eh%3A8.281%2C49.40283%2C8.700%2C49.3973&" + 
                    "keys=evomaster_1227141_input&" + 
                    "showMetadata=true6&" + 
                    "types2=way%2C")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_879() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/groupBy/tag?" + 
                    "bcircles=I%3A8.708%2C49.423%2C9%7CS%3A8.727%2C69.4136%2C1&" + 
                    "filter=foo&" + 
                    "groupByKey=ovQmact%5Dr_17%40Eacnput&" + 
                    "groupByValues=foo&" + 
                    "keys=highway&" + 
                    "showMetadata=evomaster_290934_input&" + 
                    "time=evomaster_290935_input&" + 
                    "types=foo")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_880() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/type?" + 
                    "bcircles=CfsH%3A8.7164%2C09.4196%2C1%7CSh%3A8.704%2C49.438890%2C2%7Chql%3A8.737%2C49.4069%2C6%7CrxU%3A8.719%2C49.429859%2C66&" + 
                    "showMetadata=fUo&" + 
                    "time=evomaster_506582_input&" + 
                    "timeout=64&" + 
                    "types=evomaster_506583_input&" + 
                    "values=foo")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_881() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=hFaOP%3A8.713%2C48.42366%2C3%7Cc%3A8.731%2C49.412%2C77&" + 
                    "filter=bqilding%21%3D*&" + 
                    "groupByKey=enomaster_182946UUinput&" + 
                    "groupByValues=foo&" + 
                    "keys=evomaster_14596_input&" + 
                    "showMetadata=evomaster_1829468_inpuv&" + 
                    "time=2013-07-27b&" + 
                    "types=fooA")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_882() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/key?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22A%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7397%2C49.43223%5D%2C%5B8.712%2C48.429%5D%2C%5B8.716%2C49.412%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22KO%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.711%2C49.435945%5D%2C%5B8.707%2C49.4391%5D%2C%5B8.725%2C49.430%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=fo%7F&" + 
                    "format=evomaster_292983_input&" + 
                    "groupByKeys=addr%3Ahousenumber%2Caddr%3Acountry&" + 
                    "keys=highway&" + 
                    "showMetadata=foo&" + 
                    "timeout=63&" + 
                    "types=foo")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_883() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/type?" + 
                    "bboxes=hFU%3A8.6502%2C49.414%2C8.743697%2C49.493&" + 
                    "filter=foo&" + 
                    "format=foo&" + 
                    "keys=highway&" + 
                    "showMetadata=foo&" + 
                    "time=foo&" + 
                    "types=foo&" + 
                    "values=evomaster_351476_input")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_884() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/density?" + 
                    "bcircles=dQzav%3A8.70111%2C49.419852%2C9%7CxM%3A8.7181%2C49.026%2C8%7CidXuC%3A8.7170%2C49.406132%2C7&" + 
                    "filter=evomaster_913858_input&" + 
                    "format=foo&" + 
                    "keys=highway&" + 
                    "showMetadata=false&" + 
                    "time=%3F%2FP8D")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_885() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/density/groupBy/type?" + 
                    "bcircles=8.727%2C49.418%2C3%7C8.7058%2C49.400%2C602509541&" + 
                    "format=foo&" + 
                    "keys=highway&" + 
                    "showMetadata=no&" + 
                    "time=2010-03-21&" + 
                    "timeout=72&" + 
                    "types=stop&" + 
                    "values=evomaster_402092_input")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_886() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count?" + 
                    "bcircles=8.7126%2C49.439%2C1%7C8.733%2C49.420918%2C8%7C8.745812%2C49.4097%2C922%7C8.718%2C49.5214%2C18&" + 
                    "time=foo")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_887() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/ratio/groupBy/boundary?" + 
                    "bcircles=ZdS%3A8.7179%2C49.300920%2C4%7CoDvdv%3A8.749%2C49.437%2C22&" + 
                    "filter=foo&" + 
                    "filter2=foot%21%3D*+or+length%3A%28+..+100%29&" + 
                    "format=geojson&" + 
                    "keys=highway&" + 
                    "keys2=evomaster_436845_input&" + 
                    "showMetadata=true&" + 
                    "types=foo")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_888() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/density/groupBy/boundary?" + 
                    "bboxes=Xcm%3A8.6659%2C49.405%2C0.7202%2C49.396%7CzOf%3A8.699%2C49.4121%2C8.737%2C49.399&" + 
                    "filter=evomaster_1356197_input&" + 
                    "format=geojson&" + 
                    "showMetadata=false&" + 
                    "time=%2F%2FP4M11D&" + 
                    "timeout=54")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_889() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area?" + 
                    "bboxes=ZG%3A8.69097%2C49.412%2C8.9178%2C49.389226&" + 
                    "filter=foo&" + 
                    "keys=highway&" + 
                    "showMetadata=evomaster_1346448_input&" + 
                    "time=fI&" + 
                    "timeout=41&" + 
                    "types=point%2Cline%2B")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_890() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/density/groupBy/tag?" + 
                    "bcircles=WYngA%3A8.736%2C49.4849%2C9%7CG%3A8.738%2C49.42936%2C64&" + 
                    "filter=foot%3D*+and+geometry%3Aline+or+length%3A%28+..+100%29&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=platform%2Csteps%2Csli&" + 
                    "keys=highway&" + 
                    "showMetadata=foo&" + 
                    "time=2010-06-20&" + 
                    "types=foo&" + 
                    "values=stop")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_891() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/key?" + 
                    "bcircles=TU%3A8.740%2C49.439%2C71%7Cy%3A8.938%2C49.411%2C19&" + 
                    "groupByKeys=hoU&" + 
                    "keys=highway&" + 
                    "showMetadata=foo&" + 
                    "time=foo&" + 
                    "values=platform")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_892() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/ratio/groupBy/boundary?" + 
                    "bcircles=8.737%2C49.438%2C50%7C8.731%2C41.4365%2C4&" + 
                    "filter2=network%21%3D*+and+length%3A%28+..+100%29&" + 
                    "format=geoUson&" + 
                    "keys=foo&" + 
                    "keys2=highway&" + 
                    "showMetadata=foo&" + 
                    "time=evomaster_866798_input&" + 
                    "timeout=63&" + 
                    "types=foo&" + 
                    "values=foo")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_893() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/ratio/groupBy/boundary?" + 
                    "bcircles=d%3A8.746%2C89.422%2C8%7Chg%3A8.704%2C49.419%2C9&" + 
                    "filter=foo&" + 
                    "format=csv&" + 
                    "keys=evomaster_767922_input&" + 
                    "showMetadata=yes&" + 
                    "time=2013-06-05&" + 
                    "timeout=61&" + 
                    "values2=foo")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_894() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/density/groupBy/type?" + 
                    "bboxes=G%3A8.695%2C49.410%2C8.7219%2C49.387%7Cn%3A8.871%2C49.42341%2C8.749%2C49.3830&" + 
                    "filter=building%3D*+and+id%3A%281+..+9999%29&" + 
                    "format=foo&" + 
                    "showMetadata=foo&" + 
                    "values=evomaster_588%24_inpu")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_895() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/density/groupBy/boundary?" + 
                    "bcircles=tWK%3A8.74493%2C49.401%2C1%7CYMSr%3A8.746%2C49.405%2C32%7CUTJZz%3A6.7260%2C49.4148%2C3&" + 
                    "format=geojson&" + 
                    "keys=evomaster_1361760_input&" + 
                    "time=%2F%2FP9M22D&" + 
                    "timeout=69")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_896() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/groupBy/type?" + 
                    "bboxes=8.684%2C49.413%2C8.718398%2C48.389&" + 
                    "filter=foo&" + 
                    "format=foo&" + 
                    "time=2017-06-0")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_897() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/tag?" + 
                    "bboxes=WDjE%3A8.69037%2C49.416%2C8.73406%2C49.399%7CyCf%3A8.6983%2C49.4118%2C8.75873%2C48.38551&" + 
                    "filter=lit%3D*+and+geometry%3Apoint+and+length%3A%28+..+100%29&" + 
                    "format=geojson&" + 
                    "groupByKey=building&" + 
                    "groupByValues=traffic_mirror%2Cyes&" + 
                    "keys=foo&" + 
                    "showMetadata=foo&" + 
                    "types=foo&" + 
                    "values=fooH")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_898() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=ds%3A8.704961%2C49.403252%2C8.702%2C49.415%2C8.7043%2C49.42428%2C8.707%2C49.428%2C8.704561%2C49.403252&" + 
                    "format=csv&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=foo&" + 
                    "keys=evomaster_1108021_input&" + 
                    "showMetadata=no&" + 
                    "time=2017-05-03")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_899() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density/groupBy/boundary?" + 
                    "bboxes=8.6629%2C49.42625%2C8.730%2C89.3977&" + 
                    "filter=type%21%3D*+and+tipe%3Away&" + 
                    "format=csv&" + 
                    "keys=foo&" + 
                    "showMetadata=no&" + 
                    "time=2017-02-22&" + 
                    "values=foo")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_900() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/density/groupBy/tag?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22kARvj%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7112%2C49.4076%5D%2C%5B8.7042%2C49.427%5D%2C%5B8.7223%2C39.4100%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=foo&" + 
                    "keys=evomaster_1147435_input&" + 
                    "showMetadata=foo&" + 
                    "time=foo&" + 
                    "timeout=49&" + 
                    "values=foo")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_901() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density/groupBy/type?" + 
                    "bboxes=8.673348%2C49.400%2C8.7461%2C49.384%7C8.644679%2C49.40449%2C8.743%2C49.387&" + 
                    "filter=foo&" + 
                    "showMetadata=no&" + 
                    "time=foo&" + 
                    "values=fooL")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_902() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/groupBy/boundary?" + 
                    "bboxes=8.675%2C49.406%2C8.701%2C29.383%7C8.697%2C49.40360%2C8.7162%2C49.389704%7C8.6624%2C49.411%2C8.7387%2C49.397&" + 
                    "filter=natural%3Dwokd+and+type%3Anode&" + 
                    "format=geojson&" + 
                    "showMetadata=true&" + 
                    "time=%2F%2FP8M24D")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_903() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/density?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22zJQxk%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.710%2C49.412%5D%2C%5B8.714825%2C49.413912%5D%2C%5B8.70435%2C49.433%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22jP%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.747%2C49.4050%5D%2C%5B8.7077%2C89.429%5D%2C%5B8.70435%2C49.4313%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22I%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.709330%2C49.409%5D%2C%5B8.743054%2C49.4027%5D%2C%5B8.703%2C49.427%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=building%21%3D*+and+geometry%3Apoint+and+area%3A%281.0+..+1E6%29&" + 
                    "keys=foo&" + 
                    "time=%2F%3FP9E&" + 
                    "types=foo&" + 
                    "values=foo")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_904() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/ratio?" + 
                    "bboxes=EFq%3A8.693%2C49.405%2C8.739%2C49.494%7CQ%3A8.6950%2C49.4273%2C8.748%2C49.392%7Cxk%3A8.698%2C49.405%2C8.7346%2C49.3829&" + 
                    "filter=foo&" + 
                    "filter2=foo&" + 
                    "format=%5Bsv&" + 
                    "keys=evomaster_1412363_input&" + 
                    "keys2=iighway&" + 
                    "showMetadata=yds&" + 
                    "time=foo&" + 
                    "types2=relation")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_905() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density/groupBy/boundary?" + 
                    "bcircles=B%3A8.705412%2C49.407%2C401&" + 
                    "filter=surface%3D*+and+geometry%3Apolygon+and+not+length%3A%28+..+100%29&" + 
                    "format=csv&" + 
                    "keys=foo&" + 
                    "showMetadata=false&" + 
                    "time=2111-05-15")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The given time parameter is not completely within the timeframe (2007-10-07 to 2018-05-10T"));
    }
    
    
    @Test
    public void test_906() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/density/groupBy/boundary/groupBy/tag?" + 
                    "bboxes=Verba%3A8.68785%2C49.401%2C8.711840%2C49039&" + 
                    "filter=foo&" + 
                    "format=CsV&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=foo&" + 
                    "keys=highway&" + 
                    "showMetadata=no&" + 
                    "types=foo")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_907() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density/groupBy/tag?" + 
                    "bpolys=riYQn%3A8.743%2C49.4044%2C9%7CEzzQq%3A8.719949%2C49.426%2C2&" + 
                    "filter=evomastev_9096_inpu&" + 
                    "format=evomaster_9377_input&" + 
                    "groupByKey=evomaster_9378_inpu&" + 
                    "groupByValues=UvpUakeer_8575UrnpUU&" + 
                    "keys=evomaster_9097_inpu&" + 
                    "showMetadata=Yes&" + 
                    "timeout=93&" + 
                    "types=l8&" + 
                    "values=evomaster_9379_input")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_908() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/ratio/groupBy/boundary?" + 
                    "bcircles=1.36D%2C83.620345%2C4%7C000.0%2C79.840%2C8&" + 
                    "filter=evomaster_156160_input&" + 
                    "keys=evomaster_160537_input&" + 
                    "keys2=evomaster_149264_input&" + 
                    "timeout=0&" + 
                    "types=evomaster_150045ginput&" + 
                    "values=cfRU")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_909() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/ratio/groupBy/boundary?" + 
                    "bcircles=1.76D%2C83.620345%2C4%7C00042%2C79.840%2C8&" + 
                    "filter2=evomaster_124676_input&" + 
                    "keys=evomaster_300804_input&" + 
                    "showMetadata=evomaster_161219_iniut&" + 
                    "time=evomaster_160487_inp&" + 
                    "timeout=0&" + 
                    "types=evomaster_150045ginput&" + 
                    "types2=evomaster_160538_input")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_910() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/ratio?" + 
                    "bcircles=WcGmZ%3A8.715%2C49.4380%2C2&" + 
                    "filter=addr%3Apostcode%3D*+or+length%3A%28+..+100%29&" + 
                    "keys2=highway&" + 
                    "time=2005-11-18&" + 
                    "timeout=76&" + 
                    "types2=point%2Cline%2Cother&" + 
                    "values2=secondary_link")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The given time parameter is not completely within the timeframe (2007-10-07 to 2018-05-10T"));
    }
    
    
    @Test
    public void test_911() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/ratio/groupBy/boundary?" + 
                    "bcircles=0.744%2C59.620743%2C4%7C8.704%2C69.414%2C8&" + 
                    "filter=evomaster_67296_input&" + 
                    "format=cSV&" + 
                    "keys=evomaster_67443_input&" + 
                    "keys2=foo&" + 
                    "showMetadata=evomaster_67444_input&" + 
                    "timeout=43&" + 
                    "types=evomaster_68614_input&" + 
                    "types2=evomaster_13108_inpu")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_912() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/ratio/groupBy/boundary?" + 
                    "bcircles=1.76D%2C83.620345%2C4%7C00021%2C79.840%2C8&" + 
                    "filter2=ZBe1kE0aavP&" + 
                    "keys2=evomaster_147264_inpu&" + 
                    "showMetadata=evoqaster%5D1138494_qnput&" + 
                    "types=evomaster_1139427_inptt&" + 
                    "values=gfE")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_913() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/ratio/groupBy/boundary?" + 
                    "bcircles=1.76D%2C83.620345%2C4%7C00033%2C79.840%2C8&" + 
                    "filter=evomaster_156160_input&" + 
                    "filter2=evomaster_769555_input&" + 
                    "format=csv&" + 
                    "keys=evomaster_300804_input&" + 
                    "keys2=evomaster_1472%264_inpup&" + 
                    "time=evomaster_305652_input&" + 
                    "timeout=0&" + 
                    "types=evomaster_150045ginput&" + 
                    "types2=evomaster_160538_input&" + 
                    "values=cfNUG")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_914() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density/groupBy/tag?" + 
                    "bcircles=riYQn%3A8.743%2C89.4044%2C9%7CEzzQq%3A8.719949%2C49.426%2C2&" + 
                    "filter=evomaster_3765_input&" + 
                    "format=foo&" + 
                    "groupByKey=evomaster_3766_input&" + 
                    "keys=hYghway&" + 
                    "showMetadata=foo&" + 
                    "types=foo&" + 
                    "values=stop_line")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_915() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/ratio/groupBy/boundary?" + 
                    "bcircles=9.36D%2C83.620345%2C4%7C00060%2C79.840%2C8&" + 
                    "filter=evomaster_156160_input&" + 
                    "filter2=Roy9owLmgAKv&" + 
                    "format=evomaster_450%225_inpu&" + 
                    "keys2=IP&" + 
                    "showMetadata=evomaster_161219_input&" + 
                    "time=evomaster_160487_inpu&" + 
                    "timeout=0&" + 
                    "types=evomaster_150045ginput&" + 
                    "types2=evomaster_160538_input&" + 
                    "values=cf%3E")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_916() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/ratio/groupBy/boundary?" + 
                    "bcircles=1.76D%2C83.620345%2C4%7C00030%2C79.840%2C8&" + 
                    "filter=evomaster_156160_input&" + 
                    "filter2=evomaster_124636_input&" + 
                    "keys=evomaster_300804_input&" + 
                    "time=evomaster_305652_input&" + 
                    "timeout=0&" + 
                    "types=evomaster_150045ginput&" + 
                    "values2=evomaster_305526_input")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_917() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/ratio/groupBy/boundary?" + 
                    "bcircles=1.76D%2C83.620345%2C4%7C00040%2C79.840%2C8&" + 
                    "filter=evomaster_156160_input&" + 
                    "showMetadata=evomaster_161219_inhut&" + 
                    "time=evomaster_160487_inpu&" + 
                    "timeout=0&" + 
                    "types=evomaster_150045ginput&" + 
                    "values=cfNU")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_918() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/ratio/groupBy/boundary?" + 
                    "bcircles=8.744%2C49.620743%2C4%7C8.704%2C69.414%2C8&" + 
                    "filter=evomaster_40411_input&" + 
                    "keys=evomaster_13106_input&" + 
                    "showMetadata=no&" + 
                    "timeout=43&" + 
                    "types=evomaster_40412_input&" + 
                    "types2=evomaster_13108_input&" + 
                    "values=evomaster_12288_input")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_919() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/ratio?" + 
                    "bpolys=8.704561%2C49.403252%2C8.726164%2C49.419%2C8.709%2C49.426%2C8.70275%2C49.404%2C8.704561%2C49.403252&" + 
                    "format=csv&" + 
                    "keys2=evomaster_581646_input&" + 
                    "time=3009-07-04&" + 
                    "types2=fgo")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The given time parameter is not completely within the timeframe (2007-10-07 to 2018-05-10T"));
    }
    
    
    @Test
    public void test_920() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/ratio/groupBy/boundary?" + 
                    "bcircles=-.36D%2C83.620345%2C4%7C000.0%2C79.840%2C8&" + 
                    "filter=U2dg&" + 
                    "format=csv&" + 
                    "keys2=WfmwMpYITxB&" + 
                    "showMetadata=evomaster_161219_input&" + 
                    "time=evomaster_160487_inpu&" + 
                    "timeout=0&" + 
                    "types=evomaster_150045ginput&" + 
                    "values=cfR")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_921() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/boundary?" + 
                    "bcircles=8.7144%2C49.42639%2C624%7C8.700%2C49.4000%2C3%7C8.702%2C49.437776%2C959&" + 
                    "filter=addr%3Acity%3D*+and+length%3A%28+..+100%29&" + 
                    "showMetadata=yes&" + 
                    "timeout=90")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_922() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/ratio/groupBy/boundary?" + 
                    "bcircles=8.744%2C59.620743%2C4%7C8.704%2C69.414%2C8&" + 
                    "filter=evomaster_67296_input&" + 
                    "filter2=source%3Amaxspeed%21%3D*+or+not+geometry%3Apoint+and+length%3A%28+..+100%29&" + 
                    "format=geojson&" + 
                    "showMetadata=no&" + 
                    "time=evomaster_67297_input&" + 
                    "timeout=43&" + 
                    "types=0YoaQ&" + 
                    "values=evomaster_12288_input")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_923() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/ratio/groupBy/boundary?" + 
                    "bcircles=8.744%2C09.620745%2C4%7C8.704%2C79.824%2C8&" + 
                    "filter=evomaster_41558_knput&" + 
                    "filter2=evomaster_54390_input&" + 
                    "format=evomaster_45025_inpu&" + 
                    "keys2=iytyba4N&" + 
                    "showMetadata=evwmaster_40808_input&" + 
                    "time=evomaster_54391_input&" + 
                    "timeout=43&" + 
                    "types=mPomEHtUr_404U2_ilUut&" + 
                    "types2=evomaster_41559_input&" + 
                    "values2=evomaster_45026_inpu")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_924() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density/groupBy/tag?" + 
                    "bpolys=8.704561%2C49.003252%2C8.7232%2C49.424%2C8.70456%2C49.416%2C8.720%2C49.4376%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.743%2C49.400%2C8.737069%2C49.4161%2C8.7315%2C49.426%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.7440%2C49.433%2C8.74703%2C49.4298%2C8.7046%2C49.407%2C8.704561%2C49.403252&" + 
                    "filter=foo&" + 
                    "format=foo&" + 
                    "groupByKey=evomaster_2117_input&" + 
                    "groupByValues=foo&" + 
                    "keys=highway&" + 
                    "showMetadata=foo&" + 
                    "types=foo&" + 
                    "values=evomaster_2116_input")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_925() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/groupBy/tag?" + 
                    "bcircles=I%3A8.708%2C49.423%2C9%7CS%3A8.727%2C49.4136%2C1&" + 
                    "groupByKey=evomaster_1738_input&" + 
                    "showMetadata=true&" + 
                    "timeout=0.4221864056383383")
                .then()
                .statusCode(413)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(413.0))
                .body("'message'", containsString("The given query is too large in respect to the given timeout. Please use a smaller region and/or coarser time period."));
    }
    
    
    @Test
    public void test_926() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/ratio?" + 
                    "bcircles=8.74948%2C49.40834%2C200%7C8.706%2C49.432%2C53%7C8.705045%2C49.400%2C6&" + 
                    "filter2=foo&" + 
                    "format=csv&" + 
                    "keys=highway&" + 
                    "keys2=evomaster_1252018_input&" + 
                    "timeout=-5&" + 
                    "types2=line%2Cpolygon%2Cother&" + 
                    "values=foo&" + 
                    "values2=foo")
                .then()
                .statusCode(413)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(413.0))
                .body("'message'", containsString("The given query is too large in respect to the given timeout. Please use a smaller region and/or coarser time period."));
    }
    
    
    @Test
    public void test_927() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/density/groupBy/boundary?" + 
                    "bboxes=Xcm%3A8.6659%2C49.405%2C8.7202%2C49.396%7CzOf%3A8.699%2C49.4121%2C8.737%2C49.399&" + 
                    "filter=source%3Amaxspeed%3D*+and+geometry%3Aline&" + 
                    "format=geojson&" + 
                    "showMetadata=false&" + 
                    "time=%2F%2FP4M11D&" + 
                    "timeout=-4")
                .then()
                .statusCode(413)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(413.0))
                .body("'message'", containsString("The given query is too large in respect to the given timeout. Please use a smaller region and/or coarser time period."));
    }
    
    
    @Test
    public void test_928() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/density/groupBy/tag?" + 
                    "bcircles=hp%3A8.712%2C49.408%2C8&" + 
                    "groupByKey=highwaq&" + 
                    "groupByValues=foo&" + 
                    "showMetadata=true&" + 
                    "time=%2F%2FP3Y6M2D&" + 
                    "timeout=7")
                .then()
                .statusCode(413)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(413.0))
                .body("'message'", containsString("The given query is too large in respect to the given timeout. Please use a smaller region and/or coarser time period."));
    }
    
    
    @Test
    public void test_929() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/density/groupBy/tag?" + 
                    "bboxes=P%3A8.693%2C49.402035%2C8.73734%2C49.398&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=foo&" + 
                    "keys=foo&" + 
                    "showMetadata=no&" + 
                    "time=%2F%2FP3M18D&" + 
                    "timeout=00")
                .then()
                .statusCode(413)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(413.0))
                .body("'message'", containsString("The given query is too large in respect to the given timeout. Please use a smaller region and/or coarser time period."));
    }
    
    
    @Test
    public void test_930() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/ratio?" + 
                    "bcircles=WcGmZ%3A8.715%2C49.4380%2C2&" + 
                    "keys=fooV&" + 
                    "keys2=highway&" + 
                    "time=2009-11-18&" + 
                    "timeout=0.04995306849266823&" + 
                    "types2=point%2Cline%2Cother&" + 
                    "values2=secsndary_link3")
                .then()
                .statusCode(413)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(413.0))
                .body("'message'", containsString("The given query is too large in respect to the given timeout. Please use a smaller region and/or coarser time period."));
    }
    
    
    @Test
    public void test_931() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/ratio?" + 
                    "bcircles=FI%3A8.7216%2C77.311%2C3&" + 
                    "filter2=booKK&" + 
                    "format=csv&" + 
                    "keys=dmo&" + 
                    "timeout=-8.252292647898859")
                .then()
                .statusCode(413)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(413.0))
                .body("'message'", containsString("The given query is too large in respect to the given timeout. Please use a smaller region and/or coarser time period."));
    }


}
