import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.controller.api.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import static org.evomaster.client.java.controller.db.dsl.SqlDsl.sql;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto;
import  java.util.List;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
 * This file was automatically generated by EvoMaster on 2020-12-02T09:35:48.364+01:00[Europe/Paris]
 * <br>
 * The generated test suite contains 671 tests
 * <br>
 * Covered targets: 6270
 * <br>
 * Used time: 24h 0m 0s
 * <br>
 * Needed budget for current results: 99%
 * <br>
 * 
 */
public class EvoMasterTest_24h_seed_1_per_op {

    
    private static final SutHandler controller = new org.heigit.ohsome.ohsomeapi.EMDriver();
    private static String baseUrlOfSut;
    
    
    @BeforeClass
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    @AfterClass
    public static void tearDown() {
        controller.stopSut();
    }
    
    
    @Before
    public void initTest() {
        controller.resetStateOfSUT();
    }
    
    
    
    
    @Test
    public void test_0() throws Exception {
        
        try{
            given().accept("*/*")
                    .get(baseUrlOfSut + "/users/count/groupBy/boundary?" + 
                        "bpolys=ibDLR%3A8.704561%2C49.403252%2C8.702%2C49.422%2C8.7233%2C49.4396%2C8.7340%2C49.434%2C8.704561%2C49.403252&" + 
                        "format=json&" + 
                        "timeout=91")
                    .then();
        } catch(Exception e){
        }
    }
    
    
    @Test
    public void test_1() throws Exception {
        
        try{
            given().accept("*/*")
                    .get(baseUrlOfSut + "/users/count/density/groupBy/type?" + 
                        "bcircles=OH%3A8.740%2C49.4137%2C90%7CR%3A8.716%2C49.431%2C8%7CqC%3A8.728%2C49.433%2C26&" + 
                        "format=json")
                    .then();
        } catch(Exception e){
        }
    }
    
    
    @Test
    public void test_2() throws Exception {
        
        try{
            given().accept("*/*")
                    .post(baseUrlOfSut + "/users/count/density/groupBy/boundary?" + 
                        "bboxes=UsxMR%3A8.6996%2C49.42108%2C8.7236%2C49.386%7CHz%3A8.68666%2C49.420%2C8.70181%2C49.391%7CXc%3A8.6866%2C49.42509%2C8.7277%2C49.397%7Cfq%3A8.697755%2C49.401%2C8.738%2C49.39262&" + 
                        "format=csv&" + 
                        "showMetadata=true&" + 
                        "time=%2F%2FP6M25D&" + 
                        "timeout=64")
                    .then();
        } catch(Exception e){
        }
    }
    
    
    @Test
    public void test_3() throws Exception {
        
        try{
            given().accept("*/*")
                    .post(baseUrlOfSut + "/users/count/groupBy/boundary?" + 
                        "bcircles=A%3A8.74094%2C49.4294%2C8%7CJBc%3A8.709695%2C49.404%2C7&" + 
                        "showMetadata=yes&" + 
                        "time=%2F&" + 
                        "timeout=64")
                    .then();
        } catch(Exception e){
        }
    }
    
    
    @Test
    public void test_4() throws Exception {
        
        try{
            given().accept("*/*")
                    .get(baseUrlOfSut + "/users/count/groupBy/tag?" + 
                        "bboxes=8.697%2C49.429%2C8.741%2C49.388&" + 
                        "groupByKey=evomaster_673951_inpu&" + 
                        "groupByValues=synagogue%2Ctrack&" + 
                        "showMetadata=yes&" + 
                        "time=%2F%2FP5M7D&" + 
                        "timeout=97")
                    .then();
        } catch(Exception e){
        }
    }
    
    
    @Test
    public void test_5() throws Exception {
        
        try{
            given().accept("*/*")
                    .post(baseUrlOfSut + "/users/count/groupBy/key?" + 
                        "bboxes=y%3A8.6920%2C49.4204%2C8.715682%2C49.3990%7Cs%3A8.6786%2C49.4077%2C8.7004%2C49.3916%7Cu%3A8.650%2C49.424818%2C8.72764%2C49.3972%7CB%3A8.657%2C49.4069%2C8.736%2C49.393&" + 
                        "groupByKeys=evomaster_674114_input&" + 
                        "time=%2F%2FP3M4D&" + 
                        "timeout=49")
                    .then();
        } catch(Exception e){
        }
    }
    
    
    @Test
    public void test_6() throws Exception {
        
        try{
            given().accept("*/*")
                    .get(baseUrlOfSut + "/users/count?" + 
                        "bcircles=GJ%3A8.7236%2C49.4307%2C4%7COw%3A8.714%2C49.41607%2C50&" + 
                        "format=geojson")
                    .then();
        } catch(Exception e){
        }
    }
    
    
    @Test
    public void test_7() throws Exception {
        
        try{
            given().accept("*/*")
                    .post(baseUrlOfSut + "/users/count?" + 
                        "bcircles=DU%3A8.7477%2C49.406507%2C2%7CQZZ%3A8.713%2C49.433%2C5%7CDZtEr%3A8.726%2C49.418%2C55&" + 
                        "time=%2F%2FP1Y4D")
                    .then();
        } catch(Exception e){
        }
    }
    
    
    @Test
    public void test_8_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/type?" + 
                    "bcircles=o%3A8.737%2C39.0.930%2C38&" + 
                    "keys=fmbjwa&" + 
                    "showMetadata=foo")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_114_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/users/count/groupBy/type"));
    }
    
    
    @Test
    public void test_9_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/groupBy/tag?" + 
                    "bboxes=8.697%2C49.4.9%2C8.741%2C49.388&" + 
                    "filter=foo&" + 
                    "format=evomaster_673950_input&" + 
                    "groupByKey=anboa7A9NLOAEfii&" + 
                    "groupByValues=evomaster_679234_input&" + 
                    "keys=evomaster_674960_inpu&" + 
                    "showMetadata=yes&" + 
                    "time=%2F-P5M7D&" + 
                    "timeout=97&" + 
                    "values=alternative")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_64_createBboxes
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/users/count/groupBy/tag"));
    }
    
    
    @Test
    public void test_10_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/boundary?" + 
                    "bcircles=A%3A8.74094%2C49.4294%2C8%7CJBc%3A8.7.9695%2C49.404%2C7&" + 
                    "filter=foo&" + 
                    "keys=highway&" + 
                    "time=evomaster_683602_input&" + 
                    "timeout=64&" + 
                    "types=foo&" + 
                    "values=foo")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_114_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/users/count/groupBy/boundary"));
    }
    
    
    @Test
    public void test_11_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/density/groupBy/tag?" + 
                    "bcircles=daVZ%3A8.715256%2C49.410%2C4%7COUzYX%3A8.709%2C49.402%2C2%7Cm%3A8.732020%2C49.401%2C70%7Cg%3A8.7302%2C49.413%2C1580058951&" + 
                    "groupByKey=building&" + 
                    "groupByValues=yes%2Cchurch%2Chospital&" + 
                    "showMetadata=no&" + 
                    "time=%2F%2FP1Y2M5D")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El ángulo 417.667.689.776.152.600.000 es demasiado grande."))
                .body("'path'", containsString("/users/count/density/groupBy/tag"));
    }
    
    
    @Test
    public void test_12_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/density/groupBy/boundary?" + 
                    "bpolys=sYUh%3A8.704561%2C49.403252%2C8.730%2C49.4269%2C8.7334%2C49.43417%2C8.7045%2C49.424065%2C8.704561%2C49.403252%7CP%3A8.704561%2C49.403252%2C8.7338%2C49.432%2C8.704%2C49.4143%2C8.746%2C49.423913%2C8.704561%2C49.403252%7CjlH%3A8.704561%2C49.403252%2C8.73481%2C49.4282%2C8.704%2C49.412%2C8.704561%2C49.434749%2C8.704561%2C49.403252&" + 
                    "filter=ref%21%3D*+or+type%3Arelation+and+area%3A%281.0+..+1E6%29&" + 
                    "showMetadata=yes&" + 
                    "timeout=78")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.73 49.4269 ) and LINESTRING ( 8.7045 49.424065, 8.704561 49.403252 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/users/count/density/groupBy/boundary"));
    }
    
    
    @Test
    public void test_13_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/density?" + 
                    "bpolys=8.544%2C49.4144%2C&" + 
                    "format=fo&" + 
                    "keys=highwayZ&" + 
                    "showMetadata=foo&" + 
                    "time=foo")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_166_createBpolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Invalid number of points in LineString (found 1 - must be 0 or >= 2)"))
                .body("'path'", containsString("/users/count/density"));
    }
    
    
    @Test
    public void test_14_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count?" + 
                    "bcircles=DU%3A8.7457%2C49.4075.7%2C2%7CQZZ%3A8.713%2C49.437%2C5%7CDZxEs%3A8.726%2C49.418%2C55&" + 
                    "filter=maxspeed%21%3D*+and+geometry%3Apolygor+and%24lengsh%3A%28%1C..+100%29&" + 
                    "keys=fokm&" + 
                    "time=%2F1Q1Y4Ed%60B")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_114_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/users/count"));
    }
    
    
    @Test
    public void test_15_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count?" + 
                    "bcircles=GJ%3A8.7236%2C49.4307%2C4%7COw%3A8.714%2C49.416.7%2C50&" + 
                    "filter=highway%3D*+and+area%3A%281.0+..+1E6%29&" + 
                    "keys=foo&" + 
                    "showMetadata=fo&" + 
                    "values=foo")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_114_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/users/count"));
    }
    
    
    @Test
    public void test_16_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/ratio/groupBy/boundary?" + 
                    "bcircles=K%3A8.7.27%2C29.4333D%2C93&" + 
                    "format=csv&" + 
                    "keys=2qg3i4W&" + 
                    "keys2=highway&" + 
                    "timeout=46")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_114_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/perimeter/ratio/groupBy/boundary"));
    }
    
    
    @Test
    public void test_17_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/ratio/groupBy/boundary?" + 
                    "bboxes=8.693358%2C49.403090%2C8.75.%2C49.395363&" + 
                    "format=geojson&" + 
                    "keys=highway&" + 
                    "keys2=evomaster_2141285_input&" + 
                    "timeout=62&" + 
                    "types=foo&" + 
                    "types2=foo&" + 
                    "values2=unclassified")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_65_createBboxes
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/perimeter/ratio/groupBy/boundary"));
    }
    
    
    @Test
    public void test_18_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/ratio?" + 
                    "bboxes=hDqY%3A8..8439%2C49.416%2C8.712010%2C49.389493&" + 
                    "filter=evomaster_944408_input&" + 
                    "keys=evomaster_947281_input&" + 
                    "showMetadata=foo&" + 
                    "time=evomaster_944409_input&" + 
                    "types=mSoWXFv&" + 
                    "types2=C3lf&" + 
                    "values=fgw8&" + 
                    "values2=niJlZoU")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_63_createBboxes
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/perimeter/ratio"));
    }
    
    
    @Test
    public void test_19_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/key?" + 
                    "bcircles=8.317%2C49.8.37%2C2&" + 
                    "groupByKeys=bib%7Bela%2Cm%60yspeed&" + 
                    "keys=hiehway&" + 
                    "timeout=3&" + 
                    "types=foo&" + 
                    "values=emdTgerey%5Ea%5D_Urk_pog")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_114_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/perimeter/groupBy/key"));
    }
    
    
    @Test
    public void test_20_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/groupBy/key?" + 
                    "bboxes=J%3A8.6884%2C49.427%2C8.7483.4%2C49.381%7CW%3A8.650624%2C49.426%2C8.7413%2C49.3927&" + 
                    "filter=foi&" + 
                    "groupByKeys=%5Dddr%3Acmty0&" + 
                    "keys=hifhxay&" + 
                    "time=20%2F2%2C07-0%3D&" + 
                    "values=give_way")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_65_createBboxes
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/perimeter/groupBy/key"));
    }
    
    
    @Test
    public void test_21_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/boundary?" + 
                    "bcircles=T%3A8.7254.1%2C49.436%2C67&" + 
                    "filter=B_Jd&" + 
                    "format=geojson&" + 
                    "time=2009-10-30&" + 
                    "values=foo")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_114_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/perimeter/groupBy/boundary"));
    }
    
    
    @Test
    public void test_22_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/groupBy/boundary?" + 
                    "bcircles=B%3A8.74598%2C49.4339.%2C1%7CM%3A8.700%2C49.413%2C3&" + 
                    "format=geojson&" + 
                    "keys=highway&" + 
                    "showMetadata=foo&" + 
                    "time=foo&" + 
                    "timeout=90&" + 
                    "types=foo")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_114_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/perimeter/groupBy/boundary"));
    }
    
    
    @Test
    public void test_23_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/density/groupBy/tag?" + 
                    "bpolys=8.704561%2C49.403252%2C8.7488%2C49.4116%2C8.731%2C09.412%2C8.716%2C49.439%2C8.704561%2C49.403252&" + 
                    "filter=type%3D*&" + 
                    "format=csv&" + 
                    "groupByKey=building&" + 
                    "groupByValues=foo&" + 
                    "showMetadata=no&" + 
                    "time=2009-06-08&" + 
                    "timeout=91")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.7488 49.4116 ) and LINESTRING ( 8.731 9.412, 8.716 49.439 ) [ (8.716012586651335, 49.40541294046803, NaN) ]"))
                .body("'path'", containsString("/elements/perimeter/density/groupBy/tag"));
    }
    
    
    @Test
    public void test_24_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/density/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22oH%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.747305%2C49.408%5D%2C%5B8.700%2C49.402%5D%2C%5B8.70500%2C49.432%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22tisIw%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.73565%2C49.4207%5D%2C%5B8.70909%2C49.413%5D%2C%5B8.72289%2C49.4383%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=natural%3Dwood+and+geometry%3Apoint+or+not+id%3A%281+..+9999%29&" + 
                    "groupByKey=building&" + 
                    "groupByValues=school%2Cstation%2Ctrack")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.73565 49.4207, 8.70909 49.413 ) and LINESTRING ( 8.72289 49.4383, 8.704561 49.403252 ) [ (8.709760563492425, 49.41319440281971, NaN) ]"))
                .body("'path'", containsString("/elements/perimeter/density/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_25_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/density?" + 
                    "bpolys=dxb%3A8.704561%2C49.403252%2C8.7485%2C49.431%2C8.7023%2C49.4395%2C8.7280%2C69.42736%2C8.704561%2C49.403252&" + 
                    "keys=highwaz&" + 
                    "time=boo&" + 
                    "types=foo&" + 
                    "values=primary")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.7485 49.431, 8.7023 49.4395 ) and LINESTRING ( 8.728 69.42736, 8.704561 49.403252 ) [ (8.704602933741533, 49.4390763000692, NaN) ]"))
                .body("'path'", containsString("/elements/perimeter/density"));
    }
    
    
    @Test
    public void test_26_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/density?" + 
                    "bcircles=zQKu%3A8.74.%2C49.403%2C4&" + 
                    "filter=service%3Ddriveway+or+id%3A%281+..+9999%29&" + 
                    "format=foo&" + 
                    "showMetadata=foo&" + 
                    "timeout=6")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_114_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/perimeter/density"));
    }
    
    
    @Test
    public void test_27_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter?" + 
                    "bboxes=G%3A8.68904%2C49.4200%2C8.7132%2C49.380%7CQ%3A8.6819%2C49.4.9114%2C8.726071%2C49.397&" + 
                    "filter=foo&" + 
                    "format=evomaster_2144307_input&" + 
                    "keys=higiway&" + 
                    "showMetadata=evomaster_2144308_input&" + 
                    "time=evomaster_7237_input&" + 
                    "values=maxspeed%3Abus")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_73_createBboxes
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/perimeter"));
    }
    
    
    @Test
    public void test_28_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/ratio?" + 
                    "bboxes=KSofN%3A8..880%2C49.419%2C8.701%2C49.394%7CIyJ%3A8.6504%2C49.428%2C8.7035%2C49.394&" + 
                    "filter2=evomaster_666627_input&" + 
                    "showMetadata=foo&" + 
                    "time=2018-03-25&" + 
                    "types=foo&" + 
                    "types2=evomaster_652825_input&" + 
                    "values=evomaster_654636_input&" + 
                    "values2=foo")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_63_createBboxes
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/length/ratio"));
    }
    
    
    @Test
    public void test_29_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/type?" + 
                    "bcircles=8.723%2C49.4.349%2C1%7C8.715%2C49.416%2C6&" + 
                    "keys=evomaster_2148623_input&" + 
                    "showMetadata=faRlse&" + 
                    "time=foo&" + 
                    "timeout=50")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_114_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/length/groupBy/type"));
    }
    
    
    @Test
    public void test_30_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/groupBy/type?" + 
                    "bpolys=8.704561%2C49.403252%2C8.745%2C49.414%2C8.732%2C49.4345%2C8.724%2C49.422%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.7129%2C49.405272%2C8.730%2C49.4282%2C8.712%2C49.429%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.743466%2C49.425%2C8.701%2C49.432%2C8.704%2C49.409%2C8.704561%2C49.403252&" + 
                    "format=json&" + 
                    "keys=highway")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.745 49.414 ) and LINESTRING ( 8.704561 49.403252, 8.7129 49.405272 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/length/groupBy/type"));
    }
    
    
    @Test
    public void test_31_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/tag?" + 
                    "bcircles=8.7.8668%2C49.42156%2C9&" + 
                    "filter=foo&" + 
                    "groupByKey=buildink&" + 
                    "groupByValues=foo&" + 
                    "keys=highway&" + 
                    "showMetadata=foo&" + 
                    "types=foo&" + 
                    "values=foo")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_114_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/length/groupBy/tag"));
    }
    
    
    @Test
    public void test_32_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/groupBy/tag?" + 
                    "bcircles=8.716011%2C49.42870%2C86979371317&" + 
                    "filter=evomaster_9906_input&" + 
                    "groupByKey=evomaster_9907_input&" + 
                    "showMetadata=false&" + 
                    "time=evomaster_2370_input")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El ángulo 35.312.245.786.650.534.000.000.000.000.000.000 es demasiado grande."))
                .body("'path'", containsString("/elements/length/groupBy/tag"));
    }
    
    
    @Test
    public void test_33_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/groupBy/key?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22BJ%22%7D%2C%22geomftry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.711%2C49.41163%5D%2C%5B8.704510%2C49.427%5D%2C%5B8.741%2C49.41668%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22YZo%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.738200%2C49.401210%5D%2C%5B8.721%2C49.4180%5D%2C%5B8.711097%2C49.426%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "format=geojson&" + 
                    "groupByKeys=smoothness%2Caddr%3Apostcode%2Cturn%3Alanes&" + 
                    "keys=highway&" + 
                    "showMetadata=foo&" + 
                    "types=foo&" + 
                    "values=track")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_343_checkGeometryTypeOfFeature
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/elements/length/groupBy/key"));
    }
    
    
    @Test
    public void test_34_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=8.704561%2C49.403252%2C8.708%2C49.404425%2C8.71500%2C49.437%2C8.7042%2C49.4.4%2C8.704561%2C49.403252&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=foo&" + 
                    "keys=E+85&" + 
                    "timeout=77")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_161_createBpolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/length/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_35_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/density/groupBy/type?" + 
                    "bpolys=SwiBz%3A8.704561%2C49.403252%2C8.748%2C49.4230%2C8.7369%2C49.437%2C8.7047%2C49.416179%2C8.704561%2C49.403252%7CwifgK%3A8.704561%2C49.403252%2C8.739%2C49.4261%2C8.7429%2C49.430938%2C8.703681%2C49.416%2C8.704561%2C49.403252&" + 
                    "format=csv&" + 
                    "keys=highway&" + 
                    "time=2013-11-20&" + 
                    "values=bus_stop")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.748 49.423 ) and LINESTRING ( 8.704561 49.403252, 8.739 49.4261 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/length/density/groupBy/type"));
    }
    
    
    @Test
    public void test_36_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density/groupBy/tag?" + 
                    "bboxes=RUlq%3A8..89%2C49.406%2C8.739003%2C49.386%7CRhK%3A8.655%2C49.407532%2C8.7590%2C49.390&" + 
                    "filter=oneway%3D*&" + 
                    "format=foo&" + 
                    "groupByKey=building&" + 
                    "groupByValues=foo&" + 
                    "keys=foo&" + 
                    "showMetadata=yes&" + 
                    "time=fog&" + 
                    "values=foo")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_63_createBboxes
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/length/density/groupBy/tag"));
    }
    
    
    @Test
    public void test_37_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/density/groupBy/tag?" + 
                    "bboxes=8.652%2C49.416%2C8.711%2C49.397%7C8.6656%2C49.418%2C8.755%2C49.391%7C8.682844%2C49.429%2C8.7162%2C49.398%7C8.662%2C49.4.6%2C8.7088%2C49.39052&" + 
                    "groupByKey=bSipdgr5&" + 
                    "groupByValues=stop%2Cresidential%2Cturning_circle&" + 
                    "showMetadata=false&" + 
                    "time=2010-%2F2318&" + 
                    "timeout=6&" + 
                    "values=UtMB")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_73_createBboxes
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/length/density/groupBy/tag"));
    }
    
    
    @Test
    public void test_38_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density/groupBy/boundary?" + 
                    "bcircles=vXLLR%3A8.7218.%2C49.407%2C5%7Chi%3A8.7384%2C49.4030%2C48%7CfqB%3A8.731%2C49.4230%2C379%7CX%3A8.70791%2C49.4223%2C6&" + 
                    "format=foo&" + 
                    "keys=foo&" + 
                    "showMetadata=foo&" + 
                    "types=foo&" + 
                    "values=foo")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_114_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/length/density/groupBy/boundary"));
    }
    
    
    @Test
    public void test_39_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/density/groupBy/boundary?" + 
                    "bboxes=8.660%2C49.400.%2C8.714%2C49.398%7C8.663%2C49.427764%2C8.7052%2C49.386%7C8.6672%2C49.41576%2C8.759%2C49.392&" + 
                    "filter=evomaster_1473_input&" + 
                    "format=jsON&" + 
                    "keys=evomaster_893186_input&" + 
                    "time=f&" + 
                    "types=evom%C2%81ster_5962_input")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_64_createBboxes
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/length/density/groupBy/boundary"));
    }
    
    
    @Test
    public void test_40_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density?" + 
                    "bpolys=8.704561%2C49.4.3452%2C8.700%2C49.424%2C8.734613%2C49.429%2C8.720%2C49.407%2C8.704561%2C49.403252&" + 
                    "filter=foo&" + 
                    "format=ds&" + 
                    "keys=highway&" + 
                    "showMetadata=f%5Dlse&" + 
                    "time=foo&" + 
                    "values=steps6")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_186_createBpolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/length/density"));
    }
    
    
    @Test
    public void test_41_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/density?" + 
                    "bcircles=V%3A8.70319%2C49.416763%2C21105996463&" + 
                    "keys=highway&" + 
                    "showMetadata=true&" + 
                    "timeout=50&" + 
                    "values=primary")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El ángulo 423.647.930.160.043.000.000.000.000.000 es demasiado grande."))
                .body("'path'", containsString("/elements/length/density"));
    }
    
    
    @Test
    public void test_42_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length?" + 
                    "bboxes=AYkKt%3A8.666698%2C49.41469%2C8.7323%2C49.394%7CH%3A8.6884%2C49.421%2C8.735%2C49.39.&" + 
                    "format=json&" + 
                    "keys=foq&" + 
                    "time=2011-10-30")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_75_createBboxes
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/length"));
    }
    
    
    @Test
    public void test_43_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/ratio/groupBy/boundary?" + 
                    "bboxes=8.68.2%2C49.4124%2C8.703%2C49.396&" + 
                    "filter=evomaster_1562_input&" + 
                    "filter2=evomacter_1563_inpu&" + 
                    "format=CSv&" + 
                    "keys=evomaster_1191714_input&" + 
                    "showMetadata=evomaster_1536_input&" + 
                    "time=evomaster_1191716_input&" + 
                    "values=u&" + 
                    "values2=evomaster_1191715_input")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_63_createBboxes
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/count/ratio/groupBy/boundary"));
    }
    
    
    @Test
    public void test_44_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/ratio/groupBy/boundary?" + 
                    "bboxes=T%3A8.673%2C49.41.214%2C8.719815%2C49.392%7CROY%3A8.65122%2C49.40049%2C8.752%2C49.39&" + 
                    "filter2=op%60way%3D*&" + 
                    "keys=highway&" + 
                    "keys2=joo&" + 
                    "timeout=86&" + 
                    "types2=point%2CotheU&" + 
                    "values=evomaster_1390087_input&" + 
                    "values2=8%3D")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_64_createBboxes
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/count/ratio/groupBy/boundary"));
    }
    
    
    @Test
    public void test_45_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/ratio?" + 
                    "bpolys=Pxk%3A8.704561%2C49.403252%2C8.739%2C49.412%2C8.74281%2C49.420%2C8.743%2C49.401%2C8.704561%2C49.403252%7CNo%3A8.704561%2C49.403252%2C8.7071%2C49.4370%2C8.739%2C49.43189%2C8.7004%2C49.4125%2C8.704561%2C49.403252%7Clkcx%3A8.704561%2C49.403252%2C8.745%2C49.420500%2C8.700%2C49.414137%2C8.7472%2C49.424%2C8.704561%2C49.403252&" + 
                    "filter2=highway%21%3D*+and+type%3Away+or+id%3A%281+..+9999%29&" + 
                    "format=json&" + 
                    "types2=line%2Cpolygon%2C")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.739 49.412 ) and LINESTRING ( 8.7004 49.4125, 8.704561 49.403252 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/count/ratio"));
    }
    
    
    @Test
    public void test_46_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/groupBy/type?" + 
                    "bpolys=8.704561%2C49.403252%2C8.71475%2C49.439%2C8.730918%2C49.430%2C8.709566%2C49.406%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.74665%2C49.4273%2C8.713%2C49.4368%2C8.745%2C49.4012%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.73788%2C49.436%2C8.739%2C49.43827%2C8.74104%2C49.4247%2C8.704561%2C49.403252&" + 
                    "filter=addr%3Acity%3D*+or+not+type%3Anode+or+not+area%3A%281.0+..+1E6%29&" + 
                    "time=2011-05-21")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.71475 49.439 ) and LINESTRING ( 8.709566 49.406, 8.704561 49.403252 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/count/groupBy/type"));
    }
    
    
    @Test
    public void test_47_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/tag?" + 
                    "bboxes=vQF%3A8.655%2C49.4.73%2C8.728%2C49.389&" + 
                    "groupByKey=diUWw_yM&" + 
                    "groupByValues=tourism&" + 
                    "keys=SfkqPH&" + 
                    "showMetadata=yes&" + 
                    "time=20%2F71%2F5*3&" + 
                    "values=barriev%3D*+and+length%3A%28+..+1%2C0%2C")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_64_createBboxes
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/count/groupBy/tag"));
    }
    
    
    @Test
    public void test_48_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/groupBy/tag?" + 
                    "bboxes=j%3A8.672%2C49.403%2C8.736%2C49.397%7CR%3A8.652587%2C49.419761%2C8.7176%2C49.3926%7CJ%3A8.692034%2C49.4046%2C8.71955%2C49.391%7CdJ%3A8.65.06%2C49.417615%2C8.709%2C49.382&" + 
                    "groupByKey=garden%3Atype&" + 
                    "keys=gighsay&" + 
                    "showMetadata=foo&" + 
                    "timeout=26")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_72_createBboxes
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/count/groupBy/tag"));
    }
    
    
    @Test
    public void test_49_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/groupBy/key?" + 
                    "bboxes=D%3A8.67699%2C49.40.6%2C8.714%2C49.395&" + 
                    "filter=oneway%3D*+or+not+type%3Arelation+or+length%3A%28+..+100%29&" + 
                    "groupByKeys=%25&" + 
                    "keys=fmk&" + 
                    "showMetadata=foo&" + 
                    "time=20%2F8-06-06&" + 
                    "types=foo")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_64_createBboxes
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/count/groupBy/key"));
    }
    
    
    @Test
    public void test_50_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/boundary?" + 
                    "bcircles=D%3A8.7458%2C49.4061%2C95%7Cm%3A8.7031%2C49.4218%2C7%7CyGw%3A8.72.8%2C49.413867%2C2&" + 
                    "keys=fko&" + 
                    "timeout=5&" + 
                    "values=foo")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_114_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/count/groupBy/boundary"));
    }
    
    
    @Test
    public void test_51_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/density/groupBy/type?" + 
                    "bcircles=8.71.%2C39.015%2C5&" + 
                    "keys=Ul&" + 
                    "values=gUUf")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_114_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/count/density/groupBy/type"));
    }
    
    
    @Test
    public void test_52_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/density/groupBy/tag?" + 
                    "bcircles=8.7.93%2C07.867%2C3&" + 
                    "filter=lit%3D*+or+area%3A%281.0+..+1E6%29&" + 
                    "groupByKey=UgghyP&" + 
                    "groupByValues=hunting_stand&" + 
                    "keys=epX&" + 
                    "showMetadata=foo&" + 
                    "time=foo&" + 
                    "values=URRU")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_114_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/count/density/groupBy/tag"));
    }
    
    
    @Test
    public void test_53_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/density/groupBy/boundary/groupBy/tag?" + 
                    "bboxes=qQ%3A8.665%2C49.4.8%2C8.7220%2C49.384&" + 
                    "filter=foo&" + 
                    "format=json&" + 
                    "groupByKey=highway&" + 
                    "keys=foo&" + 
                    "time=2014-12-03&" + 
                    "values=foo")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_64_createBboxes
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/count/density/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_54_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/density/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=8.71700%2C49.4308%2C2%7C8.714%2C49.405840%2C7&" + 
                    "format=geojson&" + 
                    "groupByKey=highway&" + 
                    "keys=foo&" + 
                    "showMetadata=no&" + 
                    "timeout=37")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/utils/GroupByBoundaryGeoJsonGenerator_75_generateGroupByResultGeoJson
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Index 0 out of bounds for length 0"))
                .body("'path'", containsString("/elements/count/density/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_55_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/density/groupBy/boundary?" + 
                    "bboxes=U%3A8.691%2C49.4.5%2C8.732221%2C49.383&" + 
                    "keys=highwa&" + 
                    "time=foo&" + 
                    "values=evomaster_1642517_input")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_64_createBboxes
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/count/density/groupBy/boundary"));
    }
    
    
    @Test
    public void test_56_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/density/groupBy/boundary?" + 
                    "bboxes=W%3A8.65352%2C49.4210%2C8.756%2C49.394%7CIYsf%3A8.673%2C49.40040%2C8.710%2C49.394%7CNDG%3A8.689%2C49.421.%2C8.7307%2C49.3912&" + 
                    "filter=foo&" + 
                    "format=esU&" + 
                    "time=foo&" + 
                    "types=foo&" + 
                    "values=steps")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_73_createBboxes
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/count/density/groupBy/boundary"));
    }
    
    
    @Test
    public void test_57_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/density?" + 
                    "bboxes=SPt%3A8.671%2C49.419%2C8.715%2C49.383%7CgYy%3A8.671%2C49.403%2C8.711%2C49.381%7CPj%3A8.686%2C49.411.%2C8.745%2C49.38&" + 
                    "filter=foo&" + 
                    "keys=highway&" + 
                    "showMetadata=no&" + 
                    "time=2014-%2F4-%2F8&" + 
                    "values=evomaster_2005124_input")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_73_createBboxes
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/count/density"));
    }
    
    
    @Test
    public void test_58_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/density?" + 
                    "bboxes=8.696%2C49.42.%2C8.700%2C49.393&" + 
                    "filter=landuse%3D*+and+not+geometry%3Aline&" + 
                    "keys=fno&" + 
                    "showMetadata=false&" + 
                    "time=2008-10-05&" + 
                    "types=foo&" + 
                    "values=fooLE")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_64_createBboxes
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/count/density"));
    }
    
    
    @Test
    public void test_59_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count?" + 
                    "bcircles=8.72.5%2C49.402%2C62%7C8.718%2C49.4160%2C4&" + 
                    "filter=foo&" + 
                    "time=2008-05%2C25A")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_114_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/count"));
    }
    
    
    @Test
    public void test_60_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/ratio/groupBy/boundary?" + 
                    "bpolys=XaFqF%3A8.704561%2C49.403252%2C8.732%2C49.41525%2C8.731814%2C49.4099%2C8.70389%2C49.4150%2C8.704561%2C49.403252%7Cb%3A8.704561%2C49.403252%2C8.718%2C49.432%2C8.70370%2C49.408241%2C8.726%2C49.40421%2C8.704561%2C49.403252&" + 
                    "filter2=maxspeed%3D*+and+type%3Away&" + 
                    "keys2=highway&" + 
                    "time=2016-11-10&" + 
                    "timeout=77&" + 
                    "types2=relation&" + 
                    "values2=speed_camera")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.732 49.41525 ) and LINESTRING ( 8.70389 49.415, 8.704561 49.403252 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/area/ratio/groupBy/boundary"));
    }
    
    
    @Test
    public void test_61_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/type?" + 
                    "bcircles=sae%3A0.704%2C59.415%2C1%7CKdyKJ%3A8.7.773%2C49.839607%2C64&" + 
                    "filter=evomaster_97018_input&" + 
                    "format=csV&" + 
                    "keys=iZnzG_pbspZb&" + 
                    "showMetadata=evomaster_825S5_ipqut&" + 
                    "time=evomaster_94809_input&" + 
                    "timeout=55&" + 
                    "types=evomaster_83824_input")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_114_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/area/groupBy/type"));
    }
    
    
    @Test
    public void test_62_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/type?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22zx%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.710%2C49.416%5D%2C%5B8.7044%2C49.436%5D%2C%5B8.721%2C49.4394%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22XKyg%22%7D%2C%22geometrz%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.71104%2C49.4395%5D%2C%5B8.7018%2C49.428684%5D%2C%5B8.702%2C49.4168%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "keys=highway&" + 
                    "showMetadata=yes&" + 
                    "types=foo&" + 
                    "values=foo")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_343_checkGeometryTypeOfFeature
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/elements/area/groupBy/type"));
    }
    
    
    @Test
    public void test_63_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/tag?" + 
                    "bcircles=R%3A8.744.%2C69.51001%2C8&" + 
                    "filter=foo&" + 
                    "format=json&" + 
                    "groupByKey=information+board+4&" + 
                    "keys=TkoF&" + 
                    "types=foo&" + 
                    "values=UruU")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_114_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/area/groupBy/tag"));
    }
    
    
    @Test
    public void test_64_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/key?" + 
                    "bcircles=8.9176%2C49.4.6%2C3B&" + 
                    "format=json&" + 
                    "groupByKeys=tracktype&" + 
                    "keys=highwa%7E&" + 
                    "showMetadata=true&" + 
                    "timeout=65&" + 
                    "values=elevator")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_114_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/area/groupBy/key"));
    }
    
    
    @Test
    public void test_65_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/key?" + 
                    "bcircles=YdE%3A8.71170%2C48.411.91%2C6&" + 
                    "format=foo&" + 
                    "groupByKeys=evomaster_11082ginput&" + 
                    "keys=foo&" + 
                    "values=foo")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_114_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/area/groupBy/key"));
    }
    
    
    @Test
    public void test_66_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=nk%3A8.7.1070%2C49.428%2C7%7CAJ%3A8.70608%2C49.405%2C92&" + 
                    "filter=foo&" + 
                    "groupByKey=building&" + 
                    "groupByValues=demolished%2Cgive_way&" + 
                    "showMetadata=true&" + 
                    "timeout=48&" + 
                    "values=cicleway")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_114_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/area/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_67_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=T%3A8.738688%2C49.412%2C2%7CXm%3A8.7180%2C49.427%2C2%7CX%3A8.720%2C49.414%2C5%7CXpBdd%3A8.718551%2C49.402%2C693560199&" + 
                    "format=cSv&" + 
                    "groupByKey=evomaster_46718_input&" + 
                    "groupByValues=evomQster_46640_input&" + 
                    "keys=highway&" + 
                    "showMetadata=evomaster_46567_input&" + 
                    "time=2012-10-21&" + 
                    "types=foo&" + 
                    "values=evomaster_46641_input")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El ángulo 574.467.217.607.427.390 es demasiado grande."))
                .body("'path'", containsString("/elements/area/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_68_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/boundary?" + 
                    "bcircles=WB%3A9.937%2C490410%2C7&" + 
                    "keys=foo&" + 
                    "showMetadata=n")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( -168.75000131419932 89.99993695040146, -157.500012477359 89.99993695040295 ) and LINESTRING ( 168.75002073066628 89.99993695040571, -179.99999010157157 89.9999369504024 ) [ (-160.26597754110682, 89.99993695040259, NaN) ]"))
                .body("'path'", containsString("/elements/area/groupBy/boundary"));
    }
    
    
    @Test
    public void test_69_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/boundary?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22l%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.724%2C49.430%5D%2C%5B8.7485%2C49.4042%5D%2C%5B8.731%2C49.426%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22N%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7498%2C49.4122%5D%2C%5B8.7401%2C49.4147%5D%2C%5B8.7047%2C49.400%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=foo&" + 
                    "format=csv&" + 
                    "showMetadata=foo&" + 
                    "time=foo&" + 
                    "types=foo")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.742309940506015 49.4107185116304 ) and LINESTRING ( 8.738973344483968 49.41423215152301, 8.7047 49.4 ) [ (8.719780883182702, 49.40626240064367, NaN) ]"))
                .body("'path'", containsString("/elements/area/groupBy/boundary"));
    }
    
    
    @Test
    public void test_70_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/density/groupBy/type?" + 
                    "bpolys=zOt%3A8.704561%2C49.403252%2C8.722%2C49.437%2C8.7151%2C49.4368%2C8.74621%2C49.400%2C8.704561%2C49.403252%7CEd%3A8.704561%2C49.403252%2C8.719%2C49.4068%2C8.713%2C49.429%2C8.74790%2C49.4126%2C8.704561%2C49.403252&" + 
                    "filter=lit%3D*+and+type%3Anode+and+length%3A%28+..+100%29&" + 
                    "showMetadata=true&" + 
                    "timeout=62")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.722 49.437 ) and LINESTRING ( 8.704561 49.403252, 8.719 49.4068 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/area/density/groupBy/type"));
    }
    
    
    @Test
    public void test_71_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density/groupBy/tag?" + 
                    "bcircles=8.738%2C49.4.52%2C9&" + 
                    "format=csv&" + 
                    "groupByKey=5&" + 
                    "groupByValues=yes%2CrsofW&" + 
                    "keys=foo&" + 
                    "showMetadata=foo&" + 
                    "values=fom")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_114_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/area/density/groupBy/tag"));
    }
    
    
    @Test
    public void test_72_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/density/groupBy/tag?" + 
                    "bpolys=DNA%3A8.704561%2C49.403252%2C8.710%2C49.4010%2C8.737%2C49.43465%2C8.719%2C49.423%2C8.704561%2C49.403252%7CsZzG%3A8.704561%2C49.403252%2C8.706%2C49.4164%2C8.705%2C49.409%2C8.705%2C49.40713%2C8.704561%2C49.403252&" + 
                    "filter=barrier%3D*&" + 
                    "format=json&" + 
                    "groupByKey=highway&" + 
                    "time=2007-12-31&" + 
                    "timeout=31")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.71 49.401 ) and LINESTRING ( 8.704561 49.403252, 8.706 49.4164 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/area/density/groupBy/tag"));
    }
    
    
    @Test
    public void test_73_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/density/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=f%3A8.7329.%2C49.434%2C0&" + 
                    "filter=foo&" + 
                    "format=json&" + 
                    "groupByKey=hiijway&" + 
                    "groupByValues=noo&" + 
                    "keys=highway&" + 
                    "time=foo&" + 
                    "timeout=73")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_114_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/area/density/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_74_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/density?" + 
                    "bpolys=8.704561%2C49.403252%2C8.705%2C49.437415%2C8.718%2C49.431%2C8.731%2C49.435%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.745%2C49.412%2C8.701559%2C49.4312%2C8.73866%2C49.40699%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.71510%2C49.4357%2C8.706%2C49.401%2C8.70456%2C49.411%2C8.704561%2C49.403252&" + 
                    "filter=landuse%3D*&" + 
                    "time=2014-02-03")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.705 49.437415 ) and LINESTRING ( 8.706 49.401, 8.70456 49.411 ) [ (8.704652324274532, 49.41035885920464, NaN) ]"))
                .body("'path'", containsString("/elements/area/density"));
    }
    
    
    @Test
    public void test_75_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/groupBy/type?" + 
                    "bpolys=9%2C0&" + 
                    "format=cSV&" + 
                    "keys=g%2CdBQO&" + 
                    "showMetadata=b%2BHQ0&" + 
                    "timeout=-224.80213199436244&" + 
                    "types=b4D9ty&" + 
                    "values=N7q2hp5COBk%2FOlx")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_166_createBpolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Invalid number of points in LineString (found 1 - must be 0 or >= 2)"))
                .body("'path'", containsString("/users/count/groupBy/type"));
    }
    
    
    @Test
    public void test_76_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/ratio?" + 
                    "bpolys=Pxk%3A8.704561%2C49.403252%2C8.739%2C49.412%2C8.74281%2C49.420%2C8.743%2C49.401%2C8.704561%2C49.403252%7CNo%3A8.704561%2C49.403252%2C8.7071%2C49.4370%2C8.739%2C49.43189%2C8.7004%2C49.4125%2C8.704561%2C49.403252%7Clkcx%3A8.704561%2C49.403252%2C8.745%2C49.420500%2C8.700%2C49.414137%2C8.7472%2C49.424%2C8.704561%2C49.40325&" + 
                    "filter2=evomaster_28261_input&" + 
                    "format=evomaster_28262_input&" + 
                    "keys=foo&" + 
                    "keys2=foo&" + 
                    "showMetadata=evomaster_57783_input&" + 
                    "types=evomaster_57784_input&" + 
                    "types2=R2pCrM&" + 
                    "values=foo&" + 
                    "values2=evomaster_28263_input")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.7071 49.437 ) and LINESTRING ( 8.739 49.43189, 8.7004 49.4125 ) [ (8.705447523163803, 49.415035530418294, NaN) ]"))
                .body("'path'", containsString("/elements/count/ratio"));
    }
    
    
    @Test
    public void test_77_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/tag?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22IT%22%7D%2C%22geometry%22%3A%7B%22typd%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.710%2C49.408%5D%2C%5B8.739%2C49.41665%5D%2C%5B8.7474%2C49.438%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "format=json&" + 
                    "groupByKey=evomaster_61736_input&" + 
                    "groupByValues=hospital%2Cprimary_link&" + 
                    "keys=evomaster_61737_input&" + 
                    "showMetadata=foo&" + 
                    "timeout=100&" + 
                    "values=primary_link")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_343_checkGeometryTypeOfFeature
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/elements/area/groupBy/tag"));
    }
    
    
    @Test
    public void test_78_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/density/groupBy/type?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22CI%22%7D%2C%22gfometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.74450%2C49.403%5D%2C%5B8.701%2C49.429%5D%2C%5B8.701%2C49.432%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=lit%3D*+or+not+type%3Anode+or+length%3A%28+..+100%29&" + 
                    "format=csv&" + 
                    "keys=evomaster_72886_input&" + 
                    "time=KRrOcfCduuxPp%C2%8APE")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_343_checkGeometryTypeOfFeature
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/users/count/density/groupBy/type"));
    }
    
    
    @Test
    public void test_79_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/density/groupBy/type?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22featsres%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22CI%22%7D%2C%22gfometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.74450%2C49.403%5D%2C%5B8.701%2C49.429%5D%2C%5B8.701%2C49.432%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=evomaster_111926_input&" + 
                    "format=csv&" + 
                    "keys=evomaster_72886_input&" + 
                    "showMetadata=foo&" + 
                    "time=KRrKcfCduuxPpzPE&" + 
                    "timeout=81&" + 
                    "types=wUzWqRGdlfpKVOq8&" + 
                    "values=evomaster_111927_input")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_237_createGeometryFromGeoJson
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/users/count/density/groupBy/type"));
    }
    
    
    @Test
    public void test_80_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/density?" + 
                    "bcircles=V%3A8.70319%2C05.40.343%2C2%2F105996463&" + 
                    "format=evomaster_13164_input&" + 
                    "keys=5SLfV&" + 
                    "time=HGMPenqPNZr&" + 
                    "types=HrT0q7zTHEh&" + 
                    "values=evomaster_200700_input")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_114_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/length/density"));
    }
    
    
    @Test
    public void test_81_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=cFe%3A8.704561%2C49.403252%2C8.708%2C49.418%2C8.7425%2C49.424682%2C8.704%2C49.403153%2C8.704561%2C49.403252%7CiN%3A8.704561%2C49.403252%2C8.716%2C49.403%2C8.741%2C49.427%2C8.743607%2C49.420%2C8.704561%2C49.4.3252%7CJr%3A8.704561%2C49.403252%2C8.70359%2C49.435%2C8.7469%2C49.414%2C8.70488%2C49.422%2C8.704561%2C49.403252&" + 
                    "groupByKey=evomaster_206556_input&" + 
                    "keys=foo&" + 
                    "showMetadata=evomaster_219670_input&" + 
                    "time=evomaster_43032_input&" + 
                    "values=foo")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_161_createBpolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/area/density/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_82_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/density/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22oH%22%7D%2C%22gemmetry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.747305%2C49.408%5D%2C%5B8.700%2C49.402%5D%2C%5B8.70500%2C49.432%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22tisIw%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.70%2C561%2C49.403252%5D%2C%5B8.73565%2C49.4207%5D%2C%5B8.70909%2C49.413%5D%2C%5B8.72289%2C49.4383%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=evomaster_141219_input&" + 
                    "format=foo&" + 
                    "groupByKey=e&" + 
                    "groupByValues=evomaster_2182%19_input&" + 
                    "showMetadata=JO&" + 
                    "time=evomaster_2A830_input&" + 
                    "values=goo")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_343_checkGeometryTypeOfFeature
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/elements/perimeter/density/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_83_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=q%3A8.704561%2C49.403252%2C8.700587%2C49.422%2C8.702%2C49.417%2C8.7216%2C49.417%2C8.704561%2C49.403252%7ClN%3A8.704561%2C49.403252%2C8.726%2C49.4243%2C8.7465%2C49.40504%2C8.7453%2C49.40630%2C8.704561%2C49.403252%7CV%3A8.704561%2C49.403252%2C8.7343%2C49.400%2C8.704%2C49.4115%2C8.70892%2C49.418%2C8.704561%2C49.40325&" + 
                    "filter=iTtzcpb5KT3UoPxL&" + 
                    "format=csv&" + 
                    "groupByKey=dFphdgr&" + 
                    "groupByValues=evomaster_297017_input&" + 
                    "keys=evomaster_297146_input&" + 
                    "showMetadata=evomaster_297015_input&" + 
                    "timeout=0.07303196879989804&" + 
                    "types=foo&" + 
                    "values=evomaster_297018_input")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.726 49.4243, 8.7465 49.40504 ) and LINESTRING ( 8.7453 49.4063, 8.704561 49.403252 ) [ (8.745169287732743, 49.406290220403285, NaN) ]"))
                .body("'path'", containsString("/elements/length/density/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_84_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/tag?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22feetures%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22IT%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.710%2C49.408%5D%2C%5B8.739%2C49.41665%5D%2C%5B8.7474%2C49.438%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=evomaster_313418_input&" + 
                    "format=evomaster_61719_input&" + 
                    "groupByKey=evomaster_61720_input&" + 
                    "groupByValues=evonaster_61947_input&" + 
                    "keys=evomaster_61948_input&" + 
                    "timeout=100&" + 
                    "types=evomaster_313419_input&" + 
                    "values=evom_ster_21721_input")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_237_createGeometryFromGeoJson
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/elements/area/groupBy/tag"));
    }
    
    
    @Test
    public void test_85_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density?" + 
                    "bpolys=%7B%22lype%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22izZ%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Pnlygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.720%2C49.40159%5D%2C%5B8.70395%2C49.434%5D%2C%5B8.73214%2C49.435%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22p%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7335%2C49.431%5D%2C%5B8.746%2C49.4290%5D%2C%5B8.70444%2C49.4141%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=evomaster_368623_input&" + 
                    "format=CsV&" + 
                    "time=evomaster_249A87_input&" + 
                    "types=evomaster_249986_input&" + 
                    "values=evomaster_21401_inhut")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_233_createGeometryFromGeoJson
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/elements/area/density"));
    }
    
    
    @Test
    public void test_86_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22featureq%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22izZ%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Pnlygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.720%2C49.40159%5D%2C%5B8.70395%2C49.434%5D%2C%5B8.73214%2C49.435%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22p%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7335%2C49.431%5D%2C%5B8.746%2C49.4290%5D%2C%5B8.70444%2C49.4141%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=foo&" + 
                    "format=evomaster_249903_input&" + 
                    "keys=highway&" + 
                    "showMetadata=evomaster_369002_input&" + 
                    "time=evomaster_250161_input&" + 
                    "timeout=49&" + 
                    "types=evomaster_369003_input&" + 
                    "values=evomaster_21401_input")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_237_createGeometryFromGeoJson
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/elements/area/density"));
    }
    
    
    @Test
    public void test_87_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/groupBy/type?" + 
                    "bpolys=8.704561%2C49.403252%2C8.704%2C49.613%2C8.739%2C49.4230%2C8.707%2C49.4164%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.74100%2C492437480%2C8.7464%2C49.40977%2C8.7464%2C49.430%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.726%2C49.419%2C8.743%2C49.426%2C8.734317%2C49.426%2C8.704561%2C4&" + 
                    "format=evomaster_2145889_input&" + 
                    "showMetadata=eycldwczW&" + 
                    "time=V6wO%7CvNDmN&" + 
                    "types=fqk")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.741 4.9243748E8, 8.7464 49.40977 ) and LINESTRING ( 8.7464 49.43, 8.738626043627942 49.42503004887689 ) [ (8.746399999999777, 49.42999999999986, NaN) ]"))
                .body("'path'", containsString("/elements/perimeter/groupBy/type"));
    }
    
    
    @Test
    public void test_88_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/key?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22klWEK%22%7D%2C%22weometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.745%2C49.40444%5D%2C%5B8.7341%2C49.426%5D%2C%5B8.7019%2C49.41989%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22CV%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.734%2C49.4263%5D%2C%5B8.7070%2C49.424%5D%2C%5B8.71570%2C49.4305%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=LtLQILyv&" + 
                    "format=foo&" + 
                    "groupByKeys=evomaster_56126_input&" + 
                    "keys=evomaster_377590_input&" + 
                    "time=eoo&" + 
                    "types=foo&" + 
                    "values=evomaster_8872_input")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_343_checkGeometryTypeOfFeature
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/elements/count/groupBy/key"));
    }
    
    
    @Test
    public void test_89_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=8.704561%2C49.403252%2C8.704%2C49.4246%2C8.706%2C49.400%2C8.70853%2C49.414%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.72565%2C49.434%2C8.7289%2C49.438%2C8.71336%2C49.4145%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.7426%2C49.4106%2C8.7042%2C49.438%2C8.704%2C59.4351%2C8.704561%2C4&" + 
                    "filter=CsV&" + 
                    "format=CsV&" + 
                    "groupByKey=hWST5uz&" + 
                    "groupByValues=evomaoter_549273_innyv&" + 
                    "keys=rTlYDOjT&" + 
                    "showMetadata=-31.6595563451409&" + 
                    "timeout=-767.9432770338921&" + 
                    "types=evolaster_472591_jnpu&" + 
                    "values=2Bj9RwObIZs2TS")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704 49.4246, 8.705611129971562 49.404783101349786 ) and LINESTRING ( 8.70853 49.414, 8.704561 49.403252 ) [ (8.705523667418205, 49.40585889075608, NaN) ]"))
                .body("'path'", containsString("/elements/count/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_90_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/ratio?" + 
                    "bcircles=8.755%2C74.4110%2C7%7C8.843%2C67.6.9%2C1%7C8.748%2C59*686%2C%3A73%3B91%2F381%7C5.768%2C2%3A.029%2C5&" + 
                    "filter=knTPBug&" + 
                    "filter2=ewikeuubr%60-4%3B08a%C2%87ps&" + 
                    "keys=dXkzh9B&" + 
                    "keys2=ug%5B&" + 
                    "showMetadata=eiScip%60&" + 
                    "time=gd&" + 
                    "types2=fXozk9DlgI&" + 
                    "values=h%3ALXMQMfpfdd8OJ&" + 
                    "values2=Wbler%7B")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_114_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/perimeter/ratio"));
    }
    
    
    @Test
    public void test_91_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/boundary?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22l%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.724%2C49.430%5D%2C%5B8.7485%2C49.4042%5D%2C%5B8.731%2C49.426%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22N%22%7D%2C%22geometry%22%3A%7B%22tYpe%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7498%2C49.4122%5D%2C%5B8.7401%2C49.4147%5D%2C%5B8.7047%2C49.400%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=euomaster_396%4095_input&" + 
                    "format=csv&" + 
                    "keys=evomaster_512518_input&" + 
                    "time=&" + 
                    "types=evomaster_506024_input&" + 
                    "values=foo")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_343_checkGeometryTypeOfFeature
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/elements/area/groupBy/boundary"));
    }
    
    
    @Test
    public void test_92_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/groupBy/type?" + 
                    "bpolys=8.704561%2C49.403252%2C8.71475%2C49.439%2C8.730918%2C49.430%2C8.709566%2C49.406%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.74665%2C49.4273%2C8.713%2C49.4368%2C8.745%2C49.4012%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.73788%2C49.436%2C8.739%2C49.43827%2C8.74104%2C49.4247%2C8.704561%2C49.403&" + 
                    "filter=MNihOOia&" + 
                    "format=evomaster_1610730_input&" + 
                    "showMetadata=fok&" + 
                    "time=2011-05-21&" + 
                    "values=fwo")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.709768043015337 49.40622709968003, 8.74665 49.4273 ) and LINESTRING ( 8.725045575144334 49.423399297651926, 8.745 49.4012 ) [ (8.730059776593755, 49.41782099853945, NaN) ]"))
                .body("'path'", containsString("/elements/count/groupBy/type"));
    }
    
    
    @Test
    public void test_93_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/density/groupBy/boundary?" + 
                    "bpolys=sYUh%3A8.704561%2C49.403252%2C8.730%2C49.4269%2C8.7334%2C49.43417%2C8.7045%2C49.424065%2C8.704561%2C49.403252%7CP%3A7.704561%2C49.403252%2C8.7338%2C49.432%2C8.704%2C49.4143%2C8.746%2C49.423913%2C8.704561%2C49.403252%7CjlH%3A8.704561%2C49.4.3252%2C8.73481%2C49.4282%2C8.704%2C49.412%2C8.704561%2C49.434749%2C8.704561%2C49.403252&" + 
                    "filter=evomaster_2041366_input&" + 
                    "format=evomaster_1321511_input&" + 
                    "keys=evomaster_1321512_input&" + 
                    "showMetadata=ZcLH95l1Kq2tbL&" + 
                    "time=evomaster_47381_input&" + 
                    "timeout=74&" + 
                    "types=evomaster_492628_input&" + 
                    "values=evomaster_47382_input")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_161_createBpolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/users/count/density/groupBy/boundary"));
    }
    
    
    @Test
    public void test_94_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/density/groupBy/boundary?" + 
                    "bpolys=sYUl%3A8.704561%2C49.403252%2C8.730%2C49.4269%2C8.7334%2C49.43417%2C8.7045%2C49.424065%2C8.704561%2C49.403252%7CP%3A7.704561%2C49.403252%2C8.7338%2C49.432%2C8.704%2C49.4143%2C8.746%2C49.423913%2C8.704561%2C49.403352%7CjlH%3A8.704561%2C49.4.3252%2C8.73481%2C49.4282%2C8.704%2C49.212%2C8%2F702561%2C49.434749%2C82704561%2C4&" + 
                    "filter=sYUh%3A8.704561%2C49.403252%2C8.730%2C49.4269%2C8.7334%2C49.43417%2C8.7045%2C49.424065%2C8.704561%2C49.403252%7CP%3A7.704561%2C49.403252%2C8.7334%2C49.433%288.704%2C49.4143%2C8.%3B46%2C49.423913%2C8.704561%2C49.403252%7CjlH%3A8.704581%2C49%2F4.3252%2C8.73481%2C4%3B.4282%2C8.704%2C49.512%2C8.%3B04561%2C49.434749%2C8.704561%2C49.403&" + 
                    "format=XD&" + 
                    "showMetadata=YaLH95l0Go%2Ftq&" + 
                    "time=23RlK%5E54Pb2Ks&" + 
                    "types=yY0PgyR&" + 
                    "values=sYUh%3A8.704563%2C49.40%2F252%2C8.730%2C45.4269%2C8.7334%2C49.43417%2C8.7045%2C49.424065%2C8.704561%2C49.403252%7CP%3A7.704561%2C49.803252%2C8.7334%2C49.432%288.704%2C49.4143%2C8.346%2C49.623913%2C8.704561%2C49.403252%7CjlH%3A8.704581%2C49.4.3252%2C8.73481%2C4%3B.4282%2C8.704%2C49.411%2C8.704561%2C49.474749%2C8.704561%2C49.403")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_186_createBpolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/users/count/density/groupBy/boundary"));
    }
    
    
    @Test
    public void test_95_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/tag?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22bUpqi%22%7D%2C%22_eometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.71053%2C49.432613%5D%2C%5B8.723157%2C49.413%5D%2C%5B8.703875%2C49.406762%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22CNkUC%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7381%2C49.414583%5D%2C%5B8.701%2C49.438%5D%2C%5B8.711%2C49.436%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22U%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.704375%2C49.403638%5D%2C%5B8.70457%2C49.43468%5D%2C%5B8.70495%2C49.417%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "format=&" + 
                    "groupByKey=evomaster_512356_input&" + 
                    "groupByValues=garage%2Cpedfstrian&" + 
                    "showMetadata=evomaster_512014_input&" + 
                    "time=evomaster_126553_input&" + 
                    "values=foo")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_343_checkGeometryTypeOfFeature
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/elements/perimeter/groupBy/tag"));
    }
    
    
    @Test
    public void test_96_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22tyqe%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22ijN%22%7D%2C%22geometry%22%3A%7B%22tyne%22%3A%22Multi%5Eo%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.320%2C49.40159%5D%2C%5B8.70395%2C49.434%5D%2C%5B8.73214%2C49.435%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22p%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordijates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7335%2C49.431%5D%2C%5B8.746%2C49.4290%5D%2C%5B8.70444%2C49.4141%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "format=CsV&" + 
                    "keys=f%7Bomasupqd-%3D3076.&" + 
                    "time=if&" + 
                    "timeout=&" + 
                    "types=LCt4%5CE%28p%7CP%29%28b%7CB%29%28r%7CR%29%5CQ69VCAHmB")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_343_checkGeometryTypeOfFeature
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/elements/area/density"));
    }
    
    
    @Test
    public void test_97_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/groupBy/type?" + 
                    "bpolys=8.704561%2C49.403252%2C8.704%2C49.412%2C8.739%2C49.4230%2C8.707%2C49.4164%2C8.704561%2C49.403252%7C8.704561%2C49.4.3252%2C8.74100%2C49.437480%2C8.7464%2C49.40977%2C8.7464%2C49.410%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.726%2C49.419%2C8.743%2C49.426%2C8.734317%2C49.426%2C8.704561%2C49.40325&" + 
                    "format=json&" + 
                    "showMetadata=evomaster_538586_input&" + 
                    "time=evomaster_128929_input&" + 
                    "timeout=38&" + 
                    "types=foo&" + 
                    "values=cycleway")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_186_createBpolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/perimeter/groupBy/type"));
    }
    
    
    @Test
    public void test_98_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/groupBy/tag?" + 
                    "bboxes=8..97%2C49.429%2C8.741%2C49.388&" + 
                    "groupByKey=evomaster_711643_input&" + 
                    "groupByValues=synagogue%2Ctrack&" + 
                    "time=%2F%2FP5M7D&" + 
                    "timeout=97&" + 
                    "values=evomaster_711644_input")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_63_createBboxes
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/users/count/groupBy/tag"));
    }
    
    
    @Test
    public void test_99_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/ratio?" + 
                    "bpolys=Pxk%3A8.704561%2C49.403252%2C8.739%2C49.412%2C8.74281%2C49.420%2C8.743%2C49.401%2C8.704561%2C49.403252%7CNo%3A8.704561%2C49.403252%2C8.7071%2C49.4370%2C8.739%2C49.43189%2C8.7004%2C49.41.5%2C8.704561%2C49.403252%7Clkcx%3A8.704561%2C49.403252%2C8.745%2C49.420500%2C8.700%2C49.414137%2C8.7472%2C49.424%2C8.704561%2C49.403252&" + 
                    "filter2=highway%21%3D*+and+type%3Away+or+id%3A%281+..+9999%29&" + 
                    "keys=bSczkR&" + 
                    "keys2=evomaster_41140_input&" + 
                    "showMetadata=evomaster_121816_input&" + 
                    "time=hoo&" + 
                    "types=evomaster_750644_input&" + 
                    "types2=evoma%7Bter_2862_input&" + 
                    "values=foo&" + 
                    "values2=evomaster_28365_input")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_161_createBpolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/count/ratio"));
    }
    
    
    @Test
    public void test_100_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/tag?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22featurgs%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22bUpqi%22%7D%2C%22_eometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.71053%2C49.432613%5D%2C%5B8.723157%2C49.413%5D%2C%5B8.703875%2C49.406762%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22CNkUC%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7381%2C49.414583%5D%2C%5B8.701%2C49.438%5D%2C%5B8.711%2C49.436%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22U%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.704375%2C49.403638%5D%2C%5B8.70457%2C49.43468%5D%2C%5B8.70495%2C49.417%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "format=&" + 
                    "groupByKey=evomaster_527434_input&" + 
                    "groupByValues=evomaster_849257_input&" + 
                    "keys=evomasver_116552_inpu&" + 
                    "showMetadata=evomastez_512014_input&" + 
                    "time=nu99WTlZwi&" + 
                    "values=evomaster_849258_input")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_237_createGeometryFromGeoJson
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/elements/perimeter/groupBy/tag"));
    }
    
    
    @Test
    public void test_101_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/ratio/groupBy/boundary?" + 
                    "bpolys=8.704561%2C49.403252%2C8.720954%2C49.4182%2C8.700584%2C49.405%2C8.743164%2C49.41856%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.747%2C49.4290%2C8.7315%2C49.429%2C8.741%2C49.4219%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.7307%2C49.406%2C8.748%2C49.413%2C8.742%2C49.4285%2C8.704561%2C49.&" + 
                    "format=CSv&" + 
                    "keys=evqTUUUev%5BU5V825_UnpVt&" + 
                    "keys2=evomaster_890922_input&" + 
                    "showMetadata=enp&" + 
                    "time=fso&" + 
                    "types=foo&" + 
                    "values=fsg&" + 
                    "values2=fro")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.720954 49.4182 ) and LINESTRING ( 8.700584 49.405, 8.715019099444662 49.409596992683646 ) [ (8.70964112674527, 49.407884326882716, NaN) ]"))
                .body("'path'", containsString("/elements/area/ratio/groupBy/boundary"));
    }
    
    
    @Test
    public void test_102_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter?" + 
                    "bpolys=adc%3A7.7.4561%2C493403250%2C80700%2C59%2F4031%2C8%2870420%2C4%3D.416%2C7%2C750%2C49.5280%2C8.%3B0456-%2B49.403252%7CbTO%3A8.7%2F0561%2C47.403253%2C80709.49.8087%2C8.7049%2C49.410%2C8.7253&" + 
                    "format=lLvo&" + 
                    "keys=%60v&" + 
                    "showMetadata=ct&" + 
                    "time=edc%3A8.7-4561%2C49.403250%2C8-%3B00%2C59%2F4%2F33%2C8*70430%2C49.41207.750%2C49.5280%2C8.%3B04561%2C49.403251%7BfTO%3A8.7%2F4561%2C48.403253%2C8.709%2B49.8089%2C8.7069%2C65.410%2C8.7273%2C49.424%2C8.74458&" + 
                    "types=")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_186_createBpolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/perimeter"));
    }
    
    
    @Test
    public void test_103_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=cFe%3A8.704561%2C49.403252%2C8.708%2C49.418%2C8.7425%2C49.424682%2C8.704%2C49.403153%2C8.704561%2C49.403252%7CiN%3A8.704561%2C49.403252%2C8.716%2C49.403%2C8.741%2C49.427%2C8.743607%2C49.420%2C8.704561%2C49.403252%7CJr%3A8.704561%2C49.403252%2C8.70359%2C49.435%2C8.7469%2C49.414%2C8.70488%2C49.422%2C8.704561%2C49.40325&" + 
                    "filter=3MyFYf8dkprG95JY&" + 
                    "groupByKey=evomaster_219779_input&" + 
                    "groupByValues=evomaster_889980_input&" + 
                    "keys=oOrIX&" + 
                    "time=47Ek9TWbb3y&" + 
                    "types=foo&" + 
                    "values=foo")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.708 49.418 ) and LINESTRING ( 8.733123874019828 49.41943891905903, 8.704 49.403153 ) [ (8.704618573947648, 49.40349890333815, NaN) ]"))
                .body("'path'", containsString("/elements/area/density/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_104_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=cFe%3A8.704561%2C49.403252%2C8.708%2C49.418%2C8.7425%2C49.424682%2C8.704%2C49.403153%2C8.704561%2C49.403252%7CiN%3A8.704561%2C49.403252%2C8.716%2C49.403%2C8.741%2C49.427%2C8.743607%2C49.420%2C8.704561%2C49.4.3252%7CJr%3A8.704561%2C49.403252%2C8.70359%2C49.435%2C8.7469%2C49.414%2C8.70488%2C49.422%2C8.704561%2C49.40325&" + 
                    "filter=evomaster_43000_input&" + 
                    "groupByKey=3%3CcBQ&" + 
                    "groupByValues=foo&" + 
                    "keys=foo&" + 
                    "time=yR&" + 
                    "types=fon&" + 
                    "values=fo")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_176_createBpolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/area/density/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_105_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/ratio?" + 
                    "bboxes=hDqY%3A8.68539%2C49.41.%2C8.712010%2C49.389493&" + 
                    "filter=evomaster_948486_input&" + 
                    "filter2=evomaster_947664_input&" + 
                    "keys2=evomaster_948485_input&" + 
                    "showMetadata=foo&" + 
                    "time=evomastmr_944409_input&" + 
                    "types2=C3l%5E&" + 
                    "values=fgo8&" + 
                    "values2=SIazzlu")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_64_createBboxes
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/perimeter/ratio"));
    }
    
    
    @Test
    public void test_106_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/ratio?" + 
                    "bboxes=hDiY%3A8.68539%2C49.416%2C8.71.010%2C49.389493&" + 
                    "filter=evomaster_956217_input&" + 
                    "filter2=evomaster_947664_input&" + 
                    "keys2=evomaster_956218_input&" + 
                    "showMetadata=foq&" + 
                    "time=evomaster_954902_input&" + 
                    "types=tSlWSFrk&" + 
                    "types2=Dqwr849wrAwAh&" + 
                    "values=evomaster_952809_input&" + 
                    "values2=U_con")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_65_createBboxes
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/perimeter/ratio"));
    }
    
    
    @Test
    public void test_107_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/ratio?" + 
                    "bboxes=KSofN%3A8.6880%2C49.419%2C8.701%2C49.394%7CIyJ%3A8..904%2C49.428%2C8.7035%2C49.394&" + 
                    "filter=evomaster_655962_input&" + 
                    "filter2=foo&" + 
                    "format=foo&" + 
                    "keys=foo&" + 
                    "keys2=evomaster_655961_input&" + 
                    "time=2018-0%2F%2C25&" + 
                    "timeout=07&" + 
                    "values=goo&" + 
                    "values2=fil5Fiyjli")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_72_createBboxes
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/length/ratio"));
    }
    
    
    @Test
    public void test_108_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/density/groupBy/tag?" + 
                    "bpolys=JNV%3A8.704581%2C49.413252%2C8.7164%2C49.038%2C8.710%2C49.4207%2C8.729%2C39%2C419%2C8.704561%2C49.403252%7CCmo%3A8.704761%2C49.403.52%2C8.707%2C490422%2C8.74149%2C49.4192*8.7335%2C49.42284%2C8.704561.49.402252%7Cs%3A8.402561%2C49.403252%2C8.726%2C49.813125%2C8.709%2C49.443%2C8.703%2C49.418%2C8&" + 
                    "filter=l%3AMIcEHeN%C2%821&" + 
                    "format=Csv&" + 
                    "groupByKey=pVMIcQGcW%C2%86&" + 
                    "keys=ernn%5Eutirc5%3B9%2F3_l&" + 
                    "showMetadata=Qe1gLf.99mwXxL&" + 
                    "types=TtUkSTYht%5D54600*Npn&" + 
                    "values=kqqr%60uuit_2%3B35")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_175_createBpolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/users/count/density/groupBy/tag"));
    }
    
    
    @Test
    public void test_109_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/density/groupBy/type?" + 
                    "bpolys=%7B%22tipe%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22CI%22%7D%2C%22gfometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.74450%2C49.403%5D%2C%5B8.701%2C49.429%5D%2C%5B8.701%2C49.432%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=lit%3D*+or+not+type%3Anode+or+length%3A%28+..+100%29&" + 
                    "format=csv&" + 
                    "keys=evomaster_72886_input&" + 
                    "timeout=8&" + 
                    "types=evomaster_246192_input&" + 
                    "values=7r2fNmr")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_233_createGeometryFromGeoJson
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/users/count/density/groupBy/type"));
    }
    
    
    @Test
    public void test_110_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/ratio?" + 
                    "bboxes=KSofN%3A8.6880%2C49.419%2C8.7.1%2C49.394%7CIyJ%3A8.6904%2C49.428%2C8.7035%2C49.394&" + 
                    "filter=evomaster_635962_qnput&" + 
                    "keys=foo&" + 
                    "keys2=evomaster_655961_input&" + 
                    "timeout=07&" + 
                    "values=evomaster_1132414_input&" + 
                    "values2=evomaster_655960_input")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_65_createBboxes
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/length/ratio"));
    }
    
    
    @Test
    public void test_111_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/density?" + 
                    "bcircles=V%3A8.70319%2C450416763%2C21105996463&" + 
                    "format=CSv&" + 
                    "keys=evoeaster_13087_input&" + 
                    "time=evomaster_13165_input&" + 
                    "types=foo&" + 
                    "values=primary")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( -168.75629621450457 -89.93201493470728, -157.53379320277472 -89.93201026097137 ) and LINESTRING ( 168.7983601390102 -89.93200503071758, -179.9785590338835 -89.93201316916584 ) [ (-163.59917056099312, -89.93201278696507, NaN) ]"))
                .body("'path'", containsString("/elements/length/density"));
    }
    
    
    @Test
    public void test_112_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/key?" + 
                    "bpolys=8.704561%2C49.403252%2C8.715%2C49.427%2C8.704%2C49.421%2C8.7359%2C49.404342%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8271469%2C49.4287%2C8.703%2C49.412%2C8.7273%2C49.405%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.7082%2C49.431063%2C8.7044%2C49.40704%2C8.7370%2C49.4235%2C8.704561%2C49.4032&" + 
                    "filter=evomaster_37%2C88_input&" + 
                    "groupByKeys=hf9xjbyV&" + 
                    "keys=foo&" + 
                    "showMetadata=foo&" + 
                    "time=2010-07-18&" + 
                    "types=foo&" + 
                    "values=evomaster_1560905_input")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.708406392122027 49.41200000001091, 8.715 49.427 ) and LINESTRING ( 8.704 49.421, 8.721234962109833 49.41200000003681 ) [ (8.710801353774116, 49.4174483714367, NaN) ]"))
                .body("'path'", containsString("/elements/length/groupBy/key"));
    }
    
    
    @Test
    public void test_113_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/tag?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22IT%22%7D%2C%22geometry%22%3A%7B%22typd%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.710%2C49.408%5D%2C%5B8.739%2C49.41665%5D%2C%5B8.7474%2C49.438%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "format=cSV&" + 
                    "groupByKey=C1&" + 
                    "keys=evomaster_61737_input&" + 
                    "showMetadata=foo&" + 
                    "time=9nPA&" + 
                    "values=primary_%C2%8Cink")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/executor/ExecutionUtils_565_extractContributionTags
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/elements/area/groupBy/tag"));
    }
    
    
    @Test
    public void test_114_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/density/groupBy/tag?" + 
                    "bpolys=DNA%3A8.704561%2C49.403252%2C8.710%2C49.4010%2C8.737%2C49.43465%2C8.719%2C49.423%2C8.704561%2C49.403252%7CsZzG%3A8.704561%2C49.403252%2C8.706%2C49.4164%2C8.705%2C49.409%2C8.705%2C49.40713%2C8.704561%2C49.403252&" + 
                    "format=json&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=foo&" + 
                    "keys=evomaster_47089_input&" + 
                    "showMetadata=7OBnjb1u3p&" + 
                    "timeout=31")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/executor/ExecutionUtils_554_extractContributionTags
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.71 49.401 ) and LINESTRING ( 8.704561 49.403252, 8.706 49.4164 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/area/density/groupBy/tag"));
    }
    
    
    @Test
    public void test_115_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density?" + 
                    "bpolys=%7B%22lype%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22izZ%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Pnlygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.720%2C49.40159%5D%2C%5B8.70395%2C49.434%5D%2C%5B8.73214%2C49.435%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22p%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7335%2C49.431%5D%2C%5B8.746%2C49.4290%5D%2C%5B8.70444%2C49.4141%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=foo&" + 
                    "showMetadata=evomaster_250566Winput&" + 
                    "time=evomastdr_249A87_input&" + 
                    "timeout=30.14250101302439&" + 
                    "values=evomaster_543710_input")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/executor/ExecutionUtils_565_extractContributionTags
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/elements/area/density"));
    }
    
    
    @Test
    public void test_116_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/density/groupBy/type?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22CI%22%7D%2C%22gfometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.74450%2C49.403%5D%2C%5B8.701%2C49.429%5D%2C%5B8.701%2C49.432%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=lit%3D*+or+not+type%3Anode+or+length%3A%28+..+100%29&" + 
                    "format=csv&" + 
                    "time=KRrKcfCduuxPpzPE&" + 
                    "timeout=8&" + 
                    "types=evomaster_246192_input&" + 
                    "values=7r2fOmr6")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/executor/ExecutionUtils_565_extractContributionTags
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/users/count/density/groupBy/type"));
    }
    
    
    @Test
    public void test_117_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/density/groupBy/tag?" + 
                    "bcircles=daVZ%3A8.715256%2C49.410%2C4%7COUzYX%3A8.709%2C49.402%2C2%7Cm%3A8.732020%2C49.401%2C70%7Cg%3A8.7302%2C49.413%2C1580058951&" + 
                    "groupByKey=evomaster_941386_input&" + 
                    "groupByValues=yes%2Cbhurch%2Chospital&" + 
                    "keys=foo&" + 
                    "showMetadata=evomaster_939964_input&" + 
                    "types=fko")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/executor/ExecutionUtils_565_extractContributionTags
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El ángulo 417.667.689.776.152.600.000 es demasiado grande."))
                .body("'path'", containsString("/users/count/density/groupBy/tag"));
    }
    
    
    @Test
    public void test_118_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/groupBy/type?" + 
                    "bpolys=8.704561%2C49.403252%2C8.745%2C49.414%2C8.732%2C49.4345%2C8.724%2C49.422%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.7129%2C49.405272%2C8.730%2C49.4282%2C8.712%2C49.429%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.743466%2C49.425%2C8.701%2C49.432%2C8.704%2C49.409%2C8.704561%2C49.403252&" + 
                    "filter=foo&" + 
                    "keys=haMRJJYnhLK&" + 
                    "showMetadata=evomaster_45640_input&" + 
                    "types=lJV&" + 
                    "values=foo")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/executor/ExecutionUtils_565_extractContributionTags
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.745 49.414 ) and LINESTRING ( 8.704561 49.403252, 8.7129 49.405272 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/length/groupBy/type"));
    }
    
    
    @Test
    public void test_119_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=q%3A8.704561%2C49.403252%2C8.700587%2C49.422%2C8.702%2C49.417%2C8.7216%2C49.417%2C8.704561%2C49.403252%7ClN%3A8.704561%2C49.403252%2C8.726%2C49.4243%2C8.7465%2C49.40504%2C8.7453%2C49.40630%2C8.704561%2C49.403252%7CV%3A8.704561%2C49.403252%2C8.7343%2C49.400%2C8.704%2C49.4115%2C8.70892%2C49.418%2C8.704561%2C49.40325&" + 
                    "filter=tGo&" + 
                    "format=csv&" + 
                    "groupByKey=M%60UUL%5DU&" + 
                    "groupByValues=evomaster_296041_input&" + 
                    "keys=%5Eoo&" + 
                    "time=evomaster_1209257_input&" + 
                    "types=evomaster_1209258Oinput&" + 
                    "values=foo")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/executor/ExecutionUtils_565_extractContributionTags
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.726 49.4243, 8.7465 49.40504 ) and LINESTRING ( 8.7453 49.4063, 8.704561 49.403252 ) [ (8.745169287732743, 49.406290220403285, NaN) ]"))
                .body("'path'", containsString("/elements/length/density/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_120_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/density?" + 
                    "bcircles=V%3A8.70319%2C49.416763%2C21105996463&" + 
                    "keys=highway&" + 
                    "showMetadata=true&" + 
                    "time=foo&" + 
                    "timeout=30&" + 
                    "types=foo&" + 
                    "values=primary")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/executor/ExecutionUtils_565_extractContributionTags
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El ángulo 423.647.930.160.043.000.000.000.000.000 es demasiado grande."))
                .body("'path'", containsString("/elements/length/density"));
    }
    
    
    @Test
    public void test_121_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/density?" + 
                    "bpolys=8.704561%2C49.403252%2C8.705%2C49.437415%2C8.718%2C49.431%2C8.731%2C49.435%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.745%2C49.412%2C8.701559%2C49.4312%2C8.73866%2C49.40699%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.71510%2C49.4357%2C8.706%2C49.401%2C8.70456%2C49.411%2C9.704561%2C49.4032&" + 
                    "filter=landuse%3D*&" + 
                    "format=Csv&" + 
                    "keys=fmo&" + 
                    "showMetadata=evomaster_115003_input&" + 
                    "time=evomaster_1407748_input&" + 
                    "types=foo&" + 
                    "values=noo")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.745 49.412 ) and LINESTRING ( 8.718583789651738 49.420090591696486, 8.73866 49.40699 ) [ (8.734472378196772, 49.40972260353781, NaN) ]"))
                .body("'path'", containsString("/elements/area/density"));
    }
    
    
    @Test
    public void test_122_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=q%3A8.704561%2C49.403252%2C8.700587%2C49.422%2C8.702%2C49.417%2C8.7216%2C49.417%2C8.704561%2C49.403252%7ClN%3A8.704561%2C49.403252%2C8.726%2C49.4.43%2C8.7465%2C49.40504%2C8.7453%2C49.40630%2C8.704561%2C49.403252%7CV%3A8.704561%2C49.403252%2C8.7343%2C49.400%2C8.704%2C49.4115%2C8.70892%2C49.418%2C8.704561%2C49.4032&" + 
                    "filter=shaSCsQ_sdcI&" + 
                    "format=evomaster_720278_input&" + 
                    "groupByKey=evomaster_1013259_input&" + 
                    "groupByValues=evomaster_297017_input&" + 
                    "keys=evomaster_297146_input&" + 
                    "showMetadata=evomaster_297015_input&" + 
                    "time=H0p8gT7I5krWaGP&" + 
                    "timeout=0.07303196879989804&" + 
                    "types=fpo")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_186_createBpolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/length/density/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_123_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/key?" + 
                    "bpolys=8.704561%2C49.403252%2C6.715%2C59.427%2C62704%2C49.421%2C8.7358%2C48.444340%2C8.604661%2C49.403252%7C8.714561%2C47.407252%2C9.914.9%2C49%2F4287%2C8.704*49.452%2C6-%3B272%2C49.405%2C8.703661%2C49.407272%7C8.704561%2C49.403253%2C8.7044%2C4%3A.431463%2C627044%2C49.41304%2C8.7570%2C49.8234%2C8&" + 
                    "filter=Rjnv&" + 
                    "format=cSV&" + 
                    "groupByKeys=fnIU5&" + 
                    "keys=o%7E%3FNm&" + 
                    "showMetadata=%40*pn&" + 
                    "time=oqTq&" + 
                    "types=j&" + 
                    "values=akn%3A")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_175_createBpolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/length/groupBy/key"));
    }
    
    
    @Test
    public void test_124_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/groupBy/type?" + 
                    "bpolys=8.704561%2C49.403252%2C8.71475%2C49.439%2C8.730918%2C49.430%2C8.709566%2C49.406%2C8.704561%2C49.403252%7C8.7.4561%2C49.403252%2C8.74665%2C49.4273%2C8.713%2C49.4368%2C8.745%2C49.4012%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.73788%2C49.436%2C8.739%2C49.43827%2C8.74104%2C49.4247%2C8.704561%2C49.40325&" + 
                    "filter=evomaster_1269279_input&" + 
                    "showMetadata=evomaster_1269280_input&" + 
                    "types=evomaster_471337_input")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_186_createBpolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/count/groupBy/type"));
    }
    
    
    @Test
    public void test_125_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area?" + 
                    "bpolys=wFZC%3A8.704561%2C49.403252%2C8.748%2C49.42584%2C8.7047%2C49.4204%2C8.716%2C49.40325%2C8.704561%2C49.403252%7CHZJKI%3A8.704561%2C49.403.52%2C8.7496%2C49.410%2C8.746%2C49.43366%2C8.739%2C49.400%2C8.704561%2C49.403252&" + 
                    "filter=evomaster_10491_input&" + 
                    "format=jsor&" + 
                    "keys=6FEduTkqFK&" + 
                    "showMetadata=%5Eoo&" + 
                    "values=evomaster_11139_input")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_161_createBpolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/area"));
    }
    
    
    @Test
    public void test_126_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area?" + 
                    "bpolys=vJZC%3A8.7045%3A3%2B49.0.3255%2C80748%2C49.42585%2C8.7057%2C49.4405%2C8.706%2C45.40334%2C82714561%2C49.743253%7CH%5EKKG%3A8.704551059.653.52%2C8.8492%2C89.410%2C8.746%2C47.41366%2C8.737%2C4&" + 
                    "filter=exge5F&" + 
                    "format=3LDFhgsdR%5Bblrxs&" + 
                    "keys=2LDFhgsdR_dmrxs&" + 
                    "showMetadata=4DEFhgodN_bmrxoz&" + 
                    "types=7FEdsTkqFK")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_186_createBpolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/area"));
    }
    
    
    @Test
    public void test_127_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area?" + 
                    "bpolys=wFZC%3A8.704561%2C49.403252%2C8.748%2C49.42584%2C8.7047%2C49.4204%2C8.716%2C49.40325%2C8.704561%2C49.404252%7CHZJKI%3A8.704561%2C49.403.52%2C8.7496%2C49.410%2C8.746%2C49.43366%2C8.739%2C49.400%2C8.704561%2C49.40325&" + 
                    "filter=evomaster_10491_inpu&" + 
                    "showMetadata=%5Eoo&" + 
                    "types=evomaster_1288679_input&" + 
                    "values=evomaster_11139_input")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_176_createBpolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/area"));
    }
    
    
    @Test
    public void test_128_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/key?" + 
                    "bpolys=8.704561%2C49.403252%2C8.715%2C49.427%2C8.704%2C49.421%2C8.7359%2C49.404342%2C8.704561%2C49.403.52%7C8.704561%2C49.403252%2C8.71469%2C49.4287%2C8.703%2C49.412%2C8.7273%2C49.405%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.7082%2C49.431063%2C8.7044%2C49.40704%2C8.7370%2C49.4235%2C8.704561%2C49.40325&" + 
                    "groupByKeys=Uf9Ujny&" + 
                    "time=2010-07-18&" + 
                    "types=foo&" + 
                    "values=foo")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_176_createBpolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/length/groupBy/key"));
    }
    
    
    @Test
    public void test_129_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/groupBy/type?" + 
                    "bpolys=8.802531%2C39.0.3452%2C8.745%2C49.%2F14%2C6.932%2C69%2C4347%2C5.734%2C48.621%2C9.70456%2F%2B95*303230%7D92744521*47.8.%2F252%2C8.71-9%2C45.815270%2C8.77.%2C8%3B.0182.8.711%2C47.629%2C8.706%2F65-09.411244%7C62704661%2C49.407334%2C%3A*743466%2C49.425%2C8.7%2F104%3B.432%2C4&" + 
                    "showMetadata=JX3MrQhos&" + 
                    "time=%5BT%5CXw&" + 
                    "types=%3A%2FQsEp%5B%7FfGb%3E&" + 
                    "values=%3A%2FQsEp%5B%7FfEd")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_186_createBpolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/length/groupBy/type"));
    }
    
    
    @Test
    public void test_130_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/groupBy/tag?" + 
                    "bcircles=%3A.718011%2C49.42860%2C86979371317&" + 
                    "filter=evomaster_2140483_input&" + 
                    "groupByKey=evomaster_13555_inpu&" + 
                    "groupByValues=evomaster_13556_input&" + 
                    "showMetadata=fAlSe&" + 
                    "time=evomaster_2370_input&" + 
                    "types=foo")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 0.0 3.5437821020948066E34, 3.0 90.0 ) and LINESTRING ( -1.007958012753983E15 3.5438899693947345E34, 3.0000000000000004 90.0 ) [ (3.0, 90.0, NaN) ]"))
                .body("'path'", containsString("/elements/length/groupBy/tag"));
    }
    
    
    @Test
    public void test_131_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/key?" + 
                    "bpolys=%7B%22tyte%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22klWEK%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.745%2C49.40444%5D%2C%5B8.7341%2C49.426%5D%2C%5B8.7019%2C49.41989%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22CV%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.734%2C49.4263%5D%2C%5B8.7070%2C49.424%5D%2C%5B8.71570%2C49.4305%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=evomaster_314870_input&" + 
                    "groupByKeys=e%7EomasteU_V0234%5Diqput&" + 
                    "keys=evomaster_30235_input&" + 
                    "showMetadata=evomaster_60781_input&" + 
                    "time=evouasser_58662_input&" + 
                    "values=evomaster_30413_input")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_233_createGeometryFromGeoJson
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/elements/count/groupBy/key"));
    }
    
    
    @Test
    public void test_132_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=cFe%3A8.704561%2C49.4.3252%2C8.708%2C49.418%2C8.7425%2C49.424682%2C8.704%2C49.403153%2C8.704561%2C49.403252%7CiN%3A8.704561%2C49.403252%2C8.716%2C49.403%2C8.741%2C49.427%2C8.743607%2C49.420%2C8.704561%2C49.4.3252%7CJr%3A8.704561%2C49.403252%2C8.70359%2C49.435%2C8.7469%2C49.414%2C8.70488%2C49.422%2C8.704561%2C49.403252&" + 
                    "filter=70NkkFUJHt8q4ZVz&" + 
                    "groupByKey=evomaster_206556_input&" + 
                    "groupByValues=evomaster_1390499_input&" + 
                    "keys=fmo&" + 
                    "showMetadata=aNxmiPzn3F&" + 
                    "types=evomaster_1390500_input&" + 
                    "values=foo")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_186_createBpolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/area/density/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_133_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/ratio/groupBy/boundary?" + 
                    "bpolys=8.704561%2C49.403252%2C8.720954%2C49.2182%2C8.700584%2C49.405%2C8.743164%2C49.41856%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.747%2C49.4290%2C8.7315%2C49.429%2C8.741%2C49.4219%2C8.704563%2C49.403.52%7C8.704562%2C49.403254%2C8.7307%2C49.806%2C8.748%2C49.413%2C8.742%2C49.4285%2C8.702561%2C4&" + 
                    "filter=evomduver_33%2F1833ainp&" + 
                    "filter2=fs&" + 
                    "keys2=8.704561%2C49.403252%2C8.720954%2C49.2182%2C8.700584%2C49.405%2C8.743164%2C49.41856%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.747%2C09.4290%2C8.7315%2C49.829%2C8.741%2C49.4219%2C8.704561%2C49.403.52%7C8.704562%2C49.403254%2C8.7307%2C49.806%2C8.748%2C49.413%2C8.742%2C49.4285%2C8.702561%2C4&" + 
                    "showMetadata=bnq%3F&" + 
                    "time=as&" + 
                    "types2=8.704561%2C49.403252%2C8.720954%2C89.2162%2C8.700584%2C49.405%2C8.743164%2C49.41856%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.747%2C09.4290%2C8.7315%2C49.829%2C8.741%2C49.4219%2C9.704561%2C49.403.52%7C8.704562%2C49.403254%2C8.7307%2C49.806%2C8.748%2C49.413%2C8.742%2C49.4285%2C8.702561%2C")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_186_createBpolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/area/ratio/groupBy/boundary"));
    }
    
    
    @Test
    public void test_134_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/ratio?" + 
                    "bpolys=Pxk%3A8.704561%2C49.403252%2C8.739%2C49.412%2C8.74281%2C49.420%2C8.743%2C49.401%2C8.704561%2C49.403252%7CNo%3A8.704561%2C49.403252%2C8.7071%2C49.4370%2C8.739%2C49.43189%2C8.7004%2C49.41.5%2C8.704561%2C49.403252%7Clkcx%3A8.704561%2C49.403252%2C8.745%2C49.420500%2C8.700%2C49.414137%2C8.7472%2C49.424%2C8.704561%2C49.40325&" + 
                    "filter2=highway%21%3D*+and+type%3Away+or+id%3A%281+..+9999%29&" + 
                    "keys=bSczkR&" + 
                    "keys2=evomaster_41140_input&" + 
                    "showMetadata=evomaster_121816_input&" + 
                    "types=evomaster_750644_input&" + 
                    "types2=evoma%7Bter_2862_input&" + 
                    "values=foo&" + 
                    "values2=evomaster_28365_input")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_186_createBpolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/count/ratio"));
    }
    
    
    @Test
    public void test_135_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/groupBy/tag?" + 
                    "bcircles=8.716011%2C49.42870%2C86979371317&" + 
                    "filter=destination%21%3D*+or+not+type%3Anode+or+length%3A%28+..+100%29&" + 
                    "format=foo&" + 
                    "groupByKey=evomaster_13525_input&" + 
                    "groupByValues=h1E7aOAmHvSCd&" + 
                    "showMetadata=evomaster_1393425_input&" + 
                    "time=DuOWKJxt&" + 
                    "types=evomaster_1393426_input&" + 
                    "values=foo")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/executor/ExecutionUtils_565_extractContributionTags
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El ángulo 35.312.245.786.650.534.000.000.000.000.000.000 es demasiado grande."))
                .body("'path'", containsString("/elements/length/groupBy/tag"));
    }
    
    
    @Test
    public void test_136_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/groupBy/type?" + 
                    "bpolys=8.704561%2C49.403252%2C8.71475%2C49.439%2C8.730918%2C49.430%2C8.709566%2C49.406%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.74665%2C49.4273%2C8.713%2C49.4368%2C8.745%2C49.4012%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.73788%2C49.436%2C8.739%2C49.43827%2C8.74104%2C49.4247%2C8.704561%2C49.40325&" + 
                    "format=foo&" + 
                    "time=2011-05-2&" + 
                    "types=2011-05-2&" + 
                    "values=fvg")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/executor/ExecutionUtils_565_extractContributionTags
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.709768043015337 49.40622709968003, 8.74665 49.4273 ) and LINESTRING ( 8.725045575144334 49.423399297651926, 8.745 49.4012 ) [ (8.730059776593755, 49.41782099853945, NaN) ]"))
                .body("'path'", containsString("/elements/count/groupBy/type"));
    }
    
    
    @Test
    public void test_137_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/boundary?" + 
                    "bpolys=%40PE%3A8.904661%2C49.403252%2C8.344675%2C49.404%2C8.724%2C69.4226%2C8.734%2C49.415%2C8.704561%2C49.403252%7CZy%3A8.7045.1%2C49.403252%2C8.742%2C49.430%2C9.70425%2C49.406%2C8.70111%2C49.400%2C8.704561%2C4&" + 
                    "filter=PDkDGao&" + 
                    "format=vtGseD5Pv%2FuR&" + 
                    "showMetadata=vMTLOn5CrDDV&" + 
                    "timeout=-60.60368893692895&" + 
                    "types=2ERw84iENO&" + 
                    "values=bnqk")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/executor/ExecutionUtils_565_extractContributionTags
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/length/groupBy/boundary"));
    }
    
    
    @Test
    public void test_138_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/density/groupBy/type?" + 
                    "bpolys=SwiBz%3A8.704561%2C49.403252%2C8.748%2C49.4230%2C8.7369%2C49.437%2C8.7047%2C49.416179%2C8.704561%2C49.403252%7CwifgK%3A8.704561%2C49.403252%2C8.739%2C49.4261%2C8.7429%2C49.430938%2C8.703681%2C49.416%2C8.704561%2C49.403252&" + 
                    "format=evomaster_328977_input&" + 
                    "keys=aL828oI9o_qv&" + 
                    "types=fqo&" + 
                    "values=gvomaster_1118869_input")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/executor/ExecutionUtils_565_extractContributionTags
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.748 49.423 ) and LINESTRING ( 8.704561 49.403252, 8.739 49.4261 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/length/density/groupBy/type"));
    }
    
    
    @Test
    public void test_139_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=8.704561%2C49.403252%2C8.7024%2C49.425%2C8.634%2C49.4128%2C8.715092%2C49.42.5%2C8.704561%2C49.4032&" + 
                    "filter=tracktype%21%3D*+or+type%3Anode+and+area%3A%281.0+..+1E6%29&" + 
                    "format=jm&" + 
                    "groupByKey=evomaster_1788308_ijput&" + 
                    "groupByValues=evomatter_515685%5Binput&" + 
                    "keys=foog&" + 
                    "types=foo")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/executor/ExecutionUtils_565_extractContributionTags
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/perimeter/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_140_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/density?" + 
                    "bpolys=8.804561%2C49.403252%2C8.725%2C49.436215%2C8.718%2C49.431%2C8.731%2C49.435%2C8.704560%2C49.403252%7C8.708561%2C49.4.3252%2C8.745%2C29.412%2C7.701558%2C49.4312%2C4.73866.47.40699%2C8.704561%2C4%3B.523252%7C8.706561.59.403252%2C%3C.75510%2C4%3D.4357%2C8.706%2C49.4%2F1%2C8.70456-49.411%2C9&" + 
                    "filter=len%60vpa%3D&" + 
                    "format=cSv&" + 
                    "keys=cukmcvwetf1206744%5E&" + 
                    "time=cummcvwetf1206744%5Ef&" + 
                    "types=foo")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_186_createBpolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/area/density"));
    }
    
    
    @Test
    public void test_141_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/key?" + 
                    "bpolys=8.704561%2C49.403252%2C8.715%2C49.427%2C6.704%2C49.461%2C8.7359%2C49.444342%2C8.704661%2C49.403252%7C8.704561%2C49.403252%2C8.714.9%2C49.4287%2C8.703%2C49.412%2C8.%3B273%2C49.405%2C8.703561%2C49.403252%7C8.704561%2C49.403254%2C8.7082%2C49.431063%2C6.7044%2C49.41704%2C8.7370%2C49.4235%2C8.704571%2C4&" + 
                    "filter=hmhw&" + 
                    "groupByKeys=UUTx&" + 
                    "types=bqIq&" + 
                    "values=aiq%3A")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_186_createBpolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/length/groupBy/key"));
    }
    
    
    @Test
    public void test_142_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/key?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22jeatures%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22klWEK%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.745%2C49.40444%5D%2C%5B8.7341%2C49.426%5D%2C%5B8.7019%2C49.41989%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22CV%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.734%2C49.4263%5D%2C%5B8.7070%2C49.424%5D%2C%5B8.71570%2C49.4305%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "format=foo&" + 
                    "groupByKeys=evomastur_8871_input&" + 
                    "showMetadata=f_o&" + 
                    "time=foo&" + 
                    "types=C0&" + 
                    "values=evomaster_8872_inpup")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_237_createGeometryFromGeoJson
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/elements/count/groupBy/key"));
    }
    
    
    @Test
    public void test_143_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/ratio?" + 
                    "bpolys=Pxk%3A8.704561%2C49.403252%2C8.739%2C49.412%2C8.74281%2C49.420%2C8.743%2C49.401%2C8.704561%2C49.403252%7CNo%3A8.704561%2C49.403252%2C8.7071%2C49.4370%2C8.739%2C49.43189%2C8.7004%2C49.4125%2C8.704561%2C49.403252%7Clkcx%3A8.704561%2C49.403252%2C8.745%2C49.420500%2C8.700%2C49.414137%2C8.7472%2C49.424%2C8.704561%2C49.40325&" + 
                    "filter2=evomaster_28261_input&" + 
                    "format=evomaster_28262_input&" + 
                    "keys=foo&" + 
                    "keys2=foo&" + 
                    "showMetadata=evomasterg57783_input&" + 
                    "values2=a6oNG7g")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/executor/ExecutionUtils_565_extractContributionTags
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.7071 49.437 ) and LINESTRING ( 8.739 49.43189, 8.7004 49.4125 ) [ (8.705447523163803, 49.415035530418294, NaN) ]"))
                .body("'path'", containsString("/elements/count/ratio"));
    }
    
    
    @Test
    public void test_144_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/key?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22klWEK%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.745%2C49.40444%5D%2C%5B8.7341%2C49.426%5D%2C%5B8.7019%2C49.41989%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22CV%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.734%2C49.4263%5D%2C%5B8.7070%2C49.424%5D%2C%5B8.71570%2C49.4305%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=evomaster_314870_input&" + 
                    "format=foo&" + 
                    "groupByKeys=e%7Eomaster_30234%5Dinput&" + 
                    "keys=evomaster_30235_inpu&" + 
                    "time=evouaster_58662_input")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/executor/ExecutionUtils_565_extractContributionTags
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.734 49.4263, 8.707 49.424 ) and LINESTRING ( 8.7157 49.4305, 8.712158372845929 49.42183654217667 ) [ (8.71326082112584, 49.424533329207016, NaN) ]"))
                .body("'path'", containsString("/elements/count/groupBy/key"));
    }
    
    
    @Test
    public void test_145_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=8.704561%2C49.403252%2C8.704%2C49.4246%2C8.706%2C49.400%2C8.70853%2C49.414%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.72565%2C49.434%2C8.7289%2C49.438%2C8.71336%2C49.4145%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.7426%2C49.4106%2C8.7042%2C49.438%2C8.704%2C49.4351%2C8.704561%2C49.40325&" + 
                    "format=evomaster_1450455_input&" + 
                    "groupByKey=lfc35uxr_&" + 
                    "groupByValues=evomaster_382592_input&" + 
                    "showMetadata=foo&" + 
                    "time=foo&" + 
                    "timeout=-4.961410888129507&" + 
                    "types=evomaster_472591_input&" + 
                    "values=evomaster_472592_input")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/executor/ExecutionUtils_565_extractContributionTags
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704 49.4246, 8.705611129971562 49.404783101349786 ) and LINESTRING ( 8.70853 49.414, 8.704561 49.403252 ) [ (8.705523667418205, 49.40585889075608, NaN) ]"))
                .body("'path'", containsString("/elements/count/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_146_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=T%3A8.738688%2C49.412%2C2%7CXm%3A8.7180%2C49.427%2C2%7CX%3A8.720%2C49.414%2C5%7CXpBdd%3A8.718551%2C49.402%2C693560199&" + 
                    "filter=foo&" + 
                    "groupByKey=_N6u_YA&" + 
                    "groupByValues=evomaster_46640_input&" + 
                    "keys=highway&" + 
                    "time=2012-10-21&" + 
                    "types=foo")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/executor/ExecutionUtils_565_extractContributionTags
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El ángulo 574.467.217.607.427.390 es demasiado grande."))
                .body("'path'", containsString("/elements/area/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_147_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/density/groupBy/type?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22CI%22%7D%2C%22gfometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.74450%2C49.403%5D%2C%5B8.701%2C49.429%5D%2C%5B8.701%2C49.432%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=evomaster_2162771_input&" + 
                    "format=csv&" + 
                    "showMetadata=foo&" + 
                    "timeout=81&" + 
                    "types=1tgH0Ib_HbwvOr&" + 
                    "values=81")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/executor/ExecutionUtils_554_extractContributionTags
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/users/count/density/groupBy/type"));
    }
    
    
    @Test
    public void test_148_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/density/groupBy/type?" + 
                    "bpolys=zOt%3A8.704561%2C49.403252%2C8.722%2C49.437%2C8.7151%2C49.4368%2C8.74621%2C49.400%2C8.704561%2C49.403252%7CEd%3A8.704561%2C49.403252%2C8.719%2C49.4068%2C8.713%2C49.429%2C8.74790%2C49.4126%2C8.704561%2C49.403252&" + 
                    "filter=evomaster_1450564_input&" + 
                    "showMetadata=ndsKihN5MoVKYXMf&" + 
                    "time=foq&" + 
                    "types=evomaster_762919_input&" + 
                    "values=foo")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/executor/ExecutionUtils_565_extractContributionTags
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.722 49.437 ) and LINESTRING ( 8.704561 49.403252, 8.719 49.4068 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/area/density/groupBy/type"));
    }
    
    
    @Test
    public void test_149_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density/groupBy/boundary?" + 
                    "bpolys=8.704561%2C49.403252%2C8.7350%2C49.4113%2C8.704%2C49.411%2C8.7495%2C49.416669%2C8.704561%2C49.403.52%7C8.704561%2C49.403252%2C8.720%2C49.425%2C8.702%2C49.43261%2C8.741%2C49.418%2C8.704561%2C49.403252&" + 
                    "filter=foo&" + 
                    "format=geojso&" + 
                    "keys=evomaster_857392_input&" + 
                    "time=2008-12-03")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_161_createBpolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/area/density/groupBy/boundary"));
    }
    
    
    @Test
    public void test_150_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density/groupBy/boundary?" + 
                    "bpolys=8.704561%2C49.403252%2C8.7350%2C49.4113%2C8.704%2C49.411%2C8.7495%2C49.416669%2C8.704561%2C49.403.52%7C8.704561%2C49.403252%2C8.720%2C49.425%2C8.702%2C49.43261%2C8.741%2C49.418%2C8.704361%2C49.4032&" + 
                    "format=geoks&" + 
                    "types=fko&" + 
                    "values=rtrring_circke")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_176_createBpolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/area/density/groupBy/boundary"));
    }
    
    
    @Test
    public void test_151_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density/groupBy/boundary?" + 
                    "bpolys=8.704561%2C09.403252%2C8.9452%2C49.4173%2C8.8%2C8%2C49.431%2C807495%2C49.416669%2C8.7045.1%2C47.403.52%7C8.704761%2C4%3B.403052-8.720%2C49.425%2C8.300%2C49.432610%3C.741%2C47.418%2C8&" + 
                    "showMetadata=s&" + 
                    "time=1I6%60%2F%3E-4%27-%2C&" + 
                    "values=rxovhmgaeiJpepb")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_186_createBpolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/area/density/groupBy/boundary"));
    }
    
    
    @Test
    public void test_152_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density/groupBy/boundary?" + 
                    "bpolys=8.704561%2C09.403252%2C8.9350%2C49.4133%2C8.8%2C8%2C49.411%2C8.7495%2C49.416669%2C8.704521%2C49.403.52%7C8.704561%2C49.403252%2C8.720%2C49.425%2C8.302%2C49.43261%2C%3C.741%2C47.418%2C8&" + 
                    "filter=vwrvijg_cipalem&" + 
                    "format=h&" + 
                    "keys=.0%5E%2F9-4%28%2F0&" + 
                    "time=.0%5E%2F9-4%28%2F0&" + 
                    "types=esqlu&" + 
                    "values=rxnvhng%60cipepce")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_175_createBpolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/area/density/groupBy/boundary"));
    }
    
    
    @Test
    public void test_153_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/ratio?" + 
                    "bcircles=8.749%2C66.4302%2C6%7C8.743%2C49.409%2C1%7C8.748%2C49.446%2C6937610392%7C4.738%2C29.445%2C56&" + 
                    "filter=&" + 
                    "filter2=evkmaster_19906a%C2%89nput&" + 
                    "keys2=hichwd&" + 
                    "showMetadata=%60o&" + 
                    "types2=evomauter%60.0225cinput&" + 
                    "values2=nBh7Qwd96lVFy7")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/executor/ExecutionUtils_565_extractContributionTags
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 9.0 -90.0, 0.0 5.800852482137299E25 ) and LINESTRING ( 9.0 90.0, 0.0 5.800608108304776E25 ) [ (9.0, 90.0, NaN) ]"))
                .body("'path'", containsString("/elements/perimeter/ratio"));
    }
    
    
    @Test
    public void test_154_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/tag?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22I%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7282%2C49.426%5D%2C%5B8.745%2C49.433%5D%2C%5B8.72908%2C49.425%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22K%22%7D%2C%22geommtry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.726%2C49.401%5D%2C%5B8.726%2C49.4223%5D%2C%5B8.708%2C49.4314%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22pz%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.749%2C49.422%5D%2C%5B8.711%2C49.402710%5D%2C%5B8.707650%2C49.424%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=fno&" + 
                    "format=csv&" + 
                    "groupByKey=6pL&" + 
                    "groupByValues=office%2Cconstruction&" + 
                    "showMetadata=evmmaster_1563504ginput&" + 
                    "timeout=0.4748903123867444&" + 
                    "types=evomaster_1564-80_input&" + 
                    "values=evomaster_1564181_input")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_343_checkGeometryTypeOfFeature
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/users/count/groupBy/tag"));
    }
    
    
    @Test
    public void test_155_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/tag?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22ffatures%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22I%22%7D%2C%22geometry%22%3A%7B%22tyqe%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7282%2C49.426%5D%2C%5B8.745%2C49.433%5D%2C%5B8.72908%2C49.425%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22K%22%7D%2C%22geommtry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.726%2C49.401%5D%2C%5B8.726%2C49.4223%5D%2C%5B8.708%2C49.4314%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22pz%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.749%2C49.422%5D%2C%5B8.711%2C49.402710%5D%2C%5B8.707650%2C49.424%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=evomaster_1570224_input&" + 
                    "format=joq&" + 
                    "groupByKey=fu&" + 
                    "groupByValues=evomaster_1567919_input&" + 
                    "timeout=0.2864763413058339&" + 
                    "types=evomaster_1564180_input")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_237_createGeometryFromGeoJson
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/users/count/groupBy/tag"));
    }
    
    
    @Test
    public void test_156_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/groupBy/tag?" + 
                    "bcircles=8.718011%2C49.4287.%2C86979371317&" + 
                    "groupByKey=dvtmastez_13555%5EYnQut&" + 
                    "groupByValues=evomaster_1576535_input&" + 
                    "keys=uPTs_0lm&" + 
                    "showMetadata=evomaster_13557_input&" + 
                    "values=evomaster_1524187_input")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_114_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/length/groupBy/tag"));
    }
    
    
    @Test
    public void test_157_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/density/groupBy/tag?" + 
                    "bpolys=FNV%3A8.704561%2C49.403252%2C8.7164%2C49.436%2C8.710%2C49.4217%2C8.729%2C49.419%2C8.704561%2C49.403252%7CClo%3A8.704561%2C49.403252%2C8.707%2C49.402%2C8.74109%2C49.4392%2C8.7335%2C49.42294%2C8.704561%2C49.403252%7Cq%3A8.704561%2C49.403252%2C8.726%2C49.413125%2C8.709%2C49.423%2C8.703%2C49.418%2C8.704561%2C49.407252&" + 
                    "filter=evomaster_1584441_input&" + 
                    "format=evomaster_31424_input&" + 
                    "groupByKey=evomaster_1584443_input&" + 
                    "keys=evomaster_56716_input&" + 
                    "time=evomaster_56717_input&" + 
                    "values=foo")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/executor/ExecutionUtils_565_extractContributionTags
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.7164 49.436 ) and LINESTRING ( 8.71 49.4217, 8.723318620805339 49.41980735388555 ) [ (8.711170172826236, 49.42153371228259, NaN) ]"))
                .body("'path'", containsString("/users/count/density/groupBy/tag"));
    }
    
    
    @Test
    public void test_158_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=T%3A8.738688%2C49.412%2C2%7CXm%3A8.7180%2C49.427%2C2%7CX%3A8.720%2C49.414%2C5%7CXpBdd%3A8.718551%2C49.402%2C693560199&" + 
                    "filter=fgo&" + 
                    "groupByKey=evomaster_2430_input&" + 
                    "keys=highway&" + 
                    "time=2012-10-21&" + 
                    "types=foo")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/executor/ExecutionUtils_554_extractContributionTags
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El ángulo 574.467.217.607.427.390 es demasiado grande."))
                .body("'path'", containsString("/elements/area/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_159_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/ratio?" + 
                    "bpolys=8.7.4561%2C69.423252%2C8.708%2C492212%2C8.704%2C49.403%2C%3C.538%2C49.434%2C8.746561%2C4&" + 
                    "filter=c5&" + 
                    "filter2=exom_psit_62%3B25_enqut&" + 
                    "keys=evkm%5Dqveva64%3D61Yilpu&" + 
                    "types2=%7E")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/executor/ExecutionUtils_565_extractContributionTags
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/count/ratio"));
    }
    
    
    @Test
    public void test_160_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter?" + 
                    "bpolys=aee%3A8.7.4561%2C49.403252%2C8.700%2C49.4111%2C8.70430%2C49.412%2C8.710%2C49.4282%2C8.704561%2C49.403252%7CfTO%3A8.704561%2C49.403252%2C8.749%2C49.4089%2C8.7049%2C49.410%2C8.7272%2C49.404%2C8.704561%2C49.403252&" + 
                    "format=foo&" + 
                    "keys=highway&" + 
                    "showMetadata=false&" + 
                    "time=2012-0H-26&" + 
                    "values=evomaster_880374_input")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/executor/ExecutionUtils_565_extractContributionTags
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/perimeter"));
    }
    
    
    @Test
    public void test_161_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/density/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22featunes%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22oH%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.747305%2C49.408%5D%2C%5B8.700%2C49.402%5D%2C%5B8.70500%2C49.432%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22tisIw%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.73565%2C49.4207%5D%2C%5B8.70909%2C49.413%5D%2C%5B8.72289%2C49.4383%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=evomaster_86325_input&" + 
                    "format=foo&" + 
                    "groupByKey=evomaster_1587522_input&" + 
                    "groupByValues=c&" + 
                    "time=evomaster_86327_input")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_237_createGeometryFromGeoJson
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/elements/perimeter/density/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_162_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/density/groupBy/tag?" + 
                    "bcircles=2.7377%2C64.0080%2C533146521%7C6.775834%2C05.1030%2C9&" + 
                    "filter=%2FnxxHit0c&" + 
                    "format=%2FnxxLd&" + 
                    "groupByKey=TiUS&" + 
                    "groupByValues=4.9248.28.414%3B%2C5%2F6166926%7C8.652%3A15%2834.14&" + 
                    "keys=p&" + 
                    "showMetadata=ftek&" + 
                    "time=enOP7c54&" + 
                    "types=exhL&" + 
                    "values=sk")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 7.16197243913529 1.40905700883111936E18, 3.0000000000000004 -90.0 ) and LINESTRING ( 64.45775195221762 1.40959948526295757E18, 3.0000000000000004 90.0 ) [ (7.16197243913529, 1.40905700883111936E18, NaN) ]"))
                .body("'path'", containsString("/elements/count/density/groupBy/tag"));
    }
    
    
    @Test
    public void test_163_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/density/groupBy/tag?" + 
                    "bcircles=caVZ%3A8.715256%2C48.610%2C4%7COUzYX%3A8.707%2C09.402%2C2%7Cm%3A8.732020%2C57.300%2C70%7Cg%3A8.7302%2C63.419%2C15800189&" + 
                    "filter=ivoma%7Bter_616918%2F_ilput&" + 
                    "format=cSV&" + 
                    "groupByKey=QYU&" + 
                    "groupByValues=U%5DP&" + 
                    "keys=LT&" + 
                    "showMetadata=%60%7B1&" + 
                    "types=caVZ%3A8.719256%2C48.610%2C4%7COWzYY%3A8.707049.422%2C2%7Cm%3A8.732020%2C57.401*70%7Cg%3A8.7302%2C65.415%2C1580.189")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( -105.03536403867867 4524.501824135673, -101.05646538679153 171.72151150247862 ) and LINESTRING ( 121.70606523231037 174.44365227838244, -174.379347773962 4590.809483440219 ) [ (-104.13826324354095, 3543.103949708538, NaN) ]"))
                .body("'path'", containsString("/users/count/density/groupBy/tag"));
    }
    
    
    @Test
    public void test_164_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/ratio?" + 
                    "bcircles=8.749%2C59.4302%2C6%7C8.743%2C49.409%2C1%7C8.728%2C49.426%2C6937610392%7C8.738%2C49.416%2C56&" + 
                    "filter=foo&" + 
                    "filter2=evomaster_19926_%C2%89nput&" + 
                    "keys=highway2&" + 
                    "showMetadata=foo&" + 
                    "time=K_bKdmbWXmxO&" + 
                    "timeout=34&" + 
                    "types=evomaster_19945_input&" + 
                    "types2=evomaster_20225_input&" + 
                    "values=evomaster_525313_input&" + 
                    "values2=evomaster_19929_input")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 9.0 -90.0, 0.0 5.782206761896557E25 ) and LINESTRING ( 9.0 90.0, 0.0 5.781943734684076E25 ) [ (9.0, 90.0, NaN) ]"))
                .body("'path'", containsString("/elements/perimeter/ratio"));
    }
    
    
    @Test
    public void test_165_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/ratio/groupBy/boundary?" + 
                    "bpolys=XaFqF%3A8.704561%2C49.403252%2C8.732%2C49.41525%2C8.731814%2C49.4099%2C8.70389%2C49.4150%2C8.704561%2C49.403252%7Cb%3A8.704561%2C49.403252%2C8.718%2C49.432%2C8.70370%2C49.408241%2C8.726%2C49.4.421%2C8.704561%2C49.403252&" + 
                    "filter=foo&" + 
                    "filter2=evomaster_37806_input&" + 
                    "format=foo&" + 
                    "keys=foo&" + 
                    "keys2=highway&" + 
                    "showMetadata=evomaster_37803_input&" + 
                    "types=foo&" + 
                    "types2=jXbCFQuRUgeufu&" + 
                    "values=foo&" + 
                    "values2=evomaster_14599_input")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_161_createBpolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/area/ratio/groupBy/boundary"));
    }
    
    
    @Test
    public void test_166_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/ratio/groupBy/boundary?" + 
                    "bpolys=XaFuF%3A8.704561%2C49.403252%2C4.732%2C49.42725%2C4.731814%2C49.4.99%2C8.70389-49.4150%2C%3C.704361%2C49.403252%7C%60%3A8.704560%2C49.403252%2C8.72%3C%2849.432%2C7*70370%2C49.408241%2C8.706%2C4&" + 
                    "filter=emqg&" + 
                    "filter2=q50&" + 
                    "keys=eook&" + 
                    "keys2=23%2C0%2C..9269%3A-*58&" + 
                    "time=26231%2F122-Q&" + 
                    "types=1-144.80X&" + 
                    "types2=Xoq&" + 
                    "values=9")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_186_createBpolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/area/ratio/groupBy/boundary"));
    }
    
    
    @Test
    public void test_167_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/boundary?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22%5Eeatures%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22l%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.724%2C49.430%5D%2C%5B8.7485%2C49.4042%5D%2C%5B8.731%2C49.426%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22N%22%7D%2C%22geometry%22%3A%7B%22tYpe%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7498%2C49.4122%5D%2C%5B8.7401%2C49.4147%5D%2C%5B8.7047%2C49.400%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "format=evomaster_40060_input&" + 
                    "keys=evoma%7Bter_466974_input&" + 
                    "types=evomaster_1639225_input&" + 
                    "values=foo")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_237_createGeometryFromGeoJson
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/elements/area/groupBy/boundary"));
    }
    
    
    @Test
    public void test_168_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/boundary?" + 
                    "bpolys=%7B%22typf%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22l%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.724%2C49.430%5D%2C%5B8.7485%2C49.4042%5D%2C%5B8.731%2C49.426%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22N%22%7D%2C%22geometry%22%3A%7B%22tYpe%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7498%2C49.4122%5D%2C%5B8.7401%2C49.4147%5D%2C%5B8.7047%2C49.400%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=euomaster_396896_input&" + 
                    "types=evomaster_1639631_input&" + 
                    "values=evomaster_1639632_input")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_233_createGeometryFromGeoJson
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/elements/area/groupBy/boundary"));
    }
    
    
    @Test
    public void test_169_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=T98.74%3A686%2C452412%2C2%7CXm%3A8.71%3A0%2C89.027%2C2%7CX%3A8.320%2C05.011%2C5%7CXp%3Ed%60%3A2.718511%2C83.320%2C6935601&" + 
                    "groupByKey=3QAhcsQQUlos&" + 
                    "keys=avomeqtcx%5C.095955_lr&" + 
                    "showMetadata=2QCicoYORlk%5EF&" + 
                    "time=-%2618%2F%2C&" + 
                    "timeout=-40.239235366398404&" + 
                    "values=fvomgstcv_2065%3F15_")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( -13.83148560442055 1.4328286334267966E7, 0.9402193648946251 8023.438802377848 ) and LINESTRING ( -25.488883069283858 1.4450182064022293E7, 3.0000000000000004 90.0 ) [ (-1.3029233454030154, 2182612.857575383, NaN) ]"))
                .body("'path'", containsString("/elements/area/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_170_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/groupBy/tag?" + 
                    "bcircles=8.718011%2C49.42870%2C86979371317&" + 
                    "groupByKey=dvtmastez_13555%5EYnQut&" + 
                    "groupByValues=evomaster_13556_input&" + 
                    "keys=Xbhsy")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/executor/ExecutionUtils_494_computeResult
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("class org.locationtech.jts.geom.LineString cannot be cast to class org.locationtech.jts.geom.MultiPolygon (org.locationtech.jts.geom.LineString and org.locationtech.jts.geom.MultiPolygon are in unnamed module of loader 'app')"))
                .body("'path'", containsString("/elements/length/groupBy/tag"));
    }
    
    
    @Test
    public void test_171_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/density/groupBy/type?" + 
                    "bpolys=zOt%3A8.806575%2C49.403.52%2C8.%3B24*49*497%2C728151.49.4326%2C9.7882-%2C4%3D.304%2C8.70%2C561%2C49.2.2352%7CEf%3A8.904571-45.10%3B252%284.719%2C48.5479%28%40.801%2C49%2F42&" + 
                    "filter=9&" + 
                    "format=cujlasper_2346712_inpu&" + 
                    "time=n&" + 
                    "types=%3A&" + 
                    "values=vOt%3A8.706561189%2C403152%2C8.7.4%2C2%3A.457%2C8.7151.49.4368%2C4%2F1882-%2C4%3D.440%2C807%2F45%3A1%2C29.403252%7CCd%3A8.704561%2849.20725208*759-49.3078.8.813%2C49%2F429%2C8.787%3A0%2C4%3B")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_186_createBpolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/area/density/groupBy/type"));
    }
    
    
    @Test
    public void test_172_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/ratio/groupBy/boundary?" + 
                    "bpolys=8.704561%2C49.403252%2C8.720954%2C49.4182%2C8.700584%2C49.405%2C8.743164%2C49.41856%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.747%2C49.4290%2C8.7315%2C49.429%2C8.741%2C49.4219%2C8.704561%2C49.403.52%7C8.704561%2C49.403252%2C8.7307%2C49.406%2C8.748%2C49.413%2C8.742%2C49.4285%2C8.704561%2C4&" + 
                    "filter2=wuP&" + 
                    "format=cSv&" + 
                    "keys=evqTUUWevWU5V835_QnpV&" + 
                    "keys2=evomaster_890922_input&" + 
                    "showMetadata=enp&" + 
                    "time=fso&" + 
                    "types=fno&" + 
                    "values=fsf")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_176_createBpolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/area/ratio/groupBy/boundary"));
    }
    
    
    @Test
    public void test_173_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/density/groupBy/tag?" + 
                    "bpolys=DNA%3A8.704561%2C49.403252%2C8.710%2C49.4010%2C8.737%2C49.43465%2C8.719%2C49.423%2C8.704561%2C49.403252%7CsZzG%3A8.704561%2C49.403252%2C8.706%2C49.4164%2C8.705%2C49.409%2C8.705%2C49.40713%2C8.704561%2C49.403252&" + 
                    "filter=evomaster_28587_input&" + 
                    "groupByKey=evomaster_941494_input&" + 
                    "showMetadata=foo&" + 
                    "time=evomaster_941493_input&" + 
                    "timeout=51&" + 
                    "values=foo")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/executor/ExecutionUtils_565_extractContributionTags
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.71 49.401 ) and LINESTRING ( 8.704561 49.403252, 8.706 49.4164 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/area/density/groupBy/tag"));
    }
    
    
    @Test
    public void test_174_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/density/groupBy/boundary?" + 
                    "bpolys=sYUh%3A8.704561%2C49.403252%2C8.730%2C49.4269%2C8.7334%2C49.43417%2C8.7045%2C49.424065%2C8.704561%2C49.403252%7CP%3A7.704561%2C49.403252%2C8.7338%2C49.432%2C8.704%2C49.4143%2C8.746%2C49.423913%2C8.704561%2C49.403252%7CjlH%3A8.704561%2C49.4.3252%2C8.73481%2C49.4282%2C8.704%2C49.%2412%2C8.704561%2C49.434749%2C8.704561%2C49.403252&" + 
                    "filter=evomaster_1357083_input&" + 
                    "format=foo&" + 
                    "time=evomaster_1672577_input&" + 
                    "timeout=74&" + 
                    "types=6&" + 
                    "values=evomaster_47382_input")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/executor/ExecutionUtils_565_extractContributionTags
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/users/count/density/groupBy/boundary"));
    }
    
    
    @Test
    public void test_175_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/density?" + 
                    "bpolys=8.704561%2C49.403252%2C8.705%2C49.437415%2C8.718%2C49.431%2C8.731%2C49.435%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.745%2C49.412%2C8.701559%2C49.4312%2C8.73866%2C49.40699%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.71510%2C49.4357%2C8.706%2C49.401%2C8.70456%2C49.411%2C9.704561%2C49.40325&" + 
                    "filter=&" + 
                    "format=Csv&" + 
                    "keys=fok&" + 
                    "showMetadata=evomasxer_115003_input&" + 
                    "time=QCTzlf7LOishiom&" + 
                    "values=GaelWbmY%3C__SdR")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/executor/ExecutionUtils_565_extractContributionTags
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.745 49.412 ) and LINESTRING ( 8.718583789651738 49.420090591696486, 8.73866 49.40699 ) [ (8.734472378196772, 49.40972260353781, NaN) ]"))
                .body("'path'", containsString("/elements/area/density"));
    }
    
    
    @Test
    public void test_176_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/groupBy/type?" + 
                    "bpolys=8.704561%2C49.403252%2C8.704%2C49.412%2C8.739%2C49.4230%2C8.707%2C49.4164%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.74100%2C492437480%2C8.7464%2C49.40977%2C8.7464%2C49.410%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.726%2C49.419%2C8.743%2C49.426%2C8.734317%2C49.426%2C8.704561%2C49.40325&" + 
                    "filter=NyW&" + 
                    "time=evomaster_128929_input&" + 
                    "timeout=38&" + 
                    "types=eoo")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/executor/ExecutionUtils_554_extractContributionTags
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.70456100000066 49.41217631428592, 8.739 49.423 ) and LINESTRING ( 8.707 49.4164, 8.704561 49.403252 ) [ (8.706318983918347, 49.4127288235172, NaN) ]"))
                .body("'path'", containsString("/elements/perimeter/groupBy/type"));
    }
    
    
    @Test
    public void test_177_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/ratio/groupBy/boundary?" + 
                    "bpolys=XaFqF%3A8.704561%2C49.403252%2C8.732%2C49.41525%2C8.731814%2C49.4099%2C8.70389%2C49.4150%2C8.704561%2C49.403252%7Cb%3A8.704561%2C49.403252%2C8.718%2C49.432%2C8.70370%2C49.408241%2C8.726%2C49.4.421%2C8.704561%2C49.40325*&" + 
                    "keys=evomaoter_1628395_input&" + 
                    "keys2=highway&" + 
                    "timeout=0.13469484583199232&" + 
                    "types=evomaster_1628257_input&" + 
                    "types2=jXbCFQuSUgeufu&" + 
                    "values=evomaster_1672925_input&" + 
                    "values2=macR4O5")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/executor/ExecutionUtils_565_extractContributionTags
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/area/ratio/groupBy/boundary"));
    }
    
    
    @Test
    public void test_178_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area?" + 
                    "bpolys=wFZC%3A8.704561%2C49.403252%2C8.748%2C49.42584%2C8.7047%2C49.4204%2C8.716%2C49.40325%2C8.704561%2C49.403252%7CHZJKI%3A8.704561%2C49.403.52%2C8.7496%2C49.410%2C8.746%2C49.43366%2C8.739%2C49.400%2C8.704561%2C49.40325&" + 
                    "filter=evomaster_10491_inpu&" + 
                    "format=jsor&" + 
                    "showMetadata=%5Eoo&" + 
                    "types=relation&" + 
                    "values=evomaster_11139_input")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/executor/ExecutionUtils_565_extractContributionTags
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/area"));
    }
    
    
    @Test
    public void test_179_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=cFe%3A8.704561%2C49.403252%2C8.708%2C49.418%2C8.7425%2C49.424682%2C8.704%2C49.403153%2C8.704561%2C49.403252%7CiN%3A8.704561%2C49.403252%2C8.716%2C49.403%2C8.741%2C49.427%2C8.743607%2C49.420%2C8.704561%2C49.4.3252%7CJr%3A8.704561%2C49.403252%2C8.70359%2C49.435%2C8.7469%2C49.414%2C8.70488%2C49.422%2C8.704561%2C49.403252&" + 
                    "filter=evomaster_43000_input&" + 
                    "format=foo&" + 
                    "groupByKey=evomaster_1658727_input&" + 
                    "groupByValues=foo&" + 
                    "time=Ayfil8qbsEFPi&" + 
                    "types=fpo&" + 
                    "values=foo")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/executor/ExecutionUtils_565_extractContributionTags
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/area/density/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_180_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/density/groupBy/boundary?" + 
                    "bpolys=sYTl%3A8.704561%2C49.401252%2C8.730%2C49.4269%2C8.7334%2C49.43417%2C8.7045%2C49.424065%2C8.704561%2C49.403252%7CP%3A7.704561%2C49.403252%2C8.7338%2C49.432%2C8.704%2C49.4143%2C8.746%2C49.423913%2C8.704561%2C49.403352%7CjlH%3A8.704561%2C49.4.3254%2C8.73481%2C49.6282%2C8.704%2C4%3D2212%2C8%2B702761%2C49.434749%2C42704561%2C4&" + 
                    "filter=cSv&" + 
                    "format=Csv&" + 
                    "time=sYUh%3A8.704561%2C49.403252%2C8.730%2C29.4269%2C8.7334%2C49.43417%2C8.7045%2C49.424065%2C8.744561%2C49.403252%7CP%3A7.704561%2C49.403252%2C8.7334%2C49.433%288.704%2C4%3B.4143%2C8.%3B46%2C49.423913%2C8.704565%2C49.403252%7CjlH%3B8.704581%2C69%2F4.3252%2C8.73481%2C4%3B.4282%2C8.704%2C49.512%2C8.%3B04562%2C49.434749%2C8.704561%2C49.&" + 
                    "types=yY-SiCyTa&" + 
                    "values=sYUh%3A827%2C4563.49.40%2F252%2C8.73.%2C45.4269%2C8.7334%2C49.4341%3B%2C8.7041%2C49.424065%2C8.704561%2C49.403252%7CP%3A7.704561%2C49.803252%2C8.7734%2C49.432%288.704%2C49.4144%2C8.345%2C49.625913%2C8.704561%2C49.403252%7CjlH%3A8.704581%2C49.4.325.%2C8.73481%2C4%3B.4282%2C8.704%2C49.411%2C8.704561%2C49.474749%2C8.704541049")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_176_createBpolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/users/count/density/groupBy/boundary"));
    }
    
    
    @Test
    public void test_181_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/groupBy/type?" + 
                    "bpolys=8.704561%2C49.403252%2C8.704%2C49.613%2C8.739%2C49.4230%2C8.707%2C49.4164%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.74100%2C492437480%2C8.7464%2C49.40977%2C8.7464%2C49.430%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.726%2C49.419%2C8.743%2C49.426%2C8.734317%2C49.426%2C8.704561%2C4&" + 
                    "filter=evomaster_2148847_input&" + 
                    "types=fpk")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/executor/ExecutionUtils_565_extractContributionTags
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.741 4.9243748E8, 8.7464 49.40977 ) and LINESTRING ( 8.7464 49.43, 8.738626043627942 49.42503004887689 ) [ (8.746399999999777, 49.42999999999986, NaN) ]"))
                .body("'path'", containsString("/elements/perimeter/groupBy/type"));
    }
    
    
    @Test
    public void test_182_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/ratio?" + 
                    "bpolys=9.7.3161069.423652%2C8.708%2B462212%2C8.704%2C45.4%2C32%3C1536%2B49.434%2C8&" + 
                    "filter=evim%5Dr%7Eeva44%3C9%2FYilpu&" + 
                    "format=bSk&" + 
                    "keys=avkq%5Dr%7Eeva44%3C6%2FYil&" + 
                    "keys2=juouastjqV45822%60m&" + 
                    "showMetadata=NC0%5C&" + 
                    "types2=%7F&" + 
                    "values=v%5EW&" + 
                    "values2=sl%29%40")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_186_createBpolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/count/ratio"));
    }
    
    
    @Test
    public void test_183_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/groupBy/key?" + 
                    "bpolys=hPfPi%3A8.704561%2C49.403252%2C8.706%2C49.418%2C8.708%2C49.418.%2C8.701%2C49.4036%2C8.704561%2C49.403252&" + 
                    "filter=evomaster_19%1205_input&" + 
                    "format=evomaster_378785_input&" + 
                    "groupByKeys=evoeasUer_19606_iUpUt&" + 
                    "keys=foo&" + 
                    "showMetadata=false&" + 
                    "time=MB9p0gUP3h9o&" + 
                    "types=evomaster_378786_input&" + 
                    "values=evomaster_1687886_input")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_161_createBpolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/users/count/groupBy/key"));
    }
    
    
    @Test
    public void test_184_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/groupBy/key?" + 
                    "bpolys=hNfPi%3A8.714561%2C47.40325.%2C80802%2C69.018%2C8.706%2C87.218.%2C%3C%2F820%2C49*2&" + 
                    "filter=jtqmasrcq_17%13-4%5Bentu&" + 
                    "format=csV&" + 
                    "groupByKeys=URS&" + 
                    "keys=cp3nn_C&" + 
                    "showMetadata=.&" + 
                    "types=&" + 
                    "values=lZNEvHWDguhdnXso")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_186_createBpolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/users/count/groupBy/key"));
    }
    
    
    @Test
    public void test_185_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/groupBy/tag?" + 
                    "bboxes=8..97%2C49.429%2C8.741%2C49.388&" + 
                    "filter=evomaster_674961_input&" + 
                    "groupByKey=evomaster_1694904_input&" + 
                    "groupByValues=synagogue%2Ctrack&" + 
                    "keys=evomaster_674960_input&" + 
                    "showMetadata=yes&" + 
                    "time=evomaster_1695905_input&" + 
                    "timeout=97&" + 
                    "values=alternative")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/executor/ExecutionUtils_565_extractContributionTags
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/users/count/groupBy/tag"));
    }
    
    
    @Test
    public void test_186_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/ratio/groupBy/boundary?" + 
                    "bpolys=XaFqF%3A8.704561%2C49.403252%2C8.732%2C49.41525%2C8.731814%2C49.4099%2C8.70389%2C49.4150%2C8.704561%2C49.403252%7Cb%3A8.704561%2C49.403252%2C8.718%2C49.432%2C8.70370%2C49.408241%2C8.726%2C49.4.421%2C8.704561%2C49.403252&" + 
                    "filter=evomaster_1702106_input&" + 
                    "filter2=evomaster_1628256_input&" + 
                    "format=evomaster_1628499_input&" + 
                    "keys=evomasler_1628395_intu&" + 
                    "keys2=highway&" + 
                    "time=evomaster_1628553_input&" + 
                    "timeout=0.13469484583199232&" + 
                    "types=Fy_H&" + 
                    "types2=jXbCFQuSUgeunu")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/executor/ExecutionUtils_559_extractContributionTags
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/area/ratio/groupBy/boundary"));
    }
    
    
    @Test
    public void test_187_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/tag?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22bUpqi%22%7D%2C%22_eometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.71053%2C49.432613%5D%2C%5B8.723157%2C49.413%5D%2C%5B8.703875%2C49.406762%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22CNkUC%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7381%2C49.414583%5D%2C%5B8.701%2C49.438%5D%2C%5B8.711%2C49.436%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22U%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.704375%2C49.403638%5D%2C%5B8.70457%2C49.43468%5D%2C%5B8.70495%2C49.417%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=foo&" + 
                    "groupByKey=evnmaster_512356_input&" + 
                    "keys=evomaster_126552_inpu&" + 
                    "time=evomaster_126553_input&" + 
                    "types=foo&" + 
                    "values=foo")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/executor/ExecutionUtils_554_extractContributionTags
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/elements/perimeter/groupBy/tag"));
    }
    
    
    @Test
    public void test_188_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/tag?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22bUpqi%22%7D%2C%22_eometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.71053%2C49.432613%5D%2C%5B8.723157%2C49.413%5D%2C%5B8.703875%2C49.406762%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22CNkUC%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7381%2C49.414583%5D%2C%5B8.701%2C49.438%5D%2C%5B8.711%2C49.436%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22U%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.704375%2C49.403638%5D%2C%5B8.70457%2C49.43468%5D%2C%5B8.70495%2C49.417%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=foo&" + 
                    "groupByKey=evnmaster_512356_input&" + 
                    "keys=evomaster_126552_inpu&" + 
                    "time=evomaster_126553_input&" + 
                    "values=foo")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/executor/ExecutionUtils_565_extractContributionTags
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/elements/perimeter/groupBy/tag"));
    }
    
    
    @Test
    public void test_189_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/groupBy/key?" + 
                    "bpolys=hPfPi%3A8.704561%2C49.403252%2C8.706%2C49.418%2C8.708%2C49.418.%2C8.701%2C49.4036%2C8.704561%2C49.40325&" + 
                    "format=cSv&" + 
                    "groupByKeys=evomaster_1688133_input&" + 
                    "keys=fooi&" + 
                    "showMetadata=falkm&" + 
                    "time=UB%3Dp0gUP3h9o&" + 
                    "values=gLyI2TG2Q8T")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/executor/ExecutionUtils_565_extractContributionTags
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/users/count/groupBy/key"));
    }
    
    
    @Test
    public void test_190_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/type?" + 
                    "bpolys=cj%3A8.704561%2C49.403252%2C8.7424%2C49.434277%2C8.741%2C49.407490%2C8.705061%2C49.4065%2C8.704561%2C49.403252&" + 
                    "filter=evomaster_1675857_input&" + 
                    "keys=evomaster_1704002_input&" + 
                    "showMetadata=foo&" + 
                    "time=2009-10-14&" + 
                    "types=foo")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/executor/ExecutionUtils_565_extractContributionTags
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.7424 49.434277 ) and LINESTRING ( 8.741 49.40749, 8.705061 49.4065 ) [ (8.708642689125982, 49.40659866363101, NaN) ]"))
                .body("'path'", containsString("/elements/count/groupBy/type"));
    }
    
    
    @Test
    public void test_191_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/density/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22oH%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.747305%2C49.408%5D%2C%5B8.700%2C49.402%5D%2C%5B8.70500%2C49.432%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22tisIw%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.73565%2C49.4207%5D%2C%5B8.70909%2C49.413%5D%2C%5B8.72289%2C49.4383%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=natural%3Dwood+and+geometry%3Apoint+or+not+id%3A%281+..+9999%29&" + 
                    "groupByKey=evomaster_1731778_input&" + 
                    "types=foo&" + 
                    "values=foo")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/executor/ExecutionUtils_565_extractContributionTags
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.73565 49.4207, 8.70909 49.413 ) and LINESTRING ( 8.72289 49.4383, 8.704561 49.403252 ) [ (8.709760563492425, 49.41319440281971, NaN) ]"))
                .body("'path'", containsString("/elements/perimeter/density/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_192_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density/groupBy/boundary?" + 
                    "bpolys=8.704561%2C49.403252%2C8.7350%2C49.4113%2C8.704%2C49.411%2C8.7495%2C49.416669%2C8.704561%2C49.403.52%7C8.704561%2C49.403252%2C8.720%2C49.425%2C8.702%2C49.43261%2C8.741%2C49.418%2C8.704561%2C49.403252&" + 
                    "format=geojso&" + 
                    "keys=evomaster_857392_input&" + 
                    "showMetadata=foo&" + 
                    "time=evomaster_1499071_input&" + 
                    "types=evomaster_1499072_input&" + 
                    "values=turning_circle")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/executor/ExecutionUtils_565_extractContributionTags
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/area/density/groupBy/boundary"));
    }
    
    
    @Test
    public void test_193_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/boundary?" + 
                    "bpolys=APE%3A8.704561%2C49.403252%2C8.744675%2C49.404%2C8.724%2C49.4226%2C8.734%2C49.415%2C8.704561%2C49.403252%7CZy%3A8.7045.1%2C49.403252%2C8.742%2C49.430%2C8.70425%2C49.406%2C8.70311%2C49.400%2C8.704561%2C49.403252&" + 
                    "showMetadata=falo&" + 
                    "timeout=68&" + 
                    "types=foo")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_161_createBpolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/length/groupBy/boundary"));
    }
    
    
    @Test
    public void test_194_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/boundary?" + 
                    "bpolys=APE%3A8.704561%2C49.403252%2C8.744675%2C49.404%2C8.724%2C49.4226%2C8.734%2C49.415%2C8.704561%2C49.403252%7CZy%3A8.7045.1%2C49.403252%2C8.742%2C49.430%2C8.70425%2C49.406%2C8.70311%2C49.400%2C8.704561%2C49.4032&" + 
                    "filter=highway+in+%28secondary%2Cpath%2Cunclassified%2Ctrack%2Cprimary%2Cresidential%2Ccycleway%2Cservice%2Cfootway%29+or+area%3A%281.0+..+1E6%29&" + 
                    "format=evomaster_15567_input&" + 
                    "showMetadata=foo&" + 
                    "time=foo&" + 
                    "timeout=78&" + 
                    "types=foo&" + 
                    "values=foo")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_186_createBpolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/length/groupBy/boundary"));
    }
    
    
    @Test
    public void test_195_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/boundary?" + 
                    "bpolys=%40PE%3A8.904661%2C49.403252%2C8.344675%2C49.404%2C8.724%2C69.4226%2C8.734%2C49.415%2C8.704561%2C49.403252%7CZy%3A8.7045.1%2C49.403252%2C8.742%2C49.430%2C9.70425%2C49.406%2C8.70111%2C49.400%2C8.704561%2C4&" + 
                    "filter=PDkDGao&" + 
                    "format=vtGseD5Pv1uR&" + 
                    "showMetadata=vMTLOn5CrDDV&" + 
                    "timeout=-60.61352573874673&" + 
                    "types=2ERw84iENO&" + 
                    "values=bnqk")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_175_createBpolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/length/groupBy/boundary"));
    }
    
    
    @Test
    public void test_196_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/density/groupBy/type?" + 
                    "bpolys=SwiBz%3A8.704561%2C49.403252%2C8.748%2C49.4230%2C8.7369%2C49.437%2C8.7047%2C49.416179%2C8.7045.1%2C49.403252%7CwifgK%3A8.704561%2C49.403252%2C8.739%2C49.4261%2C8.7429%2C49.430938%2C8.703681%2C49.416%2C8.704561%2C49.403252&" + 
                    "filter=fok&" + 
                    "format=csv&" + 
                    "keys=evomaster_328686_input&" + 
                    "showMetadata=foo&" + 
                    "types=fo")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_161_createBpolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/length/density/groupBy/type"));
    }
    
    
    @Test
    public void test_197_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/density/groupBy/type?" + 
                    "bpolys=SwiBz%3A8.704561%2C49.403252%2C8.748%2C49.4230%2C8.7369%2C49.437%2C8.7047%2C49.416179%2C8.7045.1%2C49.403252%7CwifgK%3A8.704561%2C49.403252%2C8.739%2C49.4261%2C8.7429%2C49.430938%2C8.703681%2C49.416%2C8.704561%2C49.4032&" + 
                    "filter=fqk&" + 
                    "keys=evomaster_328686_input&" + 
                    "time=evomaster_1326653_input&" + 
                    "types=bus_stop")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_175_createBpolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/length/density/groupBy/type"));
    }
    
    
    @Test
    public void test_198_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length?" + 
                    "bpolys=u%3A8.7045.1%2C49.403252%2C7.743%2C49.418%2C8.7063%2C49.422%2C8.727%2C49.409%2C8.604561%2C4&" + 
                    "format=CsV&" + 
                    "keys=ftoD&" + 
                    "time=rj19uJG7&" + 
                    "timeout=73&" + 
                    "types=foo&" + 
                    "values=")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_186_createBpolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/length"));
    }
    
    
    @Test
    public void test_199_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/ratio?" + 
                    "bboxes=KSofN%3A8.6880%2C49.419%2C8.701%2C49.394%7CIyJ%3A8.6504%2C49.428%2C8.7.35%2C49.394&" + 
                    "filter2=evomaster_659270_input&" + 
                    "format=foo&" + 
                    "keys=evomaster_755559_input&" + 
                    "timeout=.7&" + 
                    "types2=wAy&" + 
                    "values=foo")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_74_createBboxes
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/length/ratio"));
    }
    
    
    @Test
    public void test_200_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length?" + 
                    "bpolys=u%3A8.7045.2%2C08.4.3.6.%2C7.743.49.418-8*7%2F63%2C49.422%2C8.727%2C49-428%2C8-604761%2C4&" + 
                    "filter=u%3A8.8444.1%2C49.303252%2B7.743%2C49-418%2B8.706%2F%2C49.422%2C8.728%2C890409%2C8.60436&" + 
                    "keys=y3&" + 
                    "showMetadata=isIhLS")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/executor/ExecutionUtils_565_extractContributionTags
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/length"));
    }
    
    
    @Test
    public void test_201_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/ratio/groupBy/boundary?" + 
                    "bpolys=8.704561%2C49.403252%2C8.720954%2C49.4182%2C8.700584%2C49.405%2C8.743164%2C49.41856%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.747%2C49.4294%2C8.7315%2C49.429%2C8.741%2C49.4219%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.7307%2C49.406%2C8.748%2C49.413%2C8.742%2C49.4285%2C8.704561%2C49.40325&" + 
                    "filter=barrier%3D*+or+id%3A%281+..+9999%29&" + 
                    "filter2=dUstination%3D*+and+length%3A%28+..+100%29&" + 
                    "format=json&" + 
                    "keys=51gFMdS&" + 
                    "keys2=foo&" + 
                    "showMetadata=evomaster_1311913_input&" + 
                    "time=evomaster_1311914_input&" + 
                    "types=foo&" + 
                    "values=foo&" + 
                    "values2=foo")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/executor/ExecutionUtils_565_extractContributionTags
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.720954 49.4182 ) and LINESTRING ( 8.700584 49.405, 8.714687960999793 49.409491538542916 ) [ (8.709641126745273, 49.407884326882716, NaN) ]"))
                .body("'path'", containsString("/elements/area/ratio/groupBy/boundary"));
    }
    
    
    @Test
    public void test_202_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/ratio/groupBy/boundary?" + 
                    "bpolys=XaFqF%3A8.704561%2C49.403252%2C8.732%2C49.41525%2C8.731814%2C49.4099%2C8.70389%2C49.4150%2C8.704561%2C49.403252%7Cb%3A8.704561%2C49.403252%2C8.718%2C49.432%2C8.70370%2C49.408241%2C8.726%2C49.4.421%2C8.704561%2C49.403252&" + 
                    "filter=evomaster_1779751_input&" + 
                    "filter2=ElISpS2ECh&" + 
                    "format=foo&" + 
                    "keys=evomaster_1628395_input&" + 
                    "keys2=highway&" + 
                    "showMetadata=evomaster_37803_input&" + 
                    "timeout=0.13469484583199232&" + 
                    "types=evomaster_1628257_input")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/executor/ExecutionUtils_554_extractContributionTags
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/area/ratio/groupBy/boundary"));
    }
    
    
    @Test
    public void test_203_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/density/groupBy/tag?" + 
                    "bpolys=FNV%3A8.704561%2C49.403252%2C8.7164%2C49.436%2C8.710%2C49.4217%2C8.729%2C49.419%2C8.704561%2C49.403252%7CClo%3A8.704561%2C49.403252%2C8.707%2C49.402%2C8.74109%2C49.4392%2C8.7335%2C49.42294%2C8.704561%2C49.403.52%7Cq%3A8.704561%2C49.403252%2C8.726%2C49.413125%2C8.709%2C49.423%2C8.703%2C49.418%2C8.704561%2C49.407252&" + 
                    "filter=evomaster_531690_input&" + 
                    "format=evomaster_31424_input&" + 
                    "groupByKey=rvaGgkGgZRx&" + 
                    "keys=evomaster_56716_input&" + 
                    "time=evomaster_56717_input&" + 
                    "types=UvUmUUUer_565202Jnpu&" + 
                    "values=foo")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_176_createBpolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/users/count/density/groupBy/tag"));
    }
    
    
    @Test
    public void test_204_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/boundary/groupBy/tag?" + 
                    "bboxes=&" + 
                    "bpolys=8.704561%2C49.403252%2C8.7024%2C49.425%2C8.634%2C49.4128%2C8.715092%2C49.42.5%2C8.704561%2C49.403252&" + 
                    "filter=tracktype%21%3D*+or+type%3Anode+and+area%3A%281.0+..+1E6%29&" + 
                    "format=evomaster_1788307_input&" + 
                    "groupByKey=evomaster_1788308_input&" + 
                    "keys=foo&" + 
                    "time=v5mGhBtze5N&" + 
                    "values=foo")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_161_createBpolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/perimeter/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_205_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=8.7.4470%2C49.413264%2C807025%2C49.425%2C86532.49.4106%2C8.555092%2C49.72.5%2C4&" + 
                    "format=csV&" + 
                    "groupByKey=j&" + 
                    "groupByValues=wveckt%7Dlg%21%3A*%1Ctj+syme%3Amod%60+_nh%22%5Dnee%3B%27-%2B%2F%1C&" + 
                    "keys=%7DT%7E&" + 
                    "showMetadata=2&" + 
                    "time=%5BanOU2Q0&" + 
                    "values=%2F")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_186_createBpolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/perimeter/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_206_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=T%3A8.738688%2C49.412%2C2%7CXm%3A8.7180%2C49.427%2C2%7CX%3A8.72.%2C49.414%2C5%7CXpBdd%3A8.718551%2C49.402%2C693560199&" + 
                    "format=cSv&" + 
                    "groupByKey=bUUlUUpg&" + 
                    "groupByValues=evomaster_46640_input&" + 
                    "values=evomaster_46641_input")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_114_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/area/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_207_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/tag?" + 
                    "bpolys=%7B%22txpe%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22IT%22%7D%2C%22geometry%22%3A%7B%22typd%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B80704561%2C49.403252%5D%2C%5B8.710%2C49.408%5D%2C%5B8.739%2C49.41665%5D%2C%5B8.7474%2C49.438%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=evomaster_648299_input&" + 
                    "format=evomaster_526804_input&" + 
                    "groupByKey=etomaster_530178_input&" + 
                    "showMetadata=ivomaster_530179_input&" + 
                    "time=evomaster_648300_input&" + 
                    "types=uUomUsterU5101Y0_iUput")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_233_createGeometryFromGeoJson
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/elements/area/groupBy/tag"));
    }
    
    
    @Test
    public void test_208_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=8.704561%2C49.403252%2C8.704%2C49.4246%2C8.706%2C49.400%2C8.70853%2C49.414%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.72565%2C49.434%2C8.7289%2C49.438%2C8.7133.%2C49.4145%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.7426%2C49.4106%2C8.7042%2C49.438%2C8.704%2C49.4351%2C8.704561%2C49.4032&" + 
                    "groupByKey=lbc35yxn&" + 
                    "groupByValues=40hgEOQPO1&" + 
                    "showMetadata=evomaster_1817461_input&" + 
                    "timeout=0.759&" + 
                    "types=evomaster_472591_input&" + 
                    "values=evomaster_472592_input")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_175_createBpolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/count/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_209_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/density/groupBy/tag?" + 
                    "bpolys=JNV%3A8.704561%2C49.413252%2C8.7164%2C49.038%2C8.710%2C49.4207%2C8.729%2C49.419%2C8.704561%2C49.403252%7CCmo%3A8.704761%2C49.403.52%2C8.707%2C49.422%2C8.74149%2C49.4192%2C8.7335%2C49.42284%2C8.704561.49.402252%7Cs%3A8.402561%2C49.403252%2C8.726%2C49.813125%2C8.709%2C49.443%2C8.703%2C49.418%2C8070456&" + 
                    "filter=l%3AMIcEFeN%C2%82&" + 
                    "format=CSv&" + 
                    "groupByKey=l8MIcQGcU%C2%84L&" + 
                    "keys=frnn%5Eutirc5%3A8%2F3_l&" + 
                    "showMetadata=Qi1gLf.99mwXx&" + 
                    "time=Qi1gNf.99mrT&" + 
                    "types=TtUkSTYht%5D54610%2CNpl")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_186_createBpolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/users/count/density/groupBy/tag"));
    }
    
    
    @Test
    public void test_210_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/density/groupBy/tag?" + 
                    "bcircles=4.7277%2C82.2085%2C513146521%7C6.775835%2C17.1.30%2C9&" + 
                    "groupByKey=fvvU&" + 
                    "groupByValues=4.72%3C7%2C48.417%3B%2C5%2F5166723%7C8.631835%2855.1430&" + 
                    "keys=hs&" + 
                    "types=a")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_114_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/count/density/groupBy/tag"));
    }
    
    
    @Test
    public void test_211_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/density/groupBy/tag?" + 
                    "bboxes=8.7287%2C49.4177%2C511146523%7C8.735735%2C49.4010%2C9&" + 
                    "groupByKey=m&" + 
                    "groupByValues=foo")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_74_createBboxes
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Index 6 out of bounds for length 6"))
                .body("'path'", containsString("/elements/count/density/groupBy/tag"));
    }
    
    
    @Test
    public void test_212_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/density/groupBy/tag?" + 
                    "bcircles=8.7287%2C49.4177%2C511146523%7C8.735735%2C49.4.10%2C9&" + 
                    "filter=foo&" + 
                    "format=foo&" + 
                    "groupByKey=jtAAFY&" + 
                    "types=foo")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/executor/ExecutionUtils_565_extractContributionTags
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/count/density/groupBy/tag"));
    }
    
    
    @Test
    public void test_213_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/boundary?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22l%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.724%2C49.430%5D%2C%5B8.7485%2C49.4042%5D%2C%5B8.731%2C49.426%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22N%22%7D%2C%22geometry%22%3A%7B%22tYpe%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7498%2C49.4122%5D%2C%5B8.7401%2C49.4147%5D%2C%5B8.7047%2C49.400%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=euomaster_396896_input&" + 
                    "format=CSv&" + 
                    "keys=evomaster_466974_input&" + 
                    "time=JuXTG85&" + 
                    "types=evomaster_1856772_input&" + 
                    "values=evomaster_1856773_input")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/executor/ExecutionUtils_565_extractContributionTags
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/elements/area/groupBy/boundary"));
    }
    
    
    @Test
    public void test_214_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/tag?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22I%22%7D%2C%22geometry%22%3A%7B%22tyqe%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7282%2C49.426%5D%2C%5B8.745%2C49.433%5D%2C%5B8.72908%2C49.425%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22K%22%7D%2C%22geommtry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.726%2C49.401%5D%2C%5B8.726%2C49.4223%5D%2C%5B8.708%2C49.4314%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22pz%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.749%2C49.422%5D%2C%5B8.711%2C49.402710%5D%2C%5B8.707650%2C49.424%5D%2C%5B8.704561%2C49.403250%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=evomaster_1567618_input&" + 
                    "format=jwq&" + 
                    "groupByKey=jx&" + 
                    "groupByValues=evomaster_1567919_input&" + 
                    "keys=evomaster_1561073%5Binput&" + 
                    "showMetadata=evomaster_156%3B504ginput&" + 
                    "timeout=1.0&" + 
                    "values=evomaster_1564181_input")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/executor/ExecutionUtils_565_extractContributionTags
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/users/count/groupBy/tag"));
    }
    
    
    @Test
    public void test_215_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/density/groupBy/tag?" + 
                    "bpolys=DNA%3A8.704561%2C49.403252%2C8.710%2C49.4010%2C8.737%2C49.43465%2C8.719%2C49.423%2C8.704561%2C49.403252%7CsZzG%3A8.704561%2C49.403252%2C8.706%2C49.4164%2C8.7.5%2C49.409%2C8.705%2C49.40713%2C8.704561%2C49.403252&" + 
                    "filter=&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=foo&" + 
                    "keys=foo&" + 
                    "showMetadata=evomaster_1402232_input&" + 
                    "time=evomaster_1373560_input&" + 
                    "types=joo")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_161_createBpolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/area/density/groupBy/tag"));
    }
    
    
    @Test
    public void test_216_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/density/groupBy/tag?" + 
                    "bpolys=DNA%3A8.714965%2C49.403212%2C8.710%2C49.4010%2C8.537%2C49.43465%2C8.719%2C490423%2C8.704561%2C49.403252%7CsZzG%3A8.724561%2C49.403252%2C4.707%2C49.4164%2C9.7.5%2C492409%2C8.705%2C4%3D.40713%2C8.704561%2C4&" + 
                    "filter=O3njK&" + 
                    "format=EhSSzqNSIlBn18&" + 
                    "groupByKey=knW%5COgTp&" + 
                    "groupByValues=ds")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_175_createBpolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/area/density/groupBy/tag"));
    }
    
    
    @Test
    public void test_217_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/density/groupBy/tag?" + 
                    "bpolys=DNA%3A8.714855%2C49.403212%2C9.710%2C49.4010%2C8.537%2C49.43465%2C8.719%2C490463%2C4.704561%2C49.403232%7CsZzG%3A8.724561%2C49.403252%2C4.507%2C59.4.64%2C9.7.5%2C492409%2C8.305%2C4A.40713%2C8.704561%2C0&" + 
                    "filter=NZ2R6aLmWf%60g&" + 
                    "format=csv&" + 
                    "groupByKey=iUWVQQU&" + 
                    "keys=CNA%3A8*714965%2C49.403212%2C7.710*49.4010%2C8.537%2C49.43465%2C8.715%2C490627%2C8.704561%2C09.403232%7CsZzG%3A8.722461%2C49.423252%2C4.707%2847.4364%2C9.7.5%2C492409%2C8.705%2C4%3D.40713%2C8.704582%2C&" + 
                    "time=dlT&" + 
                    "types=456.89.453%3D%3F0688&" + 
                    "values=blKICS")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_186_createBpolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/area/density/groupBy/tag"));
    }
    
    
    @Test
    public void test_218_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/density/groupBy/type?" + 
                    "bpolys=SwiBz%3A8.7.4561%2C49.403252%2C8.748%2C49.4230%2C8.7369%2C49.437%2C8.7047%2C49.416179%2C8.7045.1%2C49.403252%7CwifgK%3A8.704561%2C49.403252%2C8.739%2C49.4261%2C8.7429%2C49.430938%2C8.703681%2C49.416%2C8.704561%2C49.403252&" + 
                    "filter=frk&" + 
                    "keys=evomaster_328686_input&" + 
                    "showMetadata=jooW&" + 
                    "time=evomaster_1326653_input")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_186_createBpolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/length/density/groupBy/type"));
    }
    
    
    @Test
    public void test_219_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/tag?" + 
                    "bpolys=%7B%22typm%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22I%22%7D%2C%22geometry%22%3A%7B%22tyqe%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7282%2C49.426%5D%2C%5B8.745%2C49.433%5D%2C%5B8.72908%2C49.425%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22K%22%7D%2C%22geommtry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.726%2C49.401%5D%2C%5B8.726%2C49.4223%5D%2C%5B8.708%2C49.4314%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22pz%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.749%2C49.422%5D%2C%5B8.711%2C49.402710%5D%2C%5B8.707650%2C49.424%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "format=joq&" + 
                    "groupByKey=iUU&" + 
                    "groupByValues=evomaster_1893468_input&" + 
                    "timeout=0.0&" + 
                    "types=evomaster_1564180_input&" + 
                    "values=evomaster_1564181_input")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_233_createGeometryFromGeoJson
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/users/count/groupBy/tag"));
    }
    
    
    @Test
    public void test_220_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/boundary?" + 
                    "bpolys=APE%3A8.704561%2C49.403252%2C8.744675%2C49.404%2C8.724%2C49.4226%2C8.734%2C49.415%2C8.704561%2C49.403252%7CZy%3A8.7045.1%2C49.403252%2C8.742%2C49.430%2C8.70425%2C49.406%2C8.70311%2C49.400%2C8.704561%2C49.403252&" + 
                    "format=evomaster_15567_input&" + 
                    "keys=evomaster_1657529_input&" + 
                    "showMetadata=f_lo&" + 
                    "timeout=78&" + 
                    "types=foo&" + 
                    "values=foo")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/executor/ExecutionUtils_554_extractContributionTags
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/length/groupBy/boundary"));
    }
    
    
    @Test
    public void test_221_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/key?" + 
                    "bpolys=8.704561%2C49.403252%2C6.715%2C49.427%2C6.704%2C49.461%2C8.7359%2C49.444342%2C8.704661%2C49.403252%7C8.704561%2C49.403252%2C8.714.9%2C49.4287%2C8.703%2C49.412%2C8.%3B273%2C49.405%2C8.703561%2C49.407252%7C8.704561%2C49.403254%2C8.7082%2C49.431063%2C6.7044%2C49.41704%2C8.7370%2C49.4235%2C8.704571%2C4&" + 
                    "filter=cm&" + 
                    "format=cSV&" + 
                    "groupByKeys=OMBU&" + 
                    "keys=mvJOX&" + 
                    "showMetadata=5j&" + 
                    "types=bqIsHM")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/executor/ExecutionUtils_565_extractContributionTags
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/length/groupBy/key"));
    }
    
    
    @Test
    public void test_222_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/density/groupBy/tag?" + 
                    "bcircles=daVZ%3A8.715256%2C49.414%2C4%7COUzYX%3A8.709%2C49.402%2C2%7Cm%3A8.732020%2C49.4.1%2C70%7Cg%3A8.7302%2C49.413%2C1580058951&" + 
                    "format=%2F%2FP1Y2M5D&" + 
                    "groupByKey=evomaster_903016_inpu&" + 
                    "keys=foo&" + 
                    "time=%2F%2FP1Y2M5D&" + 
                    "types=fqo&" + 
                    "values=foo")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_114_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/users/count/density/groupBy/tag"));
    }
    
    
    @Test
    public void test_223_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/boundary?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22l%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.724%2C49.430%5D%2C%5B8.7485%2C49.4042%5D%2C%5B8.731%2C49.426%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22N%22%7D%2C%22geometry%22%3A%7B%22tYpe%22%3A%22Polygon%22%2C%22coordinatds%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7498%2C49.4122%5D%2C%5B8.7401%2C49.4147%5D%2C%5B8.7047%2C49.400%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=euomaster_396896_input&" + 
                    "keys=evomaster_466974_input&" + 
                    "showMetadata=9NP2of3j8a5jy0q&" + 
                    "values=foo")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/executor/ExecutionUtils_562_extractContributionTags
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/elements/area/groupBy/boundary"));
    }
    
    
    @Test
    public void test_224_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density?" + 
                    "bpolys=%7B%22lype%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22izZ%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Pnlygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.720%2C49.40159%5D%2C%5B8.70395%2C49.434%5D%2C%5B8.73214%2C49.435%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22p%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7335%2C49.431%5D%2C%5B8.746%2C49.4290%5D%2C%5B8.70444%2C49.4141%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=foo&" + 
                    "format=CsV&" + 
                    "keys=evomaster_249984_input&" + 
                    "showMetadata=evomaster_250566_input&" + 
                    "types=krYMPXpWYP31T&" + 
                    "values=FMBUx7eSmXyLy")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/executor/ExecutionUtils_556_extractContributionTags
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/elements/area/density"));
    }
    
    
    @Test
    public void test_225_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/density/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=%7B%22typf%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22oH%22%7D%2C%22geometry%22%3A%7B%22xype%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.747305%2C49.408%5D%2C%5B8.700%2C49.402%5D%2C%5B8.70500%2C49.432%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22tisIw%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.73565%2C49.4207%5D%2C%5B8.70909%2C49.413%5D%2C%5B8.72289%2C49.4383%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "groupByKey=evomaster_1953619_input&" + 
                    "groupByValues=evomaster_32710_input&" + 
                    "showMetadata=evomaster_1953658_input&" + 
                    "types=fpo&" + 
                    "values=evomaster_86328_input")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_233_createGeometryFromGeoJson
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/elements/perimeter/density/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_226_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density/groupBy/boundary?" + 
                    "bpolys=8.704561%2C49.403252%2C8.7350%2C49.4113%2C8.704%2C49.411%2C8.7495%2C49.416669%2C8.704561%2C49.403.52%7C8.704561%2C49.403252%2C8.720%2C49.425%2C8.702%2C49.43261%2C8.741%2C49.418%2C8.704561%2C49.403252&" + 
                    "filter=evomaster_1498912_input&" + 
                    "values=turning_circle")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/executor/ExecutionUtils_562_extractContributionTags
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/area/density/groupBy/boundary"));
    }
    
    
    @Test
    public void test_227_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/groupBy/key?" + 
                    "bpolys=hPfPi%3A8.704561%2C49.403252%2C8.706%2C49.418%2C8.708%2C49.418.%2C8.701%2C49.4036%2C8.704561%2C49.403252&" + 
                    "format=cSv&" + 
                    "groupByKeys=Y1u2pMh6&" + 
                    "showMetadata=falkm&" + 
                    "time=UB%3Dp0gUP3h9o&" + 
                    "types=evomaster_378786_input&" + 
                    "values=gLyI2TG2Q8T")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/executor/ExecutionUtils_554_extractContributionTags
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/users/count/groupBy/key"));
    }
    
    
    @Test
    public void test_228_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/density/groupBy/boundary?" + 
                    "bboxes=8.660%2C49.4006%2C8.714%2C49.398%7C8.6.3%2C49.427764%2C8.7052%2C49.386%7C8.6672%2C49.41576%2C8.759%2C49.392&" + 
                    "format=evomaster_1474_input&" + 
                    "showMetadata=evomaster_1475_input&" + 
                    "types=IPHMMF8Ma3J")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_72_createBboxes
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/length/density/groupBy/boundary"));
    }
    
    
    @Test
    public void test_229_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/ratio?" + 
                    "bpolys=Pxk%3A8.704561%2C49.403252%2C8.739%2C49.412%2C8.74281%2C49.420%2C8.743%2C49.401%2C8.704561%2C49.403252%7CNo%3A8.704561%2C49.403252%2C8.7.71%2C49.4370%2C8.739%2C49.43189%2C8.7004%2C49.4125%2C8.704561%2C49.403252%7Clkcx%3A8.704561%2C49.403252%2C8.745%2C49.420500%2C8.700%2C49.414137%2C8.7472%2C49.424%2C8.704561%2C49.40325&" + 
                    "filter=foo&" + 
                    "filter2=evomaster_28261_input&" + 
                    "format=cSV&" + 
                    "keys=foo&" + 
                    "showMetadata=evomaster_57783_input&" + 
                    "time=foo&" + 
                    "types2=R2pCrM&" + 
                    "values=fmo&" + 
                    "values2=evomaster_28263_input")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_175_createBpolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/count/ratio"));
    }
    
    
    @Test
    public void test_230_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/density/groupBy/type?" + 
                    "bpolys=zOt%3A8.704561%2C49.403.52%2C8.722%2C49.437%2C8.7151%2C49.4368%2C8.74621%2C49.400%2C8.704561%2C49.403252%7CEd%3A8.704561%2C49.403252%2C8.719%2C49.4068%2C8.713%2C49.429%2C8.74790%2C49.4126%2C8.704561%2C49.40325&" + 
                    "filter=foo&" + 
                    "format=evomaster_1984518_input&" + 
                    "keys=evomaster_761920_input&" + 
                    "showMetadata=true&" + 
                    "time=evomaster_1646619_input&" + 
                    "types=evomaster_761919_input&" + 
                    "values=foo")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/executor/ExecutionUtils_554_extractContributionTags
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/area/density/groupBy/type"));
    }
    
    
    @Test
    public void test_231_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/density?" + 
                    "bpolys=8.804561%2C49.403252%2C8.705%2C49.436215%2C8.718%2C49.431%2C8.731%2C49.435%2C8.704560%2C49.403252%7C8.704561%2C49.403252%2C8.745%2C49.412%2C7.701558%2C49.4312%2C4.73866.47.40699%2C8.704561%2C49.403252%7C8.706561.59.403252%2C8.71510%2C4%3D.4357%2C8.706%2C49.401%2C8.70456-49.411%2C9&" + 
                    "filter=l%60n%60useA&" + 
                    "format=CSv&" + 
                    "types=R&" + 
                    "values=nqJgon")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_175_createBpolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/area/density"));
    }
    
    
    @Test
    public void test_232_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=q%3A8.704561%2C49.403252%2C8.7.0587%2C49.422%2C8.702%2C49.417%2C8.7216%2C49.417%2C8.704561%2C49.403252%7ClN%3A8.704561%2C49.403252%2C8.726%2C49.4243%2C8.7465%2C49.40504%2C8.7453%2C49.40630%2C8.704561%2C49.403252%7CV%3A8.704561%2C49.403252%2C8.7343%2C49.400%2C8.704%2C49.4115%2C8.70892%2C49.418%2C8.704561%2C49.40325&" + 
                    "filter=rGo&" + 
                    "format=csv&" + 
                    "groupByKey=evomaster_2020284_input&" + 
                    "keys=%5Eom&" + 
                    "showMetadata=nm&" + 
                    "time=2013-08-26&" + 
                    "timeout=90&" + 
                    "values=foo")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_175_createBpolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/length/density/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_233_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=q%3A8.704561%2C49.403252%2C8.700587%2C49.422%2C8.702%2C49.417%2C8.7216%2C49.417%2C8.704561%2C49.403252%7ClN%3A8.704561%2C49.403252%2C8.726%2C49.4243%2C8.7465%2C49.40504%2C8.7453%2C49.40630%2C8.704561%2C49.40325.%7CV%3A8.704561%2C49.403252%2C8.7343%2C49.400%2C8.704%2C49.4115%2C8.70892%2C49.418%2C8.704561%2C49.40325&" + 
                    "filter=tGo&" + 
                    "format=csv&" + 
                    "groupByKey=evomaster_2025429_input&" + 
                    "keys=%5Eoo&" + 
                    "showMetadata=no&" + 
                    "time=2013-08-26&" + 
                    "timeout=90&" + 
                    "values=foo")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_176_createBpolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/length/density/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_234_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=8.704470%2C49.413264%2C807025%2C49.425%2C86532.49.4106%2C8.555092%2C49.72.5%2C4&" + 
                    "format=csV&" + 
                    "groupByKey=Y&" + 
                    "groupByValues=wveckt%7Dlg%21%3A*%1Ctj+syme%3Amod%60+_nh%22%5Dnee%3B%27-%2B%2F%1C&" + 
                    "keys=%7DT%7E&" + 
                    "showMetadata=2&" + 
                    "time=%5BanOU2Q0&" + 
                    "values=%2F")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_175_createBpolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/perimeter/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_235_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/groupBy/type?" + 
                    "bpolys=8.704561%2C49.403252%2C8.704%2C49.412%2C8.739%2C49.4230%2C8.707%2C49.4164%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.74100%2C492437480%2C8.7464%2C49.40977%2C8.7464%2C49.410%2C8.7045.1%2C49.403252%7C8.704561%2C49.403252%2C8.726%2C49.419%2C8.743%2C49.426%2C8.734317%2C49.426%2C8.704561%2C49.4032&" + 
                    "filter=NyW&" + 
                    "format=jsonf&" + 
                    "keys=foo&" + 
                    "time=evolaster_128929_input&" + 
                    "timeout=38&" + 
                    "types=fwo")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_175_createBpolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/perimeter/groupBy/type"));
    }
    
    
    @Test
    public void test_236_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/ratio?" + 
                    "bcircles=8.749%2C66.4302%2C6%7C8.743%2C49.409%2C1%7C8.748%2C49.446%2C6937610392%7C4.738%2C29.446%2C56&" + 
                    "filter=&" + 
                    "filter2=evkmaster_19906a%C2%89nput&" + 
                    "keys2=hichwd&" + 
                    "showMetadata=%60o&" + 
                    "types2=evomauter%60.0225cinput&" + 
                    "values2=nBh7Qwd96lVFy7")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/executor/ExecutionUtils_554_extractContributionTags
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 9.0 -90.0, 0.0 5.800852482137299E25 ) and LINESTRING ( 9.0 90.0, 0.0 5.800608108304776E25 ) [ (9.0, 90.0, NaN) ]"))
                .body("'path'", containsString("/elements/perimeter/ratio"));
    }
    
    
    @Test
    public void test_237_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/ratio/groupBy/boundary?" + 
                    "bpolys=6.704561%2C49.403252%2C8.720954%2C49.2182%2C8.700584%2C49.406%2C8.843164%2C49%2C01856%2C8.704561%2C89.402252%7C8.704561%2C49.403252%2C8.747%2C49.4290%2C8.3315%2C49.429%2C8.741%2C49.4219%2C8.744563%2C49.4.3.52%7C8.704562%2C49.403254%2C8.7357%2C49.806%2C8-748%2C49.413%2C8.722%2C49.4285%2C8.7.25&" + 
                    "filter=%3A.7.4561%2C49.403252%2C8.%3B00954*49.2182%2C8.700584%2C490405%2C8.845164%2C4%3D.41856%2C8.704561%2C49.4%2F3252%7C8.904561%2C49.403252%2C8.788%2C.9.4290*8.7315%2C49.9.9%2C4%2C741%2C49.4219%2C4.704561%2649.005.5.%7C8.704564%2C49.41325407.7307%2C49.806%2C8.748%2C69.413%2C8.742%2C49.4285%2C8.702761%2C&" + 
                    "format=evomaster%602-47433_gnpuv&" + 
                    "keys2=%3A.704561%2C09.403212%2C6.%3B00954*49.2182%2C8.700584%2C49.405%2C8.843164%2C4%3D.41856%2C8.704561%2C49.4%2F3252%7C8.7.4561%2C49.403252%2C8.788%2C.9-4290*8.7315%2C49.909%2C4%2C741%2C49.42%2F9%2C8.704561%2549.405.5.%7C8*704564%2C49.40345407.7307%2C49.802%2C8*748%2C49.413%2C8.740%2C4%3B.4285%2C8.702761&" + 
                    "time=8%5EY&" + 
                    "types=csv&" + 
                    "values=%3A.704561%2C49.403252%2C8.%3B00954*49.2182%2C8.700574%2C49.405%2C8.845160%2C4%3D241856%2C8.704561%2C49.4%2F3254%7C8.70456-%2C49.423252%2C8.788%2C.9.4290*8.7315%2C49.9.9%2C4%2C74-%2C49.4.19%2C8.704561%2659.405.52%7C8*704568%2C49.40325607.7307%2C49.806%2C8.748%2C69.413%2C8.742%2C49.4285%2C8.702&" + 
                    "values2=CSV")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_175_createBpolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/area/ratio/groupBy/boundary"));
    }
    
    
    @Test
    public void test_238_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/groupBy/type?" + 
                    "bpolys=8.704561%2C49.403252%2C8.704%2C49.412%2C8.739%2C49.4230%2C8.707%2C49.4164%2C8.704561%2C49.403.52%7C8.704561%2C49.403252%2C8.74100%2C49.437480%2C8.7464%2C49.40977%2C8.7464%2C49.410%2C8.704561%2C49.403252%7C8.704561%2C49.403250%2C8.726%2C49.419%2C8.743%2C49.426%2C8.734317%2C49.426%2C8.704561%2C49.40325&" + 
                    "filter=N%7CW&" + 
                    "keys=evomaster_12%40875_input&" + 
                    "showMetadata=fmo")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_176_createBpolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/perimeter/groupBy/type"));
    }
    
    
    @Test
    public void test_239_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/density?" + 
                    "bpolys=8.704561%2C49.403252%2C8.705%2C49.437415%2C8.718%2C49.431%2C8.731%2C49.435%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.745%2C49.412%2C8.701559%2C49.4312%2C8.73866%2C49.40699%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.71510%2C49.4357%2C8.706%2C49.401%2C8.70456%2C49.411%2C9.704561%2C49.403252&" + 
                    "filter=landuse%3D*&" + 
                    "format=Csv&" + 
                    "keys=fmo&" + 
                    "showMetadata=evomaster_115003_input&" + 
                    "values=no")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/executor/ExecutionUtils_559_extractContributionTags
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.745 49.412 ) and LINESTRING ( 8.718583789651738 49.420090591696486, 8.73866 49.40699 ) [ (8.734472378196772, 49.40972260353781, NaN) ]"))
                .body("'path'", containsString("/elements/area/density"));
    }
    
    
    @Test
    public void test_240_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=8.704561%2C49.403252%2C8.704%2C49.4246%2C8.706%2C49.400%2C8.70853%2C49.414%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.72565%2C49.434%2C8.7289%2C49.438%2C8.71336%2C49.4145%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.7426%2C49.4106%2C8.7042%2C49.438%2C8.704%2C49.4351%2C8.704561%2C49.40325&" + 
                    "filter=evomaster_11489_input&" + 
                    "format=foo&" + 
                    "groupByKey=llUP5qx&" + 
                    "groupByValues=evomaster_549273_input&" + 
                    "time=evomaster_691602_input&" + 
                    "timeout=0.759&" + 
                    "values=evomaster_472592_input")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/executor/ExecutionUtils_563_extractContributionTags
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704 49.4246, 8.705611129971562 49.404783101349786 ) and LINESTRING ( 8.70853 49.414, 8.704561 49.403252 ) [ (8.705523667418205, 49.40585889075608, NaN) ]"))
                .body("'path'", containsString("/elements/count/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_241_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter?" + 
                    "bpolys=aee%3A8.7.4561%2C49.403252%2C8.700%2C49.4111%2C8.70430%2C49.412%2C8.710%2C49.4282%2C8.704561%2C49.403252%7CfTO%3A8.704561%2C49.403252%2C8.749%2C49.4089%2C8.7049%2C49.410%2C8.7272%2C49.404%2C8.7.4561%2C49.403252&" + 
                    "filter=foo&" + 
                    "format=foo&" + 
                    "keys=hiklway&" + 
                    "types=fok")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_161_createBpolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/perimeter"));
    }
    
    
    @Test
    public void test_242_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=8.704561%2C49.403252%2C8.704%2C49.4.46%2C8.706%2C49.400%2C8.70853%2C49.414%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.72565%2C49.434%2C8.7289%2C49.438%2C8.71336%2C49.4145%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.7426%2C49.4106%2C8.7042%2C49.438%2C8.704%2C49.4351%2C8.704561%2C49.40325&" + 
                    "filter=evomaster_11489_input&" + 
                    "format=foo&" + 
                    "groupByKey=llUP5qx&" + 
                    "groupByValues=evomaster_549273_input&" + 
                    "keys=foo&" + 
                    "time=evomaster_691602_input&" + 
                    "timeout=0.759&" + 
                    "types=evomaster_472591_input&" + 
                    "values=evomaster_472592_input")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_186_createBpolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/count/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_243_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=8.704561%2C49.403252%2C8.704%2C49.4246%2C8.706%2C49.400%2C8.70853%2C49.414%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.72565%2C49.434%2C8.7289%2C49.438%2C8.71336%2C49.4145%2C8.704561%2C49.40325.%7C8.704561%2C49.403252%2C8.7426%2C49.4106%2C8.7042%2C49.438%2C8.704%2C49.4351%2C8.704561%2C49.40325&" + 
                    "filter=evomaster_11489_input&" + 
                    "format=fom&" + 
                    "groupByKey=llUP5q%7C&" + 
                    "groupByValues=evomaster_549273_input&" + 
                    "showMetadata=foo&" + 
                    "time=evomaster_691602_input&" + 
                    "timeout=0.759&" + 
                    "types=evomaster_472591_input&" + 
                    "values=ch4CiYSUddgcPEdP")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_176_createBpolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/count/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_244_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=8.704561%2C49.403252%2C8.704%2C49.4246%2C8.706%2C49.400%2C8.70853%2C49.414%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.72565%2C49.434%2C8.7289%2C49.438%2C8.71336%2C49.4145%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.7426%2C49.4106%2C8.7042%2C49.438%2C8.704%2C49.4351%2C8.704561%2C49.40325&" + 
                    "format=foo&" + 
                    "groupByKey=llUP5qv&" + 
                    "groupByValues=evomaster_549273_input&" + 
                    "keys=joo&" + 
                    "showMetadata=evomaster_2116128_input&" + 
                    "timeout=0.759&" + 
                    "types=evomaster_2126129_input&" + 
                    "values=evomaster_472592_input")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/executor/ExecutionUtils_554_extractContributionTags
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704 49.4246, 8.705611129971562 49.404783101349786 ) and LINESTRING ( 8.70853 49.414, 8.704561 49.403252 ) [ (8.705523667418205, 49.40585889075608, NaN) ]"))
                .body("'path'", containsString("/elements/count/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_245_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/tag?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22ptoperties%22%3A%7B%22id%22%3A%22IT%22%7D%2C%22geometry%22%3A%7B%22typd%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B80704561%2C49.403252%5D%2C%5B8.710%2C49.408%5D%2C%5B8.739%2C49.41665%5D%2C%5B8.7474%2C49.438%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "format=evomaster_526804_input&" + 
                    "groupByKey=evomaster_530178_input&" + 
                    "groupByValues=evomaster_526805_input&" + 
                    "time=gd&" + 
                    "timeout=-0.5679259532084271&" + 
                    "types=uUomUsterU5101Y0_iUput")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/filter/RequestFilter_82_doFilterInternal
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/elements/area/groupBy/tag"));
    }
    
    
    @Test
    public void test_246_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/groupBy/type?" + 
                    "bpolys=8.704561%2C49.403252%2C8.71475%2C49.439%2C8.730918%2C49.430%2C8.709566%2C49.406%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.74665%2C49.4273%2C8.713%2C49.4368%2C8.745%2C49.4012%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.73788%2C49.436%2C8.739%2C49.43827%2C8.741.4%2C49.4247%2C8.704561%2C49.4032&" + 
                    "filter=evomaster_44601_input&" + 
                    "format=foo&" + 
                    "types=evomaster_471601_input&" + 
                    "values=fvg")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_175_createBpolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/count/groupBy/type"));
    }
    
    
    @Test
    public void test_247_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/tag?" + 
                    "bpolys=%7B%22tyne%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22bUpqi%22%7D%2C%22_eometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.71053%2C49.432613%5D%2C%5B8.723157%2C49.413%5D%2C%5B8.703875%2C49.406762%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22CNkUC%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7381%2C49.414583%5D%2C%5B8.701%2C49.438%5D%2C%5B8.711%2C49.436%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22U%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.704375%2C49.403638%5D%2C%5B8.70457%2C49.43468%5D%2C%5B8.70495%2C49.417%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "format=&" + 
                    "groupByKey=evnmaster_512356_input&" + 
                    "keys=evomaster_126552_inpu&" + 
                    "time=hGI1&" + 
                    "types=foo&" + 
                    "values=foo")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_233_createGeometryFromGeoJson
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/elements/perimeter/groupBy/tag"));
    }
    
    
    @Test
    public void test_248_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/density/groupBy/tag?" + 
                    "bpolys=8.704561%2C49.403252%2C8.7488049.5116%2C8.731%2C49.412%2C8.716%2C49.439%2C8.704561049.403252&" + 
                    "filter=type%3D*&" + 
                    "format=csv&" + 
                    "groupByKey=building&" + 
                    "showMetadata=no&" + 
                    "time=2009-06-08&" + 
                    "timeout=91&" + 
                    "values=foo7")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_175_createBpolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/perimeter/density/groupBy/tag"));
    }
    
    
    @Test
    public void test_249_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/groupBy/key?" + 
                    "bboxes=J%3A8.6884%2C49.427%2C8.748304%2C49.381%7CW%3A8.650624%2C49.4.6%2C8.7413%2C49.3927&" + 
                    "filter=fmi&" + 
                    "groupByKeys=%5DddrUcUty0&" + 
                    "time=2031007-%2F%3A")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_73_createBboxes
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/perimeter/groupBy/key"));
    }
    
    
    @Test
    public void test_250_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/groupBy/key?" + 
                    "bboxes=J%3A8.6884%2C49.4.7%2C8.748304%2C49.381%7CW%3A8.650624%2C49.426%2C8.7413%2C49.3927&" + 
                    "filter=foi&" + 
                    "groupByKeys=%5Dddr%3Acmty0&" + 
                    "time=2003007-%2F%3B")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_64_createBboxes
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/perimeter/groupBy/key"));
    }
    
    
    @Test
    public void test_251_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/key?" + 
                    "bpolys=8.704561%2C49.403252%2C6.715%2C49.427%2C6.704%2C49.461%2C8.7359%2C49.444342%2C8.704661%2C49.403252%7C8.704561%2C49.403252%2C8.714.9%2C49.4287%2C8.703%2C49.412%2C8.%3B273%2C49.405%2C8.703561%2C49.407252%7C8.704561%2C49.403254%2C8.7082%2C49.431063%2C6.7044%2C49.41704%2C8.7370%2C49.4235%2C8.704571%2C4&" + 
                    "filter=co&" + 
                    "format=cSV&" + 
                    "groupByKeys=OMBU&" + 
                    "keys=mvJOX&" + 
                    "time=%5C%7Csg%2FP&" + 
                    "types=bqIsH")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/executor/ExecutionUtils_554_extractContributionTags
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/length/groupBy/key"));
    }
    
    
    @Test
    public void test_252_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=cFe%3A8.704561%2C49.403252%2C8.708%2C49.018%2C8.7425%2C49.424682%2C8.704%2C49.403153%2C8.704561%2C49.403252%7CgN%3A8.704541%2C49.403252%2C8.716%2C49.403%2C8.741%2C49.427%2C8.743607%2C49.420%2C9.7.4561%2C49.0.3652%7CJr%3A8.704561%2C49.%2F03252%2C8.70359%2C49.435%2C8.7469%2C49.414%2C8.7048%3C%2C49.421%2C8.704561%2C4&" + 
                    "filter=O%5Btc&" + 
                    "groupByKey=KgUVEj&" + 
                    "groupByValues=dvom_sxer_101.6.7_input&" + 
                    "keys=cFe%3A8.704561%2C49.403252%2C8.708%2C49.018%2C8.7425%2C49.424682%2C8.704%2C49.403157%2C8.704361%2C49.403252%7CgN%3A8.704541%2C49.403252%2C8.716%2C49.403%2C8.741%2C49*427%2C6.743607%2C49.420%2C9.704561%2C49.4.3252%7CJr%3A8.704561%2C49.%2F03252%2C8.70359%2C49.433%2C8.746%3D%2C49.414%2C8.7048%3C%2C49.421%2C8.704561%2C49.40&" + 
                    "values=3Mpsy6VI1zIbn")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_175_createBpolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/area/density/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_253_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area?" + 
                    "bpolys=xJZC%3A8.7045%3A1*49.0.3253%2C8.748%2C49.42585%2C8.7047%2C49.4405%2C8.706%2C49.40335%2C82704561%2C49.343252%7CH%5EJKI%3A8.704561%2C49.703.52%2C8.7496%2C49.410%2C8.746%2C49.43366%2C8.739%2C49-400%2C8&" + 
                    "filter=9LEjtfRam7x&" + 
                    "format=%60ovlr%5Es&" + 
                    "showMetadata=9LAGhtfOemx&" + 
                    "time=9C%3FcwTg%2Fr&" + 
                    "types=sc%5E&" + 
                    "values=%3DNCbgUat")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_175_createBpolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/area"));
    }
    
    
    @Test
    public void test_254_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/ratio/groupBy/boundary?" + 
                    "bboxes=T%3A8.673%2C49.410214%2C8.719815%2C49.392%7CROY%3A8.65122%2C49.40049%2C8.75.%2C49.39&" + 
                    "filter2=op%60way%3D*&" + 
                    "keys=highway&" + 
                    "keys2=joo&" + 
                    "timeout=86&" + 
                    "types2=point%2CotheU&" + 
                    "values=evomaster_1390087_input&" + 
                    "values2=8%3D")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_74_createBboxes
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/count/ratio/groupBy/boundary"));
    }
    
    
    @Test
    public void test_255_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/ratio/groupBy/boundary?" + 
                    "bboxes=T%3A8.673%2C49.410214%2C8.715815%2C49.392%7CROY%3A8.651.2%2C49.40049%2C8.752%2C49.3&" + 
                    "filter=foo&" + 
                    "keys=hiefway&" + 
                    "keys2=highwax&" + 
                    "types2=point%2CntheU&" + 
                    "values=")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_72_createBboxes
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/count/ratio/groupBy/boundary"));
    }
    
    
    @Test
    public void test_256_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/ratio/groupBy/boundary?" + 
                    "bboxes=T%3A8.673%2C49.410214%2C8.719815%2C49.392%7CROY%3A8.65122%2C49.40.49%2C8.752%2C49.39&" + 
                    "keys=hichway&" + 
                    "keys2=foo&" + 
                    "time=2%2F11%2F05.17&" + 
                    "timeout=42&" + 
                    "values=evomaster_1390087_input&" + 
                    "values2=9%3A")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_73_createBboxes
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/count/ratio/groupBy/boundary"));
    }
    
    
    @Test
    public void test_257_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/ratio/groupBy/boundary?" + 
                    "bboxes=T%3A8.673%2C49.410214%2C8.719815%2C49.39.%7CROY%3A8.65122%2C49.40049%2C8.752%2C49.39&" + 
                    "keys=hichway&" + 
                    "types2=point%2CouheUk&" + 
                    "values2=9%3A")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_66_createBboxes
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/count/ratio/groupBy/boundary"));
    }
    
    
    @Test
    public void test_258_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density?" + 
                    "bpolys=%2C&" + 
                    "filter=V&" + 
                    "format=%2C&" + 
                    "keys=EGFVL&" + 
                    "showMetadata=MINUS&" + 
                    "time=mtl9MW&" + 
                    "values=%2C")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_156_createBpolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Index 0 out of bounds for length 0"))
                .body("'path'", containsString("/elements/area/density"));
    }
    
    
    @Test
    public void test_259_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/density/groupBy/boundary?" + 
                    "bpolys=sYTl%3A8.704561%2C49.401252%2C8.730%2C49.4669%2C8.7234%2C49.43417%2C8.7045%2C49.424065%2C8.704561%2C49.403290%7CP%3A7.704561%2C49.403254%2C8.7338%2C49.432%2C8.704%2C49.4143%2C8.746%2C49.423933%2C8.7.4561%2C49.403352%7CjlH%3A8.704561%2C49.4.3254%2B8.73481%2C49.6282%2C8.704%2C4%3D2212%2C8%2B702761%2C49.434749%2C4&" + 
                    "filter=Gop&" + 
                    "format=Csv&" + 
                    "keys=sWUh%3A8.704561%2C49.403252%2C8.730%2C29.8269%2C%3A.7%2F%2F4%2C49.43417%288.7045%2C49.424065%2C8.904561%2C29.403252%7CP%3A7.704561.49.403252%2C8.7334%2C49%2F432%288.704%2849.4143%2C%3C.%3B46*49.423913%2C82704561%2C48.403252%7CjlH%3A8.5%2F4581%2C49.4%2C3052%2C8.73481%2C4%3B.4284%2C80704%2C89.412%2C8.%3B04561%2C49.434%2F89%2C8.704561%2C49.&" + 
                    "showMetadata=Hsp&" + 
                    "types=vL&" + 
                    "values=sYUh%3A827%2C4563.49.40%2F352%2C8.730%2C45.4269%2C8.7334%2C49.4341%3B%2C8.7041%2C49.424065%2C8.704561%2C49.403253%7CP%3E7.704561%2C49.803252%2C8.7734%2C49.432%2882704%2C49.4144%2C8.345%2C49.625913%2C8.704561%2C49.403252%7CjlH%3A8.704581%2C49.4.325.%2C8.73481%2C87.4282%2C8.704%2C49.411%2C8.904561%2C49.474709%2C8.704541")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_175_createBpolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/users/count/density/groupBy/boundary"));
    }
    
    
    @Test
    public void test_260_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/boundary?" + 
                    "bpolys=%40PE%3A8.904661%2C39.403252%2C8.344675%2C49.404%2C8.724%2C69.4226%2C8.734%2C49.415%2C8.704561%2C49.403250%7CZy%3A8.7045.1%2C49.403252%2C8.742%2C49.430%2C9.70425%2C49.406%2C8.70111%2C49.400%2C8.704561%2C4&" + 
                    "filter=PDk%40G%5Do&" + 
                    "format=CSV&" + 
                    "timeout=-51.614600982760706&" + 
                    "types=2ERw84iENO&" + 
                    "values=bnrk")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/executor/ExecutionUtils_560_extractContributionTags
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/length/groupBy/boundary"));
    }
    
    
    @Test
    public void test_261_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/boundary?" + 
                    "bpolys=%40PE%3A8.904661%2C39.403252%2C8.344675%2C49.404%2C8.724%2C69.4226%2C8.734%2C49.415%2C8.704561%2C49.403252%7CZy%3A8.7045.1%2C49.403252%2C8.742%2C49.430%2C9.70425%2C49.406%2C8.70111%2C49.400%2C8.704561%2C4&" + 
                    "filter=PDkDGao&" + 
                    "keys=w%2C%5EypBs&" + 
                    "showMetadata=vMTLOn5BrDDV&" + 
                    "types=2ERw84iENO")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/executor/ExecutionUtils_556_extractContributionTags
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/length/groupBy/boundary"));
    }
    
    
    @Test
    public void test_262_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/boundary?" + 
                    "bpolys=%40PE%3A8.904661%2C39.403252%2C8.344675%2C49.404%2C8.724%2C69.4226%2C8.734%2C49.415%2C8.704561%2C49.403252%7CZy%3A8.7045.1%2C49.403252%2C8.742%2C49.430%2C9.70425%2C49.406%2C8.70111%2C49.400%2C8.704561%2C4&" + 
                    "filter=PDkDGao&" + 
                    "format=csv&" + 
                    "keys=w%2C%5EypB&" + 
                    "showMetadata=vMTLOn5BrDDV&" + 
                    "time=eg&" + 
                    "timeout=-60.277607866337966&" + 
                    "values=bnqk")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/executor/ExecutionUtils_559_extractContributionTags
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/length/groupBy/boundary"));
    }
    
    
    @Test
    public void test_263_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/boundary?" + 
                    "bpolys=%40PE%3A8.904661%2C39.403252%2C8.344675%2C49.404%2C8.724%2C69.4226%2C8.734%2C49.415%2C8.704561%2C49.403250%7CZy%3A8.7045.1%2C49.403252%2C8.742%2C49.430%2C9.70425%2C49.406%2C8.70111%2C49.400%2C8.704561%2C4&" + 
                    "filter=TDk%40G%5Do&" + 
                    "format=CSv&" + 
                    "time=d&" + 
                    "timeout=-51.614600982760706&" + 
                    "types=2ERw84iEMO")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/executor/ExecutionUtils_561_extractContributionTags
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/length/groupBy/boundary"));
    }
    
    
    @Test
    public void test_264_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/boundary?" + 
                    "bpolys=%2C&" + 
                    "filter=vIGw3bSKp%3AQCsL%3B&" + 
                    "keys=XLNxZWc.oN505&" + 
                    "showMetadata=%7B%22tyle%22%3A%1DFeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Featqre%22%2C%22properties%22%3A%7B%22id%22%3A%22l%22%7D%2C%22geqmetry%22%3A%7B%22tyte%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.724%2C49.430%5D%2C%5B8.7483*49.4042%5D%2C%5B8.731%2C49.426%5D%2C%5B8.704562%2C49.403242%5D%5D%5Dy%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22N%22%7D%2C%22geometry%22%3A%7B%26tYpe%22%3A%22Pomygon%22%2C%22coordinates%26%3A%5B%5B%5B9.700561%2C49.403652%5D%2C%5B8.7498%2C49.4122%5D%2C%5B8.7401%2C49.4147%5D%2C%5B8.7047%2C49.400%5D%2C%5B8%2F704561.49.403252%5D%5D%5D%7D%7D%5D&" + 
                    "types=Nf&" + 
                    "values=dko%3D5")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_156_createBpolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/elements/area/groupBy/boundary"));
    }
    
    
    @Test
    public void test_265_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/density/groupBy/tag?" + 
                    "bboxes=8.652%2C49.416%2C8.711%2C49.397%7C8.6656%2C49.418%2C8.755%2C49.391%7C8.682844%2C49.429%2C8.7162%2C49.398%7C8.662%2C49.426%2C8.7088%2C49.39.52&" + 
                    "filter=oneway%21%3D*+and+length%3A%28+..+100%29&" + 
                    "groupByKey=bSipdgr5&" + 
                    "groupByValues=stop%2Cresidential%2Cturning_circle&" + 
                    "keys=foo&" + 
                    "showMetadata=false&" + 
                    "time=201%2F--2318&" + 
                    "timeout=6&" + 
                    "types=foo&" + 
                    "values=UtOB")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_75_createBboxes
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/length/density/groupBy/tag"));
    }
    
    
    @Test
    public void test_266_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/ratio/groupBy/boundary?" + 
                    "bboxes=T%3A8.673%2C49.410214%2C8.7198.5%2C49.392%7CROY%3A8.65122%2C49.40049%2C8.752%2C49.39&" + 
                    "filter=foo&" + 
                    "keys=ciejsay&" + 
                    "time=2.01.%2F5%2C%2F7&" + 
                    "types2=point%2CptheUs&" + 
                    "values2=.9")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_65_createBboxes
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/count/ratio/groupBy/boundary"));
    }
    
    
    @Test
    public void test_267_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length?" + 
                    "bpolys=u%3A8.7045.2%2C08.4.3.6.%2C7.743.49.418-8*7%2F63%2C49.422%2C8.727%2C49-428%2C8-604761%2C4&" + 
                    "filter=u%3A8.8444.1%2C49.303252%2B7.743%2C45-418%2B8.706%2F%2C49.422%2C8.728%2C890409%2C8.60436&" + 
                    "format=CSV&" + 
                    "keys=y3")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/executor/ExecutionUtils_554_extractContributionTags
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/length"));
    }
    
    
    @Test
    public void test_268_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/ratio?" + 
                    "bcircles=8.749%2C67.4302%2C6%7C8.743%2C49.409%2C1%7C8.748%2C49.406%2C6937610392%7C4.738%2C29.456%2C56&" + 
                    "format=boo&" + 
                    "keys=difdy%60y2&" + 
                    "keys2=hichwd&" + 
                    "showMetadata=bok&" + 
                    "time=K_bKdm%5DWXmxK&" + 
                    "values2=nBh7Qwd96lVEy7")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/executor/ExecutionUtils_562_extractContributionTags
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 9.0 -90.0, 0.0 5.763528235971433E25 ) and LINESTRING ( 9.0 90.0, 0.0 5.763285237042113E25 ) [ (9.0, 90.0, NaN) ]"))
                .body("'path'", containsString("/elements/perimeter/ratio"));
    }
    
    
    @Test
    public void test_269_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/ratio?" + 
                    "bcircles=8.749%2C67.4302%2C6%7C8.743%2C49.409%2C1%7C8.748%2C49.406%2C6937610392%7C4.738%2C29.456%2C56&" + 
                    "format=boo&" + 
                    "keys=difdy%60y2&" + 
                    "keys2=hichwd&" + 
                    "showMetadata=bok&" + 
                    "time=K_bKdm%5DWXmxK&" + 
                    "types=foo&" + 
                    "values2=nBh7Qwd96lVEy7")
                .then()
                .statusCode(500) // framework_code
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 9.0 -90.0, 0.0 5.763528235971433E25 ) and LINESTRING ( 9.0 90.0, 0.0 5.763285237042113E25 ) [ (9.0, 90.0, NaN) ]"))
                .body("'path'", containsString("/elements/perimeter/ratio"));
    }
    
    
    @Test
    public void test_270_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/ratio?" + 
                    "bcircles=8.749%2C67.4302%2C6%7C8.743%2C49.409%2C1%7C8.748%2C49.406%2C6937610392%7C4.738%2C29.456%2C56&" + 
                    "filter2=evkmaster_19906_%C2%89nput&" + 
                    "format=bmo&" + 
                    "keys=difdy%60y2&" + 
                    "keys2=hichwd&" + 
                    "showMetadata=bok&" + 
                    "time=K_bKdm%5DWXmxK&" + 
                    "types=foo&" + 
                    "values2=nBh7Qwd96lVEy7")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/executor/ExecutionUtils_563_extractContributionTags
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 9.0 -90.0, 0.0 5.763528235971433E25 ) and LINESTRING ( 9.0 90.0, 0.0 5.763285237042113E25 ) [ (9.0, 90.0, NaN) ]"))
                .body("'path'", containsString("/elements/perimeter/ratio"));
    }
    
    
    @Test
    public void test_271_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/ratio?" + 
                    "bcircles=8.749%2C67.4302%2C6%7C8.743%2C49.409%2C1%7C8.748%2C49.406%2C6937610392%7C4.738%2C29.446%2C56&" + 
                    "format=bmo&" + 
                    "keys2=hichwd&" + 
                    "showMetadata=bok&" + 
                    "time=K_bKdm%5DWTmxK&" + 
                    "timeout=7.&" + 
                    "types2=evomauter%60.0225cinput&" + 
                    "values2=nBh7Qwd96lVFy7")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/executor/ExecutionUtils_556_extractContributionTags
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 9.0 -90.0, 0.0 5.763528235971433E25 ) and LINESTRING ( 9.0 90.0, 0.0 5.763285237042113E25 ) [ (9.0, 90.0, NaN) ]"))
                .body("'path'", containsString("/elements/perimeter/ratio"));
    }
    
    
    @Test
    public void test_272_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/ratio?" + 
                    "bcircles=8.749%2C66.4302%2C6%7C8.743%2C49.409%2C1%7C8.748%2C49.446%2C6937610392%7C4.738%2C29.445%2C56&" + 
                    "filter2=evkmaster_19906a%C2%89nput&" + 
                    "keys=difdy%60x2&" + 
                    "keys2=hichwd&" + 
                    "time=K_bKdm%5DWTkxK&" + 
                    "types2=evomauter%60.0225cinput&" + 
                    "values=i7JZKVMdpggKdP&" + 
                    "values2=nBh7Qwd96lVFy7")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/executor/ExecutionUtils_559_extractContributionTags
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 9.0 -90.0, 0.0 5.800852482137299E25 ) and LINESTRING ( 9.0 90.0, 0.0 5.800608108304776E25 ) [ (9.0, 90.0, NaN) ]"))
                .body("'path'", containsString("/elements/perimeter/ratio"));
    }
    
    
    @Test
    public void test_273_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/groupBy/key?" + 
                    "bpolys=hNfPi%3A8.714561%2C47.40325.%2C80812%2C69.018%2C8*706%2C87.218.%2C%3C3820%2C4&" + 
                    "filter=ftqm_srcp_18%13-4_enty&" + 
                    "format=evomaster_378785ainput&" + 
                    "groupByKeys=nZUFvFWDUuehn&" + 
                    "time=lZNGvFWDiwghnXs&" + 
                    "timeout=-482.8457078214815&" + 
                    "values=iZNG%7EHVDgudhnXsk")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/filter/RequestFilter_82_doFilterInternal
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/users/count/groupBy/key"));
    }
    
    
    @Test
    public void test_274_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/tag?" + 
                    "bboxes=vQF%3A8.655%2C49.4273%2C8.7.8%2C49.389&" + 
                    "format=foo&" + 
                    "groupByKey=diUUw_yM&" + 
                    "groupByValues=tourism&" + 
                    "keys=SfkqPH&" + 
                    "showMetadata=yes&" + 
                    "time=20171%2F5*3&" + 
                    "values=barriev%3D%2C+and+length%3A%28+..+1%2C0%2C")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_65_createBboxes
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/count/groupBy/tag"));
    }
    
    
    @Test
    public void test_275_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/ratio/groupBy/boundary?" + 
                    "bpolys=XaFuF%3A8.702563%2C49.403252%2C3.73.%2C49.40725%2C4.731814%2C49.8.99-8.70389-49.4150%2C80704361%2C69.403252%7C%60%3A8.704560%2C49.407252%2C8%2F72%3C%2849.432%2C7*70570%2C4%3B.408241%2C8.702%2C&" + 
                    "filter2=25%2C.1%29.94%3A9%3A.*5G&" + 
                    "format=08-62L5-41p&" + 
                    "keys=01*305%2B348&" + 
                    "keys2=27%2C0-%2B%249249%3A-*5%3A&" + 
                    "showMetadata=hqroflrgg_7%3B%26uE&" + 
                    "time=.518-15.29B&" + 
                    "types2=%5Dw&" + 
                    "values=jX0")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_175_createBpolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/area/ratio/groupBy/boundary"));
    }
    
    
    @Test
    public void test_276_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/density/groupBy/boundary/groupBy/tag?" + 
                    "bboxes=qQ%3A8.665%2C49.428%2C8.722.%2C49.384&" + 
                    "filter=foo&" + 
                    "format=json&" + 
                    "groupByKey=highway&" + 
                    "keys=foo&" + 
                    "time=2014-12-03")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_65_createBboxes
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/count/density/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_277_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/density/groupBy/type?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22ie%22%3A%22CI%22%7D%2C%22gfometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.74450%2C49.403%5D%2C%5B8.701%2C49.429%5D%2C%5B8.701%2C49.432%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=lit%3D*+or+not+type%3Anode+or+length%3A%28+..+100%29&" + 
                    "format=evomaster_541003_input&" + 
                    "keys=evomaster_72886_input&" + 
                    "showMetadata=evomaster_541004_input")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_343_checkGeometryTypeOfFeature
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/users/count/density/groupBy/type"));
    }
    
    
    @Test
    public void test_278_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/density/groupBy/tag?" + 
                    "bpolys=FNV%3A8.704561%2C49.403252%2C8.7164%2C49.436%2C8.710%2C49.4217%2C8.729%2C49.419%2C8.704561%2C49.403252%7CClo%3A8.704561%2C49.403252%2C8.707%2C49.422%2C8.74109%2C49.4392%2C8.7335%2C49.42294%2C8.704561%2C49.403252%7Cq%3A8.704561%2C49.403252%2C8.726%2C49.413125%2C8.709%2C49.423%2C8.703%2C49.418%2C8.704561%2C49.403252&" + 
                    "format=json&" + 
                    "groupByKey=building&" + 
                    "showMetadata=false&" + 
                    "time=%2F%2FP2M17D")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.7164 49.436 ) and LINESTRING ( 8.704561 49.403252, 8.726 49.413125 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/users/count/density/groupBy/tag"));
    }
    
    
    @Test
    public void test_279_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/key?" + 
                    "bpolys=8.704561%2C49.403252%2C8.715%2C49.427%2C8.704%2C49.421%2C8.7359%2C49.404342%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.71469%2C49.4287%2C8.703%2C49.412%2C8.7273%2C49.405%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.7082%2C49.431063%2C8.7044%2C49.40704%2C8.7370%2C49.4235%2C8.704561%2C49.403252&" + 
                    "filter=sidewalk%3D*+and+type%3Anode&" + 
                    "groupByKeys=addr%3Acountry%2Cdestination%2Cturn&" + 
                    "time=2010-07-18")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.715 49.427 ) and LINESTRING ( 8.704561 49.403252, 8.71469 49.4287 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/length/groupBy/key"));
    }
    
    
    @Test
    public void test_280_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=q%3A8.704561%2C49.403252%2C8.700587%2C49.422%2C8.702%2C49.417%2C8.7216%2C49.417%2C8.704561%2C49.403252%7ClN%3A8.704561%2C49.403252%2C8.726%2C49.4243%2C8.7465%2C49.40504%2C8.7453%2C49.40630%2C8.704561%2C49.403252%7CV%3A8.704561%2C49.403252%2C8.7343%2C49.400%2C8.704%2C49.4115%2C8.70892%2C49.418%2C8.704561%2C49.403252&" + 
                    "format=csv&" + 
                    "groupByKey=building&" + 
                    "groupByValues=secondary%2Chut&" + 
                    "showMetadata=no&" + 
                    "time=2013-08-26&" + 
                    "timeout=90")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.700587 49.422 ) and LINESTRING ( 8.704561 49.403252, 8.7343 49.4 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/length/density/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_281_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/ratio?" + 
                    "bpolys=8.704561%2C49.403252%2C8.708%2C49.412%2C8.704%2C49.403%2C8.738%2C49.434%2C8.704561%2C49.403252&" + 
                    "filter2=source%3Amaxspeed%3D*+and+geometry%3Aline+or+not+length%3A%28+..+100%29&" + 
                    "keys=highway&" + 
                    "keys2=highway&" + 
                    "timeout=89&" + 
                    "types2=other&" + 
                    "values=secondary")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.708 49.412 ) and LINESTRING ( 8.704 49.403, 8.738 49.434 ) [ (8.704720007546259, 49.403656477468644, NaN) ]"))
                .body("'path'", containsString("/elements/count/ratio"));
    }
    
    
    @Test
    public void test_282_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/type?" + 
                    "bpolys=cj%3A8.704561%2C49.403252%2C8.7424%2C49.434277%2C8.741%2C49.407490%2C8.705061%2C49.4065%2C8.704561%2C49.403252&" + 
                    "time=2009-10-14")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.7424 49.434277 ) and LINESTRING ( 8.741 49.40749, 8.705061 49.4065 ) [ (8.708642689125982, 49.40659866363101, NaN) ]"))
                .body("'path'", containsString("/elements/count/groupBy/type"));
    }
    
    
    @Test
    public void test_283_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/key?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22klWEK%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.745%2C49.40444%5D%2C%5B8.7341%2C49.426%5D%2C%5B8.7019%2C49.41989%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22CV%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.734%2C49.4263%5D%2C%5B8.7070%2C49.424%5D%2C%5B8.71570%2C49.4305%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "groupByKeys=addr%3Acountry%2Clanduse%2Csurface&" + 
                    "keys=highway")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.734 49.4263, 8.707 49.424 ) and LINESTRING ( 8.7157 49.4305, 8.712158372845929 49.42183654217667 ) [ (8.71326082112584, 49.424533329207016, NaN) ]"))
                .body("'path'", containsString("/elements/count/groupBy/key"));
    }
    
    
    @Test
    public void test_284_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=8.704561%2C49.403252%2C8.704%2C49.4246%2C8.706%2C49.400%2C8.70853%2C49.414%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.72565%2C49.434%2C8.7289%2C49.438%2C8.71336%2C49.4145%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.7426%2C49.4106%2C8.7042%2C49.438%2C8.704%2C49.4351%2C8.704561%2C49.403252&" + 
                    "groupByKey=highway&" + 
                    "timeout=51")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.704 49.4246 ) and LINESTRING ( 8.704561 49.403252, 8.7426 49.4106 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/count/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_285_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/density/groupBy/tag?" + 
                    "bcircles=8.7287%2C49.4177%2C511146523%7C8.735735%2C49.4010%2C9&" + 
                    "groupByKey=highway&" + 
                    "keys=highway&" + 
                    "showMetadata=false&" + 
                    "time=2009-05-11&" + 
                    "values=steps")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El ángulo 50.118.278.297.607.824 es demasiado grande."))
                .body("'path'", containsString("/elements/count/density/groupBy/tag"));
    }
    
    
    @Test
    public void test_286_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/tag?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22IT%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.710%2C49.408%5D%2C%5B8.739%2C49.41665%5D%2C%5B8.7474%2C49.438%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "format=json&" + 
                    "groupByKey=building&" + 
                    "groupByValues=hospital%2Cprimary_link&" + 
                    "keys=highway&" + 
                    "time=2012-06-07&" + 
                    "timeout=100&" + 
                    "values=primary_link")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.71 49.408, 8.739 49.41665 ) and LINESTRING ( 8.7474 49.438, 8.704561 49.403252 ) [ (8.71065567113639, 49.40819557087344, NaN) ]"))
                .body("'path'", containsString("/elements/area/groupBy/tag"));
    }
    
    
    @Test
    public void test_287_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=cFe%3A8.704561%2C49.403252%2C8.708%2C49.418%2C8.7425%2C49.424682%2C8.704%2C49.403153%2C8.704561%2C49.403252%7CiN%3A8.704561%2C49.403252%2C8.716%2C49.403%2C8.741%2C49.427%2C8.743607%2C49.420%2C8.704561%2C49.403252%7CJr%3A8.704561%2C49.403252%2C8.70359%2C49.435%2C8.7469%2C49.414%2C8.70488%2C49.422%2C8.704561%2C49.403252&" + 
                    "filter=turn%3Alanes%3D*+or+not+id%3A%281+..+9999%29&" + 
                    "groupByKey=building&" + 
                    "time=2014-01-23")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.708 49.418 ) and LINESTRING ( 8.704561 49.403252, 8.716 49.403 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/area/density/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_288_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/density/groupBy/tag?" + 
                    "bpolys=FNV%3A8.704561%2C49.403252%2C8.7164%2C49.436%2C8.710%2C49.4217%2C8.729%2C49.419%2C8.704561%2C49.403252%7CClo%3A8.704561%2C49.403252%2C8.707%2C49.422%2C8.74109%2C49.4392%2C8.7335%2C49.42294%2C8.704561%2C49.403252%7Cq%3A8.704561%2C49.403252%2C8.726%2C49.413125%2C8.709%2C49.423%2C8.703%2C49.418%2C8.704561%2C49.407252&" + 
                    "filter=foo&" + 
                    "groupByKey=evomaster_56715_input&" + 
                    "groupByValues=fqo&" + 
                    "showMetadata=false&" + 
                    "types=UvUmUUUer_565202Jnpu&" + 
                    "values=foo")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.712306702078244 49.424677479488 ) and LINESTRING ( 8.71 49.4217, 8.727931796235929 49.419151797377 ) [ (8.711170172826234, 49.42153371228259, NaN) ]"))
                .body("'path'", containsString("/users/count/density/groupBy/tag"));
    }
    
    
    @Test
    public void test_289_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/tag?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22prOperties%22%3A%7B%22id%22%3A%22bUpqi%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.71053%2C49.432613%5D%2C%5B8.723157%2C49.413%5D%2C%5B8.703875%2C49.406762%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22CNkUC%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7381%2C49.414583%5D%2C%5B8.701%2C49.438%5D%2C%5B8.711%2C49.436%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22U%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.704375%2C49.403638%5D%2C%5B8.70457%2C49.43468%5D%2C%5B8.70495%2C49.417%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=evomaster_158976_input&" + 
                    "groupByKey=evomaster_2634_inpu&" + 
                    "groupByValues=evomaster_31091_input&" + 
                    "keys=highway&" + 
                    "types=foo&" + 
                    "values=1n")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.7381 49.414583, 8.701 49.438 ) and LINESTRING ( 8.711 49.436, 8.704561 49.403252 ) [ (8.710245791869037, 49.43216418576288, NaN) ]"))
                .body("'path'", containsString("/elements/perimeter/groupBy/tag"));
    }
    
    
    @Test
    public void test_290_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/density?" + 
                    "bcircles=V%3A8.70319%2C49.416863%2C21105996463&" + 
                    "format=JSoN&" + 
                    "keys=BJP8u%2C3qpsbGUjf&" + 
                    "showMetadata=&" + 
                    "types=pOiNT&" + 
                    "values=")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/executor/AggregateRequestExecutor_96_aggregate
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/elements/length/density"));
    }
    
    
    @Test
    public void test_291_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area?" + 
                    "bpolys=wFZC%3A8.704561%2C49.403252%2C8.748%2C49.42584%2C8.7047%2C49.4204%2C8.716%2C49.40325%2C8.704561%2C49.403252%7CHZJKI%3A8.704561%2C49.403252%2C8.7496%2C49.410%2C8.746%2C49.43366%2C8.739%2C49.400%2C8.704561%2C49.40325&" + 
                    "filter=foo&" + 
                    "format=json&" + 
                    "keys=evomaster_10479_input&" + 
                    "showMetadata=%5Eoo")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.748 49.42584 ) and LINESTRING ( 8.7047 49.4204, 8.716 49.40325 ) [ (8.71307992949274, 49.40768178842473, NaN) ]"))
                .body("'path'", containsString("/elements/area"));
    }
    
    
    @Test
    public void test_292_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/ratio/groupBy/boundary?" + 
                    "bpolys=8.704561%2C49.403252%2C8.720954%2C49.4182%2C8.700584%2C49.405%2C8.743164%2C49.41856%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.747%2C49.4294%2C8.7315%2C49.429%2C8.741%2C49.4219%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.7307%2C49.406%2C8.748%2C49.413%2C8.742%2C49.4285%2C8.704561%2C49.403252&" + 
                    "filter=barrier%3D*+or+id%3A%281+..+9999%29&" + 
                    "filter2=destination%3D*+and+length%3A%28+..+100%29&" + 
                    "format=json")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.720954 49.4182 ) and LINESTRING ( 8.700584 49.405, 8.743164 49.41856 ) [ (8.70964112674527, 49.407884326882716, NaN) ]"))
                .body("'path'", containsString("/elements/area/ratio/groupBy/boundary"));
    }
    
    
    @Test
    public void test_293_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter?" + 
                    "bpolys=aee%3A8.704561%2C49.403252%2C8.700%2C49.4111%2C8.70430%2C49.412%2C8.710%2C49.4282%2C8.704561%2C49.403252%7CfTO%3A8.704561%2C49.403252%2C8.749%2C49.4089%2C8.7049%2C49.410%2C8.7272%2C49.404%2C8.704561%2C49.403252&" + 
                    "keys=highway&" + 
                    "showMetadata=false&" + 
                    "time=2012-08-26&" + 
                    "values=footway")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.7 49.4111 ) and LINESTRING ( 8.704561 49.403252, 8.749 49.4089 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/perimeter"));
    }
    
    
    @Test
    public void test_294_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/boundary?" + 
                    "bpolys=APE%3A8.704561%2C49.403252%2C8.744675%2C49.404%2C8.724%2C49.4226%2C8.734%2C49.415%2C8.704561%2C49.403252%7CZy%3A8.704561%2C49.403252%2C8.742%2C49.430%2C8.70425%2C49.406%2C8.70311%2C49.400%2C8.704561%2C49.403252&" + 
                    "filter=highway+in+%28secondary%2Cpath%2Cunclassified%2Ctrack%2Cprimary%2Cresidential%2Ccycleway%2Cservice%2Cfootway%29+or+area%3A%281.0+..+1E6%29&" + 
                    "format=csv&" + 
                    "showMetadata=false&" + 
                    "timeout=68")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.744675 49.404 ) and LINESTRING ( 8.734 49.415, 8.704561 49.403252 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/length/groupBy/boundary"));
    }
    
    
    @Test
    public void test_295_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length?" + 
                    "bpolys=t%3A8.704561%2C49.403252%2C8.743%2C49.418%2C8.7063%2C49.422%2C8.727%2C49.409%2C8.704561%2C49.403252&" + 
                    "filter=building%3D*+or+length%3A%28+..+100%29&" + 
                    "format=json&" + 
                    "timeout=71")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.743 49.418 ) and LINESTRING ( 8.7063 49.422, 8.727 49.409 ) [ (8.724171832689722, 49.41077614372143, NaN) ]"))
                .body("'path'", containsString("/elements/length"));
    }
    
    
    @Test
    public void test_296_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density/groupBy/boundary?" + 
                    "bpolys=8.704561%2C49.403252%2C8.7350%2C49.4113%2C8.704%2C49.411%2C8.7495%2C49.416669%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.720%2C49.425%2C8.702%2C49.43261%2C8.741%2C49.418%2C8.704561%2C49.403252&" + 
                    "format=geojson&" + 
                    "keys=highway&" + 
                    "time=2008-12-03&" + 
                    "values=turning_circle")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.735 49.4113 ) and LINESTRING ( 8.704561 49.403252, 8.72 49.425 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/area/density/groupBy/boundary"));
    }
    
    
    @Test
    public void test_297_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22izZ%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.720%2C49.40159%5D%2C%5B8.70395%2C49.434%5D%2C%5B8.73214%2C49.435%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22p%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7335%2C49.431%5D%2C%5B8.746%2C49.4290%5D%2C%5B8.70444%2C49.4141%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "keys=highway&" + 
                    "showMetadata=no&" + 
                    "timeout=49&" + 
                    "values=crossing")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.714471215568295 49.41275435535399, 8.7335 49.431 ) and LINESTRING ( 8.746 49.429, 8.718301502123813 49.4190695953235 ) [ (8.722703423739569, 49.420647762601526, NaN) ]"))
                .body("'path'", containsString("/elements/area/density"));
    }
    
    
    @Test
    public void test_298_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/groupBy/type?" + 
                    "bpolys=8.704561%2C49.403252%2C8.704%2C49.412%2C8.739%2C49.4230%2C8.707%2C49.4164%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.74100%2C49.437480%2C8.7464%2C49.40977%2C8.7464%2C49.410%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.726%2C49.419%2C8.743%2C49.426%2C8.734317%2C49.426%2C8.704561%2C49.403252&" + 
                    "format=json&" + 
                    "keys=highway&" + 
                    "time=2016-01-02&" + 
                    "timeout=38&" + 
                    "values=cycleway")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.704 49.412 ) and LINESTRING ( 8.707 49.4164, 8.704561 49.403252 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/perimeter/groupBy/type"));
    }
    
    
    @Test
    public void test_299_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/tag?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22bUpqi%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.71053%2C49.432613%5D%2C%5B8.723157%2C49.413%5D%2C%5B8.703875%2C49.406762%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22CNkUC%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7381%2C49.414583%5D%2C%5B8.701%2C49.438%5D%2C%5B8.711%2C49.436%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22U%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.704375%2C49.403638%5D%2C%5B8.70457%2C49.43468%5D%2C%5B8.70495%2C49.417%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "groupByKey=building&" + 
                    "groupByValues=garage%2Cpedestrian&" + 
                    "keys=highway&" + 
                    "showMetadata=yes&" + 
                    "time=2018-05-04")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.7381 49.414583, 8.701 49.438 ) and LINESTRING ( 8.711 49.436, 8.704561 49.403252 ) [ (8.710245791869037, 49.43216418576288, NaN) ]"))
                .body("'path'", containsString("/elements/perimeter/groupBy/tag"));
    }
    
    
    @Test
    public void test_300_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/ratio?" + 
                    "bcircles=8.749%2C49.4302%2C6%7C8.743%2C49.409%2C1%7C8.728%2C49.426%2C6937610392%7C8.738%2C49.416%2C56&" + 
                    "filter2=building%3D*+and+type%3Arelation&" + 
                    "keys=highway&" + 
                    "keys2=highway&" + 
                    "time=2008-04-16&" + 
                    "timeout=34&" + 
                    "types2=point%2Cpolygon%2Cother")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El ángulo 57.819.437.346.840.760.000.000.000 es demasiado grande."))
                .body("'path'", containsString("/elements/perimeter/ratio"));
    }
    
    
    @Test
    public void test_301_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=8.704561%2C49.403252%2C8.7024%2C49.425%2C8.734%2C49.4128%2C8.715092%2C49.4205%2C8.704561%2C49.403252&" + 
                    "filter=tracktype%21%3D*+or+type%3Anode+and+area%3A%281.0+..+1E6%29&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=garage%2Cuniversity&" + 
                    "showMetadata=true")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.7024 49.425, 8.734 49.4128 ) and LINESTRING ( 8.715092 49.4205, 8.704561 49.403252 ) [ (8.7148943249454, 49.420176241635005, NaN) ]"))
                .body("'path'", containsString("/elements/perimeter/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_302_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area?" + 
                    "bpolys=wFZC%3A8.704561%2C49.403252%2C8.748%2C49.42584%2C8.7047%2C49.4204%2C8.716%2C49.40325%2C8.704561%2C49.403252%7CHZJKI%3A8.704561%2C49.403252%2C8.7496%2C49.410%2C8.746%2C49.43366%2C8.739%2C49.400%2C8.704561%2C49.40325&" + 
                    "filter=foo&" + 
                    "keys=Rl9tI&" + 
                    "time=evomaster_6637_input&" + 
                    "types=relation")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.748 49.42584 ) and LINESTRING ( 8.7047 49.4204, 8.716 49.40325 ) [ (8.71307992949274, 49.40768178842473, NaN) ]"))
                .body("'path'", containsString("/elements/area"));
    }
    
    
    @Test
    public void test_303_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/density/groupBy/type?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22CI%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.74450%2C49.403%5D%2C%5B8.701%2C49.429%5D%2C%5B8.701%2C49.432%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=lit%3D*+or+not+type%3Anode+or+length%3A%28+..+100%29&" + 
                    "format=csv&" + 
                    "time=%2F%2FP3Y2M3D&" + 
                    "timeout=81")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.7445 49.403, 8.701 49.429 ) and LINESTRING ( 8.701 49.432, 8.704561 49.403252 ) [ (8.701401321039215, 49.428760129953574, NaN) ]"))
                .body("'path'", containsString("/users/count/density/groupBy/type"));
    }
    
    
    @Test
    public void test_304_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/groupBy/key?" + 
                    "bpolys=hPfPi%3A8.704561%2C49.403252%2C8.706%2C49.418%2C8.708%2C49.4182%2C8.701%2C49.4036%2C8.704561%2C49.403252&" + 
                    "groupByKeys=addr%3Apostcode%2Cnetwork&" + 
                    "showMetadata=false")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.706 49.418 ) and LINESTRING ( 8.708 49.4182, 8.701 49.4036 ) [ (8.70551348833589, 49.41301384710057, NaN) ]"))
                .body("'path'", containsString("/users/count/groupBy/key"));
    }
    
    
    @Test
    public void test_305_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/tag?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22I%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7282%2C49.426%5D%2C%5B8.745%2C49.433%5D%2C%5B8.72908%2C49.425%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22K%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.726%2C49.401%5D%2C%5B8.726%2C49.4223%5D%2C%5B8.708%2C49.4314%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22pz%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.749%2C49.422%5D%2C%5B8.711%2C49.402710%5D%2C%5B8.707650%2C49.424%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "groupByKey=building&" + 
                    "groupByValues=office%2Cconstruction&" + 
                    "keys=highway&" + 
                    "showMetadata=true&" + 
                    "timeout=100")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.726 49.41229672134836 ) and LINESTRING ( 8.711 49.40271, 8.70765 49.424 ) [ (8.71051919058787, 49.40576565145798, NaN) ]"))
                .body("'path'", containsString("/users/count/groupBy/tag"));
    }
    
    
    @Test
    public void test_306() throws Exception {
        
        try{
            given().accept("*/*")
                    .get(baseUrlOfSut + "/users/count/groupBy/type?" + 
                        "bboxes=ZboO%3A8.650%2C49.41762%2C8.71568%2C49.381%7CwMX%3A8.6657%2C49.408%2C8.702%2C49.3949&" + 
                        "filter=addr%3Apostcode%3D*+or+area%3A%281.0+..+1E6%29&" + 
                        "format=geojson&" + 
                        "time=%2F%2FP2Y2M2D")
                    .then();
        } catch(Exception e){
        }
    }
    
    
    @Test
    public void test_307() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/density?" + 
                    "bcircles=tjtnU%3A8.7069%2C49.425%2C28&" + 
                    "keys=highway&" + 
                    "values=secondary_link")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_308() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/density?" + 
                    "bcircles=zQKu%3A8.740%2C49.403%2C4&" + 
                    "filter=service%3Ddriveway+or+id%3A%281+..+9999%29&" + 
                    "timeout=65")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_309() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=q%3A8.704561%2C49.403252%2C8.700587%2C49.422%2C8.702%2C49.417%2C8.7216%2C49.417%2C8.704561%2C49.403252%7ClN%3A8.504561%2C49.403252%2C8.726%2C49.4243%2C8.7465%2C49.40504%2C8.7452%2C49.40630%2C8.704561%2C49.403252%7CV%3A8.704561%2C49.403252%2C8.7343%2C49.400%2C8.704%2C49.4115%2C8.70892%2C49.418%2C8.704561%2C49.40325&" + 
                    "groupByKey=7mNQ&" + 
                    "keys=evomaster_747969_ipput&" + 
                    "timeout=90")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'groupByResult'", hasItems());
    }
    
    
    @Test
    public void test_310() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/density?" + 
                    "bcircles=V%3A8.70319%2C89.416783%2C21105996463&" + 
                    "format=JSoN")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_311() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/groupBy/key?" + 
                    "bboxes=D%3A8.67699%2C49.4006%2C8.714%2C49.395&" + 
                    "filter=oneway%3D*+or+not+type%3Arelation+or+length%3A%28+..+100%29&" + 
                    "groupByKeys=maxspeed%2Cbuilding&" + 
                    "time=2008-06-06")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_312() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/density/groupBy/type?" + 
                    "bcircles=8.716%2C49.424%2C5&" + 
                    "filter=foot%21%3D*+and+not+type%3Anode+and+area%3A%281.0+..+1E6%29&" + 
                    "showMetadata=true&" + 
                    "time=2016-12-16")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(404.0))
                .body("'metadata'.'description'", containsString("Density of selected items (count of items in absolute values divided by the area in square kilometers), aggregated on the type."));
    }
    
    
    @Test
    public void test_313() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/density?" + 
                    "bboxes=8.696%2C49.422%2C8.700%2C49.393&" + 
                    "filter=landuse%3D*+and+not+geometry%3Aline&" + 
                    "showMetadata=false&" + 
                    "time=2008-10-05")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_314() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count?" + 
                    "bcircles=8.7205%2C49.402%2C62%7C8.718%2C49.4160%2C4&" + 
                    "keys=highway&" + 
                    "time=2008-05-24")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_315() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/key?" + 
                    "bcircles=YdE%3A8.71170%2C49.411291%2C6&" + 
                    "filter=addr%3Acountry%21%3D*+and+length%3A%28+..+100%29&" + 
                    "groupByKeys=addr%3Acountry%2Csource%3Amaxspeed&" + 
                    "showMetadata=yes&" + 
                    "timeout=68")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(518.0))
                .body("'metadata'.'description'", containsString("Total area of items in square meters, aggregated on the key."));
    }
    
    
    @Test
    public void test_316() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/density/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=f%3A8.73290%2C49.434%2C4&" + 
                    "format=json&" + 
                    "groupByKey=highway&" + 
                    "keys=highway&" + 
                    "timeout=63&" + 
                    "values=primary_link")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'groupByResult'", hasItems());
    }
    
    
    @Test
    public void test_317() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/ratio?" + 
                    "bboxes=KSofN%3A8.6880%2C49.419%2C8.701%2C49.394%7CIyJ%3A8.6504%2C49.428%2C8.7035%2C49.394&" + 
                    "filter2=evomaster_659270_input&" + 
                    "keys=foo&" + 
                    "keys2=evomaster_654175_input&" + 
                    "types2=RElaTion&" + 
                    "values=foo")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_318() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=UO%3A8.7325%2C49.428%2C2%7CrKpem%3A8.709%2C49.43537%2C7%7CdHGF%3A8.729%2C49.4245%2C11&" + 
                    "format=json&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=stop_line&" + 
                    "keys=highway&" + 
                    "time=2017-12-16")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_319() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/density/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=8.71700%2C49.4308%2C2%7C8.714%2C49.405840%2C7&" + 
                    "format=geojson&" + 
                    "groupByKey=highway&" + 
                    "showMetadata=no&" + 
                    "timeout=37")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'type'", containsString("FeatureCollection"));
    }
    
    
    @Test
    public void test_320() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/groupBy/boundary?" + 
                    "bcircles=B%3A8.74598%2C49.43392%2C1%7CM%3A8.700%2C49.413%2C3&" + 
                    "format=geojson&" + 
                    "keys=highway&" + 
                    "timeout=90&" + 
                    "values=bus_stop")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'type'", containsString("FeatureCollection"));
    }
    
    
    @Test
    public void test_321() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter?" + 
                    "bboxes=G%3A8.68904%2C49.4200%2C8.7132%2C49.380%7CQ%3A8.6819%2C49.429114%2C8.726071%2C49.397&" + 
                    "format=json&" + 
                    "keys=highway&" + 
                    "showMetadata=true&" + 
                    "time=2012-07-23&" + 
                    "timeout=59&" + 
                    "values=cycleway")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(254.0))
                .body("'metadata'.'description'", containsString("Total perimeter of items in meters."));
    }
    
    
    @Test
    public void test_322() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length?" + 
                    "bboxes=AYkKt%3A8.666698%2C49.41469%2C8.7323%2C49.390%7CH%3A8.6884%2C49.421%2C8.735%2C49.390&" + 
                    "filter=maxspeed%21%3D*+or+type%3Anode&" + 
                    "format=json&" + 
                    "showMetadata=yes&" + 
                    "time=2011-10-30")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(1022.0))
                .body("'metadata'.'description'", containsString("Total length of items in meters."));
    }
    
    
    @Test
    public void test_323() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/type?bpolys=cj%3A8.704561%2C49.403252%2C8.7424%2C49.434277%2C8.741%2C49.407490%2C8.785061%2C49.4065%2C8.704561%2C49.403252")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_324() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/groupBy/key?" + 
                    "bboxes=D%3A8.67699%2C49.4006%2C8.714%2C49.395&" + 
                    "groupByKeys=evomaster_2142149_input&" + 
                    "keys=fmo&" + 
                    "time=2008-06-06&" + 
                    "values=fop")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_325() throws Exception {
        
        given().accept("text/csv")
                .get(baseUrlOfSut + "/elements/count/density/groupBy/tag?" + 
                    "bcircles=8.7295%2C49.425%2C59&" + 
                    "filter=lit%3D*+or+area%3A%281.0+..+1E6%29&" + 
                    "format=csv&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=synagogue%2Ctrack")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_326() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/tag?" + 
                    "bcircles=R%3A8.7440%2C49.41032%2C8&" + 
                    "format=json&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=hotel%2Cpath&" + 
                    "showMetadata=no&" + 
                    "time=2008-12-23")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_327() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/density/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=f%3A8.73290%2C49.434%2C4&" + 
                    "groupByKey=hiihway&" + 
                    "keys=highway&" + 
                    "timeout=73&" + 
                    "values=primary_link")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'groupByResult'", hasItems());
    }
    
    
    @Test
    public void test_328() throws Exception {
        
        given().accept("text/csv")
                .get(baseUrlOfSut + "/elements/area/density/groupBy/boundary?" + 
                    "bboxes=8.685%2C49.429%2C8.720%2C49.397%7C8.673%2C49.4183%2C8.73629%2C49.385%7C8.65152%2C49.405804%2C8.7222%2C49.38232&" + 
                    "format=csv&" + 
                    "keys=highway&" + 
                    "timeout=36&" + 
                    "values=living_street")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_329() throws Exception {
        
        given().accept("text/csv")
                .get(baseUrlOfSut + "/elements/length/density/groupBy/boundary?" + 
                    "bboxes=8.660%2C49.4006%2C8.714%2C49.398%7C8.663%2C49.427764%2C8.7052%2C49.386%7C8.6672%2C49.41576%2C8.759%2C49.392&" + 
                    "format=csV&" + 
                    "keys=evomaster_8260_input&" + 
                    "time=&" + 
                    "values=evomaster_891160_input")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_330() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/groupBy/tag?" + 
                    "bboxes=8.697%2C49.429%2C8.741%2C49.388&" + 
                    "groupByKey=evomaster_673951_input&" + 
                    "keys=highway&" + 
                    "time=%2F%2FP5M7D&" + 
                    "timeout=97&" + 
                    "values=evomaster_674545_input")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'groupByResult'", hasItems());
    }
    
    
    @Test
    public void test_331() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/type?" + 
                    "bcircles=8.723%2C49.40349%2C2%7C8.715%2C49.416%2C6&" + 
                    "filter=ref%3D*+or+not+id%3A%281+..+9999%29&" + 
                    "showMetadata=false&" + 
                    "timeout=50")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_332() throws Exception {
        
        given().accept("text/csv")
                .post(baseUrlOfSut + "/elements/length/groupBy/tag?" + 
                    "bcircles=8.728668%2C49.42156%2C9&" + 
                    "format=csv&" + 
                    "groupByKey=building&" + 
                    "keys=highway&" + 
                    "timeout=98")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_333() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/type?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22zx%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.710%2C49.416%5D%2C%5B8.7044%2C49.436%5D%2C%5B8.721%2C49.4394%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22XKyg%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.71104%2C49.4395%5D%2C%5B8.7018%2C49.428684%5D%2C%5B8.702%2C49.4168%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "keys=highway&" + 
                    "showMetadata=yes")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(233.0))
                .body("'metadata'.'description'", containsString("Total area of items in square meters, aggregated on the type."));
    }
    
    
    @Test
    public void test_334() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density/groupBy/tag?" + 
                    "bboxes=RUlq%3A8.689%2C49.406%2C8.739003%2C49.386%7CRhK%3A8.655%2C49.407532%2C8.7590%2C49.390&" + 
                    "filter=oneway%3D*&" + 
                    "groupByKey=building&" + 
                    "showMetadata=yes")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(240.0))
                .body("'metadata'.'description'", containsString("Density of selected items (length of items in meters divided by the area in square kilometers), aggregated on the tag."));
    }
    
    
    @Test
    public void test_335() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/density/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=hGULh%3A8.703%2C49.4346%2C7%7CYl%3A8.710403%2C49.4299%2C5%7Cy%3A8.7086%2C49.416%2C9%7CS%3A8.719%2C49.417054%2C4&" + 
                    "groupByKey=building&" + 
                    "groupByValues=emergency_access_point%2Cgarage&" + 
                    "showMetadata=yes")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(607.0))
                .body("'metadata'.'description'", containsString("Density of selected items (length of items in meters divided by the area in square kilometers), aggregated on the boundary and on the tag."));
    }
    
    
    @Test
    public void test_336() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/density/groupBy/type?" + 
                    "bcircles=wU%3A8.72695%2C49.401%2C9&" + 
                    "filter=destination%3D*+and+geometry%3Aline+or+id%3A%281+..+9999%29&" + 
                    "showMetadata=yes")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(251.0))
                .body("'metadata'.'description'", containsString("Density of selected items (count of items in absolute values divided by the area in square kilometers), aggregated on the type."));
    }
    
    
    @Test
    public void test_337() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/type?" + 
                    "bcircles=sae%3A8.704%2C49.415%2C1%7CKdyKJ%3A8.72773%2C49.439607%2C64&" + 
                    "format=json&" + 
                    "keys=highway&" + 
                    "timeout=55")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_338() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/key?" + 
                    "bcircles=8.7176%2C49.406%2C3&" + 
                    "format=json&" + 
                    "groupByKeys=tracktype&" + 
                    "keys=highway&" + 
                    "showMetadata=true&" + 
                    "timeout=65&" + 
                    "values=elevator")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(210.0))
                .body("'metadata'.'description'", containsString("Total area of items in square meters, aggregated on the key."));
    }
    
    
    @Test
    public void test_339() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density/groupBy/type?" + 
                    "bboxes=8.655%2C49.4288%2C8.747%2C49.38219&" + 
                    "keys=highway&" + 
                    "showMetadata=true&" + 
                    "time=2009-02-07")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(243.0))
                .body("'metadata'.'description'", containsString("Density of selected items (area of items in square meters divided by the area in square kilometers), aggregated on the type."));
    }
    
    
    @Test
    public void test_340() throws Exception {
        
        given().accept("text/csv")
                .post(baseUrlOfSut + "/elements/area/density/groupBy/tag?" + 
                    "bcircles=8.738%2C49.4052%2C9&" + 
                    "filter=natural%3Dwood+or+length%3A%28+..+100%29&" + 
                    "format=csv&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=yes%2Croof&" + 
                    "time=2013-12-16")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_341() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/ratio?" + 
                    "bboxes=KSofN%3A8.6880%2C49.419%2C8.701%2C49.394%7CIyJ%3A8.6504%2C49.428%2C8.7035%2C49.394&" + 
                    "filter2=evomaster_708206_input&" + 
                    "keys=foo&" + 
                    "keys2=foo")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_342() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/boundary?" + 
                    "bcircles=A%3A8.74094%2C49.4294%2C8%7CJBc%3A8.709695%2C49.404%2C7&" + 
                    "keys=evomasver_908779_inowt&" + 
                    "types=oTHeR&" + 
                    "values=Yno%7D")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_343() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/groupBy/key?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22BJ%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.711%2C49.41163%5D%2C%5B8.704510%2C49.427%5D%2C%5B8.741%2C49.41668%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22YZo%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.738200%2C49.401210%5D%2C%5B8.721%2C49.4180%5D%2C%5B8.711097%2C49.426%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "format=geojson&" + 
                    "groupByKeys=smoothness%2Caddr%3Apostcode%2Cturn%3Alanes&" + 
                    "keys=highway&" + 
                    "time=2012-09-03&" + 
                    "values=track")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_344() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/density/groupBy/boundary?" + 
                    "bboxes=8.699%2C49.405%2C8.739%2C49.399%7C8.66921%2C49.4220%2C8.733065%2C49.3816&" + 
                    "filter=type%21%3D*+or+not+area%3A%281.0+..+1E6%29&" + 
                    "format=geojson&" + 
                    "timeout=68")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'type'", containsString("FeatureCollection"));
    }
    
    
    @Test
    public void test_345() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/density/groupBy/boundary?" + 
                    "bboxes=8.660%2C49.4006%2C8.714%2C49.398%7C8.663%2C49.427764%2C8.7052%2C49.386%7C8.6672%2C49.41576%2C8.759%2C49.392&" + 
                    "keys=foo&" + 
                    "types=otHer&" + 
                    "values=foo")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_346() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/groupBy/boundary?" + 
                    "bboxes=8.6661%2C49.409%2C8.702522%2C49.3987%7C8.6922%2C49.4297%2C8.745%2C49.380&" + 
                    "filter=addr%3Apostcode%3D*+and+geometry%3Aline&" + 
                    "format=json&" + 
                    "showMetadata=no")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_347() throws Exception {
        
        given().accept("text/csv")
                .get(baseUrlOfSut + "/users/count/groupBy/tag?" + 
                    "bboxes=8.697%2C49.429%2C8.741%2C49.388&" + 
                    "filter=&" + 
                    "format=CsV&" + 
                    "groupByKey=evomaster_672951_input&" + 
                    "keys=evomYster_674960_input&" + 
                    "showMetadata=yes&" + 
                    "timeout=97")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_348() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/key?" + 
                    "bboxes=y%3A8.6920%2C49.4204%2C8.715682%2C49.3990%7Cs%3A8.6786%2C49.4077%2C8.7004%2C49.3916%7Cu%3A8.650%2C49.424818%2C8.72764%2C49.3972%7CB%3A8.657%2C49.4069%2C8.736%2C49.393&" + 
                    "groupByKeys=evomaster_674114_input&" + 
                    "keys=highway&" + 
                    "time=%2F%2FP3M4D")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_349() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/ratio/groupBy/boundary?" + 
                    "bboxes=8.6822%2C49.4124%2C8.703%2C49.396&" + 
                    "keys=foo&" + 
                    "keys2=foo&" + 
                    "showMetadata=no&" + 
                    "time=2012-11-01&" + 
                    "timeout=80&" + 
                    "types2=way%2Crelation&" + 
                    "values=foo&" + 
                    "values2=foo")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_350() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/density/groupBy/type?" + 
                    "bcircles=e%3A8.7066%2C49.40026%2C3%7CcetX%3A8.744%2C49.43087%2C6&" + 
                    "format=geojson&" + 
                    "keys=highway&" + 
                    "showMetadata=false&" + 
                    "time=2008-03-30&" + 
                    "values=traffic_mirror")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_351() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density/groupBy/boundary?bcircles=vXLLR%3A8.72182%2C49.407%2C5%7Chi%3A8.7384%2C49.4030%2C48%7CfqB%3A8.731%2C49.4230%2C379%7CX%3A8.70791%2C49.4223%2C6")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_352() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/groupBy/boundary/groupBy/tag?" + 
                    "bboxes=t%3A8.6808%2C49.4148%2C8.735%2C49.382&" + 
                    "groupByKey=building&" + 
                    "groupByValues=chapel%2Cship%2Cstation&" + 
                    "keys=highway&" + 
                    "values=emergency_access_point")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_353() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/density/groupBy/boundary?" + 
                    "bboxes=U%3A8.691%2C49.425%2C8.732221%2C49.383&" + 
                    "keys=highway&" + 
                    "values=secondary")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_354() throws Exception {
        
        given().accept("text/csv")
                .get(baseUrlOfSut + "/elements/count/density/groupBy/boundary?" + 
                    "bboxes=W%3A8.65352%2C49.4210%2C8.756%2C49.394%7CIYsf%3A8.673%2C49.40040%2C8.710%2C49.394%7CNDG%3A8.689%2C49.4212%2C8.7307%2C49.3912&" + 
                    "format=csv&" + 
                    "keys=highway&" + 
                    "values=steps")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_355() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count?" + 
                    "bcircles=8.7411%2C49.427%2C3%7C8.722%2C49.419%2C21%7C8.7076%2C49.4050%2C8%7C8.705%2C49.418%2C3&" + 
                    "keys=highway&" + 
                    "time=2013-07-02")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_356() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/ratio?" + 
                    "bboxes=8.684%2C49.424%2C8.73350%2C49.380%7C8.6637%2C49.401%2C8.73581%2C49.38086%7C8.655%2C49.418%2C8.70753%2C49.380%7C8.672%2C49.401217%2C8.756%2C49.382313&" + 
                    "filter=surface%21%3D*+or+geometry%3Aline&" + 
                    "filter2=bicycle%21%3D*+and+geometry%3Apoint&" + 
                    "format=geojson&" + 
                    "keys2=highway&" + 
                    "values2=secondary")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_357() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=nk%3A8.721070%2C49.428%2C7%7CAJ%3A8.70608%2C49.405%2C92&" + 
                    "groupByKey=building&" + 
                    "groupByValues=demolished%2Cgive_way&" + 
                    "keys=highway&" + 
                    "showMetadata=true&" + 
                    "timeout=48&" + 
                    "values=cycleway")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(210.0))
                .body("'metadata'.'description'", containsString("Total area of items in square meters, aggregated on the boundary and on the tag."));
    }
    
    
    @Test
    public void test_358() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/boundary?" + 
                    "bcircles=T%3A8.725421%2C49.436%2C67&" + 
                    "keys=foo&" + 
                    "showMetadata=yes&" + 
                    "time=2009-10%2F%2F&" + 
                    "values=foo")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(197.0))
                .body("'metadata'.'description'", containsString("Total perimeter of items in meters."));
    }
    
    
    @Test
    public void test_359() throws Exception {
        
        given().accept("text/csv")
                .get(baseUrlOfSut + "/users/count/groupBy/tag?" + 
                    "bboxes=8.697%2C49.429%2C8.741%2C49.388&" + 
                    "filter=&" + 
                    "format=CsV&" + 
                    "groupByKey=evomaster_672951_input&" + 
                    "keys=evomaster_674960_input&" + 
                    "timeout=97")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_360() throws Exception {
        
        given().accept("text/csv")
                .get(baseUrlOfSut + "/elements/count/groupBy/tag?" + 
                    "bboxes=j%3A8.672%2C49.403%2C8.736%2C49.397%7CR%3A8.652587%2C49.419761%2C8.7176%2C49.3926%7CJ%3A8.692034%2C49.4046%2C8.71955%2C49.391%7CdJ%3A8.65206%2C49.417615%2C8.709%2C49.382&" + 
                    "format=csv&" + 
                    "groupByKey=evomaster_5291_input&" + 
                    "keys=highway&" + 
                    "time=2017-04-12&" + 
                    "values=evomaster_5292_input")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_361() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count?" + 
                    "bcircles=GJ%3A8.7236%2C49.4307%2C4%7COw%3A8.714%2C49.41607%2C50&" + 
                    "filter=highway%3D*+and+area%3A%281.0+..+1E6%29&" + 
                    "format=geojson")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_362() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/ratio?" + 
                    "bboxes=KSofN%3A8.6880%2C49.419%2C8.701%2C49.394%7CIyJ%3A8.6504%2C49.428%2C8.7035%2C49.394&" + 
                    "filter2=foo&" + 
                    "keys=foo&" + 
                    "keys2=fcqo&" + 
                    "time=2018-03-25&" + 
                    "timeout=07&" + 
                    "types2=wAy&" + 
                    "values2=foo")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_363() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/tag?" + 
                    "bboxes=vQF%3A8.655%2C49.4275%2C8.728%2C49.389&" + 
                    "filter=barrier%3D*+and+length%3A%28+..+100%29&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=platform%2Cdemolished%2Cresidential&" + 
                    "showMetadata=yes&" + 
                    "time=2017-05-30")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(240.0))
                .body("'metadata'.'description'", containsString("Total count of items in absolute values, aggregated on the tag."));
    }
    
    
    @Test
    public void test_364() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/density/groupBy/tag?" + 
                    "bboxes=8.652%2C49.416%2C8.711%2C49.397%7C8.6656%2C49.418%2C8.755%2C49.391%7C8.682844%2C49.429%2C8.7162%2C49.398%7C8.662%2C49.426%2C8.7088%2C49.39052&" + 
                    "filter=oneway%21%3D*+and+length%3A%28+..+100%29&" + 
                    "groupByKey=building&" + 
                    "groupByValues=stop%2Cresidential%2Cturning_circle&" + 
                    "showMetadata=false&" + 
                    "time=2010-02-18&" + 
                    "timeout=48")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_365() throws Exception {
        
        given().accept("text/csv")
                .post(baseUrlOfSut + "/elements/perimeter/ratio/groupBy/boundary?" + 
                    "bcircles=K%3A8.7227%2C49.43334%2C93&" + 
                    "filter2=foo&" + 
                    "format=csv&" + 
                    "keys=evomaster_1617188_input&" + 
                    "timeout=46&" + 
                    "types2=line%2Cpolygon%2Cother&" + 
                    "values=primary")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_366() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/boundary?" + 
                    "bcircles=C%3A8.7458%2C49.4061%2C95%7Cm%3A8.7031%2C49.4218%2C7%7CyGw%3A8.7208%2C49.413867%2C2&" + 
                    "filter=addr%3Apostcode%3D*+or+area%3A%281.0+..+1E6%29&" + 
                    "showMetadata=true&" + 
                    "time=2010-02-26&" + 
                    "timeout=50")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(535.0))
                .body("'metadata'.'description'", containsString("Total count of items in absolute values."));
    }
    
    
    @Test
    public void test_367() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/boundary?" + 
                    "bcircles=WB%3A8.737%2C49.400%2C9&" + 
                    "format=json&" + 
                    "showMetadata=no")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_368() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/ratio/groupBy/boundary?" + 
                    "bboxes=T%3A8.673%2C49.410214%2C8.719815%2C49.392%7CROY%3A8.65122%2C49.40049%2C8.752%2C49.394&" + 
                    "filter2=oneway%3D*&" + 
                    "keys2=highway&" + 
                    "timeout=86&" + 
                    "types2=point%2Cother&" + 
                    "values2=fok")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_369() throws Exception {
        
        given().accept("text/csv")
                .post(baseUrlOfSut + "/elements/perimeter/ratio/groupBy/boundary?" + 
                    "bcircles=K%3A8.7227%2C49.43334%2C93&" + 
                    "format=csv&" + 
                    "keys=highway&" + 
                    "keys2=highway&" + 
                    "timeout=46&" + 
                    "types2=line%2Cpolygon%2Cother")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_370() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/ratio?" + 
                    "bboxes=KSofN%3A8.6880%2C49.419%2C8.701%2C49.394%7CIyJ%3A8.6904%2C49.428%2C8.7035%2C49.394&" + 
                    "filter2=fow&" + 
                    "keys=foo&" + 
                    "keys2=fcoo&" + 
                    "types2=wAy&" + 
                    "values=evomaster_655933_input")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_371() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/density/groupBy/boundary/groupBy/tag?" + 
                    "bboxes=qQ%3A8.665%2C49.428%2C8.7220%2C49.385&" + 
                    "format=json&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=service%2Cship%2Cdemolished&" + 
                    "time=2014-12-03")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_372() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/density?" + 
                    "bboxes=SPt%3A8.671%2C49.419%2C8.715%2C49.383%7CgYy%3A8.671%2C49.403%2C8.711%2C49.381%7CPj%3A8.686%2C49.4110%2C8.745%2C49.380&" + 
                    "format=geojson&" + 
                    "keys=highway&" + 
                    "showMetadata=no&" + 
                    "time=2014-04-08&" + 
                    "values=track")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_373() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area?" + 
                    "bcircles=8.70241%2C49.423812%2C678%7C8.738%2C49.423%2C31%7C8.744%2C49.430%2C2%7C8.705%2C49.4100%2C266&" + 
                    "filter=oneway%3D*+and+id%3A%281+..+9999%29&" + 
                    "showMetadata=yes")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(214.0))
                .body("'metadata'.'description'", containsString("Total area of items in square meters."));
    }
    
    
    @Test
    public void test_374() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/ratio?" + 
                    "bboxes=hDqY%3A8.68439%2C49.416%2C8.712010%2C49.389493&" + 
                    "filter2=foo&" + 
                    "keys=foo&" + 
                    "keys2=highway")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_375() throws Exception {
        
        given().accept("text/csv")
                .post(baseUrlOfSut + "/elements/perimeter/density/groupBy/type?" + 
                    "bboxes=8.6790%2C49.42654%2C8.754%2C49.385&" + 
                    "format=csv&" + 
                    "keys=highway")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_376() throws Exception {
        
        given().accept("text/csv")
                .post(baseUrlOfSut + "/elements/perimeter/density/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=E%3A8.747205%2C49.41476%2C2%7Ch%3A8.728%2C49.412%2C3&" + 
                    "format=csv&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=yes%2Cunclassified&" + 
                    "keys=highway&" + 
                    "time=2016-05-10&" + 
                    "timeout=25&" + 
                    "values=elevator")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_377() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/groupBy/key?" + 
                    "bboxes=J%3A8.6884%2C49.427%2C8.748304%2C49.381%7CW%3A8.650624%2C49.426%2C8.7413%2C49.3927&" + 
                    "groupByKeys=addr%3Acity&" + 
                    "keys=highway&" + 
                    "showMetadata=yes&" + 
                    "time=2012-07-08&" + 
                    "values=give_way")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(372.0))
                .body("'metadata'.'description'", containsString("Total perimeter of items in meters, aggregated on the key."));
    }
    
    
    @Test
    public void test_378() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density/groupBy/type?" + 
                    "bboxes=S%3A8.650007%2C49.417%2C8.7080%2C49.381&" + 
                    "format=json&" + 
                    "showMetadata=yes&" + 
                    "timeout=53")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(1135.0))
                .body("'metadata'.'description'", containsString("Density of selected items (length of items in meters divided by the area in square kilometers), aggregated on the type."));
    }
    
    
    @Test
    public void test_379() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/density/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=8.71700%2C49.4308%2C2%7C8.714%2C49.405840%2C7&" + 
                    "format=geojson&" + 
                    "groupByKey=highway&" + 
                    "showMetadata=no&" + 
                    "time=2008-07-03&" + 
                    "timeout=37")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'type'", containsString("FeatureCollection"));
    }
    
    
    @Test
    public void test_380() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/density/groupBy/boundary?" + 
                    "bcircles=Q%3A8.703%2C49.411%2C1%7Cb%3A8.705%2C49.419%2C28&" + 
                    "keys=highway&" + 
                    "showMetadata=false&" + 
                    "time=2010-01-30")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_381() throws Exception {
        
        given().accept("text/csv")
                .post(baseUrlOfSut + "/elements/length/density?" + 
                    "bpolys=8.704561%2C49.403252%2C8.700%2C49.424%2C8.734613%2C49.429%2C8.720%2C49.407%2C8.704561%2C49.403252&" + 
                    "format=csv&" + 
                    "keys=highway&" + 
                    "showMetadata=false&" + 
                    "values=steps")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_382() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count?" + 
                    "bcircles=DU%3A8.7477%2C49.406507%2C2%7CQZZ%3A8.713%2C49.433%2C5%7CDZtEr%3A8.726%2C49.418%2C55&" + 
                    "filter=maxspeed%21%3D*+and+geometry%3Apolygon+and+length%3A%28+..+100%29&" + 
                    "time=%2F%2FP1Y4D&" + 
                    "timeout=22")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_383() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=8.704561%2C49.403252%2C8.708%2C49.404425%2C8.71500%2C49.437%2C8.7042%2C49.404%2C8.704561%2C49.403252&" + 
                    "filter=ref%21%3D*+or+area%3A%281.0+..+1E6%29&" + 
                    "groupByKey=highway&" + 
                    "showMetadata=true&" + 
                    "time=2012-12-26&" + 
                    "timeout=77")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(587.0))
                .body("'metadata'.'description'", containsString("Total length of items in meters, aggregated on the boundary and on the tag."));
    }
    
    
    @Test
    public void test_384() throws Exception {
        
        given().accept("text/csv")
                .post(baseUrlOfSut + "/users/count/density/groupBy/boundary?" + 
                    "bboxes=UsxMR%3A8.6996%2C49.42108%2C8.7236%2C49.386%7CHz%3A8.68666%2C49.420%2C8.70181%2C49.391%7CXc%3A8.6866%2C49.42509%2C8.7277%2C49.397%7Cfq%3A8.697755%2C49.401%2C8.738%2C49.39262&" + 
                    "format=csv&" + 
                    "keys=highway&" + 
                    "showMetadata=true&" + 
                    "time=%2F%2FP6M25D&" + 
                    "timeout=64")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_385() throws Exception {
        
        given().accept("text/csv")
                .post(baseUrlOfSut + "/elements/perimeter/density/groupBy/tag?" + 
                    "bpolys=8.704561%2C49.403252%2C8.7488%2C49.4116%2C8.731%2C49.412%2C8.716%2C49.439%2C8.704561%2C49.403252&" + 
                    "filter=type%3D*&" + 
                    "format=csv&" + 
                    "groupByKey=building&" + 
                    "showMetadata=no&" + 
                    "time=2009-06-08&" + 
                    "timeout=91")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_386() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/ratio/groupBy/boundary?" + 
                    "bboxes=T%3A8.673%2C49.410214%2C8.719815%2C49.392%7CROZ%3A8.65122%2C49.40049%2C8.752%2C49.394&" + 
                    "filter2=oneway%3D*&" + 
                    "keys=highway&" + 
                    "keys2=highway&" + 
                    "time=2011-05-17&" + 
                    "timeout=86&" + 
                    "types2=point%2Cother&" + 
                    "values=stop")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_387() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/density/groupBy/tag?" + 
                    "bcircles=IKceP%3A8.733089%2C49.4044%2C2%7CAdU%3A8.7406%2C49.418%2C5&" + 
                    "format=json&" + 
                    "groupByKey=building&" + 
                    "groupByValues=crossing&" + 
                    "showMetadata=true&" + 
                    "timeout=81")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(664.0))
                .body("'metadata'.'description'", containsString("Density of selected items (perimeter of items in meters divided by the area in square kilometers), aggregated on the tag."));
    }
    
    
    @Test
    public void test_388() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/density?" + 
                    "bpolys=dxb%3A8.704561%2C49.403252%2C8.7485%2C49.431%2C8.7023%2C49.4395%2C8.7280%2C49.42736%2C8.704561%2C49.403252&" + 
                    "keys=highway&" + 
                    "timeout=77&" + 
                    "values=primary")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_389() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/density?" + 
                    "bcircles=8.744%2C49.4349%2C7&" + 
                    "keys=highway&" + 
                    "timeout=96&" + 
                    "values=secondary")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_390() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/key?" + 
                    "bcircles=8.717%2C49.4130%2C3&" + 
                    "format=geojson&" + 
                    "groupByKeys=bicycle%2Cmaxspeed&" + 
                    "keys=highway&" + 
                    "timeout=98&" + 
                    "values=emergency_access_point")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_391() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/ratio/groupBy/boundary?" + 
                    "bboxes=8.693358%2C49.403090%2C8.750%2C49.395363&" + 
                    "format=geojson&" + 
                    "keys=highway&" + 
                    "keys2=highway&" + 
                    "timeout=62&" + 
                    "values=residential&" + 
                    "values2=unclassified")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'type'", containsString("FeatureCollection"));
    }
    
    
    @Test
    public void test_392() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/groupBy/tag?" + 
                    "bboxes=8.670%2C49.427%2C8.7488%2C49.386%7C8.699%2C49.4043%2C8.732%2C49.391&" + 
                    "filter=source%3Amaxspeed%21%3D*+and+not+length%3A%28+..+100%29&" + 
                    "format=geojson&" + 
                    "groupByKey=highway&" + 
                    "time=2013-11-26&" + 
                    "timeout=37")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'groupByResult'", hasItems());
    }
    
    
    @Test
    public void test_393() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/boundary?" + 
                    "bcircles=A%3A8.74094%2C49.4294%2C8%7CJBc%3A8.709695%2C49.404%2C7&" + 
                    "keys=highway&" + 
                    "showMetadata=yes&" + 
                    "time=%2F%2FP18D&" + 
                    "timeout=64")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(369.0))
                .body("'metadata'.'description'", containsString("Number of distinct active users per time interval aggregated on the boundary."));
    }
    
    
    @Test
    public void test_394() throws Exception {
        
        given().accept("text/csv")
                .get(baseUrlOfSut + "/elements/length/groupBy/boundary?" + 
                    "bcircles=K%3A8.744%2C49.404%2C6&" + 
                    "format=csv&" + 
                    "keys=highway&" + 
                    "showMetadata=yes&" + 
                    "time=2011-04-02&" + 
                    "values=crossing")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_395() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/groupBy/boundary/groupBy/tag?" + 
                    "bboxes=8.669%2C49.407%2C8.7262%2C49.3804&" + 
                    "groupByKey=building&" + 
                    "groupByValues=crossing%2Csteps%2Cresidential&" + 
                    "keys=highway&" + 
                    "showMetadata=false&" + 
                    "time=2013-06-19")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_396() throws Exception {
        
        given().accept("text/csv")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/type?" + 
                    "bboxes=Z%3A8.663%2C49.413%2C8.718%2C49.393&" + 
                    "format=csv&" + 
                    "showMetadata=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_397() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/ratio?" + 
                    "bboxes=8.674%2C49.425797%2C8.758%2C49.387&" + 
                    "filter2=maxspeed%3D*+or+not+geometry%3Apoint+and+id%3A%281+..+9999%29&" + 
                    "format=json&" + 
                    "keys2=highway&" + 
                    "time=2015-10-25&" + 
                    "timeout=53&" + 
                    "types2=line%2Cpolygon%2C")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_398() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/boundary?" + 
                    "bcircles=T%3A8.725421%2C49.436%2C67&" + 
                    "format=geojson&" + 
                    "showMetadata=yes&" + 
                    "time=2009-10-30")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(368.0))
                .body("'metadata'.'description'", containsString("Total perimeter of items in meters."))
                .body("'type'", containsString("FeatureCollection"));
    }
    
    
    @Test
    public void test_399() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/groupBy/tag?" + 
                    "bboxes=8.697%2C49.429%2C8.741%2C49.388&" + 
                    "format=json&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=synagogue%2Ctrack&" + 
                    "keys=highway&" + 
                    "showMetadata=yes&" + 
                    "time=%2F%2FP5M7D&" + 
                    "timeout=97")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(735.0))
                .body("'metadata'.'description'", containsString("Number of distinct active users per time interval aggregated on the tag."));
    }
    
    
    @Test
    public void test_400() throws Exception {
        
        given().accept("text/csv")
                .post(baseUrlOfSut + "/users/count/groupBy/key?" + 
                    "bboxes=y%3A8.6920%2C49.4204%2C8.715682%2C49.3990%7Cs%3A8.6786%2C49.4077%2C8.7004%2C49.3916%7Cu%3A8.650%2C49.424818%2C8.72764%2C49.3972%7CB%3A8.657%2C49.4069%2C8.736%2C49.393&" + 
                    "format=csv&" + 
                    "groupByKeys=oneway%2Clanes%2Cdestination&" + 
                    "keys=highway&" + 
                    "time=%2F%2FP3M4D&" + 
                    "timeout=49")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_401() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/ratio/groupBy/boundary?" + 
                    "bpolys=iHjkf%3A8.704561%2C49.403252%2C8.714%2C49.402%2C8.749018%2C49.413%2C8.717%2C49.4203%2C8.704561%2C49.403252&" + 
                    "filter=highway%21%3D*+and+not+geometry%3Apolygon+and+not+length%3A%28+..+100%29&" + 
                    "filter2=oneway%21%3D*+or+not+area%3A%281.0+..+1E6%29&" + 
                    "showMetadata=no&" + 
                    "time=2014-11-18&" + 
                    "timeout=57")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_402() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/ratio?" + 
                    "bboxes=iP%3A8.665%2C49.424%2C8.7015%2C49.384%7CodTOM%3A8.67127%2C49.416%2C8.7350%2C49.3839&" + 
                    "filter2=ref%21%3D*+and+area%3A%281.0+..+1E6%29&" + 
                    "format=json&" + 
                    "keys=highway&" + 
                    "timeout=45&" + 
                    "types2=point%2C")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_403() throws Exception {
        
        given().accept("text/csv")
                .post(baseUrlOfSut + "/elements/perimeter/ratio/groupBy/boundary?" + 
                    "bcircles=K%3A8.7227%2C49.43334%2C93&" + 
                    "format=csv&" + 
                    "keys=highway&" + 
                    "keys2=highway&" + 
                    "timeout=46&" + 
                    "types2=line%2Cpolygon%2Cother&" + 
                    "values=primary&" + 
                    "values2=residential")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_404() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/type?" + 
                    "bcircles=o%3A8.737%2C49.41341%2C387&" + 
                    "keys=highway&" + 
                    "values=tertiary")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_405() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/type?" + 
                    "bcircles=o%3A8.737%2C79.20951%2C3&" + 
                    "filter=fo&" + 
                    "keys=fmdiw_Q&" + 
                    "time=foo&" + 
                    "values=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_406() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/groupBy/type?" + 
                    "bpolys=b&" + 
                    "filter=NbiAsY%5EtgHkQJLWF&" + 
                    "format=CsV&" + 
                    "time=OhDf1HCEbMVpnrKG&" + 
                    "timeout=-352.002873609486&" + 
                    "types=N78hp3HOBk3QXC&" + 
                    "values=B%40Aj%3A")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_407() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/key?" + 
                    "bboxes=y%3A8.6920%2C49.4204%2C8.715682%2C49.3990%7Cs%3A8.6786%2C49.4077%2C8.7004%2C49.3916%7Cu%3A8.650%2C49.424818%2C8.72764%2C49.3972%7CB%3A8.657%2C49.4069%2C8.736%2C49.393&" + 
                    "filter=foo&" + 
                    "groupByKeys=evomaster_1612274_input&" + 
                    "time=%2F%2FP3M4D&" + 
                    "values=evomaster_1612275_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The keys, values and types parameters must be empty, when you set the filter parameter."));
    }
    
    
    @Test
    public void test_408() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/density/groupBy/type?" + 
                    "bpolys=y&" + 
                    "format=VuxYA8lT9ayJSsv1&" + 
                    "showMetadata=evomaster_2645_input&" + 
                    "types=evomaster_2647_inlut&" + 
                    "values=VxI5TqgVuVYA2gq%3A")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_409() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/density/groupBy/tag?" + 
                    "bcircles=_aVZ%3A8.715266%2C48.620%2C4%7COWzYX%3A8.747%2C00.402%2C2%7Cm%3A8.532020%2C570340%2C70%7Ch%3A8.7302%2C63.419%2C-1800%2F8&" + 
                    "format=CSv&" + 
                    "groupByKey=Ycg&" + 
                    "groupByValues=RqW6Y&" + 
                    "keys=41O2S%3Dt0I&" + 
                    "showMetadata=%607%C2%81dK&" + 
                    "time=%2F%2FN1U7x6J2&" + 
                    "types=caVZ%3A8%2C729156%2C28.610%2C4%7COWzY_%3A8%2F70%3B049*522%2C2%C2%80m%3A80732020%2855.401*70%7Cg%3A9.7302%2C65.415%2C5540%2C&" + 
                    "values=A")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Each bcircle must consist of a lon/lat coordinate pair plus a buffer in meters."));
    }
    
    
    @Test
    public void test_410() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/density?" + 
                    "bcircles=tjtnW%3A8.7069%2C49.435%2C2&" + 
                    "filter=foo&" + 
                    "keys=highwaz&" + 
                    "showMetadata=foo&" + 
                    "time=foo&" + 
                    "types=foo&" + 
                    "values=secondary_lgni%3A")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given parameter showMetadata can only contain the values 'true', 'yes', 'false', or 'no'."));
    }
    
    
    @Test
    public void test_411() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count?" + 
                    "bcircles=DU%3A8.7477%2C49.406507%2C2%7CQZZ%3A8.713%2C49.433%2C5%7CDZtEr%3A8.726%2C49.418%2C55&" + 
                    "filter=evomaster_11694_input&" + 
                    "time=evomaster_11695_input&" + 
                    "timeout=22")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_412() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count?" + 
                    "bcircles=GJ%3A8.7236%2C49.4305%2C4%7COw%3A8.714%2C49.41607%2C50&" + 
                    "filter=mSzvK_HTZsQ&" + 
                    "format=geojson&" + 
                    "keys=evsmaster_4304_input&" + 
                    "showMetadata=foo&" + 
                    "values=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given parameter showMetadata can only contain the values 'true', 'yes', 'false', or 'no'."));
    }
    
    
    @Test
    public void test_413() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/type?" + 
                    "bpolys=I&" + 
                    "filter=5Ew&" + 
                    "keys=aE71XM1Zuh5vbTh9&" + 
                    "showMetadata=419689gCMs&" + 
                    "values=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_414() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/groupBy/type?" + 
                    "bpolys=u&" + 
                    "format=ZjiAL&" + 
                    "keys=qh_iVEPiUCk&" + 
                    "types=&" + 
                    "values=BFk4oxT88")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_415() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/groupBy/tag?" + 
                    "bboxes=8.670%2C49.427%2C8.7488%2C49.386%7C8.699%2C49.4043%2C8.732%2C49.391&" + 
                    "filter=evomaster_1513130_input&" + 
                    "format=geojson&" + 
                    "groupByKey=highway&" + 
                    "keys=foo&" + 
                    "time=2013-11-26&" + 
                    "timeout=37")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The keys, values and types parameters must be empty, when you set the filter parameter."));
    }
    
    
    @Test
    public void test_416() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/key?" + 
                    "bcircles=6.717%2C49.4130%2C3&" + 
                    "filter=foo&" + 
                    "groupByKeys=evomaster_375644_input&" + 
                    "time=foo&" + 
                    "timeout=98&" + 
                    "types=foo&" + 
                    "values=emergency_access_point")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Parameter 'types' (and 'types2') can only have 'node' and/or 'way' and/or 'relation' OR 'point' and/or 'line' and/or 'polygon' and/or 'other'"));
    }
    
    
    @Test
    public void test_417() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/groupBy/key?" + 
                    "bboxes=J%3A8.6884%2C49.427%2C8.748304%2C49.381%7CW%3A8.650624%2C49.426%2C8.7413%2C49.3927&" + 
                    "filter=foo&" + 
                    "groupByKeys=%5Dddr%3Acity&" + 
                    "keys=hifhxay&" + 
                    "time=2012-07-%2C%3A")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_418() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/boundary?" + 
                    "bcircles=T%3A8.725421%2C49.436%2C67&" + 
                    "filter=foo&" + 
                    "format=geojson&" + 
                    "keys=foo&" + 
                    "showMetadata=yes&" + 
                    "time=2009-10-30")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The keys, values and types parameters must be empty, when you set the filter parameter."));
    }
    
    
    @Test
    public void test_419() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/density/groupBy/type?" + 
                    "bpolys=J&" + 
                    "showMetadata=SWZCrbwpo4lKa&" + 
                    "types=pEO3jASI")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_420() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/density/groupBy/type?" + 
                    "bcircles=e%3A8.7066%2C49.40026%2C3%7CcetX%3A8.744%2C49.43087%2C6&" + 
                    "format=geojson&" + 
                    "keys=highway&" + 
                    "time=2008-03-30&" + 
                    "types=foo&" + 
                    "values=traffic_mirror")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Parameter 'types' (and 'types2') can only have 'node' and/or 'way' and/or 'relation' OR 'point' and/or 'line' and/or 'polygon' and/or 'other'"));
    }
    
    
    @Test
    public void test_421() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/density/groupBy/tag?" + 
                    "bpolys=8.704561%2C49.403252%2C8.7488%2C49.4116%2C8.731%2C49.412%2C8.716%2C49.439%2C8.704561%2C49.403252&" + 
                    "filter=type%3D*&" + 
                    "format=csv&" + 
                    "groupByKey=fuilding&" + 
                    "keys=foo&" + 
                    "time=2009-06-08&" + 
                    "values=fooA")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The keys, values and types parameters must be empty, when you set the filter parameter."));
    }
    
    
    @Test
    public void test_422() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/density/groupBy/tag?" + 
                    "bcircles=IKceP%3A8.733089%2C49.4044%2C2%7CAdU%3A8.7406%2C49.418%2C5&" + 
                    "groupByKey=buildingO&" + 
                    "showMetadata=true&" + 
                    "time=foo&" + 
                    "values=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_423() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/density/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=E%3A8.747205%2C49.41476%2C2%7Ch%3A8.728%2C49.412%2C3&" + 
                    "filter=foo&" + 
                    "format=csv&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=yes%2Cunclassified&" + 
                    "keys=highway&" + 
                    "time=2016-05-10&" + 
                    "timeout=25&" + 
                    "values=elevator")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The keys, values and types parameters must be empty, when you set the filter parameter."));
    }
    
    
    @Test
    public void test_424() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/density/groupBy/boundary?" + 
                    "bcircles=Q%3A8.703%2C49.411%2C1%7Cb%3A8.705%2C49.419%2C28&" + 
                    "keys=highway&" + 
                    "showMetadata=false&" + 
                    "time=2010-01-30&" + 
                    "types=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Parameter 'types' (and 'types2') can only have 'node' and/or 'way' and/or 'relation' OR 'point' and/or 'line' and/or 'polygon' and/or 'other'"));
    }
    
    
    @Test
    public void test_425() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/density/groupBy/boundary?" + 
                    "bboxes=8.699%2C49.405%2C8.739%2C49.399%7C8.66921%2C49.4220%2C8.733065%2C49.3816&" + 
                    "filter=type%21%3D*+or+not+area%3A%28100+..+1E6%29&" + 
                    "format=geojson&" + 
                    "time=8.699%2C49.405%2C8.739%2C49.399%7C8.66921%2C49.4220%2C8.733065%2C49.3816&" + 
                    "timeout=68")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_426() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/density?" + 
                    "bpolys=dxb%3A8.704561%2C49.403252%2C8.7485%2C49.431%2C8.7023%2C49.4395%2C8.7280%2C49.42736%2C8.704561%2C49.403252&" + 
                    "keys=highway&" + 
                    "time=foo&" + 
                    "timeout=77&" + 
                    "values=evomaster_530420_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_427() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/density?" + 
                    "bcircles=zQKu%3A8.740%2C49.403%2C4&" + 
                    "filter=service%3Ddriveway+or+id%3A%281+..+9999%29&" + 
                    "format=foo&" + 
                    "keys=foo&" + 
                    "showMetadata=foo&" + 
                    "timeout=65&" + 
                    "types=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given parameter showMetadata can only contain the values 'true', 'yes', 'false', or 'no'."));
    }
    
    
    @Test
    public void test_428() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter?" + 
                    "bpolys=aee%3A8.704561%2C49.403252%2C8.700%2C49.4111%2C8.70430%2C49.412%2C8.710%2C49.4282%2C8.704561%2C49.403252%7CfTO%3A8.704561%2C49.403252%2C8.749%2C49.4089%2C8.7049%2C49.410%2C8.7272%2C49.404%2C8.704561%2C49.40325&" + 
                    "filter=evomaster_877868_input&" + 
                    "keys=highway&" + 
                    "showMetadata=false&" + 
                    "time=KaGBxfU&" + 
                    "values=footvay")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_429() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter?" + 
                    "bboxes=G%3A8.68904%2C49.4200%2C8.7132%2C49.380%7CQ%3A8.6819%2C49.429114%2C8.726071%2C49.397&" + 
                    "filter=foo&" + 
                    "format=json&" + 
                    "keys=highwayX&" + 
                    "showMetadata=true&" + 
                    "time=2012-07-23&" + 
                    "timeout=59")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The keys, values and types parameters must be empty, when you set the filter parameter."));
    }
    
    
    @Test
    public void test_430() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/ratio?" + 
                    "bboxes=8.674%2C49.425797%2C8.758%2C49.387&" + 
                    "filter2=evomaster_1481754_input&" + 
                    "format=json&" + 
                    "keys=foo&" + 
                    "keys2=highway&" + 
                    "time=2015-10-25&" + 
                    "timeout=53&" + 
                    "types2=evomaster_1481755_input&" + 
                    "values2=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Parameter 'types' (and 'types2') can only have 'node' and/or 'way' and/or 'relation' OR 'point' and/or 'line' and/or 'polygon' and/or 'other'"));
    }
    
    
    @Test
    public void test_431() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/type?" + 
                    "bcircles=8.723%2C49.40349%2C1%7C8.715%2C49.416%2C6&" + 
                    "keys=foo&" + 
                    "showMetadata=false&" + 
                    "time=foo&" + 
                    "timeout=5")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_432() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/groupBy/type?" + 
                    "bpolys=%5D&" + 
                    "format=%3A.MmEl%5B%7F%5CCf%5D_&" + 
                    "keys=47VnMgjSTs%5Cee&" + 
                    "showMetadata=JY1PtQd%2C&" + 
                    "types=nh&" + 
                    "values=H1QuOh%2C")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_433() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/tag?" + 
                    "bcircles=8.728668%2C49.42156%2C9&" + 
                    "filter=foo&" + 
                    "format=csv&" + 
                    "groupByKey=evomaster_78657_input&" + 
                    "groupByValues=foo&" + 
                    "keys=evomaster_78658_input&" + 
                    "timeout=98")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The keys, values and types parameters must be empty, when you set the filter parameter."));
    }
    
    
    @Test
    public void test_434() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/groupBy/tag?" + 
                    "bcircles=8.716011%2C49.42870%2C86I79371317&" + 
                    "groupByKey=_wbU&" + 
                    "groupByValues=evomaster_2369_input&" + 
                    "keys=foo&" + 
                    "showMetadata=false&" + 
                    "time=evomaster_2370_input&" + 
                    "types=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Each bcircle must consist of a lon/lat coordinate pair plus a buffer in meters."));
    }
    
    
    @Test
    public void test_435() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/key?" + 
                    "bcircles=&" + 
                    "bpolys=M&" + 
                    "groupByKeys=FDY7dJ&" + 
                    "showMetadata=bcPQ_G&" + 
                    "time=dQ3hIRGmAU2eySk&" + 
                    "values=OB")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_436() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/groupBy/key?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22BJ%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.711%2C49.41163%5D%2C%5B8.704510%2C49.427%5D%2C%5B8.741%2C49.41668%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22YZo%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.738200%2C49.401210%5D%2C%5B8.721%2C49.4180%5D%2C%5B8.711097%2C49.426%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=foo&" + 
                    "groupByKeys=evomaster_6063_input&" + 
                    "time=2012-09-0&" + 
                    "types=foo&" + 
                    "values=evomaster_6064_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Parameter 'types' (and 'types2') can only have 'node' and/or 'way' and/or 'relation' OR 'point' and/or 'line' and/or 'polygon' and/or 'other'"));
    }
    
    
    @Test
    public void test_437() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/boundary?" + 
                    "bpolys=R&" + 
                    "format=KE6jI&" + 
                    "keys=QSf_4ixoW1o7bZT_&" + 
                    "time=Z7t8A7&" + 
                    "types=vW7IM7L2C")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_438() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/groupBy/boundary?" + 
                    "bcircles=K%3A8.744%2C49.404%2C6&" + 
                    "filter=foo&" + 
                    "format=csv&" + 
                    "keys=highway&" + 
                    "time=2011-04-02&" + 
                    "values=crossing")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The keys, values and types parameters must be empty, when you set the filter parameter."));
    }
    
    
    @Test
    public void test_439() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density/groupBy/type?" + 
                    "bboxes=jUcygq2e_z0Grax&" + 
                    "bpolys=Yuibc&" + 
                    "keys=AP9S1iymPdRShf&" + 
                    "time=l0Y5IJTOESfxkbb0&" + 
                    "types=blA")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_440() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/density/groupBy/type?" + 
                    "bpolys=SwiBz%3A8.704561%2C49.403252%2C8.748%2C49.4230%2C8.7369%2C49.43%3F%2C8.7047%2C49.416179%2C8.704561%2C49.403252%7CwifgK%3A8.704561%2C49.403252%2C8.739%2C49.4261%2C8.7429%2C49.430938%2C8.703681%2C49.416%2C8.704561%2C49.403252&" + 
                    "filter=evomaster_329634_input&" + 
                    "format=evomaster_329635_input&" + 
                    "showMetadata=foo&" + 
                    "time=%3A013-11-20&" + 
                    "values=bus_stop")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The bpolys parameter must contain double-parseable values in form of lon/lat coordinate pairs."));
    }
    
    
    @Test
    public void test_441() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density/groupBy/tag?" + 
                    "bcircles=&" + 
                    "bpolys=q2&" + 
                    "format=dj41CNnoqvhX&" + 
                    "groupByKey=rPp4Y4&" + 
                    "groupByValues=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_442() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/density/groupBy/tag?" + 
                    "bboxes=8.652%2C49.416%2C8.711%2C49.397%7C8.6656%2C49.418%2C8.755%2C49.391%7C8.682844%2C49.429%2C8.7162%2C49.398%7C8.662%2C49.426%2C8.7088%2C49.39052&" + 
                    "filter=oneway%21%3D*+and+length%3A%28+..+100%29&" + 
                    "groupByKey=building&" + 
                    "keys=foo&" + 
                    "showMetadata=false&" + 
                    "time=2010-02-18&" + 
                    "timeout=48&" + 
                    "values=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The keys, values and types parameters must be empty, when you set the filter parameter."));
    }
    
    
    @Test
    public void test_443() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=9&" + 
                    "format=KmtmQ&" + 
                    "groupByKey=8l0&" + 
                    "keys=n1kkgezNw_LG&" + 
                    "time=Pd&" + 
                    "types=9i&" + 
                    "values=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_444() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/density/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=hGULh%3A8.703%2C49.4346%2C7%7CYl%3A8.710403%2C49.4299%2C5%7Cy%3A8.7086%2C49.416%2C9%7CS%3A8.719%2C49.417054%2C4&" + 
                    "groupByKey=building&" + 
                    "groupByValues=emergency_access_point%2Cgarage&" + 
                    "keys=foo&" + 
                    "time=foo&" + 
                    "types=foo&" + 
                    "values=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Parameter 'types' (and 'types2') can only have 'node' and/or 'way' and/or 'relation' OR 'point' and/or 'line' and/or 'polygon' and/or 'other'"));
    }
    
    
    @Test
    public void test_445() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density/groupBy/boundary?" + 
                    "bcircles=vXLLR%3A8.72182%2C49.407%2C5%7Chi%3A8.7384%2C49.4030%2C48%7CfqB%3A8.731%2C49.4230%2C379%7CX%3A8.70791%2C49.4223%2C6&" + 
                    "filter=evomaster_1730824_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Invalid filter syntax. Please look at the additional info and examples about the filter parameter at https://docs.ohsome.org/ohsome-api. Detailed error message: line 1, column 24: whitespaces, EQUALS (=), NOT_EQUALS (!=) or in expected, EOF encountered."));
    }
    
    
    @Test
    public void test_446() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/density/groupBy/boundary?" + 
                    "bboxes=8.660%2C49.4006%2C8.714%2C49.398%7C8.663%2C49.427764%2C8.7052%2C49.386%7C8.6672%2C49.41576%2C8.759%2C49.392&" + 
                    "format=csV&" + 
                    "keys=evomaster_8260_input&" + 
                    "time=f&" + 
                    "values=rkkB4puOiWyP")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_447() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density?" + 
                    "bpolys=B&" + 
                    "filter=PsKW_C1wbS&" + 
                    "format=Sj&" + 
                    "showMetadata=Nq4KIw8B9tj&" + 
                    "values=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_448() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length?" + 
                    "bpolys=%7B&" + 
                    "filter=nt&" + 
                    "format=Csv&" + 
                    "time=hjs48%7B")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in reading of the given GeoJSON."));
    }
    
    
    @Test
    public void test_449() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length?" + 
                    "bboxes=AYkKt%3A8.666698%2C49.41469%2C8.7323%2C49.390%7CH%3A8.6884%2C49.421%2C8.735%2C49.390&" + 
                    "keys=foo&" + 
                    "time=evomaster_78110_input&" + 
                    "types=foo&" + 
                    "values=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Parameter 'types' (and 'types2') can only have 'node' and/or 'way' and/or 'relation' OR 'point' and/or 'line' and/or 'polygon' and/or 'other'"));
    }
    
    
    @Test
    public void test_450() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/ratio/groupBy/boundary?" + 
                    "bboxes=T%3A8.673%2C49.410214%2C8.719815%2C49.392%7CROZ%3A8.65122%2C49.40049%2C8.752%2C49.394&" + 
                    "filter2=oneway%3D*&" + 
                    "keys=highway&" + 
                    "keys2=highway&" + 
                    "time=2011-0%3D-17&" + 
                    "timeout=86&" + 
                    "values=stop&" + 
                    "values2=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_451() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/ratio?" + 
                    "bpolys=J&" + 
                    "keys=PvQ2tgsfn5Xu2&" + 
                    "keys2=A7_fyAxqzMDgL&" + 
                    "showMetadata=HxBVe8aTvbLcVdF&" + 
                    "types2=2FdyTx059DR&" + 
                    "values=SxpdvpKZ4")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_452() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/type?" + 
                    "bpolys=Es&" + 
                    "filter=&" + 
                    "format=zW4mmkM4&" + 
                    "keys=yax&" + 
                    "showMetadata=q&" + 
                    "time=L&" + 
                    "timeout=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_453() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/groupBy/type?" + 
                    "bpolys=Y&" + 
                    "format=oktJe2EWaXBnxLtJ&" + 
                    "keys=NEbH1nzl1Ekej&" + 
                    "showMetadata=eFmT8CAqKdX&" + 
                    "time=FgGRJe3&" + 
                    "types=VhvgTJuNJxE&" + 
                    "values=evomaster_5625_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_454() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/tag?" + 
                    "bboxes=vQF%3A8.655%2C49.4275%2C8.728%2C49.389&" + 
                    "filter=barrier%3D*+and+length%3A%28+..+100%29&" + 
                    "groupByKey=evomaster_304679_input&" + 
                    "groupByValues=evomaster_304680_input&" + 
                    "keys=foo&" + 
                    "showMetadata=yes&" + 
                    "time=2017-05-30")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The keys, values and types parameters must be empty, when you set the filter parameter."));
    }
    
    
    @Test
    public void test_455() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/groupBy/tag?" + 
                    "bboxes=j%3A8.672%2C49.403%2C8.736%2C49.397%7CR%3A8.652587%2C49.419761%2C8.7176%2C49.3926%7CJ%3A8.692034%2C49.4046%2C8.71955%2C49.391%7CdJ%3A8.65206%2C49.417615%2C8.709%2C49.382&" + 
                    "groupByKey=evomaster_5291_input&" + 
                    "time=2017-04-12&" + 
                    "values=evomaster_5292_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("There cannot be more input values in the values|values2 than in the keys|keys2 parameter, as values_n must fit to keys_n."));
    }
    
    
    @Test
    public void test_456() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/key?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22klWEK%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.745%2C49.40444%5D%2C%5B8.7341%2C49.426%5D%2C%5B8.7019%2C49.41989%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22CV%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coorDinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.734%2C49.4263%5D%2C%5B8.7070%2C49.424%5D%2C%5B8.71570%2C49.4305%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=evomaster_30366_input&" + 
                    "format=foo&" + 
                    "groupByKeys=evomaster_30513_input&" + 
                    "showMetadata=evomaster_30367_input&" + 
                    "types=evomaster_30368_input&" + 
                    "values=evomaster_8872_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided GeoJSON cannot be converted."));
    }
    
    
    @Test
    public void test_457() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/groupBy/key?" + 
                    "bpolys=R&" + 
                    "format=uW9ETxECmb&" + 
                    "groupByKeys=sI&" + 
                    "keys=SYKY0Jp1hlC9k&" + 
                    "time=pZeepgiuHYBhUl&" + 
                    "values=STJU35IID")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_458() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=Ni&" + 
                    "format=COVGisA2fs6H&" + 
                    "groupByKey=udYnjjFNx&" + 
                    "groupByValues=2dodfY6oPerT58&" + 
                    "keys=7vZ41fWvPx3lnxf&" + 
                    "types=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_459() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/groupBy/boundary/groupBy/tag?" + 
                    "bboxes=t%3A8.6808%2C49.4148%2C8.735%2C49.382&" + 
                    "groupByKey=building&" + 
                    "groupByValues=chapel%2Cship%2Cstatikn&" + 
                    "keys=highway&" + 
                    "time=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_460() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/boundary?" + 
                    "bcircles=D%3A8.7458%2C49.4061%2C95%7Cm%3A8.7031%2C49.4218%2C7%7CyGw%3A8.7208%2C49.413867%2C2&" + 
                    "filter=addr%3Apostcode%3D*+or+area%3A%281.0+..+1E6%29&" + 
                    "showMetadata=true&" + 
                    "time=2%2F10-02%2F26&" + 
                    "timeout=5&" + 
                    "values=fooLB")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_461() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/groupBy/boundary?" + 
                    "bboxes=8.6661%2C49.409%2C8.702522%2C49.3987%7C8.6922%2C49.4297%2C8.745%2C49.380&" + 
                    "format=json&" + 
                    "keys=foo&" + 
                    "showMetadata=no&" + 
                    "time=foo&" + 
                    "values=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_462() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/density/groupBy/type?" + 
                    "bcircles=wU%3A8.72695%2C49.401%2C9&" + 
                    "filter=destination%3D*+and+geometry%3Aline+or+id%3A%281+..+9999%29&" + 
                    "keys=foo&" + 
                    "showMetadata=yes&" + 
                    "types=fon&" + 
                    "values=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Parameter 'types' (and 'types2') can only have 'node' and/or 'way' and/or 'relation' OR 'point' and/or 'line' and/or 'polygon' and/or 'other'"));
    }
    
    
    @Test
    public void test_463() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/density/groupBy/type?" + 
                    "bcircles=8.716%2C49.424%2C5&" + 
                    "showMetadata=evomaster_42812_input&" + 
                    "time=2016-12-16&" + 
                    "values=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given parameter showMetadata can only contain the values 'true', 'yes', 'false', or 'no'."));
    }
    
    
    @Test
    public void test_464() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/density/groupBy/tag?" + 
                    "bcircles=4.7377%2C82.1061%2C61314652-%7C6.775835%2C07.1.30%2C9&" + 
                    "filter=3jwxKi0&" + 
                    "format=roo0jNr%60&" + 
                    "groupByKey=%5ERcRb&" + 
                    "groupByValues=4.7287.28.414%3B%2C5%2F5166724%7C8.632815%2854.143&" + 
                    "keys=a&" + 
                    "showMetadata=roo0jNr%60&" + 
                    "types=gto&" + 
                    "values=A")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Each bcircle must consist of a lon/lat coordinate pair plus a buffer in meters."));
    }
    
    
    @Test
    public void test_465() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/density/groupBy/tag?" + 
                    "bcircles=8.7295%2C49.425%2C59&" + 
                    "groupByKey=evomaster_1080254_input&" + 
                    "groupByValues=evomaster_1080253_input&" + 
                    "keys=foo&" + 
                    "time=foo&" + 
                    "values=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_466() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/density/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=8.71700%2C49.4308%2C2%7C8.714%2C49.405840%2C7&" + 
                    "format=geojson&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=foo&" + 
                    "showMetadata=no&" + 
                    "time=2008-07-03&" + 
                    "timeout=37&" + 
                    "values=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("There cannot be more input values in the values|values2 than in the keys|keys2 parameter, as values_n must fit to keys_n."));
    }
    
    
    @Test
    public void test_467() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/density/groupBy/boundary?" + 
                    "bboxes=U%3A8.691%2C49.425%2C8.732221%2C49.383&" + 
                    "filter=foo&" + 
                    "keys=evomaster_1816_input&" + 
                    "types=foo&" + 
                    "values=secondary")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Parameter 'types' (and 'types2') can only have 'node' and/or 'way' and/or 'relation' OR 'point' and/or 'line' and/or 'polygon' and/or 'other'"));
    }
    
    
    @Test
    public void test_468() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/density/groupBy/boundary?" + 
                    "bboxes=W%3A8.65352%2C49.4210%2C8.756%2C49.394%7CIYsf%3A8.673%2C49.40040%2C8.710%2C49.394%7CNDG%3A8.689%2C49.4212%2C8.7307%2C49.3912&" + 
                    "keys=hjghway&" + 
                    "types=foo&" + 
                    "values=step")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Parameter 'types' (and 'types2') can only have 'node' and/or 'way' and/or 'relation' OR 'point' and/or 'line' and/or 'polygon' and/or 'other'"));
    }
    
    
    @Test
    public void test_469() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/density?" + 
                    "bboxes=SPt%3A8.671%2C49.419%2C8.715%2C49.383%7CgYy%3A8.671%2C49.403%2C8.711%2C49.381%7CPj%3A8.686%2C49.4110%2C8.745%2C49.38&" + 
                    "filter=doo&" + 
                    "keys=highway&" + 
                    "showMetadata=no&" + 
                    "time=2014-%2F4%5E0%3A")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_470() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/density?" + 
                    "bboxes=8.696%2C49.422%2C8.700%2C49.393&" + 
                    "filter=landuse%3D*+and+not+geometry%3Aline&" + 
                    "keys=fno&" + 
                    "showMetadata=false&" + 
                    "time=2008-10-05&" + 
                    "values=fooLC")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The keys, values and types parameters must be empty, when you set the filter parameter."));
    }
    
    
    @Test
    public void test_471() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count?" + 
                    "bcircles=8.7411%2C49.427%2C3%7C8.722%2C49.419%2C21%7C8.7076%2C49.4050%2C8%7C8.705%2C49.418%2C3&" + 
                    "filter=foo&" + 
                    "format=foo&" + 
                    "keys=highway&" + 
                    "time=2013-07-02")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given 'format' parameter is invalid. Please choose between 'geojson'(only available for /groupBy/boundary and data extraction requests), 'json', or 'csv'."));
    }
    
    
    @Test
    public void test_472() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count?" + 
                    "bcircles=8.7305%2C49.402%2C62%7C8.718%2C49.4160%2C4&" + 
                    "filter=foo&" + 
                    "format=foo&" + 
                    "keys=highway&" + 
                    "showMetadata=foo&" + 
                    "values=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given parameter showMetadata can only contain the values 'true', 'yes', 'false', or 'no'."));
    }
    
    
    @Test
    public void test_473() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/ratio/groupBy/boundary?" + 
                    "bboxes=foo&" + 
                    "filter=evomaster_50813_input&" + 
                    "filter2=maxspeed%3D*+and+type%3Away&" + 
                    "format=Csv&" + 
                    "keys=foo&" + 
                    "keys2=highway&" + 
                    "time=2016-11-10&" + 
                    "types2=evomaster_50814_input&" + 
                    "values=fo%7F")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_474() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/ratio?" + 
                    "bpolys=y&" + 
                    "keys=BZrFxu2FHU5GtJJ&" + 
                    "keys2=3JFS5Lt5m&" + 
                    "types=wfap1sV&" + 
                    "values=yjnaX8Pip&" + 
                    "values2=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_475() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/ratio?" + 
                    "bboxes=iP%3A8.665%2C49.424%2C8.7015%2C49.384%7CodTOM%3A8.67127%2C49.416%2C8.7350%2C49.3839&" + 
                    "filter2=evomaster_4242_input&" + 
                    "format=json&" + 
                    "keys=highway&" + 
                    "time=foo&" + 
                    "timeout=45&" + 
                    "types=foo&" + 
                    "types2=point%2C&" + 
                    "values2=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Parameter 'types' (and 'types2') can only have 'node' and/or 'way' and/or 'relation' OR 'point' and/or 'line' and/or 'polygon' and/or 'other'"));
    }
    
    
    @Test
    public void test_476() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/type?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22zx%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.710%2C49.416%5D%2C%5B8.7044%2C49.436%5D%2C%5B8.721%2C49.4394%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22XKyg%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.71104%2C49.4395%5D%2C%5B8.7018%2C49.428684%5D%2C%5B8.702%2C49.4168%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "keys=evomaster_124333_input&" + 
                    "showMetadata=yes&" + 
                    "time=foo&" + 
                    "values=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_477() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/tag?" + 
                    "bboxes=a5Sy1u05bJWlPWI&" + 
                    "bcircles=vqb&" + 
                    "groupByKey=RRu1xTr01&" + 
                    "groupByValues=6&" + 
                    "time=0&" + 
                    "timeout=HN7C")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_478() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/tag?" + 
                    "bcircles=R%3A8.7440%2C79.41001%2C8&" + 
                    "filter=foo&" + 
                    "format=jron&" + 
                    "groupByKey=cvomaster_2141347_input&" + 
                    "keys=TooF&" + 
                    "showMetadata=no&" + 
                    "values=buoh")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given 'format' parameter is invalid. Please choose between 'geojson'(only available for /groupBy/boundary and data extraction requests), 'json', or 'csv'."));
    }
    
    
    @Test
    public void test_479() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/key?" + 
                    "bcircles=8.7176%2C59.406%2C3&" + 
                    "filter=foo&" + 
                    "format=evomaster_1800256_input&" + 
                    "groupByKeys=evomaster_1800073_input&" + 
                    "keys=iighway&" + 
                    "showMetadata=true&" + 
                    "time=foo&" + 
                    "timeout=65&" + 
                    "values=evomaster_1800257_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given 'format' parameter is invalid. Please choose between 'geojson'(only available for /groupBy/boundary and data extraction requests), 'json', or 'csv'."));
    }
    
    
    @Test
    public void test_480() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/key?" + 
                    "bcircles=YdE%3A8.71170%2C48.411291%2C6&" + 
                    "groupByKeys=evomaster_11082_input&" + 
                    "showMetadata=&" + 
                    "time=foo&" + 
                    "timeout=68")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_481() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=nk%3A8.721070%2C49.428%2C7%7CAJ%3A8.70608%2C49.405%2C92&" + 
                    "groupByKey=building&" + 
                    "groupByValues=demolisheT%2Cgive_way&" + 
                    "keys=highway&" + 
                    "showMetadata=true&" + 
                    "time=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_482() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=T%3A8.738688%2C49.412%2C2%7CXm%3A8.7180%2C49.427%2C2%7CX%3A8%3E720%2C49.414%2C5%7CXpBdd%3A8.718551%2C49.402%2C693560199&" + 
                    "groupByKey=evomaster_152200_input&" + 
                    "showMetadata=evomaster_46644_input&" + 
                    "types=fop&" + 
                    "values=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Each bcircle must consist of a lon/lat coordinate pair plus a buffer in meters."));
    }
    
    
    @Test
    public void test_483() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/boundary?" + 
                    "bcircles=WB%3A8.737%2C49.400%2C9&" + 
                    "format=json&" + 
                    "showMetadata=evomaster_7280_input&" + 
                    "time=foo&" + 
                    "values=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given parameter showMetadata can only contain the values 'true', 'yes', 'false', or 'no'."));
    }
    
    
    @Test
    public void test_484() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/boundary?" + 
                    "bpolys=.&" + 
                    "filter=vIGw3bSKp%3AQEsL%3A&" + 
                    "format=cSv&" + 
                    "showMetadata=%7B%22tyle%22%3A%1DFeatureCollection%22%2C%22febtures%22%3A%5B%7B%22type%22%3A%22Featqre%22%2C%22properties%22%3A%7B%22id%22%3A%22l%22%7D%2C%22geqmetry%22%3A%7B%22tyte%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.724%2C49.430%5D%2C%5B8.7483*49.4042%5D%2C%5B8.731%2C49.426%5D%2C%5B8.704562%2C49.403242%5D%5D%5Dy%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22N%22%7D%2C%22geometry%22%3A%7B%26tYpe%22%3A%22Pomygon%22%2C%22coordinates%26%3A%5B%5B%5B9.700561%2C49.403652%5D%2C%5B8.7498%2C49.4122%5D%2C%5B8.7401%2C49.4147%5D%2C%5B8.7047%2C49.400%5D%2C%5B8%2F704561.49.403252%5D%5D%5D%7D%7D%5D&" + 
                    "time=1&" + 
                    "types=NfDA")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_485() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density/groupBy/type?" + 
                    "bboxes=8.655%2C49.4288%2C8.747%2C49.38219&" + 
                    "filter=evomaster_248191_input&" + 
                    "keys=evomaster_253363_input&" + 
                    "time=OSJx9&" + 
                    "values=evomaster_248192_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_486() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/density/groupBy/type?" + 
                    "bpolys=zOt%3A8.704561%2C49.403252%2C8.722%2C49.437%2C8.7151%2C49.4368%2C8.74621%2C49.400%2C8.704561%2C49.403252%7CEd%3A8.704561%2C49.403252%2C8.719%2C49.4068%2C8.713%2C49.429%2C8.74790%2C49.4126%2C8.7+4561%2C49.403252&" + 
                    "filter=evomaster_122071_input&" + 
                    "timeout=62&" + 
                    "types=evomaster_122230_input&" + 
                    "values=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The bpolys parameter must contain double-parseable values in form of lon/lat coordinate pairs."));
    }
    
    
    @Test
    public void test_487() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density/groupBy/tag?" + 
                    "bcircles=8.738%2C49.4052%2C9&" + 
                    "filter=natural%3Dwood+or+length%3A%28+..+100%29&" + 
                    "format=csv&" + 
                    "groupByKey=evomaster_1457394_input&" + 
                    "groupByValues=yes%2Croof&" + 
                    "time=2015-12-16&" + 
                    "values=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The keys, values and types parameters must be empty, when you set the filter parameter."));
    }
    
    
    @Test
    public void test_488() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/density/groupBy/tag?" + 
                    "bpolys=DNA%3A8.704561%2C49.403252%2C8.710%2C49.4010%2C8.737%2C49.43465%2C8.719%2C49.423%2C8.704561%2C49.403252%7CsZzG%3A8.704561%2C49.403252%2C8.706%2C49.4164%2C8.705%2C41.409%2C8.705%2C49.40713%2C8.704561%2C49.40325&" + 
                    "format=json&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=foo&" + 
                    "keys=evomaster_47175_input&" + 
                    "showMetadata=euomaster_46899_input&" + 
                    "time=2007-12-31&" + 
                    "values=evomaster_47176_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given parameter showMetadata can only contain the values 'true', 'yes', 'false', or 'no'."));
    }
    
    
    @Test
    public void test_489() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=G&" + 
                    "format=Lx308EsS&" + 
                    "groupByKey=lqFwjx1m57iNTj&" + 
                    "time=Y9pAV&" + 
                    "types=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_490() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/density/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=f%3A8.73290%2C49.434%2C4&" + 
                    "groupByKey=evomaster_308573_input&" + 
                    "groupByValues=foo&" + 
                    "keys=highway&" + 
                    "timeout=63&" + 
                    "types=foo&" + 
                    "values=primary_link")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Parameter 'types' (and 'types2') can only have 'node' and/or 'way' and/or 'relation' OR 'point' and/or 'line' and/or 'polygon' and/or 'other'"));
    }
    
    
    @Test
    public void test_491() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density/groupBy/boundary?" + 
                    "bboxes=&" + 
                    "bpolys=q&" + 
                    "format=t5Cb_WgP0quQH6d&" + 
                    "keys=dB7emo9CP3&" + 
                    "showMetadata=&" + 
                    "types=b&" + 
                    "values=s7tv19wD")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_492() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/density/groupBy/boundary?" + 
                    "bboxes=8.685%2C49.429%2C8.720%2C49.397%7C8.673%2C49.4183%2C8.73629%2C49.385%7C8.65152%2C49.405804%2C8.7222%2C49.38232&" + 
                    "keys=highway&" + 
                    "time=foo&" + 
                    "timeout=36&" + 
                    "types=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Parameter 'types' (and 'types2') can only have 'node' and/or 'way' and/or 'relation' OR 'point' and/or 'line' and/or 'polygon' and/or 'other'"));
    }
    
    
    @Test
    public void test_493() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density?" + 
                    "bpolys=V&" + 
                    "filter=V&" + 
                    "format=b&" + 
                    "keys=EFFVLl&" + 
                    "showMetadata=NOT&" + 
                    "types=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_494() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/density?" + 
                    "bpolys=CSv&" + 
                    "filter=lbn%60usg%3D%2B&" + 
                    "format=CSv&" + 
                    "keys=Gfu&" + 
                    "types=fA")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_495() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area?" + 
                    "bcircles=8.70241%2C49.423812%2C678%7C8.738%2C49.423%2C31%7C8.744%2C49.430%2C2%7C8.705%2C49.4100%2C266&" + 
                    "filter=evomaster_59300_input&" + 
                    "format=foo&" + 
                    "keys=foo&" + 
                    "showMetadata=yes&" + 
                    "types=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given 'format' parameter is invalid. Please choose between 'geojson'(only available for /groupBy/boundary and data extraction requests), 'json', or 'csv'."));
    }
    
    
    @Test
    public void test_496() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area?" + 
                    "bpolys=foo&" + 
                    "filter=fkp&" + 
                    "format=lmqip%5D&" + 
                    "keys=1CBdsXk0s&" + 
                    "showMetadata=8LCdsTkqF&" + 
                    "time=ij&" + 
                    "values=evoqcster_%2F113%3A")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_497() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/density?" + 
                    "bcircles=V%3A8.70319%2C00.000000%2C2%2F105996463&" + 
                    "format=Csv&" + 
                    "keys=jAGit3qb5MabGt&" + 
                    "time=Csv&" + 
                    "values=E9J2oxShB")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Each bcircle must consist of a lon/lat coordinate pair plus a buffer in meters."));
    }
    
    
    @Test
    public void test_498() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/ratio/groupBy/boundary?" + 
                    "bboxes=hWnrDf&" + 
                    "bcircles=61wsVgjmTo819NG1&" + 
                    "filter=j&" + 
                    "filter2=5hmT&" + 
                    "format=zkc9wu4P&" + 
                    "keys2=4qL&" + 
                    "time=oe&" + 
                    "types=RZKrjXv07tXG2&" + 
                    "values=5bs")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_499() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/boundary/groupBy/tag?" + 
                    "bboxes=O_70mBRGVB40Dg&" + 
                    "bpolys=AmXHs3rZPzvClp&" + 
                    "groupByKey=eGY_&" + 
                    "groupByValues=umKCtZs6J8&" + 
                    "types=AsM")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/boundary?" + 
                    "filter=hajMdErbqu&" + 
                    "keys=Q&" + 
                    "time=wM&" + 
                    "types=G2sI8Uq7VNY")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("You need to define one of the boundary parameters (bboxes, bcircles, bpolys)."));
    }
    
    
    @Test
    public void test_501() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/ratio/groupBy/boundary?" + 
                    "bboxes=8.693358%2C49.403090%2C8.750%2C49.395363&" + 
                    "format=geojson&" + 
                    "keys=highway&" + 
                    "keys2=evomaster_154106_input&" + 
                    "timeout=62&" + 
                    "types2=foo&" + 
                    "values2=unclassified")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Parameter 'types' (and 'types2') can only have 'node' and/or 'way' and/or 'relation' OR 'point' and/or 'line' and/or 'polygon' and/or 'other'"));
    }
    
    
    @Test
    public void test_502() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/boundary?" + 
                    "bboxes=RXV5&" + 
                    "bcircles=&" + 
                    "bpolys=ALzNePWkT7Ivd&" + 
                    "filter=ZmJa&" + 
                    "format=QIBRdqS_YI38rA_R&" + 
                    "time=7%2F&" + 
                    "types=evomaster_51540_input&" + 
                    "values=ig7")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_503() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/ratio?" + 
                    "bboxes=KSofN%3A8.6880%2C49.419%2C8.701%2C49.394%7CIyJ%3A8.6504%2C49.428%2C8.7035%2C49.394&" + 
                    "filter=evomaster_654090_input&" + 
                    "filter2=foo&" + 
                    "keys2=fcoo&" + 
                    "time=2018-0%2F-25&" + 
                    "timeout=07&" + 
                    "types2=wAy&" + 
                    "values=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_504() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/ratio?" + 
                    "bboxes=KSofN%3A8.6880%2C49.419%2C8.701%2C49.394%7CIyJ%3A8.6504%2C49.428%2C8.7035%2C49.394&" + 
                    "filter2=foo&" + 
                    "keys=foo&" + 
                    "keys2=foo&" + 
                    "time=2018-03-25&" + 
                    "timeout=47&" + 
                    "types2=evomaster_653847_input&" + 
                    "values=fo&" + 
                    "values2=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Parameter 'types' (and 'types2') can only have 'node' and/or 'way' and/or 'relation' OR 'point' and/or 'line' and/or 'polygon' and/or 'other'"));
    }
    
    
    @Test
    public void test_505() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/type?" + 
                    "bcircles=uae%3A3.%3A2%14%2C59.414%2C1%7CKdyKJ%3E667%3A0.2%2C83.998999%2C%264&" + 
                    "keys=562S7hW7Pr&" + 
                    "showMetadata=evomaktesa6%2B2029ainout&" + 
                    "time=evomaster_1049533_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Each bcircle must consist of a lon/lat coordinate pair plus a buffer in meters."));
    }
    
    
    @Test
    public void test_506() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/ratio?" + 
                    "bboxes=KSofN%3A8.6880%2C49.419%2C8.701%2C49.394%7CIyJ%3A8.6504%2C49.428%2C8.7035%2C49.394&" + 
                    "filter=ref%21%3D*+or+not+area%3A%281.0+..+1E6%29&" + 
                    "filter2=foo&" + 
                    "keys2=fcoo&" + 
                    "time=2018-0%2F-25&" + 
                    "timeout=07&" + 
                    "types2=wAy&" + 
                    "values=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_507() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/ratio?" + 
                    "bboxes=KSofN%3A8.6880%2C49.419%2C8.701%2C49.394%7CIyJ%3A8.6904%2C49.428%2C8.7035%2C49.394&" + 
                    "filter=ref%21%3D*+or+not+area%3A%281.0+..+1E6%29&" + 
                    "filter2=foo&" + 
                    "time=2018-0%2F%2C25&" + 
                    "types2=wAy&" + 
                    "values=goo&" + 
                    "values2=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_508() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/density/groupBy/boundary?" + 
                    "bboxes=M&" + 
                    "bcircles=HV1WFsJ&" + 
                    "filter=GeCVTZoPGzb&" + 
                    "showMetadata=VUko&" + 
                    "timeout=6&" + 
                    "values=R5QAYn")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_509() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/groupBy/tag?" + 
                    "bboxes=8.697%2C49.429%2C8.741%2C49.388&" + 
                    "filter=foo&" + 
                    "groupByKey=evomaster_672951_input&" + 
                    "groupByValues=synagogue%2Ctrack&" + 
                    "keys=evomaster_674960_inpu&" + 
                    "showMetadata=yes&" + 
                    "time=%2F-P5M7D&" + 
                    "values=evomaster_674545_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_510() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/ratio/groupBy/boundary?" + 
                    "bboxes=8.6822%2C49.4124%2C8.703%2C49.396&" + 
                    "filter=highway%3D*+or+not+id%3A%281+..+9999%29&" + 
                    "showMetadata=no&" + 
                    "time=2012-11-01&" + 
                    "timeout=80&" + 
                    "types2=way%2Crelation")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The filter2 parameter has to be defined when using a /ratio endpoint."));
    }
    
    
    @Test
    public void test_511() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/ratio?" + 
                    "bboxes=hDqY%3A8.68539%2C49.416%2C8.712010%2C49.389493&" + 
                    "filter2=O3&" + 
                    "keys=fgs&" + 
                    "keys2=evomaster_948579_input&" + 
                    "types=&" + 
                    "types2=C3l%5E&" + 
                    "values2=hEtEVkFg")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Parameter 'types' (and 'types2') can only have 'node' and/or 'way' and/or 'relation' OR 'point' and/or 'line' and/or 'polygon' and/or 'other'"));
    }
    
    
    @Test
    public void test_512() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/tag?" + 
                    "groupByKey=C0llBmPyWBrLyh&" + 
                    "keys=ia3xB7&" + 
                    "showMetadata=mLnKeG8uuCQsI1gA&" + 
                    "time=&" + 
                    "values=HyJ")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("You need to define one of the boundary parameters (bboxes, bcircles, bpolys)."));
    }
    
    
    @Test
    public void test_513() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/tag?" + 
                    "bboxes=foo&" + 
                    "bcircles=foo&" + 
                    "groupByKey=evomaster_263%2C_input&" + 
                    "groupByValues=evomaster_17813_input&" + 
                    "keys=evomaster_17814_input&" + 
                    "showMetadata=yes&" + 
                    "time=2018-05-04&" + 
                    "timeout=foo&" + 
                    "types=evomaster_17815_input&" + 
                    "values=evomaster_17816_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("You need to give one groupByKey parameter, if you want to use groupBy/tag."));
    }
    
    
    @Test
    public void test_514() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/groupBy/boundary/groupBy/tag?" + 
                    "bboxes=8.66%3A%2C49.407%2C8.7262%2C49.3804&" + 
                    "filter=foo&" + 
                    "groupByKey=building&" + 
                    "groupByValues=crossing%2Csteps%2Cresidential&" + 
                    "keys=highwax&" + 
                    "time=evomaster_2143423_input&" + 
                    "values=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_515() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/boundary/groupBy/tag?" + 
                    "bboxes=evomaster_18401_input&" + 
                    "bpolys=7TTd1V&" + 
                    "format=&" + 
                    "groupByKey=evomaster_%2C979_input&" + 
                    "groupByValues=evomaster_4980_input&" + 
                    "time=zTMXqxA7dMdSw&" + 
                    "timeout=iAslPo3Jy1&" + 
                    "types=UZYxbc6R&" + 
                    "values=HaIWCjwyzW")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("You need to give one groupByKey parameter, if you want to use groupBy/tag."));
    }
    
    
    @Test
    public void test_516() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=UO%3A8.7325%2C49.428%2C2%7CrKpem%3A8.709%2C49.43537%2C7%7CdHGF%3A8.729%2C49.4245%2C11&" + 
                    "filter=foo&" + 
                    "format=json&" + 
                    "groupByKey=evomaster_108_input&" + 
                    "groupByValues=stop_line&" + 
                    "keys=evomaster_109_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The keys, values and types parameters must be empty, when you set the filter parameter."));
    }
    
    
    @Test
    public void test_517() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/density/groupBy/boundary/groupBy/tag?" + 
                    "bboxes=qQ%3A8.665%2C49.428*8.7220%2C49.385&" + 
                    "filter=foo&" + 
                    "format=evomaster_8571_input&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=service%2Cship%2Cdemolished&" + 
                    "keys=foo&" + 
                    "time=2014-12-03")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_518() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/ratio/groupBy/boundary?" + 
                    "bpolys=8.704561%2C49.403252%2C8.720954%2C49.4182%2C8.700584%2C49.405%2C8.743164%2C49.41856%2C8.704561%2C4%3A.403252%7C8.704561%2C49.403252%2C8.747%2C49.4294%2C8.7315%2C49.429%2C8.741%2C49.4219%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.7307%2C49.406%2C8.748%2C49.413%2C8.742%2C49.4285%2C8.704561%2C49.403252&" + 
                    "filter=barrier%3D*+or+id%3A%281+..+9999%29&" + 
                    "filter2=destination%3D*+and+length%3A%28+..+100%29&" + 
                    "keys=evomaster_150416_input&" + 
                    "showMetadata=foo&" + 
                    "types=fo%C2%8F&" + 
                    "types2=evomaster_75702_input&" + 
                    "values=evomaster_75703_input&" + 
                    "values2=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_519() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/density?" + 
                    "bcircles=V%3A8.70319%2C45.416763%242%2F105996463&" + 
                    "filter=evomaster_13163_input&" + 
                    "format=evomaster_13164_input&" + 
                    "keys=evomastur_13087_inpu&" + 
                    "time=evomakter_13165_input&" + 
                    "timeout=50&" + 
                    "values=evomaster_22651_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_520() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/type?" + 
                    "bcircles=sae%3A0.704%2C49.415%2C1%7CKdyKJ28.72773%2C49.839607%2C64&" + 
                    "filter=evomaster_8304%25_input&" + 
                    "keys=iZnzG_pbspZ&" + 
                    "time=evomaster_82659_inpu&" + 
                    "values=evomaster_83076_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_521() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/type?" + 
                    "bcircles=sae%3A20804%2C59.41%14%2C1%7CKdyKJ%3A8.72784%2C59.839607%2C64&" + 
                    "format=geOJSOn&" + 
                    "timeout=55&" + 
                    "values=evomaster_232669_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Each bcircle must consist of a lon/lat coordinate pair plus a buffer in meters."));
    }
    
    
    @Test
    public void test_522() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/density/groupBy/tag?" + 
                    "bpolys=evomaster_28917_input&" + 
                    "format=S&" + 
                    "groupByKey=8%2CvPn&" + 
                    "groupByValues=ARv0yZPxNcaxzuH&" + 
                    "keys=evomaster_395742_input&" + 
                    "showMetadata=jG5XZVz7J87&" + 
                    "time=evomaster_395743_input&" + 
                    "timeout=yozmxevIa5WdPA&" + 
                    "types=jKQoQWMzlqggxQ&" + 
                    "values=evomaster_28948_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("You need to give one groupByKey parameter, if you want to use groupBy/tag."));
    }
    
    
    @Test
    public void test_523() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/groupBy/tag?" + 
                    "bboxes=8.697%2C49.429%2C8.741%2C49.388&" + 
                    "filter=evomaster_674961_input&" + 
                    "groupByKey=evomaster_672951_input&" + 
                    "groupByValues=synagogue%2Ctrack&" + 
                    "keys=evomaster_674960_input&" + 
                    "showMetadata=yes&" + 
                    "time=q%2F%2FP5M7D&" + 
                    "timeout=97&" + 
                    "values=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_524() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/ratio?" + 
                    "bboxes=KSofN%3A8.6880%2C49.419%2C8.701%2C49.394%7CIyJ%3A8.6504%2C49.428%2C8.7035%2C49.394&" + 
                    "filter=evomaster_659269_input&" + 
                    "filter2=_ps&" + 
                    "keys2=evomaster_654175_input&" + 
                    "time=2%2F18%2F0%2F-25&" + 
                    "timeout=07&" + 
                    "values=foo&" + 
                    "values2=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_525() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/groupBy/tag?" + 
                    "bboxes=8.697%2C49.429%2C8.749%2C49.388&" + 
                    "groupByKey=cycleway%3Aright&" + 
                    "groupByValues=swnagogue%2Cxra_g&" + 
                    "keys=Kerb&" + 
                    "time=q1%27P5M%2F&" + 
                    "values=alternative")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_526() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/boundary?" + 
                    "bcircles=T%3A8.725421%2C49.236%2C67&" + 
                    "filter=evokaster_1376562_input&" + 
                    "keys=evomaster_1977618_inxut&" + 
                    "showMetadata=yes&" + 
                    "time=3009-10%2F%2F.&" + 
                    "types=T%3A8%2C725421%2C49%2C236%2C67&" + 
                    "values=f")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Parameter 'types' (and 'types2') cannot have more than 4 entries."));
    }
    
    
    @Test
    public void test_527() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/ratio/groupBy/boundary?" + 
                    "bcircles=K%3A8.7227%2C49.43334%2C93&" + 
                    "keys=highway&" + 
                    "types2=line%2Cpolygon%2Cother&" + 
                    "values=primary&" + 
                    "values2=residential")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("There cannot be more input values in the values|values2 than in the keys|keys2 parameter, as values_n must fit to keys_n."));
    }
    
    
    @Test
    public void test_528() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/ratio?" + 
                    "bboxes=KSofN%3A8.6880%2C49.419%2C8.701%2C49.394%7CIyJ28.6904%2C49.428%2C8.7035%2C49.394&" + 
                    "filter=evomaster_655932_input&" + 
                    "filter2=fow&" + 
                    "format=foo&" + 
                    "keys=foo&" + 
                    "keys2=fcoo&" + 
                    "time=2018-0%2F%2C25&" + 
                    "timeout=07&" + 
                    "values=evomaster_655933_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("One or more boundary object(s) have a custom id (or at least a colon), whereas other(s) don't. You can either set custom ids for all your boundary objects, or for none."));
    }
    
    
    @Test
    public void test_529() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/density/groupBy/type?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollectimn%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22CI%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.74450%2C49.403%5D%2C%5B8.701%2C49.429%5D%2C%5B8.701%2C49.432%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=lit%3D*+or+not+type%3Anode+or+length%3A%28+..+100%29&" + 
                    "format=evomaster_39904_input&" + 
                    "showMetadata=foo&" + 
                    "time=KRrKcfCduuxPpzP5&" + 
                    "timeout=81&" + 
                    "types=foo&" + 
                    "values=evomaster_39523_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given GeoJSON has to be of the type 'FeatureCollection'."));
    }
    
    
    @Test
    public void test_530() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/groupBy/key?" + 
                    "bcircles=fis&" + 
                    "bpolys=hNfPi%3A8.714561%2C47.40325.%2C80812%2C69.018%2C8.706%2C87.218.%2C%3C%2F820%2C49*2&" + 
                    "filter=ftqmasrcq_17%13-4_enty&" + 
                    "groupByKeys=%2C&" + 
                    "keys=cp3nnaC&" + 
                    "time=VF5p3fVRHFn&" + 
                    "timeout=-346.1029692592617&" + 
                    "types=X&" + 
                    "values=lZNGvHWDguhdnXso")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("You need to give one groupByKeys parameter, if you want to use groupBy/key."));
    }
    
    
    @Test
    public void test_531() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/density?" + 
                    "bcircles=8.744%2C49.4349%2C7&" + 
                    "filter=foo&" + 
                    "format=foo&" + 
                    "keys=evomaster_99_input&" + 
                    "time=foo&" + 
                    "timeout=96&" + 
                    "values=secondary")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given 'format' parameter is invalid. Please choose between 'geojson'(only available for /groupBy/boundary and data extraction requests), 'json', or 'csv'."));
    }
    
    
    @Test
    public void test_532() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/density/groupBy/tag?" + 
                    "bpolys=FNV%3A8.704561%2C49.403252%2C8.7164%2C49.436%2C8.710%2C49.4217%2C8.729%2C49.419%2C8.704561%2C49.403252%7CClo%3A8.704561%2C49.403252%2C8.707%2C49.422%2C8.74109%2C49.4392%2C8.7335%2C49.42294%2C8.704561%2C49.403252%7Cq%3A8.704561%2C49.40325%3A%2C8.726%2C49.413125%2C8.709%2C49.423%2C8.703%2C49.418%2C8.704561%2C49.403252&" + 
                    "format=csv&" + 
                    "groupByKey=building&" + 
                    "groupByValues=foo&" + 
                    "keys=yQloW&" + 
                    "time=evomaster_31425_input&" + 
                    "types=evomaster_338652_input&" + 
                    "values=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_533() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/ratio/groupBy/boundary?" + 
                    "bpolys=iHjkf%3A8.704561%2C49.403252%2C8.714%2C49.402%2C8.749018%2C49.413%2C8.717%2C49.4203%2C8.704561%2C49.403252&" + 
                    "filter=highway%21%3D*+and+not+geometry%3Apolygon+and+not+length%3A%28+..+100%29&" + 
                    "filter2=oneway%21%3D*+or+not+area%3A%281.0+..+1E6%29&" + 
                    "showMetadata=no&" + 
                    "time=2014-11-18&" + 
                    "timeout=57&" + 
                    "types=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Parameter 'types' (and 'types2') can only have 'node' and/or 'way' and/or 'relation' OR 'point' and/or 'line' and/or 'polygon' and/or 'other'"));
    }
    
    
    @Test
    public void test_534() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/groupBy/boundary?" + 
                    "bcircles=B%3A8.74598%2C49.43392%2C1%7CM%3A8.700%2C49.413%2C3&" + 
                    "filter=foo&" + 
                    "format=evomaster_27_input&" + 
                    "keys=highway&" + 
                    "showMetadata=foo&" + 
                    "time=foo&" + 
                    "values=evomaster_28_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given parameter showMetadata can only contain the values 'true', 'yes', 'false', or 'no'."));
    }
    
    
    @Test
    public void test_535() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/type?" + 
                    "bboxes=r&" + 
                    "bpolys=XRDaji7&" + 
                    "format=ook&" + 
                    "keys=IdN&" + 
                    "timeout=v95ORZ&" + 
                    "types=xE6TZU6RS1")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_536() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/density/groupBy/boundary?" + 
                    "bboxes=UsxMR%3A8.6996%2C49.42108%2C8.7236%2C49.386%7CHz%3A8.68666%2C49.420%2C8.70181%2C49.391%7CXc%3A8.6866%2C49.42509%2C8.7277%2C49.397%7Cfq%3A8.697755%2C49.401%2C8.738%2C49.39262&" + 
                    "format=csv&" + 
                    "keys=highway&" + 
                    "time=%2F%2FP6MB5D&" + 
                    "timeout=64")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The interval (period) of the provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_537() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/ratio?" + 
                    "bpolys=Pxk%3A8.704561%2C49.403252%2C8.739%2C49.412%2C8.74281%2C49.420%2C8.743%2C49.401%2C8.704561%2C49.403252%7CNo%3A8.704561%2C49.403252%2C8.7071%2C49.4370%2C8.739%2C49.43189%2C8.7004%2C49.4125%2C8.704561%2C49.403252%7Clkcx%3A8.704561%2C49.403252%2C8.745%2C49.420500%2C8.700%2C49.414137%2C8.7472%2C49.424%2C8.70T561%2C49.403252&" + 
                    "filter=foo&" + 
                    "keys2=foo&" + 
                    "showMetadata=foo&" + 
                    "time=foo&" + 
                    "types=foo&" + 
                    "types2=line%2Cpolygon%2C&" + 
                    "values=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The bpolys parameter must contain double-parseable values in form of lon/lat coordinate pairs."));
    }
    
    
    @Test
    public void test_538() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/ratio/groupBy/boundary?" + 
                    "bpolys=iHjkf%3A8.704561%2C49.403252%2C8.714%2C49.402%2C8.749018%2C49.413%2C8.717%2C49.4203%2C8.704561%2C49.403252&" + 
                    "filter=evomaster_3945_input&" + 
                    "keys=foo&" + 
                    "keys2=foo&" + 
                    "time=evomaster_1207_input&" + 
                    "values=foo&" + 
                    "values2=evomaster_3946_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_539() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/ratio/groupBy/boundary?" + 
                    "bpolys=iHjkf%3A8.704561%2C49.403252%2C8.%3B14%2C49.402%2C8.749018%2C49.413%2C8.717%2C49.4203%2C8.704561%2C49.403252&" + 
                    "filter=evomaster_3945_input&" + 
                    "keys=foo&" + 
                    "keys2=evomaster_4544_input&" + 
                    "showMetadata=evomaster_1206_input&" + 
                    "time=evOmaster_1207_input&" + 
                    "timeout=57&" + 
                    "types=foo&" + 
                    "types2=foo&" + 
                    "values=evomaster_4238_input&" + 
                    "values2=evomaster_3946_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The bpolys parameter must contain double-parseable values in form of lon/lat coordinate pairs."));
    }
    
    
    @Test
    public void test_540() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/density/groupBy/type?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection*%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22CI%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.74450%2C49.403%5D%2C%5B8.701%2C49.429%5D%2C%5B8.701%2C49.432%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=evomaster_6422_input&" + 
                    "format=evomaster_6423_input&" + 
                    "keys=foo&" + 
                    "showMetadata=foo&" + 
                    "timeout=81&" + 
                    "types=foo&" + 
                    "values=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in reading of the given GeoJSON."));
    }
    
    
    @Test
    public void test_541() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/ratio/groupBy/boundary?" + 
                    "bboxes=8.6X22%2C49.4124%2C8.703%2C49.396&" + 
                    "filter=evomaster_6940_input&" + 
                    "filter2=foo&" + 
                    "format=foo&" + 
                    "keys2=foo&" + 
                    "time=2012-11-01&" + 
                    "timeout=80&" + 
                    "types2=way%2Crelation&" + 
                    "values=foo&" + 
                    "values2=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Apart from the custom ids, the bboxeses array must contain double-parseable values in the following order: minLon, minLat, maxLon, maxLat."));
    }
    
    
    @Test
    public void test_542() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/key?" + 
                    "bcircles=YdE%3A8.71170%2C48.411%1291%2C6&" + 
                    "filter=addr%3Acountry%21%3D*+and+length%3A%28+..+100%29&" + 
                    "format=foo&" + 
                    "groupByKeys=evomaster_2438_input&" + 
                    "showMetadata=YeS&" + 
                    "time=foo&" + 
                    "types=foo&" + 
                    "values=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Each bcircle must consist of a lon/lat coordinate pair plus a buffer in meters."));
    }
    
    
    @Test
    public void test_543() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/density/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22oH%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.747305%2C49.408%5D%2C%5B8.700%2C49.402%5D%2C%5B8.70500%2C49.432%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22tisIw%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.70%2C561%2C49.403252%5D%2C%5B8.73565%2C49.4207%5D%2C%5B8.70909%2C49.413%5D%2C%5B8.72289%2C49.4383%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=evomaster_9279_input&" + 
                    "groupByKey=building&" + 
                    "groupByValues=evomaster_9280_input&" + 
                    "keys=foo&" + 
                    "time=foo&" + 
                    "types=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided GeoJSON cannot be converted."));
    }
    
    
    @Test
    public void test_544() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/groupBy/boundary?" + 
                    "bcircles=9eHf&" + 
                    "bpolys=B0JpG7QFulQE1D&" + 
                    "format=yr9EJuVagSmz1&" + 
                    "showMetadata=1&" + 
                    "types=O3kQxpp")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_545() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/ratio/groupBy/boundary?" + 
                    "bboxes=b%3A8.6619%2C49.42862%2C8.722%2C49.382002%7CqJWBD%3A8.686%2C49.4105%2C8.703%2C49.385%7CB%3A8.674%2C49.420%2C8.723293%2C49.385&" + 
                    "filter=barrier%3D*+or+not+type%3Away+or+area%3A%281.0+..+1E6%29&" + 
                    "format=geojson&" + 
                    "types2=line%2Cother")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The filter2 parameter has to be defined when using a /ratio endpoint."));
    }
    
    
    @Test
    public void test_546() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/boundary?" + 
                    "bcircles=A%3A8.74094%2C49.4294%2C8%7CJBc%3A8.709695%2C49.404%2C7&" + 
                    "filter=foo&" + 
                    "keys=evomaster_908779_input&" + 
                    "time=%2F%2FP%2F8&" + 
                    "timeout=64&" + 
                    "values=fo%7F")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_547() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/boundary?" + 
                    "bcircles=A%3A8.74094%2C49.4294%2C8%7CJBc%3A8.709695%2C49.404%2C7&" + 
                    "filter=fooG&" + 
                    "time=%2F1P%2F8&" + 
                    "timeout=64&" + 
                    "values=fo%7D")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_548() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/groupBy/tag?" + 
                    "bboxes=8.697%2C49.429%2C8.749%2C49.388&" + 
                    "filter=&" + 
                    "groupByKey=cycleway%3Aright&" + 
                    "groupByValues=synagogue%2Ctra_k&" + 
                    "keys=Ms8cMpO&" + 
                    "time=q%2F%2FP5M%2F&" + 
                    "timeout=97")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_549() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/ratio?" + 
                    "bboxes=KSofN%3A8.6880%2C49.419%2C8.701%2C49.394%7CIyJ%3A8.6504%2C49.428%2C8.7035%2C49.394&" + 
                    "filter=evomaster_659269_input&" + 
                    "filter2=evomaster_659270_input&" + 
                    "time=2%2F18-0%2F-25&" + 
                    "timeout=07&" + 
                    "values=foo&" + 
                    "values2=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_550() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/ratio/groupBy/boundary?" + 
                    "bpolys=iHjkf%3A8.704561%2C49.403252%2C8.714%2C49.402%2C8.749018%2C49.413%2C8.717%2C49.4203%2C8.704561%2C49.403252&" + 
                    "filter=highway%21%3D*+and+not+geometry%3Apolygon+and+not+length%3A%28+..+100%29&" + 
                    "filter2=evomaster_4548_input&" + 
                    "keys2=foo&" + 
                    "time=2014-11-18&" + 
                    "timeout=57")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Invalid filter syntax. Please look at the additional info and examples about the filter parameter at https://docs.ohsome.org/ohsome-api. Detailed error message: line 1, column 21: whitespaces, EQUALS (=), NOT_EQUALS (!=) or in expected, EOF encountered."));
    }
    
    
    @Test
    public void test_551() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/boundary?" + 
                    "bcircles=T%3A8.725421%2C49.436%2C67&" + 
                    "filter=evomaster_1376562_input&" + 
                    "keys=foo&" + 
                    "time=2009-10%2F%2F0&" + 
                    "values=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The interval (period) of the provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_552() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/ratio/groupBy/boundary?" + 
                    "bcircles=uJQ9j9x_oy8w&" + 
                    "bpolys=&" + 
                    "filter=Uo1S6ImbOZqzZ&" + 
                    "filter2=O67u5&" + 
                    "format=D5P_mJf9tdC&" + 
                    "keys=ZdMAGkr&" + 
                    "time=pCabZi8Tnm4MU3R&" + 
                    "types=SpkY0&" + 
                    "types2=0CgevzoPpT__5phz&" + 
                    "values2=6PNbt_QrPE")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_553() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/ratio?" + 
                    "bboxes=YRKThuKFoFHzk&" + 
                    "keys=xPq56Hn8jMBL&" + 
                    "keys2=REdpRfZabf11R_RT&" + 
                    "showMetadata=dEQ78d&" + 
                    "time=9_VFOOv5xU706YP_&" + 
                    "values=9uGP&" + 
                    "values2=8AC64wd")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_554() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/density/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22oH%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.747305%2C49.408%5D%2C%5B8.700%2C49.402%5D%2C%5B8.70500%2C49.432%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22tisIw%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.70%2C561%2C49.403252%5D%2C%5B8.73565%2C49.4207%5D%2C%5B8.70909%2C49.413%5D%2C%5B8.72289%2C49.4383%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "format=foo&" + 
                    "groupByKey=evomaster_30175_input&" + 
                    "groupByValues=evomaster_21829_input&" + 
                    "keys=evomaster_.2203_input&" + 
                    "showMetadata=foo&" + 
                    "time=evomaster_21830_input&" + 
                    "types=evomaster_21831_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The geometry of each feature in the GeoJSON has to be of type 'Polygon' or 'MultiPolygon'."));
    }
    
    
    @Test
    public void test_555() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/density/groupBy/type?" + 
                    "bpolys=v&" + 
                    "filter=Rrw3rdOqGS&" + 
                    "format=QrM6AQsQ1csO5IGy&" + 
                    "showMetadata=8&" + 
                    "time=Vi7fshpy5QA_9WdO")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_556() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count?" + 
                    "bboxes=p7y27Jq2&" + 
                    "bpolys=&" + 
                    "format=bOYsnA&" + 
                    "showMetadata=q9_ISDUqQ&" + 
                    "time=MXV8d6N&" + 
                    "types=X4mS8sJ&" + 
                    "values=2g5WaiRHcjYowoLc")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter?" + 
                    "filter=&" + 
                    "keys=WBlY2NluKd&" + 
                    "time=BNkFMRuZFc3HheA&" + 
                    "types=Gu&" + 
                    "values=8wDC6luBEyA1xv")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("You need to define one of the boundary parameters (bboxes, bcircles, bpolys)."));
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/density/groupBy/type?" + 
                    "bboxes=8OPZ&" + 
                    "bpolys=WINRQexQX01uSSjA&" + 
                    "format=6iBjWjdYZjEZP&" + 
                    "keys=7&" + 
                    "showMetadata=MtPnlnzpKDgj1Mg&" + 
                    "time=x9f312R2SWmNVL0T&" + 
                    "types=L2rzZZTFG8GR0&" + 
                    "values=4tPW6D_2Av6xSN6")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/boundary?" + 
                    "bboxes=Xebue6xcC&" + 
                    "bcircles=0OP1NmSL7elFUhR&" + 
                    "filter=&" + 
                    "format=ySsC9GF8Ld07v&" + 
                    "keys=XsJVrC9mplKJiBYV&" + 
                    "time=sF0Pb9K&" + 
                    "timeout=r&" + 
                    "types=wDAHM&" + 
                    "values=e5IWi5_s1qtDc4y")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/density/groupBy/boundary")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("You need to define one of the boundary parameters (bboxes, bcircles, bpolys)."));
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/tag?" + 
                    "bboxes=&" + 
                    "bpolys=AAUV0NNDqX&" + 
                    "groupByKey=TUG2z&" + 
                    "showMetadata=HKAkGV&" + 
                    "types=gacr9ZzUFvbYLK6J")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/groupBy/boundary?" + 
                    "bboxes=SfWsE5NV&" + 
                    "bcircles=bdl8w_0HDu4DtiA&" + 
                    "bpolys=dKobyw&" + 
                    "filter=ATeAHxT_7Xh&" + 
                    "format=6De&" + 
                    "showMetadata=rFzrQTTlppa&" + 
                    "timeout=cbZ1bJfH0R1yE&" + 
                    "values=_9CwiRsq2v9KbMoB")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/density?" + 
                    "bboxes=ftes30nvXeVf0L&" + 
                    "format=Q7E&" + 
                    "showMetadata=&" + 
                    "time=mAJWMs&" + 
                    "types=UhlF7o6h5DSqz5&" + 
                    "values=ifAywm0")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/key?" + 
                    "bboxes=RIp3JQFi&" + 
                    "bcircles=Q6JaOgSeV1h2W&" + 
                    "filter=TRt6mbZLTxGG&" + 
                    "format=74ZXctb6ltQ&" + 
                    "groupByKeys=hr2Gk6NXpVx&" + 
                    "keys=SqKJ&" + 
                    "time=9LI9r4QML")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_557() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/density?" + 
                    "bcircles=V%3A8.70319%2C49.416763%2C21105996463&" + 
                    "filter=fnm&" + 
                    "format=cSV&" + 
                    "keys=higpway&" + 
                    "showMetadata=&" + 
                    "time=foo&" + 
                    "types=lINE")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_558() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/ratio?" + 
                    "bcircles=nBQ&" + 
                    "filter=F6i&" + 
                    "filter2=yMQVYNk&" + 
                    "showMetadata=&" + 
                    "time=MRF9&" + 
                    "timeout=2897&" + 
                    "types=5jpsT32&" + 
                    "types2=MY8VzWIi2L&" + 
                    "values=qBmvQo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout is too long. It has to be shorter than 100.0 seconds"));
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/density?" + 
                    "bboxes=cM8iOiz4KafwsS&" + 
                    "filter=&" + 
                    "keys=&" + 
                    "showMetadata=sfEv6ruirZj&" + 
                    "timeout=WF&" + 
                    "types=lqTBEbOK&" + 
                    "values=JDakvkvd2p")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/groupBy/type?" + 
                    "bboxes=8Y4q&" + 
                    "bcircles=rbRlIQRaJKJuI&" + 
                    "filter=pIPZ8LdVyeZVL0sB&" + 
                    "format=dVlJ90fmXD5vFW&" + 
                    "keys=21ebwrpQOwm8&" + 
                    "showMetadata=uL0VI4eVZIV220p&" + 
                    "types=rQE4ev7w6aN&" + 
                    "values=GHc")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/ratio?" + 
                    "bcircles=&" + 
                    "keys=LobgwGCiPsVjR5i2&" + 
                    "keys2=3d7DtsJK&" + 
                    "types2=QKzzQY&" + 
                    "values=Kkb")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("You need to define one of the boundary parameters (bboxes, bcircles, bpolys)."));
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/density?" + 
                    "bcircles=iM1onD589I&" + 
                    "bpolys=AhsQV&" + 
                    "format=jekcAi&" + 
                    "time=_7O2Bw8WzeV98v&" + 
                    "types=aIZGwj0_zA5wj&" + 
                    "values=Y5Pbp8Hm0T")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/density/groupBy/tag?" + 
                    "bboxes=M5&" + 
                    "bcircles=4FfnWsra&" + 
                    "bpolys=58z_YqdndB98Q8NM&" + 
                    "format=N43q&" + 
                    "groupByKey=0aretKPS&" + 
                    "keys=929ffj_Ap9GJ&" + 
                    "showMetadata=NLdt5Jog&" + 
                    "timeout=XeCm27&" + 
                    "types=U0q5gb&" + 
                    "values=8")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/ratio/groupBy/boundary?" + 
                    "bboxes=h28Lm2s_eHBU0iV&" + 
                    "bcircles=aRD06GrU5bggEX&" + 
                    "filter2=uX_PnG3OY3NZMzf&" + 
                    "keys2=jgzkXcIpSd6lS9j&" + 
                    "timeout=L1AVp0Yny1JdmX&" + 
                    "types=sNYAZP6VdZKGZfRx&" + 
                    "types2=SVN548BYnE8Ceb_8&" + 
                    "values=cVSWXB2WyO92BQ&" + 
                    "values2=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/key?" + 
                    "bboxes=9N6A71yicD9&" + 
                    "format=gv8rHR&" + 
                    "groupByKeys=0RdCozDB63S&" + 
                    "time=n&" + 
                    "types=9elzis9VpEd2TV9&" + 
                    "values=NUw_e3R5N1V3uu")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_559() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/boundary?" + 
                    "bcircles=A%3A8.74094%2C49.4294%2C8%7CJBc%3A8.709695%2C49.404%2C7&" + 
                    "filter=_ooE&" + 
                    "keys=evomaster_908779_input&" + 
                    "showMetadata=yes&" + 
                    "time=%2F&" + 
                    "timeout=64&" + 
                    "values=no%7D")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The keys, values and types parameters must be empty, when you set the filter parameter."));
    }
    
    
    @Test
    public void test_560() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/density?" + 
                    "bcircles=V%3A8.70319%2C49.416763%2C21105996463&" + 
                    "filter=fno&" + 
                    "format=cSV&" + 
                    "showMetadata=&" + 
                    "time=foo&" + 
                    "types=pOiNT")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_561() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/type?" + 
                    "bcircles=sae%3A2.824%2C59.414%2C1%7CKdyKJ%3A8672773%2C79.899799%2C64&" + 
                    "filter=evomaster_404929_input&" + 
                    "keys=jvsCwzzemxl&" + 
                    "showMetadata=evomaster_319433_input&" + 
                    "time=dWWkzrypUdZA&" + 
                    "timeout=%155&" + 
                    "types=evomaster_404930_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Each bcircle must consist of a lon/lat coordinate pair plus a buffer in meters."));
    }
    
    
    @Test
    public void test_562() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/ratio?" + 
                    "bboxes=hDqY%3A8.68439%2C49.416%2C8.712010%2C49.389493&" + 
                    "format=geojson&" + 
                    "keys2=highway")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The filter2 parameter has to be defined when using a /ratio endpoint."));
    }
    
    
    @Test
    public void test_563() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/ratio?" + 
                    "bpolys=8.704561%2C49.403252%2C8.708%2C49.412%2C8.704%2C49.403%2C8.738%2C49.434%2C8.704561%2C09.403252&" + 
                    "format=evomaster_68791_input&" + 
                    "keys=evomaster_68792_input&" + 
                    "keys2=evomastir_54811_inxut&" + 
                    "showMetadata=foo&" + 
                    "time=foo&" + 
                    "timeout=89&" + 
                    "types2=evomaster_68793_input&" + 
                    "values=evomaster_68794_input&" + 
                    "values2=foo")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_564() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/ratio/groupBy/boundary?" + 
                    "bboxes=8.6822%2C49.4124%2C8.703%2C49.39&" + 
                    "filter2=foo&" + 
                    "keys=foo&" + 
                    "showMetadata=no&" + 
                    "time=1012-11-01&" + 
                    "timeout=80&" + 
                    "values=foo&" + 
                    "values2=evomaster_755825_input")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The given time parameter is not completely within the timeframe (2007-10-07 to 2018-05-10T"));
    }
    
    
    @Test
    public void test_565() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/ratio?" + 
                    "bboxes=KSofN%3A8.6880%2C49.419%2C8.701%2C49.394%7CIyJ%3A8.5504%2C49.428%2C8.7035%2C49.394&" + 
                    "filter=evomaster_659269_input&" + 
                    "filter2=evomaster_659270_input&" + 
                    "keys2=evomaster_654175_input&" + 
                    "showMetadata=foo&" + 
                    "time=U5X5_ruYzwihAm&" + 
                    "types2=wAy&" + 
                    "values=fooZ")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_566() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density/groupBy/type?" + 
                    "bboxes=8.655%2C49.4288%2C8.747%2C49.38219&" + 
                    "keys=highway&" + 
                    "showMetadata=true&" + 
                    "time=2007-02-07")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The given time parameter is not completely within the timeframe (2007-10-07 to 2018-05-10T"));
    }
    
    
    @Test
    public void test_567() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length?" + 
                    "bpolys=t%3A8.704561%2C49.403252%2C8.743%2C49.418%2C8.7063%2C49.422%2C8.727%2C49.409%2C8.704661%2C49.403252&" + 
                    "format=evom_ster_123456_input&" + 
                    "keys=foo&" + 
                    "showMetadata=evomaster_197444_input&" + 
                    "time=evomaster_123577_input&" + 
                    "timeout=71&" + 
                    "types=boo&" + 
                    "values=evomaster_197445_input")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_568() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=UO%3A8.7325%2C59.428%2C2%7CrKpem%3A8.709%2C49.43537%2C7%7CdHGF%3A8.729%2C49.4245%2C11&" + 
                    "filter=foo&" + 
                    "groupByKey=highw%5D&" + 
                    "groupByValues=rtop_line&" + 
                    "keys=evomaster_651902_input&" + 
                    "time=2017-12-16")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_569() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/boundary?" + 
                    "bpolys=APE%3A8.704561%2C49.403052%2C8.744675%2C49.404%2C8.724%2C49.4226%2C8.734%2C49.415%2C8.704561%2C49.403252%7CZy%3A8.704561%2C49.403252%2C8.742%2C49.430%2C8.70425%2C49.406%2C8.70311%2C49.400%2C8.704561%2C49.403252&" + 
                    "filter=highway+in+%28secondary%2Cpath%2Cunclassified%2Ctrack%2Cprimary%2Cresidential%2Ccycleway%2Cservice%2Cfootway%29+or+area%3A%281.0+..+1E6%29&" + 
                    "keys=evomaster_1657529_input&" + 
                    "showMetadata=fako&" + 
                    "timeout=68")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_570() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/type?" + 
                    "bpolys=cj%3A8.704561%2C49.403252%2C8.7424%2C49.434277%2C8.741%2C49.407490%2C8.705061%2C49.4065%2C8.704561%2C49.40325&" + 
                    "filter=foo&" + 
                    "keys=foo&" + 
                    "showMetadata=foo&" + 
                    "time=2009-10-14")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_571() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/density/groupBy/boundary?" + 
                    "bboxes=8.660%2C49.4006%2C8.714%2C49.398%7C8.663%2C49.427764%2C8.7052%2C49.386%7C8.6672%2C49.41576%2C8.759%2C59.392&" + 
                    "format=evomaster_1474_input&" + 
                    "keys=fow&" + 
                    "time=foo&" + 
                    "types=2kG9G8RRaAF")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_572() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/groupBy/type?" + 
                    "bpolys=8.704561%2C49.403212%2C8.704%2C49.413%2C8.739%2C49.4230%2C8.707%2C49.4164%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.74100%2C492437480%2C8.7464%2C49.40977%2C8.7464%2C49.410%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.726%2C49.419%2C8.743%2C49.426%2C8.734317%2C49.426%2C8.704561%2C49.4032&" + 
                    "filter=NyW&" + 
                    "format=evomaster_2145889_input&" + 
                    "time=evomaster_128729_input&" + 
                    "values=3%3A")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_573() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/groupBy/key?" + 
                    "bpolys=hPfPi%3A8.704571%2C49.403252%2C8.706%2C49.418%2C8.708%2C49.4182%2C8.701%2C49.4036%2C8.704561%2C49.403252&" + 
                    "filter=evomaster_1183845_input&" + 
                    "groupByKeys=evomaster_379153_input&" + 
                    "keys=foo&" + 
                    "showMetadata=fals&" + 
                    "time=fooE&" + 
                    "types=foo&" + 
                    "values=WMjamUtyHPF")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_574() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/density/groupBy/type?" + 
                    "bpolys=zOt%3A8.704561%2C492403252%2C8.722%2C49.437%2C8.7151%2C49.4368%2C8.74621%2C49.400%2C8.704561%2C49.403252%7CEd%3A8.704561%2C49.403252%2C8.719%2C49.4068%2C8.713%2C49.429%2C8.74790%2C49.4126%2C8.704561%2C49.403252&" + 
                    "filter=lit%3D*+and+type%3Anode+and+length%3A%28+..+108%29&" + 
                    "format=foo&" + 
                    "keys=evomaster_10761_input&" + 
                    "showMetadata=evomaster_121980_input&" + 
                    "time=L0&" + 
                    "timeout=62&" + 
                    "types=foo")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_575() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/ratio?" + 
                    "bboxes=hDqY%3A8.68539%2C496416%2C8.712010%2C49.389493&" + 
                    "filter=evomaster_948486_input&" + 
                    "format=evomaster_949846_input&" + 
                    "keys=fis&" + 
                    "keys2=evomaster_948485_input&" + 
                    "types=uSoWWFvk&" + 
                    "values=evomaster_949848_input&" + 
                    "values2=pTXkAIvuvsiGxqE")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_576() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=8.704561%2C49.403252%2C8.7024%2C49.425%2C8.734%2C49.4128%2C8.715092%2C49.4205%2C8.704561%2C49.403652&" + 
                    "filter=&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=evomaster_515656_input&" + 
                    "showMetadata=tr%7De&" + 
                    "time=fso&" + 
                    "types=fooG")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_577() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/tag?" + 
                    "bboxes=vQF%3A8.655%2C49.4275%2C8.728%2C89.389&" + 
                    "filter=barrier%3D*+and+length%3A%28+..+100%29&" + 
                    "format=foo&" + 
                    "groupByKey=evomaster_651664_input&" + 
                    "groupByValues=efomaster_304680_input&" + 
                    "keys=evomaster_651665_input&" + 
                    "showMetadata=yes&" + 
                    "time=2017-05-30&" + 
                    "types=foo&" + 
                    "values=foo")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_578() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/density/groupBy/boundary?" + 
                    "bboxes=8.685%2C49.429%2C8.720%2C49.397%7C8.673%2C49.4183%2C8.73629%2C49.385%7C8.65142%2C49.405804%2C8.7222%2C49.58232&" + 
                    "filter=foo&" + 
                    "format=esv&" + 
                    "showMetadata=foo&" + 
                    "types=foo&" + 
                    "values=mivhng_stree")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_579() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/groupBy/tag?" + 
                    "bpolys=8.697%2C49.429%2C8.741%2C49.388&" + 
                    "filter=evomaster_654961_input&" + 
                    "format=evomaster_673950_input&" + 
                    "groupByKey=evomaster_672951_input&" + 
                    "groupByValues=synagogue%2Ctrack&" + 
                    "keys=evomaster_674960_input&" + 
                    "showMetadata=yes&" + 
                    "time=%27%2FP5M7D&" + 
                    "timeout=97&" + 
                    "types=foo&" + 
                    "values=")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_580() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/density/groupBy/boundary?" + 
                    "bboxes=UsxMR%3A8.6996%2C49.42108%2C8.7236%2C49.386%7CHz%3A8.68666%2C49.420%2C8.70181%2C49.391%7CXc%3A8.6866%2C49.42509%2C6.7277%2C49.397%7Cfq%3A8.697755%2C49.401%2C8.738%2C49.39262&" + 
                    "filter=evomaster_674144_input&" + 
                    "showMetadata=true&" + 
                    "time=%2F%2FP6M21D&" + 
                    "timeout=64")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_581() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/boundary?" + 
                    "bcircles=A%3A8.74094%2C59.4294%2C8%7CJBc%3A8.709695%2C49.404%2C7&" + 
                    "filter=_oo&" + 
                    "format=foo&" + 
                    "time=%2F9&" + 
                    "types=foo&" + 
                    "values=no%7B")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_582() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/ratio/groupBy/boundary?" + 
                    "bpolys=XaFqF%3A8.706561%2C49.403252%2C8.732%2C49.41525%2C8.731814%2C49.4099%2C8.70389%2C49.4150%2C8.704561%2C49.403252%7Cb%3A8.704561%2C49.403252%2C8.718%2C49.432%2C8.70370%2C49.408241%2C8.726%2C49.40421%2C8.704561%2C49.403252&" + 
                    "filter=fpo&" + 
                    "format=evomaster_38868_input&" + 
                    "keys=foo&" + 
                    "keys2=highway&" + 
                    "showMetadata=foo&" + 
                    "timeout=77&" + 
                    "types=evomaster_38869_input&" + 
                    "types2=evomaster_754920_input&" + 
                    "values=evomaster_754921_input&" + 
                    "values2=s%C2%90eed_camera")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_583() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density/groupBy/boundary?" + 
                    "bpolys=8.704561%2C49.403252%2C8.7350%2C49.4113%2C8.704%2C49.411%2C8.7495%2C49.416669%2C8.704561%2C49.203252%7C8.704561%2C49.403252%2C8.720%2C49.425%2C8.702%2C49.43261%2C8.741%2C49.418%2C8.704561%2C49.40325&" + 
                    "filter=fUk&" + 
                    "format=geojsw&" + 
                    "keys=evomaster_857392_input&" + 
                    "time=2008-16-03&" + 
                    "types=foo&" + 
                    "values=turning_circle")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_584() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter?" + 
                    "bpolys=aee%3A8.724561%2C49.403252%2C8.700%2C49.4111%2C8.70430%2C49.412%2C8.710%2C49.4282%2C8.704561%2C49.403252%7CfTO%3A8.704561%2C49.403252%2C8.729%2C49.4089%2C8.7049%2C49.410%2C8.7272%2C49.404%2C8.704561%2C4&" + 
                    "filter=dso&" + 
                    "format=fos&" + 
                    "keys=hkklw%60wO&" + 
                    "showMetadata=eakn&" + 
                    "types=kimu&" + 
                    "values=kH%5B2TQB")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_585() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/ratio/groupBy/boundary?" + 
                    "bboxes=T%3A8.673%2C49.410214%2C8.719815%2C49.392%7CROY%3A8.65122%2C49.40049%2C8.752%2C49.35&" + 
                    "filter2=opeway%3D*&" + 
                    "keys=highway&" + 
                    "keys2=highway&" + 
                    "timeout=86&" + 
                    "types2=point%2CotheU&" + 
                    "values=evomaster_1390087_input&" + 
                    "values2=8%3A")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_586() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/ratio?" + 
                    "bcircles=80759%2C86.7036%2C6%7C8.843%2C69.409%2C1%7C8.748%2C89.686%2C6737610392%7C5.738%2C29.425%2C56&" + 
                    "filter=fk&" + 
                    "format=%5Ehq&" + 
                    "keys2=gibkwd&" + 
                    "values=i3JZGTMdpigLi&" + 
                    "values2=hl_kydB")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_587() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/ratio?" + 
                    "bpolys=Pxk%3A8.704561%2C49.403252%2C82739%2C49.412%2C8.74281%2C49.420%2C8.743%2C49.401%2C8.704561%2C49.403292%7CNo%3A8.704561%2C49.403252%2C8.7071%2C49.4370%2C8.739%2C49.43189%2C8.7005%2C49.4125%2C8.704561%2C49.403252%7Chicx%3A8.704561%2C49.403252%2C8.745%2C49.420500%2C8.700%2C49.414137%2C8.7472%2C49.424%2C8.704561%2C4&" + 
                    "filter=e&" + 
                    "format=%7C&" + 
                    "keys=S-h%3FvHMA8gyR9&" + 
                    "types2=R-h%3FvLOA8gyR%3B&" + 
                    "values=bloA")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_588() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/groupBy/type?" + 
                    "bpolys=8.704561%2C49.403262%2C8.71475%2C49.439%2C8.730918%2C49.430%2C8.709566%2C49.406%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.74665%2C49.4273%2C8.713%2C49.4368%2C8.745%2C49.4012%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.73788%2C49.436%2C8.739%2C49.43827%2C8.74104%2C49.4247%2C8.704561%2C49.40325&" + 
                    "keys=evomaster_1588695_input&" + 
                    "types=evomaster_471601_input&" + 
                    "values=fvg")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_589() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/boundary?" + 
                    "bcircles=T%3A8.725421%2C49.436%2C67&" + 
                    "filter=evomaster_1102610_input&" + 
                    "format=geojson&" + 
                    "keys=foo&" + 
                    "time=2019-10-30&" + 
                    "values=foo")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The given time parameter is not completely within the timeframe (2007-10-07 to 2018-05-10T"));
    }
    
    
    @Test
    public void test_590() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/density/groupBy/tag?" + 
                    "bpolys=JNV%3A7.704561%2C49.403252%2C8.7164%2C49.436%2C8.710%2C49.4217%2C8.729%2C49.419%2C8.704561%2C49.403252%7CCmo%3A8.704761%2C49.403252%2C8.707%2C49.422%2C8.74149%2C49.4392%2C8.7335%2C49.42294%2C8.704561%2C49.403252%7Cq%3A8.502561%2C49.403252%2C8.726%2C49.413125%2C8.709%2C49.423%2C8.703%2C49.418%2C80704561%2C4&" + 
                    "filter=&" + 
                    "format=cSV&" + 
                    "groupByKey=coosarsezS28U8Y-&" + 
                    "groupByValues=evko_tthr_293460_hn&" + 
                    "keys=dvon%5Dstirc567%2F7_mnput&" + 
                    "showMetadata=p%3EMKgIFdPzP&" + 
                    "values=etorastir%5B2938%3A")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_591() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/key?" + 
                    "bpolys=8.704561%2C49.407252%2C8.715%2C49.427%2C8.704%2C49.421%2C8.7359%2C49.404342%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.71469%2C49.4287%2C8.703%2C49.412%2C8.7273%2C49.405%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.7082%2C49.431063%2C8.7044%2C49.40704%2C8.7370%2C49.4235%2C8.704561%2C49.40325&" + 
                    "format=foo&" + 
                    "groupByKeys=hf9xjbyV_&" + 
                    "time=2010-07-18")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_592() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/density/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=E%3A8.747205%2C59.41476%2C2%7Ch%3A8.728%2C49.412%2C3&" + 
                    "format=csv&" + 
                    "groupByKey=g6CqL&" + 
                    "time=2016-05-1")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_593() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/density?" + 
                    "bcircles=8.704561%2C49.403252%2C8.705%2C49.437415%2C8.718%2C49.431%2C8.731%2C49.435%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.745%2C49.412%2C8.701559%2C49.4312%2C8.73866%2C49.40699%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.71510%2C49.4357%2C8.706%2C49.401%2C8.70456%2C49.411%2C9.704561%2C49.403252&" + 
                    "filter=landuse%3D*&" + 
                    "format=cSv&" + 
                    "showMetadata=evomaster_115%2C03_inpu&" + 
                    "time=QCTzlf7LOishiom&" + 
                    "types=foo")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_594() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/density/groupBy/tag?" + 
                    "bpolys=DNA%3A8.704561%2C39.403252%2C8.710%2C49.4010%2C8.737%2C49.43465%2C8.719%2C49.423%2C8.704561%2C49.403252%7CsZzG%3A8.704561%2C49.403252%2C8.706%2C49.4164%2C8.705%2C49.409%2C8.705%2C49.40713%2C8.704561%2C49.403252&" + 
                    "groupByKey=evomaster_1786904_input&" + 
                    "keys=foo&" + 
                    "timeout=0.10618193028374101")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_595() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/density/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22oH%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.747305%2C49.408%5D%2C%5B8.700%2C49.402%5D%2C%5B8.70500%2C49.432%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22tisIw%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.73565%2C49.4207%5D%2C%5B8.90909%2C49.413%5D%2C%5B8.72289%2C49.4383%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=natural%3Dwood+and+geometry%3Apoint+or+not+id%3A%281+..+9999%29&" + 
                    "format=CSv&" + 
                    "groupByKey=evomaster_1238044_input&" + 
                    "groupByValues=school%2Cstation%2Ctrack&" + 
                    "keys=evomaster_749118_imput&" + 
                    "showMetadata=evomaster_1238045_input&" + 
                    "types=foo")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_596() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/key?" + 
                    "bboxes=y%3A8.6920%2C29.4204%2C8.715682%2C49.3990%7Cs%3A8.6786%2C49.4077%2C8.7014%2C49.3916%7Cq%3A8.650%2C49.424818%2C8.72764%2C49.3972%7CB%3A8.657%2C49.4069%2C8.736%2C49.393&" + 
                    "groupByKeys=razed%3Arailway%3Aswitch&" + 
                    "keys=higcway&" + 
                    "timeout=49")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_597() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=8.704561%2C49.403252%2C8.704%2C49.4246%2C8.706%2C49.400%2C8.70853%2C49.414%2C8.504561%2C49.403252%7C8.704561%2C49.403252%2C8.72565%2C49.434%2C8.7289%2C49.438%2C8.71336%2C49.4145%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.7426%2C49.4106%2C8.7042%2C49.438%2C8.704%2C49.4351%2C8.704561%2C49.40325&" + 
                    "filter=evomaster_11489_input&" + 
                    "format=evkmaster_691602_input&" + 
                    "groupByKey=llUP5qx&" + 
                    "groupByValues=evomaster_549273_input&" + 
                    "keys=fo&" + 
                    "time=evkmaster_691602_input&" + 
                    "timeout=0.759&" + 
                    "values=LCCyHyD_ZTA")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_598() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/ratio/groupBy/boundary?" + 
                    "bpolys=8.703561%2C49.403252%2C8.720954%2C49.4182%2C8.700584%2C49.405%2C8.743164%2C49.41856%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.747%2C49.4294%2C8.7315%2C49.429%2C8.741%2C49.4219%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.7307%2C49.406%2C8.748%2C49.413%2C8.742%2C49.4285%2C8.704561%2C49.40325&" + 
                    "filter=evomaster_1472507_input&" + 
                    "filter2=dUstination%3D*+and+length%3A%28+..+A00&" + 
                    "format=jsgn&" + 
                    "showMetadata=evomaster_1311995_input&" + 
                    "types=evokaster_1311960_input&" + 
                    "values2=evokaster_1311960_inpu%C2%84")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_599() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/groupBy/boundary/groupBy/tag?" + 
                    "bboxes=t%3A8.7808%2C49.4148%2C8.735%2C49.382&" + 
                    "filter=foo&" + 
                    "groupByKey=building&" + 
                    "groupByValues=chapel%2Cship%2Cstation&" + 
                    "keys=highway&" + 
                    "showMetadata=fok&" + 
                    "time=foo")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_600() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=q%3A6.704561%2C49.403252%2C8.700587%2C49.422%2C8.702%2C49.417%2C8.7216%2C49.417%2C8.704561%2C49.403252%7ClN%3A8.704561%2C49.403252%2C8.726%2C49.4243%2C8.7465%2C49.40504%2C8.7453%2C49.40630%2C8.704561%2C49.403252%7CV%3A8.704561%2C49.403252%2C8.7343%2C49.400%2C8.704%2C49.4115%2C8.70892%2C49.418%2C8.704561%2C49.40325&" + 
                    "filter=tG&" + 
                    "format=csv&" + 
                    "groupByKey=ErRVke&" + 
                    "keys=%5Eom&" + 
                    "showMetadata=ns&" + 
                    "timeout=0.11774099287645179")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_601() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter?" + 
                    "bboxes=G%3A8.68904%2C49.4200%2C8.7132%2C49.380%7CQ%3A8.6819%2C492429114%2C8.726071%2C49.397&" + 
                    "format=json&" + 
                    "keys=highway&" + 
                    "showMetadata=truep&" + 
                    "time=2012-07-23&" + 
                    "timeout=59")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_602() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/density/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=hGULh%3A8.703%2C49.4346%2C7%7CYl%3A8.710403%2C69.4299%2C5%7Cy%3A8.7086%2C49.416%2C9%7CS%3A8.719%2C49.417054%2C4&" + 
                    "groupByKey=byildi&" + 
                    "keys=foo&" + 
                    "values=foo")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_603() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/tag?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22I%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7282%2C49.426%5D%2C%5B8.745%2C49.433%5D%2C%5B8.72908%2C49.425%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22K%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.726%2C49.401%5D%2C%5B8.726%2C49.4223%5D%2C%5B8.708%2C49.4314%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22pz%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.749%2C49.422%5D%2C%5B8.711%2C49.402710%5D%2C%5B4.707650%2C49.424%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "format=evomaster_1564332_input&" + 
                    "groupByKey=evomaster_1564329_input&" + 
                    "groupByValues=evomaster_1564330_input&" + 
                    "keys=evomaster_1561073_input&" + 
                    "showMetadata=evomaster_1564326_input&" + 
                    "time=foo&" + 
                    "timeout=0.5731672943384536&" + 
                    "values=fwo")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_604() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=8.704561%2C49.403252%2C8.708%2C49.404425%2C8.71500%2C49.437%2C8.7042%2C49.404%2C8.704561%2C49.403252&" + 
                    "filter=ref%21%3D*+or+area%3A%281.0+..+1E6%29&" + 
                    "groupByKey=highway&" + 
                    "showMetadata=true&" + 
                    "time=2212-12-26&" + 
                    "timeout=78")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The given time parameter is not completely within the timeframe (2007-10-07 to 2018-05-10T"));
    }
    
    
    @Test
    public void test_605() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=T98.74%3A686%2C452412%2C2%7CXm%3A8.71%3A0%2C89.027%2C0%7CX%3A8.320%2C05.011%2C5%7CXp%3Ed%60%3A2.718511%2C83.300%2C6935601&" + 
                    "format=csv&" + 
                    "groupByKey=3QAhcsYOSlos&" + 
                    "groupByValues=evkkastiua2143214_jm&" + 
                    "keys=avomeqtcx%5C.0%3A5955_mr&" + 
                    "showMetadata=2QCicoYORlk%5EH&" + 
                    "time=-%2618%2F%2C")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_606() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/density/groupBy/tag?" + 
                    "bcircles=2.7397%2C64.2281%2C533146521%7C6.775835%2C07.1030%2C9&" + 
                    "format=%2FrwxHit&" + 
                    "groupByKey=UiWT%7E&" + 
                    "showMetadata=ftekt&" + 
                    "time=dnOJ%3Bc5&" + 
                    "types=gxhLB")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_607() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/density/groupBy/type?" + 
                    "bpolys=SwiBz%3A8.704561%2C41.403252%2C8.748%2C49.4230%2C8.7369%2C49.437%2C8.7047%2C49.416179%2C8.704561%2C49.403252%7CwifgK%3A8.704561%2C49.403252%2C8.739%2C49.4261%2C8.7429%2C49.430938%2C8.703681%2C49.416%2C8.704561%2C49.403252&" + 
                    "filter=evomaster_1668550_input&" + 
                    "format=evomaster_328977_input&" + 
                    "showMetadata=&" + 
                    "types=evomaster_1668551_input&" + 
                    "values=evomaster_329157_input")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_608() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/groupBy/boundary?" + 
                    "bboxes=8.6661%2C49.489%2C8.702522%2C49.3987%7C8.6922%2C49.4297%2C8.745%2C49.380&" + 
                    "keys=foo&" + 
                    "types=fgU&" + 
                    "values=foo%3C")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_609() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/groupBy/boundary?" + 
                    "bcircles=B%3A8.74598%2C49.43392%2C1%7CM%3A8.700%2C89.413%2C3&" + 
                    "format=feojson&" + 
                    "time=foo&" + 
                    "timeout=90&" + 
                    "values=bus_stop")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_610() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/density/groupBy/tag?" + 
                    "bpolys=8.703561%2C49.403252%2C8.7488%2C49.4116%2C8.731%2C49.412%2C8.716%2C49.439%2C8.704561%2C49.40325&" + 
                    "filter=type%3D*&" + 
                    "format=csv&" + 
                    "groupByKey=building&" + 
                    "time=2009-06-08&" + 
                    "timeout=91&" + 
                    "types=foo&" + 
                    "values=foo9")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_611() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/density/groupBy/boundary?" + 
                    "bcircles=Q%3A8.703%2C49.411%2C1%7Cb%3A8.705%2C89.419%2C28&" + 
                    "format=foo&" + 
                    "keys=hihhway&" + 
                    "showMetadata=false")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_612() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count?" + 
                    "bcircles=8.7205%2C69.422%2C62%7C8.718%2C49.4160%2C4&" + 
                    "filter=fop&" + 
                    "format=foo&" + 
                    "showMetadata=foo&" + 
                    "values=fol")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_613() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/groupBy/tag?" + 
                    "bboxes=j%3A8.672%2C49.403%2C8.736%2C49.397%7CR%3A8.652587%2C49.419761%2C8.7176%2C49.3926%7CJ%3A8.692034%2C49.4046%2C8.71955%2C49.391%7CdJ%3A8.65206%2C49.417615%2C8.709%2C89.382&" + 
                    "filter=foo&" + 
                    "format=theme_park&" + 
                    "groupByKey=garden%3Atype&" + 
                    "keys=gighway&" + 
                    "showMetadata=foo&" + 
                    "timeout=28&" + 
                    "types=foo&" + 
                    "values=")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_614() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density/groupBy/type?" + 
                    "bboxes=S%3A8.850007%2C49.417%2C8.7080%2C49.381&" + 
                    "format=json&" + 
                    "keys=foo&" + 
                    "showMetadata=yes&" + 
                    "timeout=53")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_615() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/density/groupBy/tag?" + 
                    "bcircles=caVZ%3A8.715256%2C48.610%2C4%7COUzYX%3A8.707%2C09.402%2C2%7Cm%3A8.732020%2C57.300%2C70%7Cg%3A8.7302%2C63.419%2C1580018&" + 
                    "filter=ivoma%7Bter_616918%2F_ilput&" + 
                    "format=cSV&" + 
                    "groupByKey=QYU&" + 
                    "groupByValues=U%5DP&" + 
                    "keys=LT&" + 
                    "showMetadata=%60%7B1&" + 
                    "types=caVZ%3A8.719256%2C48.610%2C4%7COWzYY%3A8.707049.422%2C2%7Cm%3A8.732020%2C57.401*70%7Cg%3A8.7302%2C65.415%2C1580.189")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_616() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/groupBy/boundary/groupBy/tag?" + 
                    "bboxes=8.6%3A9%2C49.407%2C8.7262%2C49.3804&" + 
                    "groupByKey=%5Euilding&" + 
                    "keys=highway&" + 
                    "showMetadata=false&" + 
                    "time=2%2C13-06-19")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_617() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/ratio?" + 
                    "bboxes=80674%2C49.425797%2C8.758%2C49.387&" + 
                    "filter=f5oo&" + 
                    "filter2=maxspeed%3D*+or+not+geometry%3Apoint+and+id%3A*1+%2F.+9999%29&" + 
                    "keys2=highway7&" + 
                    "time=.%2C15-10-25&" + 
                    "values=gmo&" + 
                    "values2=eQ%3A")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_618() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/density?" + 
                    "bboxes=SPt%3A8.671%2C49.419%2C8.715%2C49.383%7CgYy%3A8.671%2C49.403%2C8.711%2C49.381%7CPj%3A8.686%2C49.4110%2C8.745%2C49.380&" + 
                    "filter=foo&" + 
                    "format=geojson&" + 
                    "keys=evomaster_2005120_input&" + 
                    "showMetadata=no&" + 
                    "time=4014-04-08")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The given time parameter is not completely within the timeframe (2007-10-07 to 2018-05-10T"));
    }
    
    
    @Test
    public void test_619() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/type?" + 
                    "bboxes=Z%3A8.663%2C49.453%2C8.718%2C49.393&" + 
                    "format=csw&" + 
                    "keys=dFom&" + 
                    "values=fU")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_620() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count?" + 
                    "bcircles=8.7411%2C49.427%2C4%7C8.722%2C49.419%2C21%7C8.7076%2C59.4050%2C8%7C8.705%2C49.418%2C3&" + 
                    "keys=vQxFics5z3mp&" + 
                    "time=2013-07-02&" + 
                    "values=foG")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_621() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/density?" + 
                    "bpolys=dxb%3A8.704561%2C49.403252%2C8.7485%2C49.431%2C8.7023%2C49.4395%2C8.7280%2C49.42736%2C8.804561%2C49.403252&" + 
                    "filter=foo&" + 
                    "keys=highwaz&" + 
                    "showMetadata=foo&" + 
                    "timeout=77")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_622() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=nk%3A8.721070%2C49.328%2C7%7CAJ%3A8.70608%2C49.405%2C92&" + 
                    "groupByKey=%5Euilding&" + 
                    "groupByValues=demolished%2Cgive_way&" + 
                    "keys=highway&" + 
                    "showMetadata=true&" + 
                    "time=foo&" + 
                    "timeout=48")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_623() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/density/groupBy/type?" + 
                    "bboxes=8.6790%2C49.42654%2C82754%2C49.386&" + 
                    "filter=foo&" + 
                    "format=cs&" + 
                    "showMetadata=foo&" + 
                    "time=foJ&" + 
                    "types=foo&" + 
                    "values=USP")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_624() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density/groupBy/tag?" + 
                    "bboxes=RUlq%3A8.689%2C49.406%2C8.739003%2C49.386%7CRhK%3A8.655%2C49.407532%2C9.7590%2C49.390&" + 
                    "format=foo&" + 
                    "groupByKey=building&" + 
                    "groupByValues=foo&" + 
                    "keys=evomaster_2051689_input&" + 
                    "showMetadata=yes&" + 
                    "time=foo&" + 
                    "types=foo")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_625() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/density/groupBy/boundary?" + 
                    "bboxes=W%3A8.65352%2C49.4210%2C8.756%2C49.394%7CIYsf%3A8.673%2C49.40040%2C8.710%2C49.394%7CNDG%3A8.689%2C49.4212%2C8.7307%2C49.1912&" + 
                    "format=csv&" + 
                    "values=stepu")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_626() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count?" + 
                    "bcircles=GJ%3A8.7236%2C49.4307%2C4%7COw%3A8.714%2C89.41607%2C50&" + 
                    "filter=highway%3D*+and+area%3A%281.0+..+1E6%29&" + 
                    "format=geojson&" + 
                    "keys=foo&" + 
                    "values=foo")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_627() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/ratio?" + 
                    "bboxes=8.684%2C49.424%2C8.73350%2C49.380%7C8.6637%2C49.401%2C8.73581%2C49.38086%7C8.655%2C49.418%2C8.70753%2C49.380%7C4.672%2C49.401217%2C8.756%2C49.382313&" + 
                    "filter2=bicycle%21%3D*+and+geometry%3Apoint&" + 
                    "format=geojson&" + 
                    "keys=foo&" + 
                    "keys2=highwa&" + 
                    "showMetadata=foo&" + 
                    "values2=sebondaryO")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_628() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/density/groupBy/tag?" + 
                    "bcircles=IKceP%3A8.633089%2C49.4044%2C2%7CAdU%3A8.7406%2C49.418%2C5&" + 
                    "format=json&" + 
                    "groupByKey=buildirg&" + 
                    "groupByValues=crossing&" + 
                    "keys=foo&" + 
                    "timeout=81")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_629() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/density/groupBy/tag?" + 
                    "bboxes=8.652%2C49.416%2C8.811%2C49.397%7C8.6656%2C49.418%2C8.755%2C49.391%7C8.682844%2C49.429%2C8.7162%2C49.398%7C8.662%2C49.426%2C8.7088%2C49.39052&" + 
                    "filter=oneway%21%3D*+and+length%3A%28+..+100%29&" + 
                    "format=foo&" + 
                    "groupByKey=building&" + 
                    "groupByValues=stop%2Cresidential%2Cturning_circle&" + 
                    "showMetadata=false&" + 
                    "time=2010-02-18")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_630() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/groupBy/key?" + 
                    "bboxes=J%3A8.6884%2C49.427%2C8.748304%2C49.381%7CW%3A8.650624%2C49.426%2C8.7413%2C09.3927&" + 
                    "format=fok&" + 
                    "groupByKeys=addr%3Acity&" + 
                    "keys=hifhway&" + 
                    "time=2016-07108&" + 
                    "types=foo")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_631() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/boundary?" + 
                    "bcircles=D%3A8.7458%2C49.4061%2C95%7Cm%3A8.7031%2C69.4218%2C7%7CyGw%3A8.7208%2C49.413867%2C2&" + 
                    "showMetadata=tque&" + 
                    "time=2%2F10-02%2F26&" + 
                    "timeout=5&" + 
                    "types=foo&" + 
                    "values=fooL")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_632() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/groupBy/tag?" + 
                    "bboxes=8.670%2C49.327%2C8.7488%2C49.386%7C8.699%2C49.4043%2C8.732%2C49.39&" + 
                    "groupByKey=hichway&" + 
                    "groupByValues=foo&" + 
                    "keys=fop&" + 
                    "time=2033-11-26&" + 
                    "timeout=37")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_633() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density?" + 
                    "bpolys=8.704561%2C49.403252%2C8.700%2C49.424%2C8.734613%2C49.429%2C8.720%2C49.407%2C8.704561%2C49.40325&" + 
                    "format=crv&" + 
                    "keys=highway&" + 
                    "showMetadata=fapse&" + 
                    "values=steps6")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_634() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area?" + 
                    "bcircles=8.70241%2C49.423812%2C678%7C8.738%2C49.423%2C31%7C8.744%2C49.630%2C2%7C8.705%2C49.4100%2C266&" + 
                    "format=foo&" + 
                    "showMetadata=yes&" + 
                    "types=eUU")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_635() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density/groupBy/tag?" + 
                    "bcircles=8.738%2C49.4052%2C9&" + 
                    "filter=natural%3Dwood+or+length%3A%28+..+100%29&" + 
                    "format=csv&" + 
                    "groupByKey=evomaster_1457394_input&" + 
                    "groupByValues=yes%2Croof&" + 
                    "time=2215-12-16")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The given time parameter is not completely within the timeframe (2007-10-07 to 2018-05-10T"));
    }
    
    
    @Test
    public void test_636() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/ratio/groupBy/boundary?" + 
                    "bboxes=8.693358%2C09.403090%2C8.750%2C49.395363&" + 
                    "format=feojson&" + 
                    "keys2=evomaster_2141285_input&" + 
                    "timeout=62&" + 
                    "values=residential")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_637() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/density/groupBy/boundary?" + 
                    "bboxes=8.699%2C49.405%2C8.739%2C490399%7C8.66921%2C49.4220%2C8.733065%2C49.3816&" + 
                    "filter=type%21%3D*+or+not+area%3A%281.0+..+1E6%29&" + 
                    "format=geojson&" + 
                    "showMetadata=foo&" + 
                    "time=foo&" + 
                    "timeout=68")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_638() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density/groupBy/boundary?" + 
                    "bcircles=vXLLR%3A8.72182%2C49.407%2C3%7Chi%3A4.7384%2C49.4030%2C48%7CfqB%3A8.731%2C49.4230%2C379%7CX%3A8.70791%2C49.4223%2C6&" + 
                    "filter=foo&" + 
                    "keys=evomaster_2141906_input&" + 
                    "time=foo&" + 
                    "values=foo")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_639() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/groupBy/key?" + 
                    "bboxes=D%3A9.67699%2C49.4006%2C8.714%2C49.395&" + 
                    "groupByKeys=%25&" + 
                    "keys=fmo&" + 
                    "showMetadata=foo&" + 
                    "time=2008-06-06&" + 
                    "values=fop")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_640() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/ratio?" + 
                    "bboxes=iP%3A8.665%2C49.424%2C8.7015%2C49.384%7CodTOM%3A8.67127%2C49.416%2C8.7350%2C4903839&" + 
                    "filter2=ref%21%3D*+and+area%3A%281.0+..+1E6%29&" + 
                    "format=json&" + 
                    "keys=highway&" + 
                    "keys2=foo&" + 
                    "time=foo&" + 
                    "timeout=45&" + 
                    "types2=point%2C")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_641() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length?" + 
                    "bboxes=AYkKt%3A8.666698%2C49.41469%2C8.9323%2C49.394%7CH%3A8.6884%2C49.421%2C8.735%2C49.390&" + 
                    "filter=maxspeed%21%3D*+or+type%3Anode&" + 
                    "format=json&" + 
                    "keys=goo&" + 
                    "showMetadata=yes&" + 
                    "time=2011-10-30")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_642() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/type?" + 
                    "bcircles=8.723%2C69.40349%2C1%7C8.715%2C49.416%2C6&" + 
                    "format=foo&" + 
                    "keys=foo&" + 
                    "showMetadata=false&" + 
                    "timeout=51")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_643() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/density/groupBy/type?" + 
                    "bcircles=%3A.716%2C09.038%2C5&" + 
                    "filter=foot%21%3D*+and+not+type%3Anode+and+area%3A%281.0+..+1E6%29&" + 
                    "showMetadata=true&" + 
                    "time=2056-12-16&" + 
                    "values=b%5B")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The given time parameter is not completely within the timeframe (2007-10-07 to 2018-05-10T"));
    }
    
    
    @Test
    public void test_644() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count?" + 
                    "bcircles=DU%3A8.7457%2C49.450000%2C2%7CQZZ%3A8.713%2C69.449%2C5%7CDZxEs%3A8.726%2C49.417%2C9&" + 
                    "filter=maxspeed%21%3D*+and+geometry%3Apolygor+and%24lengsh%3A%28%1C..+100%29&" + 
                    "keys=ani&" + 
                    "time=%2F1Q%2FY4Ed%60A")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_645() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density?" + 
                    "bcircles=%2C&" + 
                    "filter=%7E&" + 
                    "format=CsV&" + 
                    "keys=3QGd&" + 
                    "time=%1Fz&" + 
                    "types=")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_646() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/density?" + 
                    "bboxes=8.696%2C49.422%2C8.700%2C49.353&" + 
                    "filter=landuse%3D*+an%60+not+geometry%3Aline&" + 
                    "keys=fno&" + 
                    "showMetadata=false&" + 
                    "time=2008-10-0&" + 
                    "values=foqUE")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_647() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/density/groupBy/boundary/groupBy/tag?" + 
                    "bboxes=qQ%3A8.665%2C49.428%2C8.7220%2C49.344&" + 
                    "format=json&" + 
                    "groupByKey=highwaw&" + 
                    "groupByValues=service%2Cship%2Cdemolished&" + 
                    "showMetadata=foo")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_648() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/type?" + 
                    "bcircles=sae%3A2.82%14%2C59.434%2C1%7CKdyKJ%3E667%3A0%3A4%2C79.899799%2C64&" + 
                    "filter=efE&" + 
                    "keys=evomaster_585227_input&" + 
                    "showMetadata=evomaster_606705_input&" + 
                    "time=evomaster_60%3A794_input&" + 
                    "timeout=%157&" + 
                    "types=evomaster_602497_input&" + 
                    "values=evomaster_585173_input")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_649() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/type?" + 
                    "bcircles=sae%3A2.82%14%2C59.414%2C1%7CKdyKJ%3E667%3A012%2C59.899799%2C64&" + 
                    "format=*&" + 
                    "keys=evomaster_43%3A714_inpwt&" + 
                    "showMetadata=evomAstirg41%2F811_inpup&" + 
                    "time=B%2C2&" + 
                    "types=evomaster_592359_input&" + 
                    "values=BffA7%40NOC")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_650() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/type?" + 
                    "bcircles=uae%3A2.82%14%2C19.414%2C1%7CKdyKJ%3E667%3A042%2C79.999999%2C64&" + 
                    "showMetadata=evomaster_612029_input&" + 
                    "timeout=%157&" + 
                    "values=2")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_651() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/type?" + 
                    "bcircles=sae%3A2.824%2C-9.414%2C1%7CKdyKJ%3A8.72773%2C79.839609%2C64&" + 
                    "format=GeOJsoN&" + 
                    "showMetadata=evom%C2%81ster_263306_input&" + 
                    "time=FPG&" + 
                    "values=evomaster_263307_input")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_652() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/density/groupBy/type?" + 
                    "bcircles=e%3A8.7066%2C49.40026%2C3%7CcetX%3A8.744%2C49.43087%2C6&" + 
                    "filter=evomaster_719951_input&" + 
                    "format=jsON&" + 
                    "keys=election%3Ayear&" + 
                    "time=2000-03-30&" + 
                    "values=traffic_mirror")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The given time parameter is not completely within the timeframe (2007-10-07 to 2018-05-10T"));
    }
    
    
    @Test
    public void test_653() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/ratio/groupBy/boundary?" + 
                    "bpolys=iHjkf%3A8.704565%2C49.403252%2C8.714%2C49.402%2C8.749018%2C49.413%2C8.717%2C49.4203%2C8.704561%2C49.40325&" + 
                    "filter2=oneway%21%3D*+or+not+area%3A%281.0+..+1E6%29&" + 
                    "format=evomaster_8303_input&" + 
                    "keys2=evomaster_6323_input&" + 
                    "time=evomaster_6143_input&" + 
                    "timeout=57&" + 
                    "types=foo&" + 
                    "types2=")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_654() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/type?" + 
                    "bcircles=sae%3A2.904%2C55.496%2C1%7CKdyOJ%3A9.00000%2C79.638807%2C64&" + 
                    "showMetadata=dvomaster_825434_input&" + 
                    "time=v&" + 
                    "types=vtgRUM%C2%88LJj&" + 
                    "values=rxjIJ")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_655() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/type?" + 
                    "bcircles=uae%3A2.82%14%2C59.414%2C1%7CKdyKJ%3E667%3A021%2C83.998999%2C64&" + 
                    "filter=evomaster_1033885_input&" + 
                    "format=*&" + 
                    "keys=evomaster_1039504_input&" + 
                    "showMetadata=evomastesa6%2B2029ainout&" + 
                    "timeout=%157&" + 
                    "values=6")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_656() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/type?" + 
                    "bcircles=sae%3A0.804%2C99.414%2C1%7CKdyKJ%3A8.72773%2C59.839607%2C64&" + 
                    "filter=eT2zl6LWSO&" + 
                    "format=JsoN&" + 
                    "keys=evomaster_223790_input&" + 
                    "showMetadata=evomaster_222528_input&" + 
                    "types=evomaster_222275_input&" + 
                    "values=evomastEr_94%2841_input")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_657() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/type?" + 
                    "bcircles=sae%3A2.824%2C-92414%2C1%7CKdyKJ%3A8.72773%2C79.839609%2C64&" + 
                    "format=evomaster_77219_input&" + 
                    "keys=_t33vZj4&" + 
                    "timeout=%155&" + 
                    "values=evomaster_263307_input")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_658() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/type?" + 
                    "bcircles=sae%3A2.82%14%2C59.414%2C1%7CKdyKJ%3E667%3A013%2C79.899799%2C64&" + 
                    "filter=evomaster_550175_input&" + 
                    "format=7K&" + 
                    "showMetadata=evomAstirg41%2F811_input&" + 
                    "timeout=%157&" + 
                    "values=BffA7%40NOCS")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_659() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/type?" + 
                    "bcircles=sae%3A2.82%14%2C59.414%2C1%7CKdyKJ%3E667%3A032%2C79.899799%2C64&" + 
                    "filter=evomaster_550175_input&" + 
                    "format=jsoN&" + 
                    "keys=evomaster_584881_inpu&" + 
                    "showMetadata=evomAstir_41%2F811_input&" + 
                    "timeout=%157&" + 
                    "types=evomaster_411907_input&" + 
                    "values=BffA7%40NOCS")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_660() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/type?" + 
                    "bcircles=sae%3A2.82%14%2C59.414%2C1%7CKdyKJ%3E667%3A033%2C79.899799%2C64&" + 
                    "filter=evomaster_550175_input&" + 
                    "format=7K&" + 
                    "time=B42&" + 
                    "timeout=%157&" + 
                    "types=evomaster_411907_input&" + 
                    "values=BfjA7%40NOCS")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_661() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/groupBy/boundary?" + 
                    "bcircles=K%3A8.744%2C49.404%2C6&" + 
                    "format=csv&" + 
                    "keys=area&" + 
                    "showMetadata=yes&" + 
                    "time=2051-04-02&" + 
                    "values=evomaster_667468_input")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The given time parameter is not completely within the timeframe (2007-10-07 to 2018-05-10T"));
    }
    
    
    @Test
    public void test_662() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/type?" + 
                    "bcircles=sae%3A0.804%2C59.414%2C1%7CKdyKJ%3A8.72773%2C59.839607%2C64&" + 
                    "keys=iZnzG_pbspZb&" + 
                    "showMetadata=evomaster_222528_input&" + 
                    "time=Fg&" + 
                    "timeout=55")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_663() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/type?" + 
                    "bcircles=sae%3A0.704%2C59.415%2C1%7CKdyKJ%3A8.72773%2C49.839607%2C64&" + 
                    "filter=evomaster_83059_input&" + 
                    "format=csV&" + 
                    "keys=iZnzG_pbspZb&" + 
                    "showMetadata=evomaster_825S5_input&" + 
                    "time=evomaster_94771_input&" + 
                    "timeout=55&" + 
                    "types=evomaster_83824_input&" + 
                    "values=foo")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_664() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/type?" + 
                    "bcircles=sae%3A2.82%14%2C59.414%2C1%7CKdyKJ%3E667%3A-73%2C79.899799%2C64&" + 
                    "filter=iNH__kkk3G4jHSC&" + 
                    "format=7&" + 
                    "keys=evomaster_1429067_input&" + 
                    "showMetadata=evomAster_41%2F811_input&" + 
                    "time=evomaster_1429068_input&" + 
                    "timeout=%155&" + 
                    "types=evomaster_411907_input&" + 
                    "values=evomaster_411831_input")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_665() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/type?" + 
                    "bcircles=sae%3A0.704%2C79.415%2C1%7CKdyKJ%3A8.72773%2C49.839607%2C64&" + 
                    "filter=eT2zl6LWSO&" + 
                    "keys=iZnzG_paspZb&" + 
                    "showMetadata=evomaster_94886_input&" + 
                    "time=evomastgr_94771_input&" + 
                    "timeout=55&" + 
                    "values=foo")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_666() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/ratio/groupBy/boundary?" + 
                    "bpolys=iHjkf%3A8.704561%2C49.403252%2C8.714%2C49.402%2C8.749018%2C49.413%2C8.717%2C49.4203%2C8.704561%2C49.40325&" + 
                    "filter=highway%21%3D*+and+not+geometry%3Apolygon+and+not+length%3A%28+..+100%29&" + 
                    "keys=foo&" + 
                    "showMetadata=no&" + 
                    "time=%22014-11-18&" + 
                    "timeout=57&" + 
                    "types=foo&" + 
                    "types2=foo&" + 
                    "values=foo&" + 
                    "values2=foo")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_667() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/ratio?" + 
                    "bboxes=KSofN%3A8.6880%2C49.419%2C8.701%2C49.394%7CIyJ%3A8.6504%2C49.428%2C8.7035%2C49.394&" + 
                    "keys=foo&" + 
                    "keys2=evomaster_654175_input&" + 
                    "timeout=.7")
                .then()
                .statusCode(413)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(413.0))
                .body("'message'", containsString("The given query is too large in respect to the given timeout. Please use a smaller region and/or coarser time period."));
    }
    
    
    @Test
    public void test_668() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/groupBy/tag?" + 
                    "bboxes=8.697%2C49.429%2C8.749%2C49.388&" + 
                    "groupByKey=97&" + 
                    "groupByValues=syragogue%2Ctrack&" + 
                    "timeout=9")
                .then()
                .statusCode(413)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(413.0))
                .body("'message'", containsString("The given query is too large in respect to the given timeout. Please use a smaller region and/or coarser time period."));
    }
    
    
    @Test
    public void test_669() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/boundary?" + 
                    "bcircles=A%3A8.74094%2C49.4298%2C8%7CJBc%3A8.709695%2C49.404%2C7&" + 
                    "time=%2F&" + 
                    "timeout=6")
                .then()
                .statusCode(413)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(413.0))
                .body("'message'", containsString("The given query is too large in respect to the given timeout. Please use a smaller region and/or coarser time period."));
    }
    
    
    @Test
    public void test_670() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count?" + 
                    "bcircles=DU%3A8.7477%2C49.406507%2C2%7CQZZ%3A8.713%2C49.433%2C5%7CDZtEr%3A8.726%2C49.418%2C55&" + 
                    "keys=foo&" + 
                    "timeout=.2")
                .then()
                .statusCode(413)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(413.0))
                .body("'message'", containsString("The given query is too large in respect to the given timeout. Please use a smaller region and/or coarser time period."));
    }


}
