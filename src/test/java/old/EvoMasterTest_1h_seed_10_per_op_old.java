package old;

import org.heigit.ohsome.ohsomeapi.EMDriver;
import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.controller.api.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import static org.evomaster.client.java.controller.db.dsl.SqlDsl.sql;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto;
import  java.util.List;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
 * This file was automatically generated by EvoMaster on 2020-11-19T16:26:32.761+01:00[Europe/Paris]
 * <br>
 * The generated test suite contains 606 tests
 * <br>
 * Covered targets: 6447
 * <br>
 * Used time: 1h 0m 0s
 * <br>
 * Needed budget for current results: 88%
 * <br>
 * 
 */
public class EvoMasterTest_1h_seed_10_per_op_old {

    
    private static final SutHandler controller = new EMDriver();
    private static String baseUrlOfSut;
    
    
    @BeforeClass
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    @AfterClass
    public static void tearDown() {
        controller.stopSut();
    }
    
    
    @Before
    public void initTest() {
        controller.resetStateOfSUT();
    }
    
    
    
    
    @Test
    public void test_0() throws Exception {
        
        try{
            given().accept("*/*")
                    .get(baseUrlOfSut + "/users/count/groupBy/tag?" + 
                        "bboxes=NDlnE%3A8.6929%2C49.4237%2C8.735733%2C49.388&" + 
                        "groupByKey=highway&" + 
                        "groupByValues=stop_line%2Cspeed_camera%2Cliving_street&" + 
                        "showMetadata=yes&" + 
                        "timeout=34")
                    .then();
        } catch(Exception e){
        }
    }
    
    
    @Test
    public void test_1() throws Exception {
        
        try{
            given().accept("*/*")
                    .post(baseUrlOfSut + "/users/count/groupBy/key?" + 
                        "bcircles=8.746%2C49.4275%2C1&" + 
                        "format=csv&" + 
                        "groupByKeys=lit%2Cname")
                    .then();
        } catch(Exception e){
        }
    }
    
    
    @Test
    public void test_2() throws Exception {
        
        try{
            given().accept("*/*")
                    .post(baseUrlOfSut + "/users/count/density/groupBy/tag?" + 
                        "bcircles=hVGja%3A8.742%2C49.409%2C6%7Cws%3A8.708%2C49.4047%2C5&" + 
                        "filter=surface%21%3D*&" + 
                        "groupByKey=highway&" + 
                        "groupByValues=dormitory%2Csynagogue&" + 
                        "time=%2F%2FP1Y8M1D&" + 
                        "timeout=83")
                    .then();
        } catch(Exception e){
        }
    }
    
    
    @Test
    public void test_3() throws Exception {
        
        try{
            given().accept("*/*")
                    .get(baseUrlOfSut + "/users/count/density/groupBy/tag?" + 
                        "bcircles=xk%3A8.743%2C49.4068%2C97%7CM%3A8.733%2C49.41541%2C398%7CKL%3A8.743025%2C49.4343%2C7%7CrJwmn%3A8.71171%2C49.41857%2C1&" + 
                        "groupByKey=highway&" + 
                        "groupByValues=tower%2Coffice&" + 
                        "time=%2F%2FP1Y3M1D")
                    .then();
        } catch(Exception e){
        }
    }
    
    
    @Test
    public void test_4() throws Exception {
        
        try{
            given().accept("*/*")
                    .post(baseUrlOfSut + "/users/count/density/groupBy/boundary?" + 
                        "bcircles=exVgs%3A8.7149%2C49.418176%2C79&" + 
                        "filter=maxspeed%3D*+or+not+id%3A%281+..+9999%29&" + 
                        "format=json")
                    .then();
        } catch(Exception e){
        }
    }
    
    
    @Test
    public void test_5() throws Exception {
        
        try{
            given().accept("*/*")
                    .get(baseUrlOfSut + "/users/count/density/groupBy/boundary?" + 
                        "bcircles=8.74297%2C49.427%2C1%7C8.715%2C49.4279%2C4&" + 
                        "filter=barrier%21%3D*+or+not+area%3A%281.0+..+1E6%29&" + 
                        "format=csv&" + 
                        "showMetadata=false&" + 
                        "timeout=73")
                    .then();
        } catch(Exception e){
        }
    }
    
    
    @Test
    public void test_6() throws Exception {
        
        try{
            given().accept("*/*")
                    .post(baseUrlOfSut + "/users/count/density?" + 
                        "bcircles=L%3A8.73154%2C49.4360%2C3%7CX%3A8.730197%2C49.403%2C4&" + 
                        "filter=tracktype%21%3D*+or+type%3Arelation&" + 
                        "showMetadata=false&" + 
                        "time=%2F%2FP3Y4M11D&" + 
                        "timeout=78")
                    .then();
        } catch(Exception e){
        }
    }
    
    
    @Test
    public void test_7() throws Exception {
        
        try{
            given().accept("*/*")
                    .get(baseUrlOfSut + "/users/count/density?" + 
                        "bcircles=8.7164%2C49.413%2C1%7C8.7046%2C49.4366%2C6&" + 
                        "filter=building%21%3D*+or+not+id%3A%281+..+9999%29&" + 
                        "showMetadata=true&" + 
                        "time=%2F%2FP1Y11M11D&" + 
                        "timeout=61")
                    .then();
        } catch(Exception e){
        }
    }
    
    
    @Test
    public void test_8() throws Exception {
        
        try{
            given().accept("*/*")
                    .post(baseUrlOfSut + "/users/count?" + 
                        "bcircles=wMUEy%3A8.741015%2C49.411261%2C3&" + 
                        "filter=maxspeed%21%3D*+or+area%3A%281.0+..+1E6%29&" + 
                        "format=geojson")
                    .then();
        } catch(Exception e){
        }
    }
    
    
    @Test
    public void test_9() throws Exception {
        
        try{
            given().accept("*/*")
                    .get(baseUrlOfSut + "/users/count?" + 
                        "bcircles=msk%3A8.72302%2C49.417%2C52&" + 
                        "filter=source%3Amaxspeed%21%3D*&" + 
                        "time=%2F%2FP1Y7M4D&" + 
                        "timeout=60")
                    .then();
        } catch(Exception e){
        }
    }
    
    
    @Test
    public void test_10_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/groupBy/type?" + 
                    "bpolys=d%3A8.704561%2C49.403252%2C8.722%2C49.4201%2C8.708961%2C49.4272%2C8.7271%2C49.414419%2C8.704561%2C49.403252%7CmO%3A8.704561%2C49.403252%2C8.749%2C49.425%2C8.737%2C49.43288%2C8.707%2C49.431753%2C8.704561%2C49.403252&" + 
                    "keys=highway&" + 
                    "time=2014-09-11&" + 
                    "timeout=68")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.722 49.4201 ) and LINESTRING ( 8.7271 49.414419, 8.704561 49.403252 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/users/count/groupBy/type"));
    }
    
    
    @Test
    public void test_11_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/groupBy/tag?" + 
                    "bcircles=Ap%3A8.7437%2C49.432%2C9%7Ck%3A8.720%2C49.400%2C626467588&" + 
                    "format=json&" + 
                    "groupByKey=highway&" + 
                    "keys=highway&" + 
                    "showMetadata=true&" + 
                    "time=2011-08-28&" + 
                    "timeout=25&" + 
                    "values=street_lamp")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El Ã¡ngulo 254.462.145.376.427.968 es demasiado grande."))
                .body("'path'", containsString("/users/count/groupBy/tag"));
    }
    
    
    @Test
    public void test_12_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/key?" + 
                    "bpolys=Gv%3A8.704561%2C49.403252%2C8.704%2C49.40591%2C8.7008%2C49.420%2C8.72155%2C49.42054%2C8.704561%2C49.403252%7CXHL%3A8.704561%2C49.403252%2C8.716931%2C49.407%2C8.704%2C49.4171%2C8.709%2C49.427%2C8.704561%2C49.403252%7CHD%3A8.704561%2C49.403252%2C8.73038%2C49.43519%2C8.70465%2C49.404%2C8.73620%2C49.43316%2C8.704561%2C49.403252&" + 
                    "groupByKeys=oneway%2Cnetwork&" + 
                    "keys=highway&" + 
                    "showMetadata=yes&" + 
                    "values=steps")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.704 49.40591 ) and LINESTRING ( 8.709 49.427, 8.704561 49.403252 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/users/count/groupBy/key"));
    }
    
    
    @Test
    public void test_13_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/key?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22G%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.733%2C49.4125%5D%2C%5B8.703805%2C49.431%5D%2C%5B8.741%2C49.430%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22QED%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7354%2C49.437%5D%2C%5B8.722%2C49.40982%5D%2C%5B8.7012%2C49.430%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "groupByKeys=smoothness%2Coneway%2Cbuilding&" + 
                    "keys=highway&" + 
                    "showMetadata=no&" + 
                    "time=%2F%2FP2Y5M2D")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/executor/ExecutionUtils_565_extractContributionTags
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.725625194904534 49.417173193843674, 8.720341651014534 49.42052121788769 ) and LINESTRING ( 8.726815753019174 49.41958807216874, 8.718342609389126 49.413368372236896 ) [ (8.724498537385184, 49.41788712308183, NaN) ]"))
                .body("'path'", containsString("/users/count/groupBy/key"));
    }
    
    
    @Test
    public void test_14_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/groupBy/key?" + 
                    "bpolys=8.704561%2C49.403252%2C8.71217%2C49.432%2C8.7338%2C49.4332%2C8.703%2C49.420%2C8.704561%2C49.403252&" + 
                    "groupByKeys=addr%3Astreet%2Ctype%2Csidewalk&" + 
                    "showMetadata=yes")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/executor/ExecutionUtils_565_extractContributionTags
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.71217 49.432 ) and LINESTRING ( 8.7338 49.4332, 8.703 49.42 ) [ (8.709760747047515, 49.42289746302036, NaN) ]"))
                .body("'path'", containsString("/users/count/groupBy/key"));
    }
    
    
    @Test
    public void test_15_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/boundary?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22CApLy%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.738%2C49.426%5D%2C%5B8.73481%2C49.4036%5D%2C%5B8.74708%2C49.421932%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22iERF%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.712%2C49.4014%5D%2C%5B8.704504%2C49.402%5D%2C%5B8.723%2C49.4339%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "keys=highway&" + 
                    "time=2018-04-06&" + 
                    "values=bus_stop")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.738 49.426, 8.73481 49.4036 ) and LINESTRING ( 8.74708 49.421932, 8.70545856057689 49.40364632798458 ) [ (8.736775995694753, 49.417405110834636, NaN) ]"))
                .body("'path'", containsString("/users/count/groupBy/boundary"));
    }
    
    
    @Test
    public void test_16_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/boundary?" + 
                    "bpolys=Que%3A8.704561%2C49.403252%2C8.747%2C49.411870%2C8.7045%2C49.41021%2C8.7317%2C49.428%2C8.704561%2C49.403252%7CtqkcM%3A8.704561%2C49.403252%2C8.728%2C49.437%2C8.742136%2C49.416008%2C8.7045%2C49.410816%2C8.704561%2C49.403252&" + 
                    "keys=highway&" + 
                    "showMetadata=true&" + 
                    "time=2013-09-19&" + 
                    "timeout=48&" + 
                    "values=elevator")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.747 49.41187 ) and LINESTRING ( 8.704561 49.403252, 8.728 49.437 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/users/count/groupBy/boundary"));
    }
    
    
    @Test
    public void test_17_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/groupBy/boundary?" + 
                    "bpolys=ew%3A8.704561%2C49.403252%2C8.705%2C49.4251%2C8.7042%2C49.436%2C8.7045%2C49.431%2C8.704561%2C49.403252%7CCy%3A8.704561%2C49.403252%2C8.725%2C49.43088%2C8.738908%2C49.435%2C8.7330%2C49.438049%2C8.704561%2C49.403252%7CCL%3A8.704561%2C49.403252%2C8.7428%2C49.4190%2C8.7488%2C49.404%2C8.701%2C49.4070%2C8.704561%2C49.403252&" + 
                    "filter=maxspeed%21%3D*+or+id%3A%281+..+9999%29&" + 
                    "format=json&" + 
                    "time=2017-04-07&" + 
                    "timeout=57")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.705 49.4251 ) and LINESTRING ( 8.7045 49.431, 8.704561 49.403252 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/users/count/groupBy/boundary"));
    }
    
    
    @Test
    public void test_18_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/density/groupBy/type?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22L%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.742%2C49.439%5D%2C%5B8.7094%2C49.40614%5D%2C%5B8.7025%2C49.424%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=oneway%21%3D*+or+id%3A%281+..+9999%29&" + 
                    "format=geojson&" + 
                    "timeout=87")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.742 49.439 ) and LINESTRING ( 8.7094 49.40614, 8.7025 49.424 ) [ (8.708911058148798, 49.4074055799221, NaN) ]"))
                .body("'path'", containsString("/users/count/density/groupBy/type"));
    }
    
    
    @Test
    public void test_19_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/density/groupBy/type?" + 
                    "bpolys=T%3A8.704561%2C49.403252%2C8.746%2C49.402%2C8.717%2C49.413521%2C8.743%2C49.41422%2C8.704561%2C49.403252&" + 
                    "filter=network%21%3D*+or+type%3Away+or+not+id%3A%281+..+9999%29&" + 
                    "format=json&" + 
                    "showMetadata=false&" + 
                    "timeout=56")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/executor/ExecutionUtils_565_extractContributionTags
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.746 49.402, 8.717 49.413521 ) and LINESTRING ( 8.743 49.41422, 8.704561 49.403252 ) [ (8.72684413478963, 49.40961016286513, NaN) ]"))
                .body("'path'", containsString("/users/count/density/groupBy/type"));
    }
    
    
    @Test
    public void test_20_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/density/groupBy/type?" + 
                    "bcircles=ZfRg%3A8.730%2C49.41971%2C8%7CCk%3A8.731%2C49.404%2C8%7Cah%3A8.7016%2C49.40791%2C2%7Civ%3A8.732%2C49.4342%2C353077933&" + 
                    "format=geojson&" + 
                    "keys=highway&" + 
                    "showMetadata=yes")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El Ã¡ngulo 2.603.958.922.731.077 es demasiado grande."))
                .body("'path'", containsString("/users/count/density/groupBy/type"));
    }
    
    
    @Test
    public void test_21_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/density/groupBy/type?" + 
                    "bpolys=JVPcr%3A8.704561%2C49.403252%2C8.735918%2C49.43520%2C8.718204%2C49.42586%2C8.714060%2C49.438039%2C8.704561%2C49.403252%7CV%3A8.704561%2C49.403252%2C8.714%2C49.408%2C8.709%2C49.420013%2C8.7025%2C49.400%2C8.704561%2C49.403252&" + 
                    "keys=highway&" + 
                    "values=stop_line")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.735918 49.4352 ) and LINESTRING ( 8.704561 49.403252, 8.714 49.408 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/users/count/density/groupBy/type"));
    }
    
    
    @Test
    public void test_22_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/density/groupBy/tag?" + 
                    "bpolys=8.704561%2C49.403252%2C8.749%2C49.432%2C8.74795%2C49.4392%2C8.7408%2C49.437%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.7074%2C49.416735%2C8.705%2C49.4102%2C8.7006%2C49.41737%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.7042%2C49.417145%2C8.7444%2C49.435%2C8.709%2C49.4002%2C8.704561%2C49.403252&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=garage%2Cschool%2Csecondary_link&" + 
                    "keys=highway&" + 
                    "showMetadata=no&" + 
                    "values=street_lamp")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/executor/ExecutionUtils_565_extractContributionTags
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.749 49.432 ) and LINESTRING ( 8.704561 49.403252, 8.7074 49.416735 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/users/count/density/groupBy/tag"));
    }
    
    
    @Test
    public void test_23_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/density/groupBy/tag?" + 
                    "bcircles=8.726%2C49.43847%2C143439985&" + 
                    "filter=network%3D*+and+type%3Away+or+not+length%3A%28+..+100%29&" + 
                    "format=json&" + 
                    "groupByKey=building&" + 
                    "showMetadata=true&" + 
                    "timeout=41")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El Ã¡ngulo 1.929.499.566.859,788 es demasiado grande."))
                .body("'path'", containsString("/users/count/density/groupBy/tag"));
    }
    
    
    @Test
    public void test_24_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/density/groupBy/tag?" + 
                    "bpolys=8.704561%2C49.403252%2C8.745025%2C49.43836%2C8.718%2C49.408107%2C8.727%2C49.418%2C8.704561%2C49.403252&" + 
                    "format=geojson&" + 
                    "groupByKey=building&" + 
                    "keys=highway&" + 
                    "values=give_way")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.745025 49.43836, 8.718 49.408107 ) and LINESTRING ( 8.727 49.418, 8.704561 49.403252 ) [ (8.726606218009689, 49.4177411873616, NaN) ]"))
                .body("'path'", containsString("/users/count/density/groupBy/tag"));
    }
    
    
    @Test
    public void test_25_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/density/groupBy/tag?" + 
                    "bpolys=wrYu%3A8.704561%2C49.403252%2C8.719%2C49.401843%2C8.701%2C49.417%2C8.707%2C49.4251%2C8.704561%2C49.403252%7Cb%3A8.704561%2C49.403252%2C8.7127%2C49.435335%2C8.738048%2C49.421%2C8.741%2C49.426%2C8.704561%2C49.403252&" + 
                    "filter=network%21%3D*+and+area%3A%281.0+..+1E6%29&" + 
                    "format=json&" + 
                    "groupByKey=building&" + 
                    "groupByValues=school%2Cstop%2Ctraffic_mirror&" + 
                    "time=%2F%2FP2Y5M2D")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/executor/ExecutionUtils_565_extractContributionTags
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.719 49.401843 ) and LINESTRING ( 8.707 49.4251, 8.704561 49.403252 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/users/count/density/groupBy/tag"));
    }
    
    
    @Test
    public void test_26_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/density/groupBy/boundary?" + 
                    "bcircles=8.71821%2C49.415251%2C7%7C8.739%2C49.414%2C5%7C8.726%2C49.422%2C81%7C8.7395%2C49.4160%2C917148637513&" + 
                    "keys=highway&" + 
                    "timeout=96&" + 
                    "values=residential")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El Ã¡ngulo 5.385.424.194.792.707.600.000.000.000.000.000.000.000.000 es demasiado grande."))
                .body("'path'", containsString("/users/count/density/groupBy/boundary"));
    }
    
    
    @Test
    public void test_27_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/density?" + 
                    "bpolys=Ze%3A8.704561%2C49.403252%2C8.7373%2C49.438%2C8.7438%2C49.404305%2C8.735749%2C49.435%2C8.704561%2C49.403252%7CTNyxt%3A8.704561%2C49.403252%2C8.724920%2C49.431%2C8.704595%2C49.4066%2C8.7045%2C49.40447%2C8.704561%2C49.403252%7CiU%3A8.704561%2C49.403252%2C8.709%2C49.4026%2C8.740%2C49.417686%2C8.7462%2C49.4190%2C8.704561%2C49.403252&" + 
                    "filter=addr%3Apostcode%3D*&" + 
                    "format=csv&" + 
                    "time=%2F%2FP2Y7M6D")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.7373 49.438 ) and LINESTRING ( 8.7045 49.40447, 8.704561 49.403252 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/users/count/density"));
    }
    
    
    @Test
    public void test_28_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/density?" + 
                    "bpolys=h%3A8.704561%2C49.403252%2C8.7108%2C49.40795%2C8.71842%2C49.4161%2C8.705923%2C49.412%2C8.704561%2C49.403252%7CZ%3A8.704561%2C49.403252%2C8.74494%2C49.412%2C8.720270%2C49.408%2C8.702%2C49.419%2C8.704561%2C49.403252%7CcU%3A8.704561%2C49.403252%2C8.712%2C49.41464%2C8.7061%2C49.4336%2C8.706%2C49.4361%2C8.704561%2C49.403252&" + 
                    "showMetadata=yes&" + 
                    "time=%2F%2FP3Y8M22D")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.7108 49.40795 ) and LINESTRING ( 8.704561 49.403252, 8.712 49.41464 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/users/count/density"));
    }
    
    
    @Test
    public void test_29_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count?" + 
                    "bcircles=Jg%3A8.7128%2C49.402%2C7%7Cn%3A8.7380%2C49.407%2C8%7CUtNmB%3A8.7383%2C49.428%2C409%7CilA%3A8.737220%2C49.419%2C61915077004&" + 
                    "format=geojson&" + 
                    "keys=highway&" + 
                    "showMetadata=yes&" + 
                    "time=%2F%2FP2Y6M9D&" + 
                    "timeout=32&" + 
                    "values=secondary")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El Ã¡ngulo 2.324.250.952.141.504.400.000.000.000.000.000 es demasiado grande."))
                .body("'path'", containsString("/users/count"));
    }
    
    
    @Test
    public void test_30_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22khLdG%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.709%2C49.405294%5D%2C%5B8.727%2C49.439067%5D%2C%5B8.7396%2C49.428647%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "format=geojson&" + 
                    "keys=highway&" + 
                    "showMetadata=no&" + 
                    "time=%2F%2FP1Y11M7D&" + 
                    "timeout=25&" + 
                    "values=crossing")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.709 49.405294, 8.727 49.439067 ) and LINESTRING ( 8.7396 49.428647, 8.704561 49.403252 ) [ (8.710020592645595, 49.40720891530109, NaN) ]"))
                .body("'path'", containsString("/users/count"));
    }
    
    
    @Test
    public void test_31_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count?" + 
                    "bpolys=UuMt%3A8.704561%2C49.403252%2C8.708%2C49.4344%2C8.70459%2C49.412%2C8.70723%2C49.412006%2C8.704561%2C49.403252%7CZ%3A8.704561%2C49.403252%2C8.70416%2C49.410%2C8.733%2C49.438%2C8.708214%2C49.4308%2C8.704561%2C49.403252%7CU%3A8.704561%2C49.403252%2C8.72880%2C49.4330%2C8.7429%2C49.43157%2C8.718%2C49.4375%2C8.704561%2C49.403252&" + 
                    "format=csv&" + 
                    "keys=highway&" + 
                    "showMetadata=true&" + 
                    "time=%2F%2FP3Y5M13D&" + 
                    "timeout=41")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.708 49.4344 ) and LINESTRING ( 8.704561 49.403252, 8.70416 49.41 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/users/count"));
    }
    
    
    @Test
    public void test_32_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/ratio/groupBy/boundary?" + 
                    "bpolys=Uys%3A8.704561%2C49.403252%2C8.749%2C49.418%2C8.70493%2C49.404%2C8.71381%2C49.402%2C8.704561%2C49.403252%7CX%3A8.704561%2C49.403252%2C8.724%2C49.4136%2C8.70680%2C49.406%2C8.722%2C49.408%2C8.704561%2C49.403252%7CA%3A8.704561%2C49.403252%2C8.731%2C49.4144%2C8.7243%2C49.40237%2C8.706%2C49.4008%2C8.704561%2C49.403252&" + 
                    "filter=lanes%21%3D*+or+not+type%3Arelation+or+id%3A%281+..+9999%29&" + 
                    "filter2=oneway%3D*+or+area%3A%281.0+..+1E6%29&" + 
                    "keys2=highway&" + 
                    "showMetadata=true&" + 
                    "time=2015-10-20&" + 
                    "timeout=54&" + 
                    "types2=polygon%2Cother&" + 
                    "values2=cycleway")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.749 49.418 ) and LINESTRING ( 8.71381 49.402, 8.704561 49.403252 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/perimeter/ratio/groupBy/boundary"));
    }
    
    
    @Test
    public void test_33_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/ratio/groupBy/boundary?" + 
                    "bpolys=i%3A8.704561%2C49.403252%2C8.746%2C49.4390%2C8.744%2C49.431%2C8.708%2C49.4291%2C8.704561%2C49.403252%7Cf%3A8.704561%2C49.403252%2C8.7209%2C49.415%2C8.70489%2C49.419%2C8.707%2C49.408%2C8.704561%2C49.403252%7CS%3A8.704561%2C49.403252%2C8.706%2C49.4350%2C8.704%2C49.400%2C8.748%2C49.427123%2C8.704561%2C49.403252&" + 
                    "filter=natural%3Dwood+or+geometry%3Aline+and+length%3A%28+..+100%29&" + 
                    "timeout=52")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.746 49.439 ) and LINESTRING ( 8.707 49.408, 8.704561 49.403252 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/perimeter/ratio/groupBy/boundary"));
    }
    
    
    @Test
    public void test_34_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/ratio?" + 
                    "bpolys=dq%3A8.704561%2C49.403252%2C8.700801%2C49.410%2C8.73737%2C49.416192%2C8.704664%2C49.4300%2C8.704561%2C49.403252%7CkXe%3A8.704561%2C49.403252%2C8.723%2C49.4196%2C8.749%2C49.4249%2C8.7049%2C49.4182%2C8.704561%2C49.403252%7CWhOJx%3A8.704561%2C49.403252%2C8.745404%2C49.401%2C8.725%2C49.4363%2C8.71050%2C49.434%2C8.704561%2C49.403252&" + 
                    "filter2=barrier%3D*+and+area%3A%281.0+..+1E6%29&" + 
                    "keys=highway&" + 
                    "keys2=highway&" + 
                    "time=2016-02-05&" + 
                    "timeout=26&" + 
                    "types2=relation&" + 
                    "values=service&" + 
                    "values2=pedestrian")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.700801 49.41 ) and LINESTRING ( 8.704664 49.43, 8.704561 49.403252 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/perimeter/ratio"));
    }
    
    
    @Test
    public void test_35_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/type?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22f%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.746%2C49.410%5D%2C%5B8.7297%2C49.4326%5D%2C%5B8.740%2C49.403024%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22SI%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7384%2C49.408%5D%2C%5B8.706%2C49.427%5D%2C%5B8.7014%2C49.4112%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "keys=highway&" + 
                    "timeout=87")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.737382461334578 49.40859670477293, 8.746 49.41 ) and LINESTRING ( 8.7297 49.4326, 8.738232969892039 49.40809794975467 ) [ (8.738022953170358, 49.40870100359549, NaN) ]"))
                .body("'path'", containsString("/elements/perimeter/groupBy/type"));
    }
    
    
    @Test
    public void test_36_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/groupBy/type?" + 
                    "bcircles=i%3A8.737462%2C49.4339%2C8343503600%7CoS%3A8.74544%2C49.425%2C1%7CAvyRh%3A8.732%2C49.40299%2C4%7CPwq%3A8.716%2C49.406%2C961603377378&" + 
                    "filter=service%3Ddriveway+or+type%3Away+or+length%3A%28+..+100%29&" + 
                    "showMetadata=yes&" + 
                    "time=2013-12-25")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El Ã¡ngulo 253.359.106.112.448.880.000.000.000 es demasiado grande."))
                .body("'path'", containsString("/elements/perimeter/groupBy/type"));
    }
    
    
    @Test
    public void test_37_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/groupBy/type?" + 
                    "bpolys=Jph%3A8.704561%2C49.403252%2C8.7468%2C49.404%2C8.730%2C49.403%2C8.743443%2C49.42250%2C8.704561%2C49.403252%7CfET%3A8.704561%2C49.403252%2C8.700%2C49.4342%2C8.707%2C49.4092%2C8.704545%2C49.4356%2C8.704561%2C49.403252%7Ca%3A8.704561%2C49.403252%2C8.722%2C49.40437%2C8.708%2C49.41120%2C8.7417%2C49.4031%2C8.704561%2C49.403252&" + 
                    "filter=highway+in+%28secondary%2Cpath%2Cunclassified%2Ctrack%2Cprimary%2Cresidential%2Ccycleway%2Cservice%2Cfootway%29+or+not+id%3A%281+..+9999%29&" + 
                    "format=csv&" + 
                    "showMetadata=false&" + 
                    "timeout=90")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.7468 49.404 ) and LINESTRING ( 8.704561 49.403252, 8.722 49.40437 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/perimeter/groupBy/type"));
    }
    
    
    @Test
    public void test_38_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/tag?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22k%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7075%2C49.433%5D%2C%5B8.70461%2C49.413%5D%2C%5B8.7230%2C49.411%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22p%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.717721%2C49.400%5D%2C%5B8.712989%2C49.4055%5D%2C%5B8.702%2C49.4390%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22UhdY%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7263%2C49.425%5D%2C%5B8.704561%2C49.403%5D%2C%5B8.73996%2C49.434%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "format=csv&" + 
                    "groupByKey=highway&" + 
                    "keys=highway&" + 
                    "time=2015-02-02&" + 
                    "timeout=33&" + 
                    "values=street_lamp")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.711504164725374 49.41002652486122, 8.704761140013185 49.403202542908595 ) and LINESTRING ( 8.711694000327713 49.40944781044878, 8.704561 49.403252 ) [ (8.706318396143896, 49.40477849556859, NaN) ]"))
                .body("'path'", containsString("/elements/perimeter/groupBy/tag"));
    }
    
    
    @Test
    public void test_39_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/groupBy/tag?" + 
                    "bpolys=8.704561%2C49.403252%2C8.74587%2C49.439%2C8.748%2C49.429393%2C8.749%2C49.43060%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.7429%2C49.4320%2C8.7083%2C49.427%2C8.70189%2C49.417%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.749%2C49.4237%2C8.7041%2C49.422%2C8.707%2C49.435%2C8.704561%2C49.403252&" + 
                    "groupByKey=building&" + 
                    "keys=highway&" + 
                    "time=2009-11-26&" + 
                    "timeout=38&" + 
                    "values=crossing")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.74587 49.439 ) and LINESTRING ( 8.70189 49.417, 8.704561 49.403252 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/perimeter/groupBy/tag"));
    }
    
    
    @Test
    public void test_40_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/key?" + 
                    "bpolys=C%3A8.704561%2C49.403252%2C8.700%2C49.413%2C8.749241%2C49.42003%2C8.70410%2C49.43332%2C8.704561%2C49.403252%7Cd%3A8.704561%2C49.403252%2C8.734%2C49.410%2C8.7403%2C49.4006%2C8.72019%2C49.4226%2C8.704561%2C49.403252%7CnYpwb%3A8.704561%2C49.403252%2C8.713%2C49.413069%2C8.707%2C49.421%2C8.7347%2C49.42091%2C8.704561%2C49.403252&" + 
                    "filter=type%3D*+and+area%3A%281.0+..+1E6%29&" + 
                    "format=json&" + 
                    "groupByKeys=addr%3Acity%2Clanes%3Abackward&" + 
                    "showMetadata=false&" + 
                    "time=2014-09-18&" + 
                    "timeout=52")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.7 49.413 ) and LINESTRING ( 8.704561 49.403252, 8.713 49.413069 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/perimeter/groupBy/key"));
    }
    
    
    @Test
    public void test_41_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/key?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22bSw%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.701%2C49.412969%5D%2C%5B8.744%2C49.409%5D%2C%5B8.707%2C49.4189%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22Fd%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7323%2C49.4054%5D%2C%5B8.7151%2C49.415%5D%2C%5B8.7337%2C49.425%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22J%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.714263%2C49.404805%5D%2C%5B8.7209%2C49.41950%5D%2C%5B8.722%2C49.428751%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=destination%3D*+and+not+length%3A%28+..+100%29&" + 
                    "format=geojson&" + 
                    "groupByKeys=smoothness%2Chighway%2Caddr%3Acountry")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.718109042902121 49.41332053419416, 8.7151 49.415 ) and LINESTRING ( 8.718138405916893 49.41338554692613, 8.704561 49.403252 ) [ (8.718076005139189, 49.4133389738758, NaN) ]"))
                .body("'path'", containsString("/elements/perimeter/groupBy/key"));
    }
    
    
    @Test
    public void test_42_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/groupBy/key?" + 
                    "bpolys=YCkwM%3A8.704561%2C49.403252%2C8.731%2C49.4333%2C8.7081%2C49.401%2C8.7179%2C49.43927%2C8.704561%2C49.403252&" + 
                    "groupByKeys=name%2Ctracktype&" + 
                    "keys=highway&" + 
                    "showMetadata=yes&" + 
                    "time=2016-12-25&" + 
                    "values=track")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.731 49.4333 ) and LINESTRING ( 8.7081 49.401, 8.7179 49.43927 ) [ (8.710366158228757, 49.409849579123936, NaN) ]"))
                .body("'path'", containsString("/elements/perimeter/groupBy/key"));
    }
    
    
    @Test
    public void test_43_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=Vs%3A8.74407%2C49.4274%2C655%7CpOBaY%3A8.713%2C49.40028%2C2%7Cd%3A8.729%2C49.424%2C8%7CZsfrB%3A8.705%2C49.425%2C539883082816&" + 
                    "groupByKey=building&" + 
                    "groupByValues=yes%2Coffice%2Cuniversity&" + 
                    "showMetadata=yes")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El Ã¡ngulo 77.756.423.111.105.410.000.000.000.000.000.000.000.000 es demasiado grande."))
                .body("'path'", containsString("/elements/perimeter/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_44_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22fzKaB%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.70119%2C49.410%5D%2C%5B8.70317%2C49.410823%5D%2C%5B8.700%2C49.4064%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22oABv%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.737%2C49.42715%5D%2C%5B8.70450%2C49.426%5D%2C%5B8.70481%2C49.41646%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22i%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.704%2C49.4001%5D%2C%5B8.705108%2C49.431483%5D%2C%5B8.719370%2C49.414976%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=foot%3D*+or+geometry%3Aline+or+length%3A%28+..+100%29&" + 
                    "groupByKey=building&" + 
                    "showMetadata=yes")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704140969086858 49.40409280943396, 8.70119 49.41 ) and LINESTRING ( 8.70317 49.410823, 8.7 49.4064 ) [ (8.70176097541746, 49.408857032893195, NaN) ]"))
                .body("'path'", containsString("/elements/perimeter/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_45_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=8.741%2C49.433%2C1%7C8.731%2C49.40564%2C5105307033%7C8.7042%2C49.422%2C7&" + 
                    "format=json&" + 
                    "groupByKey=building&" + 
                    "groupByValues=stop_line%2Ctraffic_mirror&" + 
                    "keys=highway&" + 
                    "timeout=55&" + 
                    "values=footway")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El Ã¡ngulo 4.956.086.386.969.681.000.000.000 es demasiado grande."))
                .body("'path'", containsString("/elements/perimeter/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_46_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=j%3A8.704561%2C49.403252%2C8.722%2C49.4307%2C8.706%2C49.4021%2C8.706%2C49.426%2C8.704561%2C49.403252&" + 
                    "groupByKey=building&" + 
                    "groupByValues=traffic_signals%2Csynagogue&" + 
                    "keys=highway&" + 
                    "showMetadata=yes")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.722 49.4307 ) and LINESTRING ( 8.706 49.4021, 8.706 49.426 ) [ (8.706, 49.40551690463903, NaN) ]"))
                .body("'path'", containsString("/elements/perimeter/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_47_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/boundary?" + 
                    "bcircles=dy%3A8.741%2C49.431%2C9%7CD%3A8.736%2C49.427%2C2%7Cn%3A8.702%2C49.418822%2C77%7CvX%3A8.718%2C49.438%2C440539708&" + 
                    "filter=maxspeed%21%3D*+and+area%3A%281.0+..+1E6%29&" + 
                    "format=csv&" + 
                    "showMetadata=true&" + 
                    "time=2011-07-05&" + 
                    "timeout=66")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El Ã¡ngulo 15.307.031.645.721.878 es demasiado grande."))
                .body("'path'", containsString("/elements/perimeter/groupBy/boundary"));
    }
    
    
    @Test
    public void test_48_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/boundary?" + 
                    "bpolys=YeayS%3A8.704561%2C49.403252%2C8.715%2C49.436%2C8.7260%2C49.407%2C8.703%2C49.4105%2C8.704561%2C49.403252&" + 
                    "keys=highway&" + 
                    "showMetadata=no&" + 
                    "time=2016-12-26&" + 
                    "timeout=92&" + 
                    "values=stop")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.715 49.436 ) and LINESTRING ( 8.726 49.407, 8.703 49.4105 ) [ (8.706692319818977, 49.409938125244935, NaN) ]"))
                .body("'path'", containsString("/elements/perimeter/groupBy/boundary"));
    }
    
    
    @Test
    public void test_49_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/boundary?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22reLtb%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.726%2C49.4076%5D%2C%5B8.7048%2C49.406%5D%2C%5B8.745%2C49.417%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22SYhWe%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.712%2C49.411%5D%2C%5B8.70434%2C49.4081%5D%2C%5B8.7380%2C49.4291%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=bicycle%21%3D*+and+type%3Anode+or+length%3A%28+..+100%29&" + 
                    "showMetadata=no")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.726 49.4076, 8.708474823813203 49.40627734519345 ) and LINESTRING ( 8.745 49.417, 8.704561 49.403252 ) [ (8.714882329842933, 49.406760930554185, NaN) ]"))
                .body("'path'", containsString("/elements/perimeter/groupBy/boundary"));
    }
    
    
    @Test
    public void test_50_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/groupBy/boundary?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22RM%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.711%2C49.405%5D%2C%5B8.725%2C49.4168%5D%2C%5B8.735%2C49.4363%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22XEEbc%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.730%2C49.4137%5D%2C%5B8.74585%2C49.415%5D%2C%5B8.7276%2C49.42247%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22L%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.72972%2C49.429%5D%2C%5B8.701%2C49.41717%5D%2C%5B8.709%2C49.434%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "keys=highway&" + 
                    "showMetadata=yes&" + 
                    "time=2015-09-03&" + 
                    "values=crossing")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.727393748278631 49.428041798124525, 8.701 49.41717 ) and LINESTRING ( 8.709 49.434, 8.704561 49.403252 ) [ (8.706922488039316, 49.41960952066522, NaN) ]"))
                .body("'path'", containsString("/elements/perimeter/groupBy/boundary"));
    }
    
    
    @Test
    public void test_51_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/density/groupBy/type?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22pQ%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.713%2C49.4105%5D%2C%5B8.733%2C49.418%5D%2C%5B8.7125%2C49.4289%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22p%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7392%2C49.4245%5D%2C%5B8.74375%2C49.40666%5D%2C%5B8.7044%2C49.425%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22tXZQJ%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7431%2C49.415%5D%2C%5B8.714257%2C49.427816%5D%2C%5B8.7176%2C49.4043%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=foot%3D*+and+geometry%3Aline&" + 
                    "time=2014-07-26&" + 
                    "timeout=30")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.7431 49.415 ) and LINESTRING ( 8.716530412753523 49.41182390478257, 8.7176 49.4043 ) [ (8.717201221157138, 49.40710516998765, NaN) ]"))
                .body("'path'", containsString("/elements/perimeter/density/groupBy/type"));
    }
    
    
    @Test
    public void test_52_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/density/groupBy/type?" + 
                    "bpolys=8.704561%2C49.403252%2C8.710%2C49.401178%2C8.740%2C49.4370%2C8.71309%2C49.421734%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.7082%2C49.439400%2C8.707070%2C49.418%2C8.7167%2C49.4037%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.74841%2C49.409874%2C8.739%2C49.403%2C8.70611%2C49.43140%2C8.704561%2C49.403252&" + 
                    "showMetadata=false&" + 
                    "timeout=47")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.71 49.401178 ) and LINESTRING ( 8.704561 49.403252, 8.7082 49.4394 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/perimeter/density/groupBy/type"));
    }
    
    
    @Test
    public void test_53_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/density/groupBy/type?" + 
                    "bpolys=OCLD%3A8.704561%2C49.403252%2C8.728%2C49.427%2C8.7085%2C49.4109%2C8.741%2C49.424%2C8.704561%2C49.403252%7CX%3A8.704561%2C49.403252%2C8.735%2C49.426%2C8.70411%2C49.4248%2C8.736%2C49.431%2C8.704561%2C49.403252&" + 
                    "keys=highway&" + 
                    "showMetadata=yes&" + 
                    "time=2014-11-01&" + 
                    "values=footway")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.728 49.427 ) and LINESTRING ( 8.735 49.426, 8.70411 49.4248 ) [ (8.726694564150726, 49.42567735438591, NaN) ]"))
                .body("'path'", containsString("/elements/perimeter/density/groupBy/type"));
    }
    
    
    @Test
    public void test_54_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/density/groupBy/tag?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22m%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7432%2C49.41903%5D%2C%5B8.7269%2C49.4032%5D%2C%5B8.7204%2C49.4353%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22P%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.70263%2C49.416%5D%2C%5B8.721%2C49.415%5D%2C%5B8.707%2C49.436%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "format=json&" + 
                    "groupByKey=highway&" + 
                    "keys=highway&" + 
                    "time=2007-11-19&" + 
                    "timeout=80&" + 
                    "values=speed_camera")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.7432 49.41903 ) and LINESTRING ( 8.7269 49.4032, 8.7204 49.4353 ) [ (8.7251842101675, 49.41167336209588, NaN) ]"))
                .body("'path'", containsString("/elements/perimeter/density/groupBy/tag"));
    }
    
    
    @Test
    public void test_55_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/density/groupBy/tag?" + 
                    "bpolys=djn%3A8.704561%2C49.403252%2C8.72747%2C49.42478%2C8.718%2C49.4290%2C8.746106%2C49.40402%2C8.704561%2C49.403252&" + 
                    "format=geojson&" + 
                    "groupByKey=building&" + 
                    "keys=highway&" + 
                    "showMetadata=no&" + 
                    "timeout=81")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.72747 49.42478 ) and LINESTRING ( 8.718 49.429, 8.746106 49.40402 ) [ (8.725174819130954, 49.42262317719024, NaN) ]"))
                .body("'path'", containsString("/elements/perimeter/density/groupBy/tag"));
    }
    
    
    @Test
    public void test_56_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/density/groupBy/tag?" + 
                    "bpolys=d%3A8.704561%2C49.403252%2C8.701%2C49.408%2C8.73081%2C49.414%2C8.704%2C49.432500%2C8.704561%2C49.403252&" + 
                    "filter=highway%3D*+or+length%3A%28+..+100%29&" + 
                    "format=csv&" + 
                    "groupByKey=highway&" + 
                    "showMetadata=yes&" + 
                    "values=service")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.701 49.408, 8.73081 49.414 ) and LINESTRING ( 8.704 49.4325, 8.704561 49.403252 ) [ (8.704456585040132, 49.40869572325531, NaN) ]"))
                .body("'path'", containsString("/elements/perimeter/density/groupBy/tag"));
    }
    
    
    @Test
    public void test_57_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/density/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=C%3A8.704561%2C49.403252%2C8.7399%2C49.438%2C8.722%2C49.43605%2C8.749%2C49.427%2C8.704561%2C49.403252&" + 
                    "groupByKey=building&" + 
                    "keys=highway&" + 
                    "timeout=30")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.7399 49.438 ) and LINESTRING ( 8.722 49.43605, 8.749 49.427 ) [ (8.733870385101849, 49.43207122277142, NaN) ]"))
                .body("'path'", containsString("/elements/perimeter/density/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_58_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/density/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=w%3A8.704561%2C49.403252%2C8.742%2C49.408482%2C8.746%2C49.431%2C8.741%2C49.4291%2C8.704561%2C49.403252%7Cd%3A8.704561%2C49.403252%2C8.7122%2C49.41107%2C8.730%2C49.42030%2C8.716258%2C49.425%2C8.704561%2C49.403252&" + 
                    "groupByKey=building&" + 
                    "keys=highway&" + 
                    "showMetadata=yes&" + 
                    "time=2010-04-16&" + 
                    "timeout=87")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.742 49.408482 ) and LINESTRING ( 8.704561 49.403252, 8.7122 49.41107 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/perimeter/density/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_59_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/density/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22IWJBX%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7377%2C49.40981%5D%2C%5B8.7033%2C49.4373%5D%2C%5B8.70914%2C49.425%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22kHb%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.747%2C49.410992%5D%2C%5B8.7095%2C49.436%5D%2C%5B8.7092%2C49.4206%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22q%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7034%2C49.437%5D%2C%5B8.722%2C49.4228%5D%2C%5B8.702646%2C49.4115%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=highway%21%3D*+and+type%3Anode+and+id%3A%281+..+9999%29&" + 
                    "format=json&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=hospital%2Celevator&" + 
                    "showMetadata=false&" + 
                    "time=2017-10-31")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.7034 49.437 ) and LINESTRING ( 8.706809410044245 49.41393084290069, 8.702646 49.4115 ) [ (8.704245131937492, 49.412433666988406, NaN) ]"))
                .body("'path'", containsString("/elements/perimeter/density/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_60_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/density/groupBy/boundary?" + 
                    "bpolys=FdmFk%3A8.704561%2C49.403252%2C8.73500%2C49.436%2C8.728%2C49.40955%2C8.745177%2C49.40668%2C8.704561%2C49.403252%7CDa%3A8.704561%2C49.403252%2C8.707%2C49.412%2C8.704904%2C49.430%2C8.705%2C49.4338%2C8.704561%2C49.403252%7CyIq%3A8.704561%2C49.403252%2C8.73263%2C49.41077%2C8.706%2C49.41133%2C8.70829%2C49.424%2C8.704561%2C49.403252&" + 
                    "format=csv&" + 
                    "time=2014-02-09&" + 
                    "timeout=53")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.735 49.436 ) and LINESTRING ( 8.704561 49.403252, 8.707 49.412 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/perimeter/density/groupBy/boundary"));
    }
    
    
    @Test
    public void test_61_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/density/groupBy/boundary?" + 
                    "bpolys=g%3A8.704561%2C49.403252%2C8.744%2C49.4152%2C8.704560%2C49.43888%2C8.70456%2C49.426%2C8.704561%2C49.403252%7CzR%3A8.704561%2C49.403252%2C8.740%2C49.4235%2C8.7386%2C49.4253%2C8.704837%2C49.423569%2C8.704561%2C49.403252%7CSsT%3A8.704561%2C49.403252%2C8.705812%2C49.424%2C8.737%2C49.408%2C8.729%2C49.427124%2C8.704561%2C49.403252&" + 
                    "filter=destination%3D*+or+type%3Away+or+not+area%3A%281.0+..+1E6%29&" + 
                    "showMetadata=no&" + 
                    "time=2015-04-01&" + 
                    "timeout=70")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.744 49.4152 ) and LINESTRING ( 8.704561 49.403252, 8.705812 49.424 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/perimeter/density/groupBy/boundary"));
    }
    
    
    @Test
    public void test_62_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/density?" + 
                    "bcircles=8.722%2C49.424%2C145%7C8.713%2C49.4125%2C95%7C8.738%2C49.4359%2C964256686&" + 
                    "format=json&" + 
                    "timeout=75")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El Ã¡ngulo 8.064.066.471.669.594.100 es demasiado grande."))
                .body("'path'", containsString("/elements/perimeter/density"));
    }
    
    
    @Test
    public void test_63_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/density?" + 
                    "bpolys=8.704561%2C49.403252%2C8.734%2C49.411%2C8.72589%2C49.40335%2C8.7040%2C49.418950%2C8.704561%2C49.403252&" + 
                    "filter=addr%3Ahousenumber%3D*+or+area%3A%281.0+..+1E6%29&" + 
                    "format=json&" + 
                    "showMetadata=no&" + 
                    "time=2010-05-24&" + 
                    "timeout=26")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.734 49.411 ) and LINESTRING ( 8.72589 49.40335, 8.704 49.41895 ) [ (8.720237916625774, 49.407377980842305, NaN) ]"))
                .body("'path'", containsString("/elements/perimeter/density"));
    }
    
    
    @Test
    public void test_64_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/density?" + 
                    "bpolys=F%3A8.704561%2C49.403252%2C8.7197%2C49.404276%2C8.7245%2C49.400%2C8.704572%2C49.408%2C8.704561%2C49.403252&" + 
                    "keys=highway&" + 
                    "showMetadata=false&" + 
                    "time=2016-05-28&" + 
                    "timeout=22")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.7197 49.404276 ) and LINESTRING ( 8.7245 49.4, 8.704572 49.408 ) [ (8.714692245200727, 49.403937276113716, NaN) ]"))
                .body("'path'", containsString("/elements/perimeter/density"));
    }
    
    
    @Test
    public void test_65_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/density?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22K%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.72079%2C49.401%5D%2C%5B8.7259%2C49.420%5D%2C%5B8.7418%2C49.4017%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22IoeaS%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.702%2C49.413%5D%2C%5B8.736%2C49.412%5D%2C%5B8.7011%2C49.418%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22l%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.721%2C49.4348%5D%2C%5B8.704%2C49.422%5D%2C%5B8.7472%2C49.438%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=highway%3D*+and+type%3Anode&" + 
                    "showMetadata=yes&" + 
                    "time=2017-10-04")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.702 49.413, 8.709525148681763 49.412778672097595 ) and LINESTRING ( 8.7011 49.418, 8.704561 49.403252 ) [ (8.702275279484148, 49.41299190354458, NaN) ]"))
                .body("'path'", containsString("/elements/perimeter/density"));
    }
    
    
    @Test
    public void test_66_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter?" + 
                    "bpolys=8.704561%2C49.403252%2C8.7476%2C49.42917%2C8.727%2C49.433%2C8.7022%2C49.436%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.712%2C49.4084%2C8.7045%2C49.4243%2C8.737%2C49.4208%2C8.704561%2C49.403252&" + 
                    "filter=destination%21%3D*+or+area%3A%281.0+..+1E6%29&" + 
                    "timeout=52")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.7476 49.42917 ) and LINESTRING ( 8.704561 49.403252, 8.712 49.4084 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/perimeter"));
    }
    
    
    @Test
    public void test_67_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter?" + 
                    "bpolys=8.704561%2C49.403252%2C8.746%2C49.423%2C8.702%2C49.42604%2C8.7177%2C49.432%2C8.704561%2C49.403252&" + 
                    "filter=surface%3D*&" + 
                    "format=csv&" + 
                    "time=2015-01-30")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.746 49.423, 8.702 49.42604 ) and LINESTRING ( 8.7177 49.432, 8.704561 49.403252 ) [ (8.714578832571195, 49.425170917022356, NaN) ]"))
                .body("'path'", containsString("/elements/perimeter"));
    }
    
    
    @Test
    public void test_68_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/ratio/groupBy/boundary?" + 
                    "bcircles=8.7348%2C49.4231%2C153%7C8.72197%2C49.4004%2C5%7C8.714%2C49.404%2C2%7C8.717%2C49.403%2C1563440633&" + 
                    "filter=natural%3Dwood+and+id%3A%281+..+9999%29&" + 
                    "keys2=highway&" + 
                    "timeout=95&" + 
                    "types2=node%2C&" + 
                    "values2=stop")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El Ã¡ngulo 383.172.839.076.136.940.000 es demasiado grande."))
                .body("'path'", containsString("/elements/length/ratio/groupBy/boundary"));
    }
    
    
    @Test
    public void test_69_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/ratio/groupBy/boundary?" + 
                    "bpolys=8.704561%2C49.403252%2C8.738564%2C49.424%2C8.732%2C49.4208%2C8.727%2C49.415%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.722%2C49.413%2C8.700%2C49.427%2C8.734%2C49.41824%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.723%2C49.4203%2C8.72442%2C49.421%2C8.7047%2C49.427%2C8.704561%2C49.403252&" + 
                    "filter2=addr%3Ahousenumber%21%3D*&" + 
                    "keys=highway&" + 
                    "time=2016-11-30&" + 
                    "timeout=98&" + 
                    "types2=node%2Cway%2Crelation")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.738564 49.424 ) and LINESTRING ( 8.704561 49.403252, 8.722 49.413 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/length/ratio/groupBy/boundary"));
    }
    
    
    @Test
    public void test_70_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/ratio/groupBy/boundary?" + 
                    "bpolys=8.704561%2C49.403252%2C8.703980%2C49.40847%2C8.742%2C49.4284%2C8.7318%2C49.421%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.744%2C49.438%2C8.700%2C49.41631%2C8.7051%2C49.43084%2C8.704561%2C49.403252&" + 
                    "filter=lit%21%3D*+and+not+area%3A%281.0+..+1E6%29&" + 
                    "filter2=service%3Ddriveway+or+id%3A%281+..+9999%29&" + 
                    "keys2=highway&" + 
                    "time=2010-05-28&" + 
                    "timeout=75&" + 
                    "types2=point%2Cother")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.70398 49.40847 ) and LINESTRING ( 8.7318 49.421, 8.704561 49.403252 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/length/ratio/groupBy/boundary"));
    }
    
    
    @Test
    public void test_71_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/ratio?" + 
                    "bcircles=x%3A8.729%2C49.415%2C9%7CxjB%3A8.735%2C49.42698%2C8%7CnVF%3A8.744%2C49.40494%2C8%7CMR%3A8.702%2C49.42199%2C861593368&" + 
                    "filter=highway+in+%28secondary%2Cpath%2Cunclassified%2Ctrack%2Cprimary%2Cresidential%2Ccycleway%2Cservice%2Cfootway%29+and+type%3Anode+or+area%3A%281.0+..+1E6%29&" + 
                    "keys2=highway&" + 
                    "time=2012-09-18")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El Ã¡ngulo 3.269.188.993.457.745.400 es demasiado grande."))
                .body("'path'", containsString("/elements/length/ratio"));
    }
    
    
    @Test
    public void test_72_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/ratio?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22JtJKT%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7377%2C49.416%5D%2C%5B8.713%2C49.415%5D%2C%5B8.74551%2C49.41232%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=addr%3Astreet%21%3D*&" + 
                    "showMetadata=true&" + 
                    "time=2013-07-06&" + 
                    "timeout=83&" + 
                    "types2=node%2Crelation")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.7377 49.416 ) and LINESTRING ( 8.713 49.415, 8.74551 49.41232 ) [ (8.73120021235172, 49.41349964413711, NaN) ]"))
                .body("'path'", containsString("/elements/length/ratio"));
    }
    
    
    @Test
    public void test_73_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/type?" + 
                    "bcircles=nDQg%3A8.740%2C49.41386%2C9%7Cw%3A8.732%2C49.421%2C2%7CltNwO%3A8.70711%2C49.421%2C6%7Cu%3A8.707%2C49.414%2C228075298&" + 
                    "format=json&" + 
                    "keys=highway&" + 
                    "showMetadata=false&" + 
                    "time=2015-03-15&" + 
                    "values=stop_line")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El Ã¡ngulo 78.629.649.299.761,14 es demasiado grande."))
                .body("'path'", containsString("/elements/length/groupBy/type"));
    }
    
    
    @Test
    public void test_74_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/type?" + 
                    "bpolys=8.704561%2C49.403252%2C8.7394%2C49.41756%2C8.700%2C49.405%2C8.7067%2C49.4291%2C8.704561%2C49.403252&" + 
                    "filter=highway%3D*+and+not+area%3A%281.0+..+1E6%29&" + 
                    "timeout=71")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.7394 49.41756, 8.7 49.405 ) and LINESTRING ( 8.7067 49.4291, 8.704561 49.403252 ) [ (8.704833151536304, 49.40654072038822, NaN) ]"))
                .body("'path'", containsString("/elements/length/groupBy/type"));
    }
    
    
    @Test
    public void test_75_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/groupBy/type?" + 
                    "bcircles=z%3A8.702%2C49.4242%2C6%7Cf%3A8.708841%2C49.4346%2C72%7CY%3A8.738671%2C49.420%2C148714025&" + 
                    "format=csv&" + 
                    "keys=highway&" + 
                    "showMetadata=no&" + 
                    "time=2016-05-09&" + 
                    "values=residential")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El Ã¡ngulo 2.568.556.675.326,077 es demasiado grande."))
                .body("'path'", containsString("/elements/length/groupBy/type"));
    }
    
    
    @Test
    public void test_76_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/groupBy/type?" + 
                    "bpolys=8.704561%2C49.403252%2C8.703%2C49.4017%2C8.707%2C49.425%2C8.722%2C49.402%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.732%2C49.418%2C8.707391%2C49.432%2C8.7020%2C49.4204%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.72481%2C49.401%2C8.73453%2C49.426%2C8.704577%2C49.408%2C8.704561%2C49.403252&" + 
                    "format=geojson&" + 
                    "keys=highway&" + 
                    "showMetadata=yes&" + 
                    "time=2009-05-02&" + 
                    "timeout=25")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.703 49.4017 ) and LINESTRING ( 8.722 49.402, 8.704561 49.403252 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/length/groupBy/type"));
    }
    
    
    @Test
    public void test_77_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/tag?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22y%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7368%2C49.4365%5D%2C%5B8.732%2C49.428%5D%2C%5B8.7043%2C49.4030%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22V%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.71220%2C49.421%5D%2C%5B8.700%2C49.403%5D%2C%5B8.702%2C49.406%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=network%21%3D*+and+id%3A%281+..+9999%29&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=hut%2Csecondary&" + 
                    "time=2012-05-25&" + 
                    "timeout=82")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.7122 49.421, 8.7 49.403 ) and LINESTRING ( 8.702 49.406, 8.704561 49.403252 ) [ (8.702019298298493, 49.40597929257155, NaN) ]"))
                .body("'path'", containsString("/elements/length/groupBy/tag"));
    }
    
    
    @Test
    public void test_78_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/tag?" + 
                    "bpolys=jESG%3A8.704561%2C49.403252%2C8.7040%2C49.418%2C8.704796%2C49.414%2C8.7084%2C49.417%2C8.704561%2C49.403252%7CcmZOB%3A8.704561%2C49.403252%2C8.73038%2C49.414557%2C8.723%2C49.413%2C8.7037%2C49.4056%2C8.704561%2C49.403252%7CqEyGM%3A8.704561%2C49.403252%2C8.7125%2C49.426%2C8.727%2C49.426385%2C8.7041%2C49.4355%2C8.704561%2C49.403252&" + 
                    "format=geojson&" + 
                    "groupByKey=highway&" + 
                    "keys=highway&" + 
                    "time=2011-10-27&" + 
                    "timeout=32")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.704 49.418 ) and LINESTRING ( 8.7037 49.4056, 8.704561 49.403252 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/length/groupBy/tag"));
    }
    
    
    @Test
    public void test_79_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/groupBy/tag?" + 
                    "bpolys=8.704561%2C49.403252%2C8.7050%2C49.430835%2C8.7309%2C49.4300%2C8.732%2C49.4248%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.705725%2C49.437%2C8.7044%2C49.40968%2C8.7072%2C49.417%2C8.704561%2C49.403252&" + 
                    "filter=type%21%3D*&" + 
                    "format=json&" + 
                    "groupByKey=highway&" + 
                    "showMetadata=no&" + 
                    "time=2010-09-18&" + 
                    "timeout=72")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.705 49.430835 ) and LINESTRING ( 8.7044 49.40968, 8.7072 49.417 ) [ (8.704674736702454, 49.41039824023642, NaN) ]"))
                .body("'path'", containsString("/elements/length/groupBy/tag"));
    }
    
    
    @Test
    public void test_80_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/groupBy/key?" + 
                    "bpolys=V%3A8.704561%2C49.403252%2C8.7457%2C49.404%2C8.74552%2C49.41572%2C8.737%2C49.4105%2C8.704561%2C49.403252%7CG%3A8.704561%2C49.403252%2C8.735%2C49.4136%2C8.7040%2C49.40521%2C8.71789%2C49.4093%2C8.704561%2C49.403252&" + 
                    "format=json&" + 
                    "groupByKeys=addr%3Apostcode%2Cnetwork&" + 
                    "keys=highway&" + 
                    "showMetadata=no&" + 
                    "time=2016-04-13&" + 
                    "timeout=79")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.7457 49.404 ) and LINESTRING ( 8.704561 49.403252, 8.735 49.4136 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/length/groupBy/key"));
    }
    
    
    @Test
    public void test_81_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=s%3A8.704561%2C49.403252%2C8.729%2C49.43978%2C8.714%2C49.417%2C8.748754%2C49.4313%2C8.704561%2C49.403252%7CRLsZS%3A8.704561%2C49.403252%2C8.7149%2C49.423%2C8.704%2C49.415%2C8.7366%2C49.410%2C8.704561%2C49.403252%7CuQN%3A8.704561%2C49.403252%2C8.734%2C49.412%2C8.7136%2C49.407%2C8.7129%2C49.403%2C8.704561%2C49.403252&" + 
                    "format=csv&" + 
                    "groupByKey=building&" + 
                    "groupByValues=secondary_link%2Cdemolished%2Cstation&" + 
                    "showMetadata=false&" + 
                    "timeout=42")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.729 49.43978 ) and LINESTRING ( 8.704561 49.403252, 8.7149 49.423 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/length/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_82_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22g%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7183%2C49.423%5D%2C%5B8.7000%2C49.401%5D%2C%5B8.747%2C49.401%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22X%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.740%2C49.4231%5D%2C%5B8.70451%2C49.428%5D%2C%5B8.70419%2C49.419%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22KQ%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7105%2C49.431%5D%2C%5B8.70574%2C49.410%5D%2C%5B8.7398%2C49.424715%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=highway%3D*+or+not+area%3A%281.0+..+1E6%29&" + 
                    "groupByKey=building")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.70970440011389 49.42728282444187 ) and LINESTRING ( 8.70574 49.41, 8.737015593732874 49.42351204820256 ) [ (8.706032329129975, 49.41012629545354, NaN) ]"))
                .body("'path'", containsString("/elements/length/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_83_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=ZySKo%3A8.704561%2C49.403252%2C8.717%2C49.424%2C8.727%2C49.412%2C8.747%2C49.432%2C8.704561%2C49.403252%7CW%3A8.704561%2C49.403252%2C8.736%2C49.418%2C8.70413%2C49.423%2C8.7246%2C49.4071%2C8.704561%2C49.403252%7CuIF%3A8.704561%2C49.403252%2C8.7116%2C49.4083%2C8.7495%2C49.40338%2C8.703%2C49.431%2C8.704561%2C49.403252&" + 
                    "filter=maxspeed%21%3D*+and+id%3A%281+..+9999%29&" + 
                    "groupByKey=highway&" + 
                    "time=2011-04-17&" + 
                    "timeout=30")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.717 49.424 ) and LINESTRING ( 8.7246 49.4071, 8.704561 49.403252 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/length/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_84_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/boundary?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22o%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7042%2C49.414%5D%2C%5B8.705%2C49.4001%5D%2C%5B8.740640%2C49.434%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22L%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.717%2C49.408%5D%2C%5B8.729%2C49.4221%5D%2C%5B8.7481%2C49.422985%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "showMetadata=no&" + 
                    "timeout=50")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.717 49.408, 8.729 49.4221 ) and LINESTRING ( 8.7481 49.422985, 8.711729488095052 49.406500944063474 ) [ (8.71823262416538, 49.40944833339432, NaN) ]"))
                .body("'path'", containsString("/elements/length/groupBy/boundary"));
    }
    
    
    @Test
    public void test_85_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/groupBy/boundary?" + 
                    "bcircles=gZcg%3A8.730%2C49.4217%2C7%7CDb%3A8.7058%2C49.4283%2C16532550663&" + 
                    "keys=highway&" + 
                    "timeout=56")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El Ã¡ngulo 60.156.721.955.924.870.000.000.000.000 es demasiado grande."))
                .body("'path'", containsString("/elements/length/groupBy/boundary"));
    }
    
    
    @Test
    public void test_86_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/groupBy/boundary?" + 
                    "bpolys=j%3A8.704561%2C49.403252%2C8.700%2C49.4236%2C8.703%2C49.412410%2C8.746054%2C49.418%2C8.704561%2C49.403252%7Ci%3A8.704561%2C49.403252%2C8.735%2C49.408%2C8.731548%2C49.4023%2C8.705416%2C49.4128%2C8.704561%2C49.403252%7CoZ%3A8.704561%2C49.403252%2C8.714%2C49.423%2C8.7244%2C49.417%2C8.704%2C49.427332%2C8.704561%2C49.403252&" + 
                    "filter=addr%3Apostcode%3D*&" + 
                    "timeout=58")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.7 49.4236 ) and LINESTRING ( 8.705416 49.4128, 8.704561 49.403252 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/length/groupBy/boundary"));
    }
    
    
    @Test
    public void test_87_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density/groupBy/type?" + 
                    "bpolys=8.704561%2C49.403252%2C8.717%2C49.42303%2C8.704%2C49.40760%2C8.729%2C49.4374%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.711%2C49.420221%2C8.738%2C49.424%2C8.708%2C49.43989%2C8.704561%2C49.403252&" + 
                    "format=csv&" + 
                    "keys=highway&" + 
                    "time=2011-04-27&" + 
                    "timeout=23")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.717 49.42303 ) and LINESTRING ( 8.704561 49.403252, 8.711 49.420221 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/length/density/groupBy/type"));
    }
    
    
    @Test
    public void test_88_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density/groupBy/type?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22t%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.71934%2C49.402067%5D%2C%5B8.704329%2C49.4360%5D%2C%5B8.7043%2C49.403835%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22VKxIl%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.722%2C49.433%5D%2C%5B8.745%2C49.429%5D%2C%5B8.746%2C49.42982%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22Xj%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.702184%2C49.420%5D%2C%5B8.715%2C49.430%5D%2C%5B8.718158%2C49.411%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "format=csv&" + 
                    "keys=highway&" + 
                    "showMetadata=no&" + 
                    "time=2009-05-26&" + 
                    "values=steps")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.722 49.433, 8.745 49.429 ) and LINESTRING ( 8.746 49.42982, 8.715666146920688 49.410371900175896 ) [ (8.74478054692207, 49.42903816575269, NaN) ]"))
                .body("'path'", containsString("/elements/length/density/groupBy/type"));
    }
    
    
    @Test
    public void test_89_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/density/groupBy/type?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22zuT%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.705%2C49.400874%5D%2C%5B8.702%2C49.418921%5D%2C%5B8.7384%2C49.411%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22kL%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7361%2C49.4263%5D%2C%5B8.723%2C49.43589%5D%2C%5B8.704502%2C49.4294%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22EZf%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.71391%2C49.429%5D%2C%5B8.722%2C49.41638%5D%2C%5B8.718%2C49.4249%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=source%3Amaxspeed%21%3D*&" + 
                    "time=2009-05-21")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.71391 49.429, 8.722 49.41638 ) and LINESTRING ( 8.718 49.4249, 8.704561 49.403252 ) [ (8.717280872719572, 49.423741605226084, NaN) ]"))
                .body("'path'", containsString("/elements/length/density/groupBy/type"));
    }
    
    
    @Test
    public void test_90_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/density/groupBy/type?" + 
                    "bpolys=zzQa%3A8.704561%2C49.403252%2C8.7275%2C49.4303%2C8.728%2C49.425%2C8.709%2C49.43724%2C8.704561%2C49.403252&" + 
                    "filter=type%3D*+or+id%3A%281+..+9999%29&" + 
                    "format=geojson&" + 
                    "showMetadata=no&" + 
                    "time=2014-11-28")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.7275 49.4303 ) and LINESTRING ( 8.728 49.425, 8.709 49.43724 ) [ (8.724769899850674, 49.42708086451725, NaN) ]"))
                .body("'path'", containsString("/elements/length/density/groupBy/type"));
    }
    
    
    @Test
    public void test_91_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/density/groupBy/tag?" + 
                    "bpolys=Mg%3A8.704561%2C49.403252%2C8.715%2C49.421%2C8.72238%2C49.419%2C8.704610%2C49.42841%2C8.704561%2C49.403252%7Ct%3A8.704561%2C49.403252%2C8.7395%2C49.418%2C8.7051%2C49.407%2C8.7049%2C49.42726%2C8.704561%2C49.403252&" + 
                    "filter=destination%3D*+or+geometry%3Aline&" + 
                    "groupByKey=building&" + 
                    "groupByValues=apartments%2Ctraffic_mirror&" + 
                    "keys=highway&" + 
                    "showMetadata=false&" + 
                    "time=2009-07-18&" + 
                    "timeout=20")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.715 49.421 ) and LINESTRING ( 8.70461 49.42841, 8.704561 49.403252 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/length/density/groupBy/tag"));
    }
    
    
    @Test
    public void test_92_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=ezlb%3A8.746%2C49.420%2C3&" + 
                    "format=geojson&" + 
                    "groupByKey=highway&" + 
                    "keys=highway&" + 
                    "showMetadata=yes&" + 
                    "timeout=90")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/utils/GroupByBoundaryGeoJsonGenerator_75_generateGroupByResultGeoJson
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Index 0 out of bounds for length 0"))
                .body("'path'", containsString("/elements/length/density/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_93_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/density/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=8.704561%2C49.403252%2C8.721%2C49.4230%2C8.701%2C49.439%2C8.701649%2C49.4312%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.7428%2C49.416432%2C8.702%2C49.431768%2C8.706%2C49.406%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.7489%2C49.407%2C8.700%2C49.412%2C8.745%2C49.4283%2C8.704561%2C49.403252&" + 
                    "groupByKey=building&" + 
                    "groupByValues=service%2Cservice&" + 
                    "keys=highway&" + 
                    "time=2012-02-10&" + 
                    "timeout=66&" + 
                    "values=primary")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.721 49.423 ) and LINESTRING ( 8.706 49.406, 8.704561 49.403252 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/length/density/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_94_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density/groupBy/boundary?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22Vi%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.735%2C49.412547%5D%2C%5B8.731%2C49.4105%5D%2C%5B8.719%2C49.4145%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22zpcew%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.74307%2C49.41488%5D%2C%5B8.740104%2C49.402853%5D%2C%5B8.7097%2C49.433513%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22Ck%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.715%2C49.412386%5D%2C%5B8.7057%2C49.4032%5D%2C%5B8.737%2C49.422%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "format=json&" + 
                    "keys=highway&" + 
                    "showMetadata=false&" + 
                    "timeout=92&" + 
                    "values=tertiary")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.715 49.412386, 8.706277332971553 49.403770255986736 ) and LINESTRING ( 8.726903425799321 49.41616472230604, 8.704561 49.403252 ) [ (8.70743325621829, 49.40491200985174, NaN) ]"))
                .body("'path'", containsString("/elements/length/density/groupBy/boundary"));
    }
    
    
    @Test
    public void test_95_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density/groupBy/boundary?" + 
                    "bpolys=8.704561%2C49.403252%2C8.708%2C49.43664%2C8.702%2C49.407%2C8.702873%2C49.434%2C8.704561%2C49.403252&" + 
                    "showMetadata=true&" + 
                    "timeout=84")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.708 49.43664, 8.702 49.407 ) and LINESTRING ( 8.702873 49.434, 8.704561 49.403252 ) [ (8.703852777720924, 49.416152721941366, NaN) ]"))
                .body("'path'", containsString("/elements/length/density/groupBy/boundary"));
    }
    
    
    @Test
    public void test_96_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/density/groupBy/boundary?" + 
                    "bpolys=qE%3A8.704561%2C49.403252%2C8.740%2C49.42963%2C8.7487%2C49.4004%2C8.7183%2C49.416%2C8.704561%2C49.403252%7Cas%3A8.704561%2C49.403252%2C8.714%2C49.412%2C8.748%2C49.409987%2C8.731%2C49.432%2C8.704561%2C49.403252%7CdV%3A8.704561%2C49.403252%2C8.7239%2C49.4333%2C8.732%2C49.4273%2C8.708%2C49.4064%2C8.704561%2C49.403252&" + 
                    "filter=surface%21%3D*+and+type%3Arelation&" + 
                    "time=2015-11-11&" + 
                    "timeout=33")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.74 49.42963 ) and LINESTRING ( 8.704561 49.403252, 8.714 49.412 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/length/density/groupBy/boundary"));
    }
    
    
    @Test
    public void test_97_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/density/groupBy/boundary?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22udOwp%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.724%2C49.436%5D%2C%5B8.70495%2C49.4208%5D%2C%5B8.705%2C49.420%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22FwRsH%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.740005%2C49.437%5D%2C%5B8.704%2C49.437%5D%2C%5B8.708559%2C49.421%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22K%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.733%2C49.439%5D%2C%5B8.71192%2C49.43652%5D%2C%5B8.72860%2C49.4210%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "keys=highway&" + 
                    "values=tertiary")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.731408917981424 49.437 ) and LINESTRING ( 8.71192 49.43652, 8.725869353183885 49.42354074571859 ) [ (8.722899707415772, 49.42630386935895, NaN) ]"))
                .body("'path'", containsString("/elements/length/density/groupBy/boundary"));
    }
    
    
    @Test
    public void test_98_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density?" + 
                    "bpolys=ScOxl%3A8.704561%2C49.403252%2C8.7115%2C49.42116%2C8.704%2C49.405%2C8.725%2C49.425%2C8.704561%2C49.403252%7Chtsjn%3A8.704561%2C49.403252%2C8.7183%2C49.407403%2C8.7019%2C49.400%2C8.7044%2C49.420%2C8.704561%2C49.403252%7CuRBT%3A8.704561%2C49.403252%2C8.743%2C49.411%2C8.719%2C49.408%2C8.71498%2C49.4033%2C8.704561%2C49.403252&" + 
                    "format=csv&" + 
                    "keys=highway&" + 
                    "showMetadata=false&" + 
                    "time=2011-04-13&" + 
                    "timeout=59&" + 
                    "values=track")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.7115 49.42116 ) and LINESTRING ( 8.7044 49.42, 8.704561 49.403252 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/length/density"));
    }
    
    
    @Test
    public void test_99_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/density?" + 
                    "bpolys=KC%3A8.704561%2C49.403252%2C8.745%2C49.414%2C8.738236%2C49.4193%2C8.711116%2C49.427%2C8.704561%2C49.403252%7Cvc%3A8.704561%2C49.403252%2C8.70829%2C49.41551%2C8.7042%2C49.43308%2C8.71386%2C49.426049%2C8.704561%2C49.403252%7CCOkZT%3A8.704561%2C49.403252%2C8.7072%2C49.420%2C8.722%2C49.4305%2C8.724%2C49.401%2C8.704561%2C49.403252&" + 
                    "format=geojson&" + 
                    "timeout=91")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.745 49.414 ) and LINESTRING ( 8.704561 49.403252, 8.70829 49.41551 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/length/density"));
    }
    
    
    @Test
    public void test_100_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length?" + 
                    "bpolys=8.704561%2C49.403252%2C8.748%2C49.404%2C8.702%2C49.428%2C8.7076%2C49.409612%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.723%2C49.4188%2C8.70611%2C49.4384%2C8.7073%2C49.414%2C8.704561%2C49.403252&" + 
                    "keys=highway&" + 
                    "time=2014-07-05&" + 
                    "timeout=41&" + 
                    "values=tertiary")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.748 49.404 ) and LINESTRING ( 8.7076 49.409612, 8.704561 49.403252 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/length"));
    }
    
    
    @Test
    public void test_101_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22DK%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.701%2C49.433%5D%2C%5B8.706%2C49.415%5D%2C%5B8.704%2C49.4048%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22x%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7473%2C49.406%5D%2C%5B8.7038%2C49.417905%5D%2C%5B8.7357%2C49.4316%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "keys=highway&" + 
                    "time=2013-04-01")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.7473 49.406, 8.705307671308615 49.41749238328899 ) and LINESTRING ( 8.7357 49.4316, 8.704561 49.403252 ) [ (8.716760449206776, 49.4143580080964, NaN) ]"))
                .body("'path'", containsString("/elements/length"));
    }
    
    
    @Test
    public void test_102_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22EEqz%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7213%2C49.406%5D%2C%5B8.7407%2C49.4255%5D%2C%5B8.731%2C49.429%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22d%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.749%2C49.4213%5D%2C%5B8.70650%2C49.406%5D%2C%5B8.704571%2C49.4000%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22WIaz%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.718%2C49.427161%5D%2C%5B8.7117%2C49.43302%5D%2C%5B8.70919%2C49.425%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "format=csv&" + 
                    "timeout=99")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.728061331589828 49.412796183814514 ) and LINESTRING ( 8.706097634146943 49.40474847324088, 8.705675332297565 49.40343493716194 ) [ (8.705775035480638, 49.40374505592733, NaN) ]"))
                .body("'path'", containsString("/elements/length"));
    }
    
    
    @Test
    public void test_103_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length?" + 
                    "bpolys=O%3A8.704561%2C49.403252%2C8.7245%2C49.433%2C8.705%2C49.4275%2C8.718%2C49.41563%2C8.704561%2C49.403252&" + 
                    "format=geojson&" + 
                    "keys=highway&" + 
                    "showMetadata=yes&" + 
                    "time=2014-05-19&" + 
                    "timeout=85")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.7245 49.433 ) and LINESTRING ( 8.705 49.4275, 8.718 49.41563 ) [ (8.714809881595592, 49.41854282349695, NaN) ]"))
                .body("'path'", containsString("/elements/length"));
    }
    
    
    @Test
    public void test_104_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/ratio/groupBy/boundary?" + 
                    "bcircles=W%3A8.721%2C49.409%2C5600537596%7CZpCG%3A8.721%2C49.43773%2C2%7CGuSF%3A8.745%2C49.405%2C5&" + 
                    "keys=highway&" + 
                    "keys2=highway&" + 
                    "showMetadata=yes&" + 
                    "time=2010-08-15&" + 
                    "timeout=35&" + 
                    "types2=point%2C&" + 
                    "values2=primary")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El Ã¡ngulo 10.400.147.938.405.778.000.000.000 es demasiado grande."))
                .body("'path'", containsString("/elements/count/ratio/groupBy/boundary"));
    }
    
    
    @Test
    public void test_105_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/ratio/groupBy/boundary?" + 
                    "bpolys=8.704561%2C49.403252%2C8.7233%2C49.410581%2C8.7043%2C49.42451%2C8.709%2C49.4331%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.731%2C49.427%2C8.701%2C49.42308%2C8.7048%2C49.417%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.733%2C49.4127%2C8.7044%2C49.43348%2C8.700%2C49.4260%2C8.704561%2C49.403252&" + 
                    "filter=highway+in+%28secondary%2Cpath%2Cunclassified%2Ctrack%2Cprimary%2Cresidential%2Ccycleway%2Cservice%2Cfootway%29+and+length%3A%28+..+100%29&" + 
                    "filter2=network%3D*+or+geometry%3Aline&" + 
                    "format=csv&" + 
                    "keys2=highway&" + 
                    "time=2008-04-22&" + 
                    "timeout=95&" + 
                    "types2=polygon%2Cother")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.7233 49.410581 ) and LINESTRING ( 8.7048 49.417, 8.704561 49.403252 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/count/ratio/groupBy/boundary"));
    }
    
    
    @Test
    public void test_106_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/ratio/groupBy/boundary?" + 
                    "bcircles=8.743%2C49.409%2C55%7C8.735577%2C49.439%2C5889750764%7C8.701290%2C49.4180%2C1%7C8.7244%2C49.421%2C23975930114&" + 
                    "filter2=addr%3Ahousenumber%21%3D*&" + 
                    "keys=highway&" + 
                    "keys2=highway&" + 
                    "time=2014-04-07&" + 
                    "timeout=95&" + 
                    "values=pedestrian&" + 
                    "values2=street_lamp")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El Ã¡ngulo 15.634.300.077.839.179.000.000.000 es demasiado grande."))
                .body("'path'", containsString("/elements/count/ratio/groupBy/boundary"));
    }
    
    
    @Test
    public void test_107_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/ratio/groupBy/boundary?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22iuLo%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.704%2C49.405%5D%2C%5B8.729%2C49.421%5D%2C%5B8.706859%2C49.4363%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "keys=highway&" + 
                    "keys2=highway&" + 
                    "time=2014-06-26&" + 
                    "timeout=96&" + 
                    "values=elevator")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704 49.405, 8.729 49.421 ) and LINESTRING ( 8.706859 49.4363, 8.704561 49.403252 ) [ (8.704714337397014, 49.40545717593409, NaN) ]"))
                .body("'path'", containsString("/elements/count/ratio/groupBy/boundary"));
    }
    
    
    @Test
    public void test_108_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/ratio?" + 
                    "bpolys=zmrf%3A8.704561%2C49.403252%2C8.702162%2C49.425%2C8.704425%2C49.408%2C8.720%2C49.433%2C8.704561%2C49.403252%7Cpx%3A8.704561%2C49.403252%2C8.738%2C49.4399%2C8.721389%2C49.424%2C8.704533%2C49.43686%2C8.704561%2C49.403252%7CIXqHB%3A8.704561%2C49.403252%2C8.732%2C49.408%2C8.709310%2C49.4213%2C8.721%2C49.415%2C8.704561%2C49.403252&" + 
                    "filter=oneway%3D*+and+type%3Away&" + 
                    "filter2=sidewalk%21%3D*&" + 
                    "format=json&" + 
                    "keys2=highway&" + 
                    "time=2008-05-19&" + 
                    "timeout=61&" + 
                    "types2=point%2Cline%2Cpolygon%2C")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.702162 49.425 ) and LINESTRING ( 8.72 49.433, 8.704561 49.403252 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/count/ratio"));
    }
    
    
    @Test
    public void test_109_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/ratio?" + 
                    "bpolys=NYqwK%3A8.704561%2C49.403252%2C8.736%2C49.42854%2C8.744853%2C49.421%2C8.70450%2C49.41675%2C8.704561%2C49.403252&" + 
                    "format=csv&" + 
                    "time=2009-06-09&" + 
                    "timeout=74&" + 
                    "types2=node%2C")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.736 49.42854 ) and LINESTRING ( 8.744853 49.421, 8.7045 49.41675 ) [ (8.723879785045552, 49.41879108954585, NaN) ]"))
                .body("'path'", containsString("/elements/count/ratio"));
    }
    
    
    @Test
    public void test_110_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/groupBy/type?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22zUzoM%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.749121%2C49.428%5D%2C%5B8.705%2C49.403%5D%2C%5B8.7029%2C49.409064%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "keys=highway&" + 
                    "time=2010-03-22&" + 
                    "timeout=30&" + 
                    "values=speed_camera")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.749121 49.428 ) and LINESTRING ( 8.705 49.403, 8.7029 49.409064 ) [ (8.70485599368979, 49.40341583536434, NaN) ]"))
                .body("'path'", containsString("/elements/count/groupBy/type"));
    }
    
    
    @Test
    public void test_111_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/tag?" + 
                    "bpolys=Q%3A8.704561%2C49.403252%2C8.707%2C49.425124%2C8.70461%2C49.400%2C8.739%2C49.433092%2C8.704561%2C49.403252%7Cx%3A8.704561%2C49.403252%2C8.7249%2C49.4381%2C8.734100%2C49.410%2C8.746%2C49.434%2C8.704561%2C49.403252&" + 
                    "groupByKey=building&" + 
                    "groupByValues=civic%2Cdemolished&" + 
                    "keys=highway&" + 
                    "showMetadata=yes&" + 
                    "timeout=88&" + 
                    "values=speed_camera")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.707 49.425124 ) and LINESTRING ( 8.704561 49.403252, 8.7249 49.4381 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/count/groupBy/tag"));
    }
    
    
    @Test
    public void test_112_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/groupBy/tag?" + 
                    "bpolys=Lal%3A8.704561%2C49.403252%2C8.728%2C49.4185%2C8.70986%2C49.4318%2C8.725%2C49.437%2C8.704561%2C49.403252&" + 
                    "format=csv&" + 
                    "groupByKey=building&" + 
                    "groupByValues=station%2Cstop&" + 
                    "showMetadata=true&" + 
                    "time=2016-10-04&" + 
                    "timeout=67")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.728 49.4185, 8.70986 49.4318 ) and LINESTRING ( 8.725 49.437, 8.704561 49.403252 ) [ (8.718163551521966, 49.42571194954564, NaN) ]"))
                .body("'path'", containsString("/elements/count/groupBy/tag"));
    }
    
    
    @Test
    public void test_113_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/groupBy/tag?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22kVzZu%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.704%2C49.405%5D%2C%5B8.744%2C49.42967%5D%2C%5B8.70674%2C49.439%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22qD%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.734%2C49.419%5D%2C%5B8.703%2C49.416%5D%2C%5B8.7125%2C49.4252%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22iAB%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7086%2C49.415%5D%2C%5B8.726%2C49.4266%5D%2C%5B8.709%2C49.4202%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "format=geojson&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=apartments%2Cservice%2Csynagogue&" + 
                    "keys=highway&" + 
                    "showMetadata=no&" + 
                    "values=tertiary")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704 49.405, 8.705215123164557 49.40574942721174 ) and LINESTRING ( 8.70674 49.439, 8.704561 49.403252 ) [ (8.704693624271123, 49.40542779276922, NaN) ]"))
                .body("'path'", containsString("/elements/count/groupBy/tag"));
    }
    
    
    @Test
    public void test_114_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/groupBy/key?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22XnD%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7115%2C49.415717%5D%2C%5B8.724%2C49.432%5D%2C%5B8.704515%2C49.4314%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22TE%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.724%2C49.405798%5D%2C%5B8.704%2C49.436%5D%2C%5B8.729344%2C49.425%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22KLpLh%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.700%2C49.40490%5D%2C%5B8.70457%2C49.433369%5D%2C%5B8.726%2C49.414%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=natural%3Dwood&" + 
                    "format=csv&" + 
                    "groupByKeys=building%2Cturn%3Alanes%2Ctype&" + 
                    "time=2015-10-19&" + 
                    "timeout=32")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.720420783418023 49.411202974960446, 8.70748987484494 49.43072993999666 ) and LINESTRING ( 8.72147227923759 49.41809227360929, 8.704561 49.403252 ) [ (8.717921839028216, 49.414976630883494, NaN) ]"))
                .body("'path'", containsString("/elements/count/groupBy/key"));
    }
    
    
    @Test
    public void test_115_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/groupBy/key?" + 
                    "bpolys=C%3A8.704561%2C49.403252%2C8.723%2C49.425%2C8.717107%2C49.434%2C8.7038%2C49.404%2C8.704561%2C49.403252%7CFo%3A8.704561%2C49.403252%2C8.744%2C49.433599%2C8.748157%2C49.425%2C8.70453%2C49.420%2C8.704561%2C49.403252%7CAeBiR%3A8.704561%2C49.403252%2C8.73253%2C49.426%2C8.70710%2C49.436%2C8.7344%2C49.431795%2C8.704561%2C49.403252&" + 
                    "groupByKeys=lanes%3Abackward%2Cbuilding&" + 
                    "keys=highway&" + 
                    "showMetadata=no&" + 
                    "timeout=79&" + 
                    "values=service")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.723 49.425 ) and LINESTRING ( 8.7038 49.404, 8.704561 49.403252 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/count/groupBy/key"));
    }
    
    
    @Test
    public void test_116_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=8.704561%2C49.403252%2C8.73221%2C49.41259%2C8.7037%2C49.416%2C8.7120%2C49.411%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.735%2C49.419%2C8.719%2C49.436916%2C8.705646%2C49.431615%2C8.704561%2C49.403252&" + 
                    "filter=tracktype%3D*+and+area%3A%281.0+..+1E6%29&" + 
                    "groupByKey=highway&" + 
                    "showMetadata=no&" + 
                    "time=2011-01-17&" + 
                    "timeout=80")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.73221 49.41259 ) and LINESTRING ( 8.712 49.411, 8.704561 49.403252 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/count/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_117_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22BF%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7308%2C49.4037%5D%2C%5B8.7023%2C49.426%5D%2C%5B8.714%2C49.429%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22rcWrI%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7357%2C49.40851%5D%2C%5B8.72559%2C49.4315%5D%2C%5B8.702%2C49.416%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22Jdnm%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7113%2C49.41751%5D%2C%5B8.714%2C49.428211%5D%2C%5B8.735475%2C49.430%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "format=geojson&" + 
                    "groupByKey=building&" + 
                    "time=2014-09-26")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.726613563741047 49.40697570275701, 8.709109854650777 49.42067158741361 ) and LINESTRING ( 8.71152976185906 49.42226160698666, 8.704561 49.403252 ) [ (8.710537395607387, 49.41955459922651, NaN) ]"))
                .body("'path'", containsString("/elements/count/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_118_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=DN%3A8.704561%2C49.403252%2C8.718%2C49.4062%2C8.72266%2C49.4353%2C8.708%2C49.407%2C8.704561%2C49.403252%7CDzkSR%3A8.704561%2C49.403252%2C8.712%2C49.4324%2C8.7048%2C49.43082%2C8.7327%2C49.42298%2C8.704561%2C49.403252%7CEcy%3A8.704561%2C49.403252%2C8.74250%2C49.4291%2C8.726%2C49.426%2C8.710%2C49.429%2C8.704561%2C49.403252&" + 
                    "format=csv&" + 
                    "groupByKey=building&" + 
                    "keys=highway&" + 
                    "showMetadata=no&" + 
                    "timeout=44")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.718 49.4062 ) and LINESTRING ( 8.704561 49.403252, 8.712 49.4324 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/count/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_119_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22O%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.718%2C49.41722%5D%2C%5B8.747%2C49.4016%5D%2C%5B8.715184%2C49.417%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22Ljjh%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.744679%2C49.4164%5D%2C%5B8.725230%2C49.439%5D%2C%5B8.741%2C49.415%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=highway%3D*+or+area%3A%281.0+..+1E6%29&" + 
                    "format=json&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=service%2Csteps%2Chouse&" + 
                    "time=2015-12-16")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.718 49.41722 ) and LINESTRING ( 8.727831099747394 49.410878383954305, 8.715184 49.417 ) [ (8.716960849826712, 49.41613994570872, NaN) ]"))
                .body("'path'", containsString("/elements/count/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_120_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/boundary?" + 
                    "bcircles=SLYiL%3A8.732%2C49.407%2C296429387&" + 
                    "filter=foo&" + 
                    "format=foo&" + 
                    "time=foo&" + 
                    "timeout=51&" + 
                    "values=evomaster_60_input")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El Ã¡ngulo 639.804.355.794.182 es demasiado grande."))
                .body("'path'", containsString("/elements/count/groupBy/boundary"));
    }
    
    
    @Test
    public void test_121_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/boundary?" + 
                    "bpolys=d%3A8.704561%2C49.403252%2C8.72287%2C49.424%2C8.730%2C49.410%2C8.7047%2C49.424%2C8.704561%2C49.403252%7COV%3A8.704561%2C49.403252%2C8.732%2C49.404%2C8.7090%2C49.41891%2C8.7235%2C49.4073%2C8.704561%2C49.403252&" + 
                    "format=json&" + 
                    "keys=highway&" + 
                    "time=2007-12-30&" + 
                    "values=turning_circle")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.72287 49.424 ) and LINESTRING ( 8.7047 49.424, 8.704561 49.403252 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/count/groupBy/boundary"));
    }
    
    
    @Test
    public void test_122_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/groupBy/boundary?" + 
                    "bcircles=Kjv%3A8.7017%2C49.423035%2C2%7CCBz%3A8.7002%2C49.41223%2C9%7CUBlH%3A8.709%2C49.43029%2C2%7CCIYNl%3A8.7168%2C49.4219%2C591004309331&" + 
                    "filter=highway%3D*+and+length%3A%28+..+100%29&" + 
                    "showMetadata=yes&" + 
                    "time=2011-11-06")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El Ã¡ngulo 160.267.109.227.660.090.000.000.000.000.000.000.000.000 es demasiado grande."))
                .body("'path'", containsString("/elements/count/groupBy/boundary"));
    }
    
    
    @Test
    public void test_123_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/groupBy/boundary?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22R%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7084%2C49.425%5D%2C%5B8.707%2C49.4283%5D%2C%5B8.738%2C49.417338%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22is%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.719%2C49.4118%5D%2C%5B8.7358%2C49.408%5D%2C%5B8.704323%2C49.413%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=evomaster_2322_input&" + 
                    "format=evomaster_2323_input&" + 
                    "keys=evomaster_2321_input&" + 
                    "showMetadata=no&" + 
                    "time=foo&" + 
                    "types=foo&" + 
                    "values=foo")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.719 49.4118 ) and LINESTRING ( 8.721300094438373 49.41030325405242, 8.706228311627415 49.41269734859939 ) [ (8.717493202441808, 49.410907964157666, NaN) ]"))
                .body("'path'", containsString("/elements/count/groupBy/boundary"));
    }
    
    
    @Test
    public void test_124_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/density/groupBy/type?" + 
                    "bpolys=S%3A8.704561%2C49.403252%2C8.715809%2C49.4043%2C8.7000%2C49.422%2C8.713146%2C49.431%2C8.704561%2C49.403252%7Ca%3A8.704561%2C49.403252%2C8.7164%2C49.419616%2C8.704243%2C49.4103%2C8.701%2C49.4159%2C8.704561%2C49.403252%7CJ%3A8.704561%2C49.403252%2C8.707%2C49.411%2C8.70645%2C49.4018%2C8.73187%2C49.4087%2C8.704561%2C49.403252&" + 
                    "keys=highway&" + 
                    "time=2011-09-02&" + 
                    "timeout=55&" + 
                    "values=emergency_access_point")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.715809 49.4043 ) and LINESTRING ( 8.707 49.411, 8.70645 49.4018 ) [ (8.706547871365101, 49.40343712101624, NaN) ]"))
                .body("'path'", containsString("/elements/count/density/groupBy/type"));
    }
    
    
    @Test
    public void test_125_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/density/groupBy/tag?" + 
                    "bpolys=8.704561%2C49.403252%2C8.727%2C49.42334%2C8.708480%2C49.422322%2C8.701214%2C49.426%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.74149%2C49.400%2C8.70270%2C49.4325%2C8.730%2C49.435%2C8.704561%2C49.403252&" + 
                    "filter=building%21%3D*+and+length%3A%28+..+100%29&" + 
                    "format=geojson&" + 
                    "groupByKey=foo&" + 
                    "groupByValues=station%2Cprimary%2Cstop&" + 
                    "showMetadata=true&" + 
                    "time=2016-12-10&" + 
                    "timeout=44")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.727 49.42334 ) and LINESTRING ( 8.701214 49.426, 8.704561 49.403252 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/count/density/groupBy/tag"));
    }
    
    
    @Test
    public void test_126_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/density/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=h%3A8.704561%2C49.403252%2C8.736%2C49.438%2C8.730%2C49.4034%2C8.738%2C49.414%2C8.704561%2C49.403252%7CC%3A8.704561%2C49.403252%2C8.724%2C49.437%2C8.7045%2C49.4199%2C8.709863%2C49.429%2C8.704561%2C49.403252&" + 
                    "filter=surface%21%3D*+or+area%3A%281.0+..+1E6%29&" + 
                    "format=json&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=service%2Csynagogue&" + 
                    "showMetadata=yes&" + 
                    "time=2009-03-20")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.736 49.438 ) and LINESTRING ( 8.738 49.414, 8.704561 49.403252 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/count/density/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_127_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/density/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22aMuy%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7312%2C49.4011%5D%2C%5B8.707124%2C49.437764%5D%2C%5B8.71706%2C49.43784%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=addr%3Ahousenumber%3D*+or+geometry%3Apoint+and+area%3A%281.0+..+1E6%29&" + 
                    "format=csv&" + 
                    "groupByKey=building&" + 
                    "groupByValues=yes&" + 
                    "showMetadata=true&" + 
                    "time=2015-10-11&" + 
                    "timeout=35")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.7312 49.4011, 8.707124 49.437764 ) and LINESTRING ( 8.71706 49.43784, 8.704561 49.403252 ) [ (8.71351533647328, 49.42803098951419, NaN) ]"))
                .body("'path'", containsString("/elements/count/density/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_128_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/density/groupBy/boundary?" + 
                    "bpolys=Nuamq%3A8.704561%2C49.403252%2C8.70307%2C49.431390%2C8.7251%2C49.428064%2C8.733%2C49.414%2C8.704561%2C49.403252%7CF%3A8.704561%2C49.403252%2C8.7265%2C49.4283%2C8.718%2C49.424%2C8.709%2C49.436%2C8.704561%2C49.403252&" + 
                    "filter=highway%3D*+or+length%3A%28+..+100%29&" + 
                    "format=geojson&" + 
                    "showMetadata=false&" + 
                    "time=2016-12-25&" + 
                    "timeout=76")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.70307 49.43139 ) and LINESTRING ( 8.733 49.414, 8.704561 49.403252 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/count/density/groupBy/boundary"));
    }
    
    
    @Test
    public void test_129_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/density/groupBy/boundary?" + 
                    "bcircles=P%3A8.706%2C49.4056%2C7%7CUvI%3A8.70552%2C49.433%2C8%7CIziNG%3A8.71941%2C49.415%2C6%7Chl%3A8.7412%2C49.407%2C285595884615&" + 
                    "filter=bicycle%3D*+or+not+id%3A%281+..+9999%29&" + 
                    "showMetadata=no&" + 
                    "timeout=62")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El Ã¡ngulo 4.128.596.020.240.314.400 es demasiado grande."))
                .body("'path'", containsString("/elements/count/density/groupBy/boundary"));
    }
    
    
    @Test
    public void test_130_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/density/groupBy/boundary?" + 
                    "bpolys=wUmpA%3A8.704561%2C49.403252%2C8.742%2C49.4281%2C8.737%2C49.41859%2C8.703%2C49.433%2C8.704561%2C49.403252&" + 
                    "keys=highway&" + 
                    "timeout=51")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.742 49.4281 ) and LINESTRING ( 8.737 49.41859, 8.703 49.433 ) [ (8.731306720432634, 49.42100294584017, NaN) ]"))
                .body("'path'", containsString("/elements/count/density/groupBy/boundary"));
    }
    
    
    @Test
    public void test_131_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/density?" + 
                    "bcircles=XwDdm%3A8.72845%2C49.43506%2C7%7Cw%3A8.7329%2C49.4016%2C6%7Cl%3A8.7329%2C49.40409%2C364422284%7CN%3A8.716%2C49.431633%2C243235470&" + 
                    "filter=surface%21%3D*+or+not+geometry%3Aline+and+area%3A%281.0+..+1E6%29&" + 
                    "format=json&" + 
                    "time=2017-08-11&" + 
                    "timeout=66")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El Ã¡ngulo 3.337.432.415.628.069 es demasiado grande."))
                .body("'path'", containsString("/elements/count/density"));
    }
    
    
    @Test
    public void test_132_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/density?" + 
                    "bpolys=kR%3A8.704561%2C49.403252%2C8.738%2C49.409635%2C8.7081%2C49.418%2C8.70391%2C49.4316%2C8.704561%2C49.403252%7CbgA%3A8.704561%2C49.403252%2C8.737%2C49.421956%2C8.717%2C49.4076%2C8.736%2C49.420%2C8.704561%2C49.403252&" + 
                    "format=geojson")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.738 49.409635 ) and LINESTRING ( 8.704561 49.403252, 8.737 49.421956 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/count/density"));
    }
    
    
    @Test
    public void test_133_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/density?" + 
                    "bcircles=IBsym%3A8.713%2C49.422%2C2%7CW%3A8.738%2C49.420797%2C239%7CubmTa%3A8.7067%2C49.4314%2C39%7CR%3A8.7457%2C49.438%2C17890110682&" + 
                    "keys=highway&" + 
                    "time=2010-02-06")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El Ã¡ngulo 113.277.519.323.067.210.000.000.000.000 es demasiado grande."))
                .body("'path'", containsString("/elements/count/density"));
    }
    
    
    @Test
    public void test_134_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count?" + 
                    "bpolys=8.704561%2C49.403252%2C8.708588%2C49.4232%2C8.704%2C49.429%2C8.7205%2C49.412%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.740651%2C49.401%2C8.709%2C49.427%2C8.704%2C49.400%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.719407%2C49.42945%2C8.7084%2C49.432506%2C8.7343%2C49.425708%2C8.704561%2C49.403252&" + 
                    "format=csv&" + 
                    "time=2009-04-29&" + 
                    "timeout=28&" + 
                    "values=elevator")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.708588 49.4232 ) and LINESTRING ( 8.709 49.427, 8.704 49.4 ) [ (8.705059615085116, 49.405721921459616, NaN) ]"))
                .body("'path'", containsString("/elements/count"));
    }
    
    
    @Test
    public void test_135_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count?" + 
                    "bpolys=DkfS%3A8.704561%2C49.403252%2C8.73411%2C49.428%2C8.71289%2C49.4302%2C8.70609%2C49.4144%2C8.704561%2C49.403252%7CE%3A8.704561%2C49.403252%2C8.737%2C49.402%2C8.7045%2C49.419%2C8.7336%2C49.40748%2C8.704561%2C49.403252%7CB%3A8.704561%2C49.403252%2C8.741%2C49.413543%2C8.747%2C49.418725%2C8.7467%2C49.426742%2C8.704561%2C49.403252&" + 
                    "showMetadata=true&" + 
                    "time=2010-02-26&" + 
                    "timeout=71")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.73411 49.428 ) and LINESTRING ( 8.7336 49.40748, 8.704561 49.403252 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/count"));
    }
    
    
    @Test
    public void test_136_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/ratio/groupBy/boundary?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22FzcyD%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.718%2C49.424004%5D%2C%5B8.703%2C49.420%5D%2C%5B8.709%2C49.4028%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter2=highway+in+%28secondary%2Cpath%2Cunclassified%2Ctrack%2Cprimary%2Cresidential%2Ccycleway%2Cservice%2Cfootway%29+and+type%3Away+or+length%3A%28+..+100%29&" + 
                    "keys=highway&" + 
                    "showMetadata=no&" + 
                    "time=2017-12-16&" + 
                    "timeout=84")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.718 49.424004 ) and LINESTRING ( 8.703 49.42, 8.709 49.4028 ) [ (8.707343500259233, 49.40754863259019, NaN) ]"))
                .body("'path'", containsString("/elements/area/ratio/groupBy/boundary"));
    }
    
    
    @Test
    public void test_137_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/ratio/groupBy/boundary?" + 
                    "bpolys=MA%3A8.704561%2C49.403252%2C8.73746%2C49.425752%2C8.705007%2C49.4365%2C8.72902%2C49.408%2C8.704561%2C49.403252%7Cy%3A8.704561%2C49.403252%2C8.706%2C49.401%2C8.72986%2C49.430%2C8.70464%2C49.4088%2C8.704561%2C49.403252&" + 
                    "filter2=maxspeed%21%3D*+and+area%3A%281.0+..+1E6%29&" + 
                    "keys=highway&" + 
                    "showMetadata=no&" + 
                    "time=2013-06-30&" + 
                    "timeout=56&" + 
                    "types2=node%2C")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.73746 49.425752 ) and LINESTRING ( 8.704561 49.403252, 8.706 49.401 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/area/ratio/groupBy/boundary"));
    }
    
    
    @Test
    public void test_138_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/ratio?" + 
                    "bcircles=T%3A8.708%2C49.4118%2C6%7CYRXgz%3A8.721%2C49.4042%2C9029590417%7Cobus%3A8.713%2C49.4137%2C4&" + 
                    "filter=addr%3Astreet%3D*+or+geometry%3Apoint+and+area%3A%281.0+..+1E6%29&" + 
                    "keys2=highway&" + 
                    "showMetadata=yes&" + 
                    "time=2016-06-17&" + 
                    "timeout=87&" + 
                    "types2=other")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El Ã¡ngulo 474.476.850.243.654.500.000.000.000 es demasiado grande."))
                .body("'path'", containsString("/elements/area/ratio"));
    }
    
    
    @Test
    public void test_139_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/ratio?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22UUC%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7202%2C49.413%5D%2C%5B8.7006%2C49.439211%5D%2C%5B8.7093%2C49.433%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "keys=highway&" + 
                    "showMetadata=true&" + 
                    "time=2008-05-09")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.7202 49.413, 8.7006 49.439211 ) and LINESTRING ( 8.7093 49.433, 8.704561 49.403252 ) [ (8.708587750356058, 49.428529014051904, NaN) ]"))
                .body("'path'", containsString("/elements/area/ratio"));
    }
    
    
    @Test
    public void test_140_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/type?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22bwHr%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.709%2C49.405269%5D%2C%5B8.7031%2C49.43050%5D%2C%5B8.725%2C49.429%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22PVx%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.728%2C49.41350%5D%2C%5B8.739%2C49.40711%5D%2C%5B8.744%2C49.400106%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22D%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7326%2C49.42451%5D%2C%5B8.7389%2C49.416%5D%2C%5B8.720%2C49.4012%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "keys=highway&" + 
                    "timeout=53&" + 
                    "values=steps")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.708732160473106 49.406414399847975, 8.7031 49.4305 ) and LINESTRING ( 8.725 49.429, 8.704561 49.403252 ) [ (8.708354244670405, 49.40803053435949, NaN) ]"))
                .body("'path'", containsString("/elements/area/groupBy/type"));
    }
    
    
    @Test
    public void test_141_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/type?" + 
                    "bcircles=8.731%2C49.414%2C111%7C8.711722%2C49.4152%2C543840647%7C8.740%2C49.437%2C6&" + 
                    "time=2017-07-03")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El Ã¡ngulo 82.269.834.352.511.568 es demasiado grande."))
                .body("'path'", containsString("/elements/area/groupBy/type"));
    }
    
    
    @Test
    public void test_142_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/type?" + 
                    "bpolys=c%3A8.704561%2C49.403252%2C8.728%2C49.413%2C8.70289%2C49.4136%2C8.747%2C49.436739%2C8.704561%2C49.403252%7CfkQ%3A8.704561%2C49.403252%2C8.745%2C49.4271%2C8.724758%2C49.403%2C8.718%2C49.438%2C8.704561%2C49.403252%7Cag%3A8.704561%2C49.403252%2C8.734%2C49.4023%2C8.749%2C49.43032%2C8.7400%2C49.4191%2C8.704561%2C49.403252&" + 
                    "filter=network%3D*&" + 
                    "showMetadata=no")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.728 49.413 ) and LINESTRING ( 8.704561 49.403252, 8.734 49.4023 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/area/groupBy/type"));
    }
    
    
    @Test
    public void test_143_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/tag?" + 
                    "bpolys=8.704561%2C49.403252%2C8.7325%2C49.430884%2C8.7372%2C49.43543%2C8.728%2C49.40894%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.700880%2C49.4324%2C8.704%2C49.4061%2C8.705%2C49.432%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.7106%2C49.422%2C8.70162%2C49.433%2C8.703%2C49.411%2C8.704561%2C49.403252&" + 
                    "format=csv&" + 
                    "groupByKey=building&" + 
                    "groupByValues=church%2Cunclassified%2Cstreet_lamp&" + 
                    "keys=highway&" + 
                    "time=2009-02-27&" + 
                    "timeout=63&" + 
                    "values=secondary_link")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.7325 49.430884 ) and LINESTRING ( 8.704561 49.403252, 8.70088 49.4324 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/area/groupBy/tag"));
    }
    
    
    @Test
    public void test_144_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/tag?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22yc%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7282%2C49.400%5D%2C%5B8.702%2C49.4307%5D%2C%5B8.746%2C49.4008%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=addr%3Acity%3D*&" + 
                    "format=json&" + 
                    "groupByKey=building&" + 
                    "groupByValues=platform%2Chotel&" + 
                    "showMetadata=true&" + 
                    "time=2009-04-20")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.7282 49.4, 8.702 49.4307 ) and LINESTRING ( 8.746 49.4008, 8.704561 49.403252 ) [ (8.7265342842731, 49.40195181193953, NaN) ]"))
                .body("'path'", containsString("/elements/area/groupBy/tag"));
    }
    
    
    @Test
    public void test_145_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/key?" + 
                    "bcircles=sJr%3A8.724%2C49.40260%2C1557983996%7CfAB%3A8.732651%2C49.4191%2C75&" + 
                    "groupByKeys=lanes%3Aforward%2Coneway&" + 
                    "keys=highway&" + 
                    "showMetadata=false&" + 
                    "values=bus_stop")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El Ã¡ngulo 372.579.731.260.164.500.000 es demasiado grande."))
                .body("'path'", containsString("/elements/area/groupBy/key"));
    }
    
    
    @Test
    public void test_146_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/key?" + 
                    "bpolys=KtfIE%3A8.704561%2C49.403252%2C8.740%2C49.429%2C8.700%2C49.438%2C8.7002%2C49.4314%2C8.704561%2C49.403252%7CA%3A8.704561%2C49.403252%2C8.732220%2C49.437%2C8.7400%2C49.40144%2C8.704%2C49.415776%2C8.704561%2C49.403252&" + 
                    "filter=maxspeed%21%3D*+or+area%3A%281.0+..+1E6%29&" + 
                    "format=geojson&" + 
                    "groupByKeys=addr%3Acity%2Cturn%3Alanes%2Cnetwork&" + 
                    "timeout=91")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.74 49.429 ) and LINESTRING ( 8.74 49.40144, 8.704 49.415776 ) [ (8.715497134881538, 49.411197585398284, NaN) ]"))
                .body("'path'", containsString("/elements/area/groupBy/key"));
    }
    
    
    @Test
    public void test_147_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/key?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22BG%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7058%2C49.421%5D%2C%5B8.7061%2C49.420%5D%2C%5B8.7045%2C49.414%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "groupByKeys=addr%3Apostcode%2Cname%2Chighway&" + 
                    "keys=highway&" + 
                    "showMetadata=true&" + 
                    "time=2014-09-23&" + 
                    "timeout=33&" + 
                    "values=emergency_access_point")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.7058 49.421 ) and LINESTRING ( 8.7061 49.42, 8.7045 49.414 ) [ (8.705599044020838, 49.41812141507815, NaN) ]"))
                .body("'path'", containsString("/elements/area/groupBy/key"));
    }
    
    
    @Test
    public void test_148_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=8.7070%2C49.417%2C369882279&" + 
                    "format=geojson&" + 
                    "groupByKey=building&" + 
                    "groupByValues=station%2Cyes%2Cuniversity&" + 
                    "keys=highway&" + 
                    "showMetadata=true&" + 
                    "time=2012-10-01")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El Ã¡ngulo 3.766.851.610.020.841 es demasiado grande."))
                .body("'path'", containsString("/elements/area/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_149_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=hGJ%3A8.704561%2C49.403252%2C8.7014%2C49.4099%2C8.7395%2C49.413921%2C8.740%2C49.4307%2C8.704561%2C49.403252%7CjPTVb%3A8.704561%2C49.403252%2C8.736%2C49.421080%2C8.7060%2C49.4232%2C8.700%2C49.405%2C8.704561%2C49.403252%7CJR%3A8.704561%2C49.403252%2C8.7116%2C49.430%2C8.7048%2C49.4051%2C8.747932%2C49.43068%2C8.704561%2C49.403252&" + 
                    "filter=landuse%21%3D*&" + 
                    "format=json&" + 
                    "groupByKey=building&" + 
                    "groupByValues=pedestrian%2Cgive_way&" + 
                    "timeout=52")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.7014 49.4099 ) and LINESTRING ( 8.7 49.405, 8.704561 49.403252 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/area/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_150_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/boundary?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22xvIH%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.71759%2C49.41282%5D%2C%5B8.7065%2C49.4291%5D%2C%5B8.7448%2C49.42497%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22b%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7367%2C49.4389%5D%2C%5B8.7396%2C49.4302%5D%2C%5B8.704%2C49.4234%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22M%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.74070%2C49.426%5D%2C%5B8.715%2C49.413%5D%2C%5B8.716610%2C49.427%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "format=json&" + 
                    "keys=highway&" + 
                    "showMetadata=true&" + 
                    "time=2009-07-19")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.725971656703722 49.42700031482542, 8.7367 49.4389 ) and LINESTRING ( 8.7396 49.4302, 8.72397557108779 49.427215558522384 ) [ (8.726621338121296, 49.427720929753505, NaN) ]"))
                .body("'path'", containsString("/elements/area/groupBy/boundary"));
    }
    
    
    @Test
    public void test_151_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/boundary?" + 
                    "bpolys=8.704561%2C49.403252%2C8.727%2C49.427%2C8.737%2C49.4284%2C8.717%2C49.420%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.73657%2C49.435%2C8.704577%2C49.410981%2C8.709%2C49.437%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.711%2C49.407%2C8.7096%2C49.4274%2C8.702%2C49.415%2C8.704561%2C49.403252&" + 
                    "filter=addr%3Astreet%21%3D*+and+type%3Away+or+length%3A%28+..+100%29&" + 
                    "format=csv")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.727 49.427 ) and LINESTRING ( 8.709 49.437, 8.704561 49.403252 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/area/groupBy/boundary"));
    }
    
    
    @Test
    public void test_152_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density/groupBy/type?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22koHas%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.748%2C49.401%5D%2C%5B8.70338%2C49.406%5D%2C%5B8.746%2C49.409%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22re%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7439%2C49.4122%5D%2C%5B8.7075%2C49.435%5D%2C%5B8.706907%2C49.43292%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22wnJ%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.70427%2C49.4125%5D%2C%5B8.7365%2C49.420%5D%2C%5B8.72354%2C49.410946%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "format=json&" + 
                    "keys=highway&" + 
                    "showMetadata=false&" + 
                    "time=2014-04-21&" + 
                    "timeout=98&" + 
                    "values=residential")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.748 49.401, 8.712265082416653 49.40500436100217 ) and LINESTRING ( 8.746 49.409, 8.704561 49.403252 ) [ (8.71499162793876, 49.40469883147257, NaN) ]"))
                .body("'path'", containsString("/elements/area/density/groupBy/type"));
    }
    
    
    @Test
    public void test_153_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/density/groupBy/type?" + 
                    "bpolys=Z%3A8.704561%2C49.403252%2C8.724%2C49.402%2C8.701180%2C49.430%2C8.7076%2C49.435%2C8.704561%2C49.403252%7CnZGi%3A8.704561%2C49.403252%2C8.714%2C49.4255%2C8.706837%2C49.436%2C8.7183%2C49.407135%2C8.704561%2C49.403252&" + 
                    "filter=destination%21%3D*+or+id%3A%281+..+9999%29&" + 
                    "time=2014-04-02&" + 
                    "timeout=43")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.724 49.402 ) and LINESTRING ( 8.704561 49.403252, 8.714 49.4255 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/area/density/groupBy/type"));
    }
    
    
    @Test
    public void test_154_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density/groupBy/tag?" + 
                    "bcircles=8.730%2C49.4209%2C2%7C8.7219%2C49.403%2C9%7C8.742242%2C49.42282%2C4%7C8.726475%2C49.406488%2C709751407&" + 
                    "filter=smoothness%3D*+or+geometry%3Aline+or+area%3A%281.0+..+1E6%29&" + 
                    "groupByKey=building&" + 
                    "groupByValues=pedestrian%2Cpath&" + 
                    "keys=highway&" + 
                    "time=2012-05-21&" + 
                    "timeout=80&" + 
                    "values=elevator")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El Ã¡ngulo 691.451.312.512.780.800 es demasiado grande."))
                .body("'path'", containsString("/elements/area/density/groupBy/tag"));
    }
    
    
    @Test
    public void test_155_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density/groupBy/tag?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22Jx%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.749%2C49.436%5D%2C%5B8.703%2C49.413%5D%2C%5B8.7322%2C49.405%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22l%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.703%2C49.425%5D%2C%5B8.7055%2C49.412%5D%2C%5B8.728%2C49.4281%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=maxspeed%3D*+and+length%3A%28+..+100%29&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=school%2Cgive_way%2Cuniversity&" + 
                    "showMetadata=true&" + 
                    "time=2010-12-17")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.749 49.436 ) and LINESTRING ( 8.711547302342328 49.41065827333087, 8.7322 49.405 ) [ (8.713780897571004, 49.4100463294326, NaN) ]"))
                .body("'path'", containsString("/elements/area/density/groupBy/tag"));
    }
    
    
    @Test
    public void test_156_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density/groupBy/tag?" + 
                    "bpolys=8.704561%2C49.403252%2C8.704961%2C49.404%2C8.74387%2C49.421%2C8.701495%2C49.4287%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.746%2C49.404%2C8.7076%2C49.426%2C8.713%2C49.422230%2C8.704561%2C49.403252&" + 
                    "format=csv&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=pedestrian%2Ctrack&" + 
                    "showMetadata=no&" + 
                    "time=2015-07-25")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.704961 49.404 ) and LINESTRING ( 8.704561 49.403252, 8.746 49.404 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/area/density/groupBy/tag"));
    }
    
    
    @Test
    public void test_157_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/density/groupBy/tag?" + 
                    "bpolys=b%3A8.704561%2C49.403252%2C8.72607%2C49.401%2C8.708%2C49.43242%2C8.722%2C49.4065%2C8.704561%2C49.403252%7CahKX%3A8.704561%2C49.403252%2C8.73009%2C49.4031%2C8.741984%2C49.4141%2C8.708%2C49.422%2C8.704561%2C49.403252&" + 
                    "format=geojson&" + 
                    "groupByKey=building&" + 
                    "keys=highway&" + 
                    "time=2016-04-11&" + 
                    "timeout=43&" + 
                    "values=footway")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.72607 49.401 ) and LINESTRING ( 8.722 49.4065, 8.704561 49.403252 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/area/density/groupBy/tag"));
    }
    
    
    @Test
    public void test_158_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=gmxpb%3A8.724%2C49.433%2C935%7CCn%3A8.704%2C49.436%2C5%7Ctua%3A8.723%2C49.42679%2C5%7CGRFFY%3A8.707%2C49.430%2C5211674164&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=apartments%2Cgarage&" + 
                    "time=2012-05-01")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El Ã¡ngulo 5.868.026.727.589.821.000.000.000 es demasiado grande."))
                .body("'path'", containsString("/elements/area/density/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_159_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/density/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=JVc%3A8.704561%2C49.403252%2C8.72373%2C49.403696%2C8.70310%2C49.4102%2C8.7001%2C49.4303%2C8.704561%2C49.403252&" + 
                    "filter=destination%3D*+and+type%3Away&" + 
                    "groupByKey=building&" + 
                    "groupByValues=crossing%2Cchapel&" + 
                    "showMetadata=no&" + 
                    "time=2018-01-05&" + 
                    "timeout=44")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.72373 49.403696, 8.7031 49.4102 ) and LINESTRING ( 8.7001 49.4303, 8.704561 49.403252 ) [ (8.703432354651286, 49.41009521887291, NaN) ]"))
                .body("'path'", containsString("/elements/area/density/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_160_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/density/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22hOU%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.747%2C49.419352%5D%2C%5B8.706%2C49.410328%5D%2C%5B8.708%2C49.415%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22EVv%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7319%2C49.4110%5D%2C%5B8.705%2C49.436391%5D%2C%5B8.720%2C49.4039%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "groupByKey=building&" + 
                    "groupByValues=platform%2Capartments&" + 
                    "keys=highway&" + 
                    "showMetadata=false&" + 
                    "time=2013-05-24")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.71601478986924 49.412532230823906, 8.706 49.410328 ) and LINESTRING ( 8.708 49.415, 8.704561 49.403252 ) [ (8.706675910735491, 49.41047676630432, NaN) ]"))
                .body("'path'", containsString("/elements/area/density/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_161_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density/groupBy/boundary?" + 
                    "bcircles=NRet%3A8.726%2C49.43292%2C5119911564%7CCu%3A8.745%2C49.438%2C2%7Cdhtu%3A8.700%2C49.416%2C4%7CZf%3A8.712%2C49.4286%2C1&" + 
                    "keys=highway&" + 
                    "values=secondary")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El Ã¡ngulo 5.093.024.823.622.849.000.000.000 es demasiado grande."))
                .body("'path'", containsString("/elements/area/density/groupBy/boundary"));
    }
    
    
    @Test
    public void test_162_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/density/groupBy/boundary?" + 
                    "bcircles=wkJ%3A8.733.%2C49.439%2C733&" + 
                    "format=foo&" + 
                    "keys=highwayl&" + 
                    "timeout=32&" + 
                    "types=foo&" + 
                    "values=street_lamp")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_114_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/area/density/groupBy/boundary"));
    }
    
    
    @Test
    public void test_163_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/density?" + 
                    "bpolys=8.704561%2C49.403252%2C8.717987%2C49.43588%2C8.726880%2C49.4101%2C8.725%2C49.403%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.707%2C49.43465%2C8.7138%2C49.42545%2C8.706989%2C49.40519%2C8.704561%2C49.403252&" + 
                    "format=json&" + 
                    "showMetadata=false")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.717987 49.43588 ) and LINESTRING ( 8.725 49.403, 8.704561 49.403252 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/area/density"));
    }
    
    
    @Test
    public void test_164_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area?" + 
                    "bpolys=Uv%3A8.704561%2C49.403252%2C8.704%2C49.403%2C8.7465%2C49.42993%2C8.744%2C49.4353%2C8.704561%2C49.403252%7CzhcPe%3A8.704561%2C49.403252%2C8.70048%2C49.43940%2C8.7423%2C49.409%2C8.7493%2C49.411%2C8.704561%2C49.403252%7CM%3A8.704561%2C49.403252%2C8.705%2C49.4286%2C8.743%2C49.424086%2C8.727355%2C49.4204%2C8.704561%2C49.403252&" + 
                    "filter=smoothness%3D*&" + 
                    "showMetadata=no&" + 
                    "time=2017-10-23&" + 
                    "timeout=72")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.704 49.403 ) and LINESTRING ( 8.704561 49.403252, 8.705 49.4286 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/area"));
    }
    
    
    @Test
    public void test_165_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22X%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7096%2C49.4070%5D%2C%5B8.7008%2C49.435440%5D%2C%5B8.7187%2C49.4275%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "keys=highway&" + 
                    "time=2014-08-29&" + 
                    "timeout=49&" + 
                    "types=point%2Cline%2Cpolygon%2C")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.7096 49.407, 8.7008 49.43544 ) and LINESTRING ( 8.7187 49.4275, 8.704561 49.403252 ) [ (8.708610722741849, 49.41019716422975, NaN) ]"))
                .body("'path'", containsString("/elements/area"));
    }
    
    
    @Test
    public void test_166_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22B%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.703%2C49.4339%5D%2C%5B8.716%2C49.404%5D%2C%5B8.7139%2C49.4276%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22fEgiF%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.727%2C49.413%5D%2C%5B8.7021%2C49.423%5D%2C%5B8.704561%2C49.403261%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22fi%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7006%2C49.4065%5D%2C%5B8.713543%2C49.418%5D%2C%5B8.7026%2C49.4284%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=foot%3D*+or+not+type%3Annde+or+not+id%3A%281+..+9999%29&" + 
                    "format=evomaster_319_input&" + 
                    "keys=foo&" + 
                    "showMetadata=foq&" + 
                    "types=goo&" + 
                    "values=fo_")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.7006 49.4065, 8.70423123844936 49.409726395902624 ) and LINESTRING ( 8.7026 49.4284, 8.704561 49.403252 ) [ (8.704067482918099, 49.409580897284876, NaN) ]"))
                .body("'path'", containsString("/elements/count"));
    }
    
    
    @Test
    public void test_167_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22B%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.703%2C49.4339%5D%2C%5B8.716%2C49.404%5D%2C%5B8.7139%2C49.4276%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22fEgiF%22%7D%2C%22g%5Dometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.727%2C49.413%5D%2C%5B8.7021%2C49.423%5D%2C%5B8.704561%2C49.403261%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22fi%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7006%2C49.4065%5D%2C%5B8.713543%2C49.418%5D%2C%5B8.7026%2C49.4284%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=foot%3D*+or+not+type%3Annde+or+not+id%3A%281+..+9999%29&" + 
                    "format=evomaster_319_input&" + 
                    "keys=evomaster_1872_input&" + 
                    "time=evomaster_312_input&" + 
                    "types=goo&" + 
                    "values=fo_")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_343_checkGeometryTypeOfFeature
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/elements/count"));
    }
    
    
    @Test
    public void test_168_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/key?" + 
                    "bcircles=HV%3A8.706%2C49.4.7%2C7&" + 
                    "filter=evomaster_6118_input&" + 
                    "groupByKeys=foo&" + 
                    "keys=foo&" + 
                    "time=2017-11-20D&" + 
                    "timeout=57")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_114_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/area/groupBy/key"));
    }
    
    
    @Test
    public void test_169_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/tag?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22y%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7368%2C49.4365%5D%2C%5B8.732%2C49.428%5D%2C%5B8.7043%2C49.4030%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22V%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.71220%2C49.421%5D%2C%5B8.700%2C49.403%5D%2C%5B8.702%2C49.406%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=network%21%3D*+and+id%3A%281+..+9999%29&" + 
                    "format=foo&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=evomaster_7167_input&" + 
                    "showMetadata=foo&" + 
                    "time=2012-05-25&" + 
                    "timeout=82&" + 
                    "values=foo")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/executor/ExecutionUtils_565_extractContributionTags
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.7122 49.421, 8.7 49.403 ) and LINESTRING ( 8.702 49.406, 8.704561 49.403252 ) [ (8.702019298298493, 49.40597929257155, NaN) ]"))
                .body("'path'", containsString("/elements/length/groupBy/tag"));
    }
    
    
    @Test
    public void test_170_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density/groupBy/boundary?" + 
                    "bpolys=8.704561%2C49.403252%2C8.708%2C49.43664%2C8.702%2C49.407%2C8.702873%2C49.434%2C8.704561%2C49.403252&" + 
                    "format=foo&" + 
                    "keys=evomaster_9680_input&" + 
                    "showMetadata=true&" + 
                    "time=eoo&" + 
                    "values=foo")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/executor/ExecutionUtils_565_extractContributionTags
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.708 49.43664, 8.702 49.407 ) and LINESTRING ( 8.702873 49.434, 8.704561 49.403252 ) [ (8.703852777720924, 49.416152721941366, NaN) ]"))
                .body("'path'", containsString("/elements/length/density/groupBy/boundary"));
    }
    
    
    @Test
    public void test_171_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density/groupBy/boundary?" + 
                    "bpolys=8.704561%2C49.403252%2C8.708%2C49.43664%2C8.702%2C49.407%2C8.702873%2C49.434%2C8.704561%2C49.403252&" + 
                    "filter=foo&" + 
                    "timeout=84&" + 
                    "types=evomaster_1315_input&" + 
                    "values=foo")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/executor/ExecutionUtils_554_extractContributionTags
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.708 49.43664, 8.702 49.407 ) and LINESTRING ( 8.702873 49.434, 8.704561 49.403252 ) [ (8.703852777720924, 49.416152721941366, NaN) ]"))
                .body("'path'", containsString("/elements/length/density/groupBy/boundary"));
    }
    
    
    @Test
    public void test_172_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22fj%22%7D%2C%22gfometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.736%2C49.407%5D%2C%5B8.707%2C49.4075%5D%2C%5B8.717%2C49.42671%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "timeout=39&" + 
                    "types=line%2Cother")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_343_checkGeometryTypeOfFeature
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/elements/area"));
    }
    
    
    @Test
    public void test_173_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/groupBy/boundary?" + 
                    "bcircles=8.708%2C07.01.%2C7l&" + 
                    "filter=evomaster_5767_input&" + 
                    "format=JSoN&" + 
                    "keys=source%3Ageometry%2Badr.&" + 
                    "showMetadata=evomaster_10089_input&" + 
                    "time=evomaster_5862_input&" + 
                    "values=evomaster_10109_input")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_114_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/count/groupBy/boundary"));
    }
    
    
    @Test
    public void test_174_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/groupBy/boundary?" + 
                    "bboxes=XMch%3A8..74%2C49.441%2C8.7570%2C49.387&" + 
                    "filter=evomaster_5767_input&" + 
                    "format=evomaster_5012_input&" + 
                    "keys=source%3Ageometry%2Badr.&" + 
                    "time=evomaster_5862_input&" + 
                    "values=evomastUr_2740U_inUu")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_63_createBboxes
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/count/groupBy/boundary"));
    }
    
    
    @Test
    public void test_175_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/key?" + 
                    "bboxes=jGJYv%3A8.6931%2C49.4.41%2C8.751%2C49.38568&" + 
                    "filter=evomaster_17179_inpu&" + 
                    "groupByKeys=foo&" + 
                    "keys=foo&" + 
                    "time=2017-91-2%2F&" + 
                    "timeout=77&" + 
                    "values=")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_64_createBboxes
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/area/groupBy/key"));
    }
    
    
    @Test
    public void test_176_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/groupBy/key?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22A%22%7D%2C%22heometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7420%2C49.439%5D%2C%5B8.706300%2C49.40626%5D%2C%5B8.700495%2C49.4188%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22GU%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7485%2C49.400847%5D%2C%5B8.708%2C49.40605%5D%2C%5B8.72203%2C49.4283%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=foo&" + 
                    "format=csv&" + 
                    "groupByKeys=building%2Cnetwork%2Cbicycl&" + 
                    "keys=highway&" + 
                    "showMetadata=falwe&" + 
                    "time=2007-11-26")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_343_checkGeometryTypeOfFeature
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/elements/length/groupBy/key"));
    }
    
    
    @Test
    public void test_177_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/groupBy/boundary?" + 
                    "bboxes=XMch%3A8.674%2C49.441%2C8.757.%2C49.387&" + 
                    "filter=s&" + 
                    "keys=source%3Ageometry%2Badr.&" + 
                    "time=evomaster_5862_input&" + 
                    "timeout=-1.7614627687233053&" + 
                    "types=otHER&" + 
                    "values=O7A")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_65_createBboxes
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/count/groupBy/boundary"));
    }
    
    
    @Test
    public void test_178_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/density/groupBy/tag?" + 
                    "bcircles=e%3A8.709%2C47.6.3%2C9&" + 
                    "filter=foo&" + 
                    "groupByKey=highwaz&" + 
                    "groupByValues=fpo&" + 
                    "keys=highway&" + 
                    "showMetadata=no&" + 
                    "time=%2F1N%2FY8L%3A4")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_114_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/users/count/density/groupBy/tag"));
    }
    
    
    @Test
    public void test_179_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/ratio?" + 
                    "bcircles=%3A.735362%2C26.687.%2C99&" + 
                    "filter2=fq&" + 
                    "format=csv&" + 
                    "keys=foo&" + 
                    "showMetadata=yes&" + 
                    "time=2009-%2F5-%2F5u&" + 
                    "types2=point%2Cline*othe&" + 
                    "values2=traciaV")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_114_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/area/ratio"));
    }
    
    
    @Test
    public void test_180_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/tag?" + 
                    "bpolys=%7B%22typg%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22ohi%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.726%2C49.415471%5D%2C%5B8.71915%2C49.410%5D%2C%5B8.731%2C49.434%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=_&" + 
                    "format=%5EoU&" + 
                    "groupByKey=evomaster_25853_input&" + 
                    "keys=dhghway&" + 
                    "types=foo&" + 
                    "values=fUUU")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_233_createGeometryFromGeoJson
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/users/count/groupBy/tag"));
    }
    
    
    @Test
    public void test_181_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22geatures%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22fj%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Pplygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.736%2C49.407%5D%2C%5B8.707%2C49.4075%5D%2C%5B8.717%2C49.42671%5D%2C%5B8.706561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=foo&" + 
                    "format=gso&" + 
                    "keys=highw%5Dyr&" + 
                    "showMetadata=TuS&" + 
                    "time=fkg&" + 
                    "timeout=37&" + 
                    "types=hine%28othere&" + 
                    "values=fnd")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_237_createGeometryFromGeoJson
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/elements/area"));
    }
    
    
    @Test
    public void test_182_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/key?" + 
                    "bboxes=jGJYv%3A8.6931%2C49.4201%2C8.75.%2C49.3856%3A&" + 
                    "filter=dvooaspdr_1791%3D_irltt&" + 
                    "format=evmmarrer_22571_inpwt&" + 
                    "groupByKeys=Xunm%5CUUeTU0YY4Vcu&" + 
                    "keys=evkmayxer_.3646cinpx&" + 
                    "showMetadata=&" + 
                    "timeout=-6429.898522698715&" + 
                    "types=IN%3E&" + 
                    "values=LV%3A231.3%2C93.715%2C")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_65_createBboxes
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/area/groupBy/key"));
    }
    
    
    @Test
    public void test_183_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/density/groupBy/boundary?" + 
                    "bpolys=zJKaH%3A8.704561%2C49.403252%2C8.7052%2C49.409%2C8.707%2C49.42617%2C8.70593%2C49.404%2C8.704561%2C49.403252%7CpnoXf%3A8.704561%2C49.403252%2C8.7338%2C49.404%2C8.706%2C49.402%2C8.739%2C49.437%2C8.704561%2C49.403252%7CT%3A8.704561%2C49.403252%2C8.713402%2C49.404%2C8.729%2C49.438%2C8.7027%2C49.4289%2C8.704561%2C49.403252&" + 
                    "format=csv&" + 
                    "keys=highway&" + 
                    "showMetadata=yes&" + 
                    "timeout=57")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.7052 49.409 ) and LINESTRING ( 8.70593 49.404, 8.704561 49.403252 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/users/count/density/groupBy/boundary"));
    }
    
    
    @Test
    public void test_184_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=8.704561%2C49.403252%2C8.700127%2C49.4399%2C8.7034%2C49.403446%2C8.714649%2C49.4347%2C8.704561%2C49.403252&" + 
                    "filter=foot%21%3D*+and+id%3A%281+..+9999%29&" + 
                    "groupByKey=building&" + 
                    "showMetadata=no&" + 
                    "timeout=45")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.700127 49.4399 ) and LINESTRING ( 8.7034 49.403446, 8.714649 49.4347 ) [ (8.704251345682406, 49.40581136207289, NaN) ]"))
                .body("'path'", containsString("/elements/length/density/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_185_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/key?" + 
                    "bpolys=GOr%3A8.704561%2C49.403252%2C8.747%2C49.4127%2C8.743%2C49.420463%2C8.703952%2C49.407%2C8.704561%2C49.403252%7CS%3A8.704561%2C49.403252%2C8.7308%2C49.437%2C8.70457%2C49.403323%2C8.72018%2C49.4391%2C8.704561%2C49.403252%7Ca%3A8.704561%2C49.403252%2C8.737%2C49.437%2C8.711%2C49.403%2C8.703%2C49.427%2C8.704561%2C49.403252&" + 
                    "filter=addr%3Ahousenumber%3D*+or+type%3Arelation+and+length%3A%28+..+100%29&" + 
                    "format=json&" + 
                    "groupByKeys=tracktype%2Cnetwork&" + 
                    "showMetadata=no&" + 
                    "time=2010-02-06")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.747 49.4127 ) and LINESTRING ( 8.703952 49.407, 8.704561 49.403252 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/count/groupBy/key"));
    }
    
    
    @Test
    public void test_186_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/density/groupBy/tag?" + 
                    "bpolys=8.704561%2C49.403252%2C8.7229%2C49.4269%2C8.722%2C49.423%2C8.704%2C49.438%2C8.704561%2C49.403252&" + 
                    "filter=ref%21%3D*+or+not+type%3Away+or+id%3A%281+..+9999%29&" + 
                    "format=geojson&" + 
                    "groupByKey=building&" + 
                    "showMetadata=false&" + 
                    "time=2008-09-14")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.7229 49.4269 ) and LINESTRING ( 8.722 49.423, 8.704 49.438 ) [ (8.720709523381409, 49.42407539718216, NaN) ]"))
                .body("'path'", containsString("/elements/count/density/groupBy/tag"));
    }
    
    
    @Test
    public void test_187_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/ratio?" + 
                    "bpolys=wfHU%3A8.704561%2C49.403252%2C8.746130%2C49.4323%2C8.702%2C49.434%2C8.7044%2C49.435%2C8.704561%2C49.403252&" + 
                    "filter=service%3Ddriveway+and+area%3A%281.0+..+1E6%29&" + 
                    "timeout=97&" + 
                    "types2=line%2Cother")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.74613 49.4323, 8.702 49.434 ) and LINESTRING ( 8.7044 49.435, 8.704561 49.403252 ) [ (8.704405541120035, 49.433907332429094, NaN) ]"))
                .body("'path'", containsString("/elements/area/ratio"));
    }
    
    
    @Test
    public void test_188_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/type?" + 
                    "bpolys=8.704561%2C49.403252%2C8.71167%2C49.404571%2C8.705%2C49.416%2C8.741%2C49.4344%2C8.704561%2C49.403252&" + 
                    "filter=maxspeed%3D*+or+not+geometry%3Aline&" + 
                    "showMetadata=false")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.71167 49.404571, 8.705 49.416 ) and LINESTRING ( 8.741 49.4344, 8.704561 49.403252 ) [ (8.709817499339344, 49.4077452473839, NaN) ]"))
                .body("'path'", containsString("/elements/area/groupBy/type"));
    }
    
    
    @Test
    public void test_189_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/key?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22Cu%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.72241%2C49.401313%5D%2C%5B8.715%2C49.427%5D%2C%5B8.729%2C49.432%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22yI%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.72099%2C49.412%5D%2C%5B8.7044%2C49.4127%5D%2C%5B8.700%2C49.42727%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22IyYrb%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.747%2C49.439%5D%2C%5B8.702%2C49.40382%5D%2C%5B8.703%2C49.436%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "format=csv&" + 
                    "groupByKeys=oneway%2Ctype%2Caddr%3Acity&" + 
                    "keys=highway&" + 
                    "showMetadata=no")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.718064016149103 49.41637849084724, 8.715 49.427 ) and LINESTRING ( 8.729 49.432, 8.711075272142416 49.41091484608823 ) [ (8.717470128457808, 49.418437221363604, NaN) ]"))
                .body("'path'", containsString("/elements/area/groupBy/key"));
    }
    
    
    @Test
    public void test_190_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=fd%3A8.704561%2C49.403252%2C8.7414%2C49.4260%2C8.7043%2C49.431%2C8.702123%2C49.430%2C8.704561%2C49.403252%7Ce%3A8.704561%2C49.403252%2C8.721%2C49.422%2C8.710%2C49.405%2C8.705%2C49.411%2C8.704561%2C49.403252%7CoI%3A8.704561%2C49.403252%2C8.7118%2C49.404%2C8.7290%2C49.43295%2C8.729%2C49.4137%2C8.704561%2C49.403252&" + 
                    "format=csv&" + 
                    "groupByKey=building&" + 
                    "groupByValues=emergency_access_point%2Ccivic&" + 
                    "time=2008-09-09")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.7414 49.426 ) and LINESTRING ( 8.705 49.411, 8.704561 49.403252 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/area/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_191_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density/groupBy/type?" + 
                    "bcircles=8.724%2C49.401%2C3%7C8.741%2C49.423%2C99506751600&" + 
                    "format=geojson&" + 
                    "keys=highway&" + 
                    "timeout=80")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El Ã¡ngulo 103.517.121.664.871.370.000.000.000.000.000.000 es demasiado grande."))
                .body("'path'", containsString("/elements/area/density/groupBy/type"));
    }
    
    
    @Test
    public void test_192_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/ratio/groupBy/boundary?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22Vongs%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.705%2C49.43004%5D%2C%5B8.713%2C49.422454%5D%2C%5B8.7008%2C49.418%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22fKryF%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7343%2C49.431%5D%2C%5B8.724109%2C49.431846%5D%2C%5B8.701626%2C49.4096%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=addr%3Ahousenumber%3D*+or+id%3A%281+..+9999%29&" + 
                    "filter2=type%21%3D*+or+length%3A%28+..+100%29&" + 
                    "format=json&" + 
                    "time=2009-08-29&" + 
                    "types2=relation")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704715121283176 49.41265655793558, 8.705 49.43004 ) and LINESTRING ( 8.713 49.422454, 8.7008 49.418 ) [ (8.704826781252505, 49.4194701052212, NaN) ]"))
                .body("'path'", containsString("/elements/length/ratio/groupBy/boundary"));
    }
    
    
    @Test
    public void test_193_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/boundary?" + 
                    "bpolys=G%3A8.704561%2C49.403252%2C8.736%2C49.43367%2C8.7225%2C49.417481%2C8.70459%2C49.4223%2C8.704561%2C49.403252&" + 
                    "filter=addr%3Apostcode%21%3D*+and+type%3Away+and+length%3A%28+..+100%29&" + 
                    "time=2014-06-04&" + 
                    "timeout=36")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.736 49.43367 ) and LINESTRING ( 8.7225 49.417481, 8.70459 49.4223 ) [ (8.71997093584377, 49.41816148912166, NaN) ]"))
                .body("'path'", containsString("/elements/length/groupBy/boundary"));
    }
    
    
    @Test
    public void test_194_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/boundary?" + 
                    "bpolys=8.704561%2C49.403252%2C8.72433%2C49.4226%2C8.7278%2C49.422%2C8.707%2C49.421808%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.720649%2C49.4053%2C8.732%2C49.4287%2C8.7045%2C49.426%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.732%2C49.40971%2C8.7045%2C49.4269%2C8.736%2C49.419959%2C8.704561%2C49.403252&" + 
                    "filter=lanes%21%3D*&" + 
                    "timeout=29")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.72433 49.4226 ) and LINESTRING ( 8.7278 49.422, 8.707 49.421808 ) [ (8.723678067869644, 49.421961951395716, NaN) ]"))
                .body("'path'", containsString("/elements/area/groupBy/boundary"));
    }
    
    
    @Test
    public void test_195_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density/groupBy/boundary?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22PIxjp%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.748%2C49.414%5D%2C%5B8.7129%2C49.409926%5D%2C%5B8.715%2C49.4010%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "timeout=80")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.748 49.414 ) and LINESTRING ( 8.7129 49.409926, 8.715 49.401 ) [ (8.71392507814277, 49.40556892976078, NaN) ]"))
                .body("'path'", containsString("/elements/area/density/groupBy/boundary"));
    }
    
    
    @Test
    public void test_196_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density?" + 
                    "bpolys=s%3A8.704561%2C49.403252%2C8.735%2C49.432%2C8.746%2C49.4207%2C8.746%2C49.435890%2C8.704561%2C49.403252&" + 
                    "format=csv&" + 
                    "keys=highway&" + 
                    "showMetadata=true&" + 
                    "time=2011-03-03&" + 
                    "timeout=90&" + 
                    "values=crossing")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.735 49.432, 8.746 49.4207 ) and LINESTRING ( 8.746 49.43589, 8.704561 49.403252 ) [ (8.73763033871173, 49.42929792477795, NaN) ]"))
                .body("'path'", containsString("/elements/area/density"));
    }
    
    
    @Test
    public void test_197_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=8.746834%2C49.408%2C8%7C8.743089%2C49.40703%2C5%7C8.7160%2C49.411%2C4%7C8.705379%2C49.421%2C59&" + 
                    "format=geojson&" + 
                    "groupByKey=highway&" + 
                    "keys=highway&" + 
                    "showMetadata=yes&" + 
                    "timeout=31&" + 
                    "values=secondary")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/utils/GroupByBoundaryGeoJsonGenerator_75_generateGroupByResultGeoJson
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Index 0 out of bounds for length 0"))
                .body("'path'", containsString("/elements/count/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_198() throws Exception {
        
        try{
            given().accept("*/*")
                    .get(baseUrlOfSut + "/users/count/density/groupBy/type?" + 
                        "bboxes=DeP%3A8.664%2C49.402677%2C8.724%2C49.391%7CyybIy%3A8.668967%2C49.4139%2C8.7308%2C49.387&" + 
                        "time=%2F%2FP2Y10M20D&" + 
                        "timeout=59")
                    .then();
        } catch(Exception e){
        }
    }
    
    
    @Test
    public void test_199_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/type?bpolys=SM%3A8.704561%2C49.403252%2C8.74286%2C49.4364%2C8.70468%2C49.413%2C8.719%2C49.4243%2C8.704561%2C49.403252")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.74286 49.4364, 8.70468 49.413 ) and LINESTRING ( 8.719 49.4243, 8.704561 49.403252 ) [ (8.716013054978045, 49.41994587444961, NaN) ]"))
                .body("'path'", containsString("/elements/perimeter/groupBy/type"));
    }
    
    
    @Test
    public void test_200_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/density/groupBy/boundary?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22u%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7417%2C49.416%5D%2C%5B8.7113%2C49.42154%5D%2C%5B8.7271%2C49.4328%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=turn%21%3D*+and+area%3A%281.0+..+1E6%29&" + 
                    "format=csv&" + 
                    "showMetadata=no&" + 
                    "time=%2F%2FP1Y5M1D&" + 
                    "values=primary_link")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.7417 49.416, 8.7113 49.42154 ) and LINESTRING ( 8.7271 49.4328, 8.704561 49.403252 ) [ (8.717630901754882, 49.42038627645651, NaN) ]"))
                .body("'path'", containsString("/users/count/density/groupBy/boundary"));
    }
    
    
    @Test
    public void test_201_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/boundary?" + 
                    "bpolys=l%3A8.704561%2C49.403252%2C8.748%2C49.407%2C8.7232%2C49.432%2C8.724%2C49.417435%2C8.704561%2C49.403252%7CS%3A8.704561%2C49.403252%2C8.745%2C49.427%2C8.7390%2C49.421%2C8.706%2C49.403%2C8.704561%2C49.403252&" + 
                    "format=geojson&" + 
                    "keys=highway&" + 
                    "showMetadata=false")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/executor/ExecutionUtils_554_extractContributionTags
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.748 49.407 ) and LINESTRING ( 8.724 49.417435, 8.704561 49.403252 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/users/count/groupBy/boundary"));
    }
    
    
    @Test
    public void test_202_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/ratio?" + 
                    "bpolys=8.704561%2C49.403252%2C8.713%2C49.406054%2C8.7072%2C49.4261%2C8.747%2C49.408%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.742%2C49.4330%2C8.7207%2C49.42254%2C8.702%2C49.417714%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.72368%2C49.433%2C8.701%2C49.422%2C8.722%2C49.429%2C8.704561%2C49.403252&" + 
                    "format=geojson&" + 
                    "keys2=highway&" + 
                    "showMetadata=false&" + 
                    "timeout=36&" + 
                    "types2=way%2C")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.713 49.406054 ) and LINESTRING ( 8.702 49.417714, 8.704561 49.403252 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/perimeter/ratio"));
    }
    
    
    @Test
    public void test_203_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/tag?" + 
                    "bpolys=svWGy%3A8.704561%2C49.403252%2C8.7356%2C49.411%2C8.70511%2C49.401663%2C8.70705%2C49.4014%2C8.704561%2C49.403252%7CtN%3A8.704561%2C49.403252%2C8.734%2C49.400%2C8.7040%2C49.43653%2C8.725%2C49.426%2C8.704561%2C49.403252%7Cpdk%3A8.704561%2C49.403252%2C8.740%2C49.402%2C8.7016%2C49.419866%2C8.7046%2C49.417%2C8.704561%2C49.403252&" + 
                    "format=json&" + 
                    "groupByKey=building&" + 
                    "keys=highway&" + 
                    "time=2017-05-09&" + 
                    "values=secondary")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.7356 49.411 ) and LINESTRING ( 8.70705 49.4014, 8.704561 49.403252 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/perimeter/groupBy/tag"));
    }
    
    
    @Test
    public void test_204_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/tag?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22ohi%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.726%2C49.415471%5D%2C%5B8.71915%2C49.410%5D%2C%5B8.731%2C49.434%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=foot%21%3D*+or+type%3Away+and+id%3A%281+..+9999%29&" + 
                    "groupByKey=building&" + 
                    "groupByValues=path%2Cplatform%2Csecondary_link&" + 
                    "keys=highway&" + 
                    "showMetadata=yes")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.726 49.415471 ) and LINESTRING ( 8.71915 49.41, 8.731 49.434 ) [ (8.720226625791147, 49.41218050793143, NaN) ]"))
                .body("'path'", containsString("/users/count/groupBy/tag"));
    }
    
    
    @Test
    public void test_205() throws Exception {
        
        try{
            given().accept("*/*")
                    .get(baseUrlOfSut + "/users/count/groupBy/key?" + 
                        "bpolys=8.704561%2C49.403252%2C8.7417%2C49.41626%2C8.715%2C49.40663%2C8.749%2C49.407%2C8.704561%2C49.403252&" + 
                        "format=geojson&" + 
                        "groupByKeys=foot%2Clanes&" + 
                        "timeout=38")
                    .then();
        } catch(Exception e){
        }
    }
    
    
    @Test
    public void test_206() throws Exception {
        
        try{
            given().accept("*/*")
                    .post(baseUrlOfSut + "/users/count/groupBy/tag?" + 
                        "bboxes=MwFE%3A8.68953%2C49.418%2C8.71528%2C49.393%7CZpnem%3A8.6902%2C49.4013%2C8.719%2C49.381%7CPDMqD%3A8.676%2C49.4264%2C8.748%2C49.386&" + 
                        "filter=name%3D*+or+geometry%3Apolygon&" + 
                        "groupByKey=building&" + 
                        "showMetadata=true")
                    .then();
        } catch(Exception e){
        }
    }
    
    
    @Test
    public void test_207() throws Exception {
        
        try{
            given().accept("*/*")
                    .post(baseUrlOfSut + "/users/count/groupBy/tag?" + 
                        "bboxes=TBZl%3A8.673%2C49.414174%2C8.7208%2C49.390&" + 
                        "format=json&" + 
                        "groupByKey=building&" + 
                        "groupByValues=roof%2Ctraffic_signals%2Cservice&" + 
                        "showMetadata=no")
                    .then();
        } catch(Exception e){
        }
    }
    
    
    @Test
    public void test_208_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/groupBy/type?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22V%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.720%2C49.410%5D%2C%5B8.74480%2C49.405%5D%2C%5B8.718%2C49.434%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22MYh%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7146%2C49.43612%5D%2C%5B8.7200%2C49.401%5D%2C%5B8.707%2C49.439%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "keys=highway&" + 
                    "time=2018-04-22&" + 
                    "timeout=77&" + 
                    "values=traffic_signals")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.7146 49.43612 ) and LINESTRING ( 8.712789174280486 49.42207779825704, 8.707 49.439 ) [ (8.711479934319692, 49.42590480737321, NaN) ]"))
                .body("'path'", containsString("/users/count/groupBy/type"));
    }
    
    
    @Test
    public void test_209_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/type?" + 
                    "bpolys=l%3A8.704561%2C49.403252%2C8.745%2C49.437266%2C8.726%2C49.424%2C8.702873%2C49.412%2C8.704561%2C49.403252%7Cagd%3A8.704561%2C49.403252%2C8.7474%2C49.4041%2C8.7045%2C49.4190%2C8.70720%2C49.410%2C8.704561%2C49.403252&" + 
                    "format=json&" + 
                    "keys=highway&" + 
                    "values=street_lamp")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.745 49.437266 ) and LINESTRING ( 8.704561 49.403252, 8.7474 49.4041 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/users/count/groupBy/type"));
    }
    
    
    @Test
    public void test_210_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/type?bcircles=8.723%2C49.406%2C49%7C8.701%2C49.403%2C5%7C8.7218%2C49.430%2C5%7C8.7117%2C49.400%2C253417029")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El Ã¡ngulo 182.287.066.954.114 es demasiado grande."))
                .body("'path'", containsString("/users/count/groupBy/type"));
    }
    
    
    @Test
    public void test_211() throws Exception {
        
        given().accept("text/csv")
                .get(baseUrlOfSut + "/users/count/groupBy/key?" + 
                    "bcircles=8.7353%2C49.439%2C6%7C8.7401%2C49.411%2C4&" + 
                    "format=csv&" + 
                    "groupByKeys=addr%3Astreet%2Ctracktype&" + 
                    "keys=highway&" + 
                    "time=%2F%2FP1Y10M9D&" + 
                    "timeout=38&" + 
                    "values=tertiary")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_212() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/groupBy/boundary?" + 
                    "bcircles=8.721%2C49.4075%2C1&" + 
                    "keys=highway&" + 
                    "timeout=28&" + 
                    "values=primary_link")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_213() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/density/groupBy/type?" + 
                    "bboxes=hB%3A8.659%2C49.4280%2C8.7356%2C49.393&" + 
                    "keys=highway&" + 
                    "showMetadata=yes&" + 
                    "time=%2F%2FP3Y5M28D&" + 
                    "timeout=40")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(433.0))
                .body("'metadata'.'description'", containsString("Density of distinct active users per time interval (number of users per square-kilometer) aggregated on the type."));
    }
    
    
    @Test
    public void test_214() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/density/groupBy/tag?" + 
                    "bcircles=cq%3A8.746%2C49.4378%2C7&" + 
                    "groupByKey=building&" + 
                    "keys=highway&" + 
                    "time=%2F%2FP2Y4M28D&" + 
                    "timeout=62&" + 
                    "values=primary_link")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'groupByResult'", hasItems());
    }
    
    
    @Test
    public void test_215() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/density/groupBy/tag?" + 
                    "bcircles=8.749%2C49.425%2C1&" + 
                    "format=geojson&" + 
                    "groupByKey=building&" + 
                    "groupByValues=give_way%2Ccycleway&" + 
                    "keys=highway&" + 
                    "showMetadata=true&" + 
                    "timeout=64")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(324.0))
                .body("'metadata'.'description'", containsString("Density of distinct active users per time interval (number of users per square-kilometer) aggregated on the tag."));
    }
    
    
    @Test
    public void test_216() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/density?" + 
                    "bcircles=8.7196%2C49.415%2C759%7C8.7188%2C49.4177%2C3&" + 
                    "keys=highway&" + 
                    "timeout=92")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_217() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count?" + 
                    "bcircles=ZA%3A8.7203%2C49.403%2C2&" + 
                    "keys=highway&" + 
                    "showMetadata=no&" + 
                    "time=%2F%2FP2Y10M22D&" + 
                    "timeout=93&" + 
                    "values=primary")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_218() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/groupBy/tag?" + 
                    "bcircles=GeaJ%3A8.740%2C49.414947%2C5&" + 
                    "groupByKey=building&" + 
                    "groupByValues=street_lamp%2Cgive_way%2Cchurch&" + 
                    "keys=highway&" + 
                    "showMetadata=false&" + 
                    "time=2015-02-09&" + 
                    "timeout=39&" + 
                    "values=secondary_link")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_219() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/groupBy/key?" + 
                    "bcircles=O%3A8.725%2C49.432%2C4%7Cdbj%3A8.71326%2C49.431%2C80%7CPiVVW%3A8.738186%2C49.438%2C341&" + 
                    "groupByKeys=foot%2Cnetwork%2Coneway&" + 
                    "keys=highway&" + 
                    "showMetadata=no&" + 
                    "time=2011-10-28&" + 
                    "timeout=54&" + 
                    "values=steps")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_220() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/density/groupBy/tag?" + 
                    "bcircles=Eze%3A8.734%2C49.413%2C2&" + 
                    "groupByKey=building&" + 
                    "keys=highway&" + 
                    "time=2009-03-16&" + 
                    "timeout=39")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'groupByResult'", hasItems());
    }
    
    
    @Test
    public void test_221() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/density/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=zI%3A8.713%2C49.439%2C74&" + 
                    "format=geojson&" + 
                    "groupByKey=building&" + 
                    "groupByValues=street_lamp%2Cresidential&" + 
                    "time=2016-02-07&" + 
                    "timeout=22")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'type'", containsString("FeatureCollection"));
    }
    
    
    @Test
    public void test_222() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/density/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=8.7222%2C49.4232%2C5%7C8.700%2C49.433623%2C83%7C8.7447%2C49.405%2C3%7C8.72550%2C49.422%2C23&" + 
                    "filter=highway%21%3D*+and+length%3A%28+..+100%29&" + 
                    "format=geojson&" + 
                    "groupByKey=building&" + 
                    "groupByValues=hut%2Cpedestrian&" + 
                    "showMetadata=true&" + 
                    "time=2011-11-16&" + 
                    "timeout=85")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(591.0))
                .body("'metadata'.'description'", containsString("Density of selected items (perimeter of items in meters divided by the area in square kilometers), aggregated on the boundary and on the tag."))
                .body("'type'", containsString("FeatureCollection"));
    }
    
    
    @Test
    public void test_223() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/density/groupBy/boundary?" + 
                    "bcircles=N%3A8.712%2C49.421%2C9%7CoOSGi%3A8.727%2C49.41306%2C78%7Cd%3A8.749%2C49.435%2C1%7Cf%3A8.737832%2C49.423%2C93&" + 
                    "keys=highway&" + 
                    "time=2014-11-08&" + 
                    "timeout=77&" + 
                    "values=elevator")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_224() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/density?" + 
                    "bcircles=8.73161%2C49.424%2C3%7C8.720%2C49.4394%2C50&" + 
                    "filter=highway%21%3D*+or+type%3Anode&" + 
                    "time=2014-01-09&" + 
                    "timeout=57")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_225() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter?" + 
                    "bcircles=Puccn%3A8.701%2C49.405%2C75&" + 
                    "keys=highway&" + 
                    "showMetadata=yes&" + 
                    "time=2016-09-07")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(232.0))
                .body("'metadata'.'description'", containsString("Total perimeter of items in meters."));
    }
    
    
    @Test
    public void test_226() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter?" + 
                    "bcircles=XyRVu%3A8.7425%2C49.439%2C35%7CFRNBP%3A8.716%2C49.42772%2C3&" + 
                    "format=json&" + 
                    "time=2013-01-31&" + 
                    "timeout=28")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_227() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/ratio?" + 
                    "bcircles=J%3A8.7071%2C49.426%2C4&" + 
                    "filter2=lanes%21%3D*+or+id%3A%281+..+9999%29&" + 
                    "keys=highway&" + 
                    "showMetadata=false&" + 
                    "time=2010-06-30&" + 
                    "timeout=63&" + 
                    "types2=point%2Cpolygon%2Cother")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_228() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/groupBy/type?" + 
                    "bcircles=Iytwz%3A8.7466%2C49.423%2C46&" + 
                    "showMetadata=no&" + 
                    "time=2012-05-02&" + 
                    "timeout=71")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_229() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/tag?" + 
                    "bcircles=L%3A8.70954%2C49.42015%2C1&" + 
                    "format=geojson&" + 
                    "groupByKey=highway&" + 
                    "showMetadata=no&" + 
                    "time=2014-12-10")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_230() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/groupBy/tag?" + 
                    "bcircles=Ju%3A8.7296%2C49.41038%2C4&" + 
                    "format=geojson&" + 
                    "groupByKey=building&" + 
                    "showMetadata=false&" + 
                    "time=2012-10-22&" + 
                    "timeout=37")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_231() throws Exception {
        
        given().accept("text/csv")
                .get(baseUrlOfSut + "/elements/length/groupBy/key?" + 
                    "bcircles=8.7358%2C49.423%2C6&" + 
                    "format=csv&" + 
                    "groupByKeys=landuse%2Csource%3Amaxspeed%2Cturn&" + 
                    "keys=highway&" + 
                    "time=2015-12-01&" + 
                    "timeout=63&" + 
                    "values=stop_line")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_232() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=k%3A8.713042%2C49.430%2C60%7CC%3A8.712%2C49.412%2C436&" + 
                    "format=json&" + 
                    "groupByKey=building&" + 
                    "groupByValues=office%2Cdormitory%2Cbus_stop&" + 
                    "showMetadata=true&" + 
                    "time=2017-11-17&" + 
                    "timeout=27")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(740.0))
                .body("'metadata'.'description'", containsString("Total length of items in meters, aggregated on the boundary and on the tag."));
    }
    
    
    @Test
    public void test_233() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/groupBy/boundary?" + 
                    "bcircles=dzD%3A8.73881%2C49.42683%2C41&" + 
                    "showMetadata=true&" + 
                    "time=2015-12-10&" + 
                    "timeout=62")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(431.0))
                .body("'metadata'.'description'", containsString("Total length of items in meters."));
    }
    
    
    @Test
    public void test_234() throws Exception {
        
        given().accept("text/csv")
                .post(baseUrlOfSut + "/elements/length/density/groupBy/type?" + 
                    "bcircles=sYDD%3A8.704%2C49.407%2C758&" + 
                    "format=csv&" + 
                    "keys=highway&" + 
                    "showMetadata=no&" + 
                    "time=2016-02-20&" + 
                    "timeout=39&" + 
                    "values=track")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_235() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/density/groupBy/type?" + 
                    "bcircles=D%3A8.727%2C49.4006%2C1%7CZdZJk%3A8.700%2C49.4390%2C6%7CChPg%3A8.716%2C49.408%2C8&" + 
                    "keys=highway&" + 
                    "time=2012-09-25&" + 
                    "timeout=38&" + 
                    "values=service")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_236() throws Exception {
        
        given().accept("text/csv")
                .post(baseUrlOfSut + "/elements/length/density/groupBy/tag?" + 
                    "bcircles=8.730%2C49.420%2C4%7C8.7286%2C49.43295%2C3&" + 
                    "filter=barrier%21%3D*+or+geometry%3Aline+or+not+id%3A%281+..+9999%29&" + 
                    "format=csv&" + 
                    "groupByKey=highway&" + 
                    "time=2016-05-25")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_237() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/density/groupBy/tag?" + 
                    "bcircles=uR%3A8.729%2C49.404%2C46&" + 
                    "format=json&" + 
                    "groupByKey=highway&" + 
                    "keys=highway&" + 
                    "time=2016-09-15&" + 
                    "timeout=38&" + 
                    "values=secondary")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'groupByResult'", hasItems());
    }
    
    
    @Test
    public void test_238() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/density/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=D%3A8.714%2C49.419142%2C6&" + 
                    "groupByKey=building&" + 
                    "keys=highway&" + 
                    "showMetadata=yes&" + 
                    "time=2011-01-24&" + 
                    "values=crossing")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(241.0))
                .body("'metadata'.'description'", containsString("Density of selected items (length of items in meters divided by the area in square kilometers), aggregated on the boundary and on the tag."))
                .body("'groupByResult'", hasItems());
    }
    
    
    @Test
    public void test_239() throws Exception {
        
        given().accept("text/csv")
                .get(baseUrlOfSut + "/elements/length/density/groupBy/boundary?" + 
                    "bcircles=8.7201%2C49.40859%2C5%7C8.71013%2C49.4368%2C9%7C8.732%2C49.406%2C2&" + 
                    "format=csv&" + 
                    "keys=highway&" + 
                    "time=2013-10-14&" + 
                    "values=living_street")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_240() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/density?" + 
                    "bcircles=ACHj%3A8.725520%2C49.430205%2C51&" + 
                    "showMetadata=yes&" + 
                    "timeout=99")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(419.0))
                .body("'metadata'.'description'", containsString("Density of selected items (length of items in meters divided by the area in square kilometers)."));
    }
    
    
    @Test
    public void test_241() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length?" + 
                    "bcircles=Zrr%3A8.7084%2C49.409%2C3%7CKTAG%3A8.725%2C49.40673%2C91&" + 
                    "format=geojson&" + 
                    "keys=highway&" + 
                    "showMetadata=no&" + 
                    "time=2014-12-20&" + 
                    "timeout=68&" + 
                    "values=emergency_access_point")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_242() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/ratio/groupBy/boundary?" + 
                    "bboxes=cFst%3A8.666%2C49.41672%2C8.708%2C49.3932&" + 
                    "filter2=highway+in+%28secondary%2Cpath%2Cunclassified%2Ctrack%2Cprimary%2Cresidential%2Ccycleway%2Cservice%2Cfootway%29+and+length%3A%28+..+100%29&" + 
                    "format=json&" + 
                    "keys=highway&" + 
                    "keys2=highway&" + 
                    "time=2012-10-31&" + 
                    "types2=line%2C&" + 
                    "values2=turning_circle")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_243() throws Exception {
        
        given().accept("text/csv")
                .get(baseUrlOfSut + "/elements/count/ratio?" + 
                    "bcircles=yxD%3A8.7223%2C49.413%2C64&" + 
                    "format=csv&" + 
                    "keys=highway&" + 
                    "keys2=highway&" + 
                    "showMetadata=yes&" + 
                    "time=2013-01-29&" + 
                    "types2=point%2Cother&" + 
                    "values=street_lamp")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_244() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/type?" + 
                    "bcircles=8.74501%2C49.404447%2C1%7C8.745%2C49.413%2C5&" + 
                    "format=json&" + 
                    "keys=highway&" + 
                    "time=2008-01-31&" + 
                    "timeout=29")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_245() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/groupBy/type?" + 
                    "bcircles=R%3A8.7272%2C49.42328%2C6&" + 
                    "format=geojson&" + 
                    "keys=highway&" + 
                    "time=2010-11-17&" + 
                    "timeout=56&" + 
                    "values=street_lamp")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_246() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/tag?" + 
                    "bcircles=vj%3A8.7273%2C49.420%2C6&" + 
                    "format=json&" + 
                    "groupByKey=building&" + 
                    "groupByValues=residential%2Chotel%2Cbus_stop&" + 
                    "showMetadata=no&" + 
                    "time=2008-06-11")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_247() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/groupBy/tag?" + 
                    "bcircles=tn%3A8.748%2C49.428%2C3%7Cvtq%3A8.711062%2C49.4367%2C73%7CS%3A8.712%2C49.401%2C6&" + 
                    "filter=addr%3Apostcode%3D*+or+id%3A%281+..+9999%29&" + 
                    "format=json&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=university%2Cemergency_access_point%2Cprimary_link&" + 
                    "showMetadata=no")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_248() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/key?" + 
                    "bboxes=J%3A8.664%2C49.418%2C8.753%2C49.394&" + 
                    "groupByKeys=sidewalk%2Clanes%3Abackward%2Cturn&" + 
                    "keys=highway&" + 
                    "time=2016-03-30")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_249() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/groupBy/key?" + 
                    "bcircles=qrd%3A8.7466%2C49.422%2C65&" + 
                    "groupByKeys=sidewalk%2Cmaxspeed%2Clanes%3Aforward&" + 
                    "showMetadata=yes&" + 
                    "time=2016-01-28")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(469.0))
                .body("'metadata'.'description'", containsString("Total count of items in absolute values, aggregated on the key."));
    }
    
    
    @Test
    public void test_250() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=vLqNB%3A8.706%2C49.415%2C9%7CULNIu%3A8.7245%2C49.422794%2C64&" + 
                    "groupByKey=building&" + 
                    "timeout=73")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_251() throws Exception {
        
        given().accept("text/csv")
                .get(baseUrlOfSut + "/elements/count/groupBy/boundary?" + 
                    "bcircles=D%3A8.712%2C49.406%2C794%7CcIEW%3A8.734145%2C49.419%2C5&" + 
                    "filter=ref%3D*+and+geometry%3Apolygon&" + 
                    "format=csv&" + 
                    "showMetadata=no&" + 
                    "time=2008-04-17&" + 
                    "timeout=87")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_252() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/density/groupBy/type?" + 
                    "bcircles=Smgm%3A8.7048%2C49.4295%2C2&" + 
                    "keys=highway&" + 
                    "showMetadata=false&" + 
                    "time=2010-03-14&" + 
                    "values=bus_stop")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_253() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/density/groupBy/type?" + 
                    "bcircles=8.700557%2C49.4334%2C6%7C8.737%2C49.43571%2C6%7C8.744%2C49.40530%2C2&" + 
                    "keys=highway&" + 
                    "time=2009-03-20&" + 
                    "timeout=62")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_254() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/density/groupBy/tag?" + 
                    "bboxes=J%3A8.665907%2C49.42016%2C8.7058%2C49.382&" + 
                    "filter=destination%3D*+or+geometry%3Apoint+and+not+area%3A%281.0+..+1E6%29&" + 
                    "format=json&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=civic%2Cdormitory%2Ctertiary&" + 
                    "showMetadata=no&" + 
                    "time=2014-05-05&" + 
                    "timeout=67")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_255() throws Exception {
        
        given().accept("text/csv")
                .get(baseUrlOfSut + "/elements/count/density/groupBy/tag?" + 
                    "bcircles=ZuycY%3A8.7485%2C49.403%2C6&" + 
                    "filter=highway+in+%28secondary%2Cpath%2Cunclassified%2Ctrack%2Cprimary%2Cresidential%2Ccycleway%2Cservice%2Cfootway%29+and+id%3A%281+..+9999%29&" + 
                    "format=csv&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=chapel%2Cuniversity&" + 
                    "time=2009-07-01&" + 
                    "timeout=79")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_256() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/density/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=8.703%2C49.432%2C596&" + 
                    "groupByKey=building&" + 
                    "groupByValues=civic%2Cresidential&" + 
                    "keys=highway&" + 
                    "time=2012-09-27&" + 
                    "timeout=61")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_257() throws Exception {
        
        given().accept("text/csv")
                .post(baseUrlOfSut + "/elements/count/density/groupBy/boundary?" + 
                    "bcircles=wyssl%3A8.718%2C49.429148%2C8&" + 
                    "format=csv&" + 
                    "time=2018-01-12")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_258() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/density/groupBy/boundary?" + 
                    "bcircles=pkqg%3A8.72829%2C49.407123%2C81&" + 
                    "format=json&" + 
                    "keys=highway&" + 
                    "time=2012-06-12&" + 
                    "timeout=69&" + 
                    "values=traffic_signals")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_259() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/density?" + 
                    "bcircles=8.710%2C49.430%2C97%7C8.7161%2C49.428%2C224&" + 
                    "keys=highway&" + 
                    "time=2016-06-24")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_260() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/density?" + 
                    "bcircles=8.7446%2C49.42041%2C28%7C8.7045%2C49.4278%2C3%7C8.707%2C49.423%2C5%7C8.704252%2C49.401835%2C88&" + 
                    "filter=lit%3D*+and+length%3A%28+..+100%29&" + 
                    "showMetadata=true&" + 
                    "time=2011-01-06")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(226.0))
                .body("'metadata'.'description'", containsString("Density of selected items (count of items in absolute values divided by the area in square kilometers)."));
    }
    
    
    @Test
    public void test_261() throws Exception {
        
        given().accept("text/csv")
                .post(baseUrlOfSut + "/elements/count?" + 
                    "bcircles=o%3A8.747%2C49.405716%2C73%7CC%3A8.711%2C49.409585%2C1&" + 
                    "format=csv&" + 
                    "showMetadata=yes&" + 
                    "time=2008-08-09")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_262() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count?" + 
                    "bcircles=8.7116%2C49.410%2C118%7C8.7111%2C49.40399%2C55%7C8.744%2C49.42510%2C4%7C8.725%2C49.411%2C940&" + 
                    "keys=highway&" + 
                    "showMetadata=yes&" + 
                    "time=2017-03-12&" + 
                    "timeout=94")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(241.0))
                .body("'metadata'.'description'", containsString("Total count of items in absolute values."));
    }
    
    
    @Test
    public void test_263() throws Exception {
        
        given().accept("text/csv")
                .get(baseUrlOfSut + "/elements/area/ratio/groupBy/boundary?" + 
                    "bcircles=8.73663%2C49.413034%2C86&" + 
                    "filter=name%3D*&" + 
                    "filter2=foot%21%3D*+or+type%3Anode+or+area%3A%281.0+..+1E6%29&" + 
                    "format=csv&" + 
                    "keys2=highway&" + 
                    "showMetadata=true&" + 
                    "timeout=23&" + 
                    "types2=point%2Cline%2Cother&" + 
                    "values2=secondary_link")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_264() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/ratio?" + 
                    "bcircles=L%3A8.715%2C49.435%2C46&" + 
                    "filter=foot%3D*+or+type%3Arelation+and+length%3A%28+..+100%29&" + 
                    "filter2=foot%3D*+or+id%3A%281+..+9999%29&" + 
                    "keys2=highway&" + 
                    "showMetadata=true&" + 
                    "time=2010-03-08&" + 
                    "types2=node%2Cway%2C&" + 
                    "values2=secondary_link")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(386.0))
                .body("'metadata'.'description'", containsString("Total area of items in square meters satisfying types2, keys2, values2 parameters (= value2 output), as well as items selected by types, keys, values parameters (= value output) and ratio of value2:value."));
    }
    
    
    @Test
    public void test_265() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/type?" + 
                    "bcircles=GrAM%3A8.7141%2C49.4201%2C98&" + 
                    "format=json&" + 
                    "keys=highway&" + 
                    "time=2017-03-27&" + 
                    "timeout=20&" + 
                    "values=footway")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_266() throws Exception {
        
        given().accept("text/csv")
                .get(baseUrlOfSut + "/elements/area/groupBy/tag?" + 
                    "bcircles=8.72022%2C49.426%2C506&" + 
                    "format=csv&" + 
                    "groupByKey=highway&" + 
                    "showMetadata=no&" + 
                    "time=2016-02-03")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_267() throws Exception {
        
        given().accept("text/csv")
                .post(baseUrlOfSut + "/elements/area/groupBy/key?" + 
                    "bcircles=LV%3A40%3A.3%2C79.416%2C7&" + 
                    "format=cSv&" + 
                    "groupByKeys=UvsuawresU23V44_inpv&" + 
                    "keys=_sV&" + 
                    "showMetadata=")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_268() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/key?" + 
                    "bboxes=Qnhxu%3A8.6560%2C49.405%2C8.749%2C49.398%7Cojfk%3A8.69179%2C49.4108%2C8.7454%2C49.382%7CyF%3A8.689%2C49.416%2C8.7320%2C49.39206&" + 
                    "filter=lit%3D*&" + 
                    "groupByKeys=network%2Clanes%3Abackward&" + 
                    "showMetadata=true&" + 
                    "time=2012-02-20&" + 
                    "timeout=41")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(258.0))
                .body("'metadata'.'description'", containsString("Total area of items in square meters, aggregated on the key."));
    }
    
    
    @Test
    public void test_269() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=Tip%3A8.727%2C49.419%2C7%7CDNWPf%3A8.7138%2C49.4164%2C5&" + 
                    "format=json&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=civic%2Cschool%2Csecondary_link&" + 
                    "showMetadata=true&" + 
                    "time=2018-03-21")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(627.0))
                .body("'metadata'.'description'", containsString("Total area of items in square meters, aggregated on the boundary and on the tag."));
    }
    
    
    @Test
    public void test_270() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=DA%3A8.722%2C49.405%2C4&" + 
                    "groupByKey=foo&" + 
                    "groupByValues=tertiary%2Cuniversity&" + 
                    "keys=highway&" + 
                    "showMetadata=true&" + 
                    "time=2016-03-02&" + 
                    "values=stop_line")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(212.0))
                .body("'metadata'.'description'", containsString("Total area of items in square meters, aggregated on the boundary and on the tag."));
    }
    
    
    @Test
    public void test_271() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/boundary?" + 
                    "bcircles=8.702351%2C49.4112%2C6&" + 
                    "format=geojson&" + 
                    "keys=highway&" + 
                    "timeout=80")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'type'", containsString("FeatureCollection"));
    }
    
    
    @Test
    public void test_272() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density/groupBy/type?" + 
                    "bcircles=HV%3A8.708266%2C49.415%2C7&" + 
                    "format=json&" + 
                    "keys=highway&" + 
                    "time=2011-03-04&" + 
                    "timeout=52")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_273() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/density/groupBy/type?" + 
                    "bcircles=8.735240%2C49.4151%2C5&" + 
                    "keys=highway&" + 
                    "showMetadata=no&" + 
                    "time=2008-07-19&" + 
                    "values=platform")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_274() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density/groupBy/tag?" + 
                    "bcircles=WmA%3A8.743%2C49.4142%2C9%7CCFctP%3A8.7113%2C49.435%2C5%7CbxIp%3A8.704%2C49.409%2C66%7CO%3A8.737%2C49.408968%2C3&" + 
                    "groupByKey=building&" + 
                    "keys=highway&" + 
                    "time=2009-10-10&" + 
                    "values=service")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'groupByResult'", hasItems());
    }
    
    
    @Test
    public void test_275() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/density/groupBy/tag?" + 
                    "bcircles=QJ%3A8.72828%2C49.405%2C17&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=service%2Ctertiary%2Ctraffic_mirror&" + 
                    "keys=highway&" + 
                    "showMetadata=true&" + 
                    "time=2007-12-10")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(239.0))
                .body("'metadata'.'description'", containsString("Density of selected items (area of items in square meters divided by the area in square kilometers), aggregated on the tag."));
    }
    
    
    @Test
    public void test_276() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=a%3A8.705%2C49.406769%2C5&" + 
                    "filter=oneway%21%3D*&" + 
                    "format=json&" + 
                    "groupByKey=building&" + 
                    "groupByValues=stop_line%2Cprimary&" + 
                    "showMetadata=false&" + 
                    "time=2012-05-15&" + 
                    "timeout=56")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_277() throws Exception {
        
        given().accept("text/csv")
                .get(baseUrlOfSut + "/elements/area/density/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=LNfSR%3A8.7318%2C49.4040%2C35&" + 
                    "format=csv&" + 
                    "groupByKey=highway&" + 
                    "keys=highway&" + 
                    "showMetadata=false&" + 
                    "time=2013-07-14&" + 
                    "timeout=42&" + 
                    "values=turning_circle")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_278() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density/groupBy/boundary?" + 
                    "bcircles=SGn%3A8.721%2C49.430%2C7%7CylZ%3A8.745871%2C49.427%2C5&" + 
                    "format=json&" + 
                    "keys=highway&" + 
                    "time=2010-08-25")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_279() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/density/groupBy/boundary?" + 
                    "bcircles=wkJ%3A8.7330%2C49.439%2C733&" + 
                    "keys=highway&" + 
                    "time=2011-04-18&" + 
                    "timeout=32&" + 
                    "values=street_lamp")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_280() throws Exception {
        
        given().accept("text/csv")
                .get(baseUrlOfSut + "/elements/area/density?" + 
                    "bcircles=JVVBU%3A8.7204%2C49.407%2C7&" + 
                    "filter=ref%21%3D*+or+not+area%3A%281.0+..+1E6%29&" + 
                    "format=csv&" + 
                    "time=2015-02-18&" + 
                    "timeout=68")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_281() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/density/groupBy/tag?" + 
                    "bboxes=8.692411%2C49.410%2C8.750%2C49.399&" + 
                    "filter=oneway%21%3D*+and+type%3Away+or+id%3A%281+..+9999%29&" + 
                    "groupByKey=building&" + 
                    "showMetadata=true&" + 
                    "time=%2F%2FP1Y10M16D&" + 
                    "timeout=56")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(1692.0))
                .body("'metadata'.'description'", containsString("Density of distinct active users per time interval (number of users per square-kilometer) aggregated on the tag."));
    }
    
    
    @Test
    public void test_282() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/density/groupBy/boundary?" + 
                    "bpolys=Y%3A8.704561%2C49.403252%2C8.704%2C49.418%2C8.727%2C49.432%2C8.714343%2C49.416%2C8.704561%2C49.403252&" + 
                    "format=geojson&" + 
                    "keys=highway&" + 
                    "showMetadata=yes")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(278.0))
                .body("'metadata'.'description'", containsString("Density of distinct active users per time interval (number of users per square-kilometer) aggregated on the boundary."))
                .body("'type'", containsString("FeatureCollection"));
    }
    
    
    @Test
    public void test_283() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/ratio?" + 
                    "bcircles=Zwv%3A8.700%2C49.400%2C61&" + 
                    "format=json&" + 
                    "keys=highway&" + 
                    "keys2=highway&" + 
                    "time=2017-05-17&" + 
                    "types2=way%2C&" + 
                    "values=stop")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_284() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/ratio?" + 
                    "bcircles=bkwfr%3A8.7340%2C49.43182%2C92%7CzY%3A8.72429%2C49.404%2C3&" + 
                    "format=json&" + 
                    "keys=highway&" + 
                    "timeout=76&" + 
                    "types2=point%2Cline%2Cother&" + 
                    "values=secondary_link")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_285() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/ratio?" + 
                    "bcircles=8.734195%2C49.434%2C7&" + 
                    "keys=highway&" + 
                    "showMetadata=yes&" + 
                    "time=2017-11-16&" + 
                    "timeout=27&" + 
                    "types2=line%2Cpolygon%2C")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(428.0))
                .body("'metadata'.'description'", containsString("Total perimeter of items in meters satisfying types2, keys2, values2 parameters (= value2 output), as well as items selected by types, keys, values parameters (= value output) and ratio of value2:value."));
    }
    
    
    @Test
    public void test_286() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/ratio?" + 
                    "bcircles=8.7031%2C49.422241%2C92%7C8.7487%2C49.420%2C4&" + 
                    "filter2=smoothness%3D*+and+geometry%3Aline+and+length%3A%28+..+100%29&" + 
                    "keys2=highway&" + 
                    "showMetadata=yes&" + 
                    "time=2009-12-22&" + 
                    "values2=secondary")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(588.0))
                .body("'metadata'.'description'", containsString("Total perimeter of items in meters satisfying types2, keys2, values2 parameters (= value2 output), as well as items selected by types, keys, values parameters (= value output) and ratio of value2:value."));
    }
    
    
    @Test
    public void test_287() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/boundary/groupBy/tag?" + 
                    "bboxes=X%3A8.653%2C49.4070%2C8.71080%2C49.3873&" + 
                    "filter=lit%3D*+and+not+length%3A%28+..+100%29&" + 
                    "groupByKey=foo&" + 
                    "groupByValues=unclassified")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_288() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/density/groupBy/type?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22lrN%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.70441%2C49.413%5D%2C%5B8.70084%2C49.4331%5D%2C%5B8.713%2C49.40551%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "format=json&" + 
                    "keys=highway&" + 
                    "showMetadata=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(249.0))
                .body("'metadata'.'description'", containsString("Density of selected items (perimeter of items in meters divided by the area in square kilometers), aggregated on the type."));
    }
    
    
    @Test
    public void test_289() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/density/groupBy/tag?" + 
                    "bboxes=T%3A8.65587%2C49.407%2C8.710%2C49.393%7CI%3A8.653%2C49.424467%2C8.75988%2C49.381%7CRCFed%3A8.6733%2C49.420%2C8.7223%2C49.3839%7Cf%3A8.66178%2C49.429%2C8.711%2C49.398063&" + 
                    "groupByKey=highway&" + 
                    "keys=highway&" + 
                    "showMetadata=true&" + 
                    "time=2015-10-05&" + 
                    "timeout=64")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(344.0))
                .body("'metadata'.'description'", containsString("Density of selected items (perimeter of items in meters divided by the area in square kilometers), aggregated on the tag."));
    }
    
    
    @Test
    public void test_290() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/density/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=Z%3A8.728013%2C49.429%2C8&" + 
                    "format=json&" + 
                    "groupByKey=building&" + 
                    "groupByValues=pedestrian%2Ccycleway%2Cdemolished&" + 
                    "keys=highway&" + 
                    "showMetadata=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(222.0))
                .body("'metadata'.'description'", containsString("Density of selected items (perimeter of items in meters divided by the area in square kilometers), aggregated on the boundary and on the tag."));
    }
    
    
    @Test
    public void test_291() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density/groupBy/boundary/groupBy/tag?" + 
                    "bboxes=e%3A8.65414%2C49.4062%2C8.7536%2C49.395&" + 
                    "groupByKey=building&" + 
                    "showMetadata=false&" + 
                    "timeout=59")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_292() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/key?" + 
                    "bboxes=8.666%2C49.425%2C8.732%2C49.388%7C8.657%2C49.415%2C8.709%2C49.387&" + 
                    "format=json&" + 
                    "groupByKeys=addr%3Astreet%2Csource%3Amaxspeed%2Cname&" + 
                    "keys=highway&" + 
                    "showMetadata=yes&" + 
                    "timeout=70&" + 
                    "values=bus_stop")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(309.0))
                .body("'metadata'.'description'", containsString("Total count of items in absolute values, aggregated on the key."));
    }
    
    
    @Test
    public void test_293() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=QZz%3A8.730%2C49.425%2C7&" + 
                    "filter=ref%21%3D*+or+not+area%3A%281.0+..+1E6%29&" + 
                    "groupByKey=highway&" + 
                    "time=2017-04-17")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_294() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/density/groupBy/tag?" + 
                    "bboxes=P%3A8.657963%2C49.40881%2C8.7245%2C49.381%7Czma%3A8.668%2C49.4133%2C8.74633%2C49.394&" + 
                    "filter=bicycle%3D*+and+geometry%3Apolygon&" + 
                    "format=json&" + 
                    "groupByKey=building&" + 
                    "groupByValues=chapel%2Cschool%2Celevator&" + 
                    "showMetadata=true&" + 
                    "time=2010-11-02")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(255.0))
                .body("'metadata'.'description'", containsString("Density of selected items (count of items in absolute values divided by the area in square kilometers), aggregated on the tag."));
    }
    
    
    @Test
    public void test_295() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/type?" + 
                    "bcircles=KGSJL%3A8.7039%2C49.412%2C33&" + 
                    "filter=tracktype%21%3D*&" + 
                    "showMetadata=yes&" + 
                    "time=2015-01-30")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(593.0))
                .body("'metadata'.'description'", containsString("Total area of items in square meters, aggregated on the type."));
    }
    
    
    @Test
    public void test_296() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/key?" + 
                    "bboxes=8.689%2C49.410%2C8.7367%2C49.396%7C8.686%2C49.4268%2C8.7342%2C49.399&" + 
                    "format=json&" + 
                    "groupByKeys=maxspeed%2Clanes%3Abackward%2Cref&" + 
                    "keys=highway&" + 
                    "time=2014-03-05")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_297() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density/groupBy/type?" + 
                    "bboxes=8.674%2C49.406%2C8.723%2C49.390%7C8.695%2C49.41276%2C8.744%2C49.393&" + 
                    "showMetadata=no&" + 
                    "timeout=76")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_298() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density/groupBy/boundary?" + 
                    "bpolys=8.704561%2C49.403252%2C8.7248%2C49.43495%2C8.729%2C49.429%2C8.74647%2C49.420%2C8.704561%2C49.403252&" + 
                    "showMetadata=true&" + 
                    "time=2009-10-11&" + 
                    "timeout=96")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(675.0))
                .body("'metadata'.'description'", containsString("Density of selected items (area of items in square meters divided by the area in square kilometers)."));
    }
    
    
    @Test
    public void test_299() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area?" + 
                    "bboxes=w%3A8.678539%2C49.41391%2C8.728%2C49.3956&" + 
                    "format=geojson&" + 
                    "showMetadata=no&" + 
                    "timeout=50&" + 
                    "types=polygon%2Cother")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_300() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22fj%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.736%2C49.407%5D%2C%5B8.707%2C49.4075%5D%2C%5B8.717%2C49.42671%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "timeout=39&" + 
                    "types=line%2Cother")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_301() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/density/groupBy/tag?" + 
                    "bboxes=xsmt%3A8.6671%2C49.4267%2C8.7469%2C49.385%7CZ%3A8.674%2C49.421816%2C8.707%2C49.385%7Cw%3A8.686%2C49.427%2C8.71974%2C49.396%7CEuJeN%3A8.6946%2C49.418%2C8.718%2C49.384&" + 
                    "filter=turn%3Alanes%3D*+and+geometry%3Aline+and+not+id%3A%281+..+9999%29&" + 
                    "groupByKey=building&" + 
                    "groupByValues=station%2Cdormitory%2Ctower&" + 
                    "showMetadata=no&" + 
                    "timeout=53")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_302() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/density/groupBy/tag?" + 
                    "bcircles=8.7216%2C49.4282%2C73%7C8.723%2C49.425%2C69&" + 
                    "format=json&" + 
                    "groupByKey=building&" + 
                    "showMetadata=false&" + 
                    "time=2012-02-06")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_303() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/density/groupBy/boundary/groupBy/tag?" + 
                    "bboxes=bN%3A8.692%2C49.424%2C8.738702%2C49.392%7CiN%3A8.668%2C49.414934%2C8.7397%2C49.3845&" + 
                    "filter=addr%3Acity%3D*+or+geometry%3Apoint&" + 
                    "format=json&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=school%2Csynagogue&" + 
                    "time=2017-10-30&" + 
                    "timeout=36")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_304() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/type?" + 
                    "bcircles=Zp%3A8.7404%2C49.4091%2C8&" + 
                    "filter=lanes%3Abackward%3D*&" + 
                    "format=geojson&" + 
                    "time=2018-02-03&" + 
                    "timeout=92")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_305() throws Exception {
        
        given().accept("text/csv")
                .post(baseUrlOfSut + "/elements/length/groupBy/tag?" + 
                    "bboxes=Mdc%3A8.69221%2C49.4073%2C8.741%2C49.389%7CTY%3A8.678%2C49.4283%2C8.746391%2C49.3907&" + 
                    "format=csv&" + 
                    "groupByKey=highway&" + 
                    "keys=highway&" + 
                    "showMetadata=true&" + 
                    "time=2010-07-22&" + 
                    "timeout=74&" + 
                    "values=path")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_306() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/key?" + 
                    "bcircles=Pvy%3A8.729%2C49.404%2C1&" + 
                    "groupByKeys=lanes%2Ctracktype%2Clanes%3Aforward&" + 
                    "keys=highway&" + 
                    "time=2010-12-15&" + 
                    "timeout=78")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_307() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density/groupBy/type?" + 
                    "bboxes=8.675437%2C49.417%2C8.735%2C49.3917&" + 
                    "filter=foot%21%3D*+or+geometry%3Apoint+and+area%3A%281.0+..+1E6%29&" + 
                    "format=geojson&" + 
                    "time=2011-05-03")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_308() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density/groupBy/tag?" + 
                    "bcircles=Eu%3A8.725%2C49.409%2C3%7Ce%3A8.736%2C49.4120%2C58&" + 
                    "format=json&" + 
                    "groupByKey=building&" + 
                    "keys=highway&" + 
                    "showMetadata=yes")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(218.0))
                .body("'metadata'.'description'", containsString("Density of selected items (length of items in meters divided by the area in square kilometers), aggregated on the tag."));
    }
    
    
    @Test
    public void test_309() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/type?" + 
                    "bboxes=t%3A8.652%2C49.418%2C8.70664%2C49.398&" + 
                    "keys=highway&" + 
                    "showMetadata=yes")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(290.0))
                .body("'metadata'.'description'", containsString("Total count of items in absolute values, aggregated on the type."));
    }
    
    
    @Test
    public void test_310() throws Exception {
        
        given().accept("text/csv")
                .post(baseUrlOfSut + "/elements/count/groupBy/tag?" + 
                    "bboxes=Mu%3A8.677%2C49.40054%2C8.710%2C49.388&" + 
                    "format=csv&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=traffic_signals%2Cservice&" + 
                    "keys=highway&" + 
                    "timeout=48&" + 
                    "values=residential")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_311() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/density/groupBy/type?" + 
                    "bboxes=pYU%3A8.682802%2C49.409%2C8.7564%2C49.3805%7CLH%3A8.657%2C49.4206%2C8.739%2C49.381&" + 
                    "filter=highway%3D*+and+not+type%3Arelation&" + 
                    "format=geojson")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_312() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/density/groupBy/boundary/groupBy/tag?" + 
                    "bboxes=q%3A8.650%2C49.4278%2C8.7513%2C49.396%7CxuYwM%3A8.653%2C49.419%2C8.702%2C49.385%7CxXKb%3A8.6833%2C49.4196%2C8.732%2C49.395%7Cziv%3A8.6555%2C49.416%2C8.7549%2C49.38426&" + 
                    "format=geojson&" + 
                    "groupByKey=building&" + 
                    "groupByValues=emergency_access_point%2Cchurch&" + 
                    "keys=highway&" + 
                    "showMetadata=false&" + 
                    "time=2011-09-02&" + 
                    "timeout=44&" + 
                    "values=platform")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'type'", containsString("FeatureCollection"));
    }
    
    
    @Test
    public void test_313() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/tag?" + 
                    "bcircles=8.711%2C49.43504%2C464&" + 
                    "format=geojson&" + 
                    "groupByKey=building&" + 
                    "groupByValues=hut%2Cemergency_access_point%2Ccrossing&" + 
                    "showMetadata=no&" + 
                    "time=2010-09-27")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_314() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density/groupBy/tag?" + 
                    "bcircles=H%3A8.725%2C49.4184%2C27&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=station%2Cprimary%2Ctower&" + 
                    "keys=highway&" + 
                    "values=service")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_315() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density/groupBy/boundary/groupBy/tag?" + 
                    "bboxes=8.6570%2C49.40202%2C8.741%2C49.390&" + 
                    "format=geojson&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=tertiary%2Cresidential%2Croof&" + 
                    "showMetadata=true&" + 
                    "time=2012-10-24")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(1139.0))
                .body("'metadata'.'description'", containsString("Density of selected items (area of items in square meters divided by the area in square kilometers), aggregated on the boundary and on the tag."))
                .body("'type'", containsString("FeatureCollection"));
    }
    
    
    @Test
    public void test_316() throws Exception {
        
        given().accept("text/csv")
                .get(baseUrlOfSut + "/elements/perimeter/ratio/groupBy/boundary?" + 
                    "bboxes=nmZB%3A8.697%2C49.402%2C8.715%2C49.3947%7CJdG%3A8.676%2C49.412%2C8.756%2C49.382&" + 
                    "format=csv&" + 
                    "keys=highway&" + 
                    "keys2=highway&" + 
                    "showMetadata=false&" + 
                    "time=2014-07-17&" + 
                    "values=elevator")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_317() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/density/groupBy/boundary?" + 
                    "bcircles=BoBI%3A8.7070%2C49.4293%2C5&" + 
                    "filter=ref%3D*+or+geometry%3Aline+and+not+id%3A%281+..+9999%29&" + 
                    "time=%2F%2FP2Y8M19D&" + 
                    "timeout=87")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_318() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/ratio?" + 
                    "bboxes=H%3A8.6532%2C49.409%2C8.737593%2C49.388&" + 
                    "format=geojson&" + 
                    "keys=highway&" + 
                    "keys2=highway&" + 
                    "showMetadata=false&" + 
                    "types2=point%2Cline%2Cpolygon%2Cother")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_319() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/groupBy/boundary?" + 
                    "bboxes=q%3A8.6770%2C49.4261%2C8.719%2C49.396%7CwmAc%3A8.663%2C49.4105%2C8.722499%2C49.393%7CcH%3A8.6966%2C49.425438%2C8.751%2C49.387&" + 
                    "keys=highway&" + 
                    "time=2016-04-28")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_320() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/boundary?" + 
                    "bboxes=8.686%2C49.426%2C8.755%2C49.3886&" + 
                    "filter=lanes%3D*+and+length%3A%28+..+100%29&" + 
                    "format=geojson&" + 
                    "time=2015-06-05")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'type'", containsString("FeatureCollection"));
    }
    
    
    @Test
    public void test_321() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/density/groupBy/boundary?" + 
                    "bboxes=8.651%2C49.41254%2C8.73749%2C49.384%7C8.652%2C49.4021%2C8.759%2C49.3899&" + 
                    "filter=barrier%3D*+and+geometry%3Apolygon+and+area%3A%281.0+..+1E6%29&" + 
                    "showMetadata=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(244.0))
                .body("'metadata'.'description'", containsString("Density of selected items (perimeter of items in meters divided by the area in square kilometers)."));
    }
    
    
    @Test
    public void test_322() throws Exception {
        
        given().accept("text/csv")
                .get(baseUrlOfSut + "/elements/length/groupBy/tag?" + 
                    "bboxes=y%3A8.6928%2C49.426271%2C8.7532%2C49.381%7CGzE%3A8.698025%2C49.402%2C8.723%2C49.396&" + 
                    "format=csv&" + 
                    "groupByKey=building&" + 
                    "keys=highway&" + 
                    "showMetadata=true&" + 
                    "timeout=73&" + 
                    "values=steps")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_323() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/ratio/groupBy/boundary?" + 
                    "bboxes=PCD%3A8.696%2C49.414075%2C8.7269%2C49.398%7Cw%3A8.672%2C49.410765%2C8.747%2C49.385&" + 
                    "keys=highway&" + 
                    "showMetadata=no&" + 
                    "time=2011-11-28&" + 
                    "values=primary")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_324() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/boundary?" + 
                    "bboxes=P%3A8.680%2C49.403%2C8.708%2C49.384%7CdxMXX%3A8.6657%2C49.424%2C8.719808%2C49.399%7Cuzi%3A8.681%2C49.420%2C8.7044%2C49.381%7CIsi%3A8.6894%2C49.40896%2C8.713%2C49.393&" + 
                    "keys=highway&" + 
                    "time=2014-12-13")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_325() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22fj%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.736%2C49.407%5D%2C%5B8.707%2C49.4075%5D%2C%5B8.717%2C49.42671%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "keys=highway&" + 
                    "timeout=39&" + 
                    "types=line%2Cother&" + 
                    "values=tertiary")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_326() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/density/groupBy/boundary?" + 
                    "bcircles=UzW%3A8.703%2C49.434%2C7&" + 
                    "filter=sidewalk%21%3D*+and+not+id%3A%281+..+9999%29&" + 
                    "format=geojson&" + 
                    "time=%2F%2FP3Y10M20D&" + 
                    "timeout=96")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'type'", containsString("FeatureCollection"));
    }
    
    
    @Test
    public void test_327() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count?" + 
                    "bcircles=qQs%3A8.7424%2C49.429%2C6&" + 
                    "keys=highway&" + 
                    "showMetadata=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(294.0))
                .body("'metadata'.'description'", containsString("Number of distinct active users per time interval."));
    }
    
    
    @Test
    public void test_328() throws Exception {
        
        given().accept("text/csv")
                .post(baseUrlOfSut + "/elements/perimeter?" + 
                    "bboxes=FdJ%3A8.65242%2C49.404%2C8.724%2C49.3840%7CVrjWv%3A8.6756%2C49.416055%2C8.722%2C49.3837%7COh%3A8.666%2C49.4049%2C8.718357%2C49.3800&" + 
                    "format=csv&" + 
                    "keys=highway&" + 
                    "showMetadata=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_329() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/ratio/groupBy/boundary?" + 
                    "bcircles=X%3A8.7474%2C49.419216%2C8&" + 
                    "keys=highway&" + 
                    "keys2=highway&" + 
                    "showMetadata=true&" + 
                    "time=2013-02-11&" + 
                    "timeout=93&" + 
                    "values2=path")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(563.0))
                .body("'metadata'.'description'", containsString("Total length of items in meters satisfying types2, keys2, values2 parameters (= value2 output), as well as items selected by types, keys, values parameters (= value output) and ratio of value2:value, aggregated on the boundary objects."));
    }
    
    
    @Test
    public void test_330() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/boundary?" + 
                    "bcircles=yX%3A8.7478%2C49.431854%2C2%7CBIq%3A8.711%2C49.422%2C1&" + 
                    "keys=highway&" + 
                    "showMetadata=yes&" + 
                    "timeout=25&" + 
                    "values=bus_stop")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(240.0))
                .body("'metadata'.'description'", containsString("Total length of items in meters."));
    }
    
    
    @Test
    public void test_331() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density/groupBy/boundary?" + 
                    "bcircles=8.730%2C49.425349%2C1&" + 
                    "filter=surface%21%3D*+or+geometry%3Aline&" + 
                    "format=json")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_332() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length?" + 
                    "bcircles=D%3A8.737%2C49.424%2C3&" + 
                    "keys=highway&" + 
                    "showMetadata=yes&" + 
                    "time=2009-09-19&" + 
                    "timeout=90&" + 
                    "values=turning_circle")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(234.0))
                .body("'metadata'.'description'", containsString("Total length of items in meters."));
    }
    
    
    @Test
    public void test_333() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/ratio?" + 
                    "bcircles=RXm%3A8.713%2C49.434%2C1&" + 
                    "filter2=lit%3D*+and+length%3A%28+..+100%29&" + 
                    "keys=highway&" + 
                    "keys2=highway&" + 
                    "showMetadata=true&" + 
                    "timeout=35&" + 
                    "values2=primary")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(411.0))
                .body("'metadata'.'description'", containsString("Total count of items in absolute values satisfying types2, keys2, values2 parameters (= value2 output), as well as items selected by types, keys, values parameters (= value output) and ratio of value2:value."));
    }
    
    
    @Test
    public void test_334() throws Exception {
        
        given().accept("text/csv")
                .post(baseUrlOfSut + "/elements/count/density/groupBy/boundary?" + 
                    "bboxes=YibRG%3A8.655%2C49.423%2C8.7123%2C49.398%7Cs%3A8.676%2C49.4180%2C8.733%2C49.386156%7CtMl%3A8.6823%2C49.4048%2C8.706%2C49.3951&" + 
                    "filter=destination%21%3D*+or+type%3Anode+or+id%3A%281+..+9999%29&" + 
                    "format=csv")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_335() throws Exception {
        
        given().accept("text/csv")
                .post(baseUrlOfSut + "/elements/count?" + 
                    "bboxes=N%3A8.659%2C49.41321%2C8.724%2C49.38629%7CGneUF%3A8.6812%2C49.426%2C8.700%2C49.386&" + 
                    "format=csv&" + 
                    "keys=highway&" + 
                    "timeout=53")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_336() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/ratio/groupBy/boundary?" + 
                    "bboxes=TX%3A8.677%2C49.401%2C8.758255%2C49.382%7CT%3A8.664%2C49.402%2C8.749%2C49.3913%7CX%3A8.65758%2C49.404601%2C8.730%2C49.397%7CniULF%3A8.667209%2C49.4157%2C8.746%2C49.394084&" + 
                    "keys=highway&" + 
                    "values=turning_circle")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_337() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/ratio?" + 
                    "bboxes=X%3A8.663439%2C49.406%2C8.746%2C49.389%7CF%3A8.675%2C49.423%2C8.726%2C49.389&" + 
                    "format=geojson&" + 
                    "keys=highway&" + 
                    "keys2=highway&" + 
                    "values=crossing&" + 
                    "values2=residential")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_338() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/boundary/groupBy/tag?" + 
                    "bboxes=c%3A8.666%2C49.410%2C8.728029%2C49.391%7CAm%3A8.6623%2C49.4132%2C8.713409%2C49.390%7CCTUt%3A8.657%2C49.4279%2C8.72859%2C49.381%7Cd%3A8.6738%2C49.40200%2C8.748%2C49.380019&" + 
                    "filter=highway%21%3D*+and+geometry%3Apolygon&" + 
                    "groupByKey=building&" + 
                    "timeout=84")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_339() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area?" + 
                    "bcircles=MBH%3A8.7286%2C49.434076%2C7&" + 
                    "filter=tracktype%3D*+and+length%3A%28+..+100%29&" + 
                    "time=2009-06-18")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_340() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/ratio/groupBy/boundary?" + 
                    "bboxes=zeMMX%3A8.6882%2C49.417%2C8.708%2C49.397&" + 
                    "keys=highway&" + 
                    "keys2=highway&" + 
                    "types2=other")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_341() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/ratio/groupBy/boundary?" + 
                    "bboxes=ot%3A8.65615%2C49.406%2C8.758%2C49.384&" + 
                    "filter2=maxspeed%3D*+and+area%3A%281.0+..+1E6%29&" + 
                    "showMetadata=true&" + 
                    "types2=point%2Cpolygon%2C")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(1254.0))
                .body("'metadata'.'description'", containsString("Total length of items in meters satisfying types2, keys2, values2 parameters (= value2 output), as well as items selected by types, keys, values parameters (= value output) and ratio of value2:value, aggregated on the boundary objects."));
    }
    
    
    @Test
    public void test_342() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=Ri%3A8.722%2C49.4292%2C4&" + 
                    "groupByKey=highway&" + 
                    "keys=highway&" + 
                    "showMetadata=yes&" + 
                    "time=2016-09-05&" + 
                    "timeout=68")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(238.0))
                .body("'metadata'.'description'", containsString("Total length of items in meters, aggregated on the boundary and on the tag."))
                .body("'groupByResult'", hasItems());
    }
    
    
    @Test
    public void test_343() throws Exception {
        
        given().accept("text/csv")
                .post(baseUrlOfSut + "/elements/length/density/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=p%3A8.733%2C49.4049%2C8%7CgUSti%3A8.7059%2C49.404640%2C4&" + 
                    "format=csv&" + 
                    "groupByKey=highway&" + 
                    "keys=highway&" + 
                    "time=2013-02-19&" + 
                    "timeout=36&" + 
                    "values=traffic_signals")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_344() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/ratio?" + 
                    "bboxes=v%3A8.6947%2C49.415%2C8.728%2C49.3880%7Cyc%3A8.6878%2C49.412%2C8.732325%2C49.389&" + 
                    "filter2=ref%21%3D*&" + 
                    "format=json&" + 
                    "keys=highway&" + 
                    "time=2010-09-18&" + 
                    "types2=point%2Cline%2Cpolygon%2C&" + 
                    "values=steps")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_345() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/key?" + 
                    "bboxes=T%3A8.670%2C49.421386%2C8.71734%2C49.381%7CcAgA%3A8.6696%2C49.409337%2C8.747%2C49.392&" + 
                    "filter=building%21%3D*+and+type%3Anode+or+not+length%3A%28+..+100%29&" + 
                    "format=json&" + 
                    "groupByKeys=ref%2Csource%3Amaxspeed%2Caddr%3Acountry&" + 
                    "time=2015-03-23")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_346() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=8.72361%2C49.410446%2C372&" + 
                    "filter=destination%21%3D*+or+not+geometry%3Apolygon&" + 
                    "groupByKey=building&" + 
                    "groupByValues=station%2Cprimary&" + 
                    "showMetadata=false&" + 
                    "timeout=91")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_347() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/ratio/groupBy/boundary?" + 
                    "bboxes=8.671%2C49.4237%2C8.751%2C49.395&" + 
                    "filter=natural%3Dwood+and+geometry%3Apoint&" + 
                    "filter2=sidewalk%3D*+or+geometry%3Aline&" + 
                    "showMetadata=yes&" + 
                    "time=2010-08-19&" + 
                    "types2=polygon%2C")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(565.0))
                .body("'metadata'.'description'", containsString("Total length of items in meters satisfying types2, keys2, values2 parameters (= value2 output), as well as items selected by types, keys, values parameters (= value output) and ratio of value2:value, aggregated on the boundary objects."));
    }
    
    
    @Test
    public void test_348() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/ratio/groupBy/boundary?" + 
                    "bcircles=8.71728%2C49.437%2C6&" + 
                    "filter2=highway%3D*+or+area%3A%281.0+..+1E6%29&" + 
                    "keys2=highway&" + 
                    "timeout=48&" + 
                    "types2=line%2C&" + 
                    "values2=pedestrian")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_349() throws Exception {
        
        given().accept("text/csv")
                .post(baseUrlOfSut + "/elements/count/groupBy/boundary?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22lR%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7313%2C49.421%5D%2C%5B8.717%2C49.4122%5D%2C%5B8.70129%2C49.42395%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "format=csv&" + 
                    "keys=highway&" + 
                    "time=2009-12-27")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_350() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density?" + 
                    "bboxes=dKykL%3A8.6584%2C49.4146%2C8.739%2C49.381&" + 
                    "format=json&" + 
                    "keys=highway&" + 
                    "showMetadata=true&" + 
                    "time=2016-05-26&" + 
                    "timeout=43&" + 
                    "values=platform")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(257.0))
                .body("'metadata'.'description'", containsString("Density of selected items (area of items in square meters divided by the area in square kilometers)."));
    }
    
    
    @Test
    public void test_351() throws Exception {
        
        given().accept("text/csv")
                .get(baseUrlOfSut + "/users/count/density/groupBy/boundary?" + 
                    "bboxes=Smzqd%3A8.692%2C49.420905%2C8.7415%2C49.3823&" + 
                    "filter=ref%21%3D*&" + 
                    "format=csv&" + 
                    "timeout=100")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_352() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/boundary?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22JlHLT%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7121%2C49.4244%5D%2C%5B8.706%2C49.4188%5D%2C%5B8.704%2C49.4067%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22znz%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.720%2C49.41648%5D%2C%5B8.7225%2C49.434608%5D%2C%5B8.703%2C49.4029%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "format=geojson")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'type'", containsString("FeatureCollection"));
    }
    
    
    @Test
    public void test_353() throws Exception {
        
        given().accept("text/csv")
                .get(baseUrlOfSut + "/elements/perimeter/groupBy/boundary?" + 
                    "bboxes=cR%3A8.657%2C49.4242%2C8.738%2C49.3973%7Ct%3A8.682%2C49.408%2C8.715%2C49.395%7CbUmEV%3A8.67718%2C49.407%2C8.710%2C49.3932%7Cl%3A8.677%2C49.428%2C8.715122%2C49.383&" + 
                    "format=csv&" + 
                    "keys=highway&" + 
                    "showMetadata=yes&" + 
                    "time=2009-05-04&" + 
                    "timeout=30&" + 
                    "values=footway")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_354() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/ratio/groupBy/boundary?" + 
                    "bboxes=c%3A8.690%2C49.40232%2C8.7593%2C49.397&" + 
                    "filter2=source%3Amaxspeed%3D*+and+not+length%3A%28+..+100%29&" + 
                    "keys2=highway&" + 
                    "showMetadata=no&" + 
                    "time=2010-07-05&" + 
                    "timeout=25&" + 
                    "types2=point%2Cline%2Cpolygon%2C&" + 
                    "values2=footway")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_355() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/ratio/groupBy/boundary?" + 
                    "bboxes=luA%3A8.697%2C49.408%2C8.716%2C49.38455&" + 
                    "filter2=building%3D*+and+area%3A%281.0+..+1E6%29&" + 
                    "keys=highway&" + 
                    "keys2=highway&" + 
                    "time=2014-07-03&" + 
                    "timeout=72")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_356() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/density?" + 
                    "bboxes=8.699%2C49.4272%2C8.745960%2C49.392&" + 
                    "filter=maxspeed%3D*+or+geometry%3Aline&" + 
                    "showMetadata=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(387.0))
                .body("'metadata'.'description'", containsString("Density of selected items (count of items in absolute values divided by the area in square kilometers)."));
    }
    
    
    @Test
    public void test_357() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/groupBy/boundary?" + 
                    "bboxes=XMch%3A8.674%2C49.421%2C8.7570%2C49.387&" + 
                    "keys=F5EOv8APVCpYIxr&" + 
                    "types=poINT&" + 
                    "values=DuCGH")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_358() throws Exception {
        
        given().accept("text/csv")
                .get(baseUrlOfSut + "/elements/perimeter/density/groupBy/type?" + 
                    "bboxes=8.657653%2C49.40632%2C8.713207%2C49.391&" + 
                    "filter=landuse%21%3D*+and+type%3Anode+and+area%3A%281.0+..+1E6%29&" + 
                    "format=csv&" + 
                    "showMetadata=no&" + 
                    "time=2008-05-19")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_359() throws Exception {
        
        given().accept("text/csv")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/key?" + 
                    "bboxes=yvQyx%3A8.6910%2C49.41198%2C8.731573%2C49.3840%7CpBpmS%3A8.6938%2C49.4035%2C8.725%2C49.38300%7CFI%3A8.689%2C49.428%2C8.710%2C49.382&" + 
                    "format=csv&" + 
                    "groupByKeys=lanes%2Cdestination&" + 
                    "keys=highway&" + 
                    "showMetadata=true&" + 
                    "time=2012-03-08&" + 
                    "timeout=83&" + 
                    "values=platform")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_360() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density?" + 
                    "bboxes=Ch%3A8.683%2C49.42941%2C8.726%2C49.389%7CYy%3A8.673509%2C49.401%2C8.720%2C49.3891&" + 
                    "keys=highway&" + 
                    "showMetadata=no&" + 
                    "time=2011-11-15")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_361() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/density?" + 
                    "bboxes=U%3A8.687%2C49.40268%2C8.743%2C49.383%7CxrUJN%3A8.6573%2C49.4232%2C8.7296%2C49.39178&" + 
                    "format=geojson&" + 
                    "keys=highway&" + 
                    "showMetadata=true&" + 
                    "time=%2F%2FP3Y3M24D&" + 
                    "timeout=35&" + 
                    "values=primary")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(349.0))
                .body("'metadata'.'description'", containsString("Density of distinct active users per time interval (number of users per square-kilometer)."));
    }
    
    
    @Test
    public void test_362() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/key?" + 
                    "bcircles=TD%3A8.712%2C49.435%2C83&" + 
                    "filter=ref%3D*+and+geometry%3Apolygon+or+area%3A%281.0+..+1E6%29&" + 
                    "format=json&" + 
                    "groupByKeys=addr%3Acity%2Caddr%3Ahousenumber%2Cturn%3Alanes")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_363() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/key?" + 
                    "bboxes=8.683%2C49.411%2C8.7249%2C49.383&" + 
                    "groupByKeys=sidewalk%2Caddr%3Astreet&" + 
                    "showMetadata=true&" + 
                    "timeout=87")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(1124.0))
                .body("'metadata'.'description'", containsString("Total perimeter of items in meters, aggregated on the key."));
    }
    
    
    @Test
    public void test_364() throws Exception {
        
        given().accept("text/csv")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=l%3A8.71823%2C49.408%2C826&" + 
                    "format=csv&" + 
                    "groupByKey=highway&" + 
                    "keys=highway&" + 
                    "showMetadata=false&" + 
                    "time=2010-05-10")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_365() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/density/groupBy/type?" + 
                    "bboxes=V%3A8.69477%2C49.4132%2C8.740%2C49.3919%7Cvq%3A8.6563%2C49.41138%2C8.758549%2C49.385&" + 
                    "keys=highway&" + 
                    "time=2011-02-03&" + 
                    "timeout=95&" + 
                    "values=give_way")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_366() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/groupBy/type?" + 
                    "bboxes=tSIj%3A8.671%2C49.4152%2C8.714%2C49.3840%7Cj%3A8.670%2C49.41507%2C8.7453%2C49.385%7CciivM%3A8.674%2C49.41070%2C8.712761%2C49.392&" + 
                    "keys=highway&" + 
                    "showMetadata=yes&" + 
                    "time=2008-02-04&" + 
                    "values=pedestrian")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(254.0))
                .body("'metadata'.'description'", containsString("Total perimeter of items in meters, aggregated on the type."));
    }
    
    
    @Test
    public void test_367() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/tag?" + 
                    "bcircles=8.731%2C49.434%2C6&" + 
                    "groupByKey=building&" + 
                    "groupByValues=roof%2Cstreet_lamp&" + 
                    "keys=highway&" + 
                    "showMetadata=true&" + 
                    "time=2016-07-06")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(249.0))
                .body("'metadata'.'description'", containsString("Total perimeter of items in meters, aggregated on the tag."));
    }
    
    
    @Test
    public void test_368() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/boundary/groupBy/tag?" + 
                    "bboxes=L%3A8.685%2C49.403062%2C8.75119%2C49.3845%7CpJr%3A8.6785%2C49.423097%2C8.712652%2C49.390&" + 
                    "groupByKey=building&" + 
                    "groupByValues=turning_circle&" + 
                    "keys=highway&" + 
                    "showMetadata=yes&" + 
                    "time=2016-04-13&" + 
                    "timeout=56&" + 
                    "values=street_lamp")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(272.0))
                .body("'metadata'.'description'", containsString("Total perimeter of items in meters, aggregated on the boundary and on the tag."));
    }
    
    
    @Test
    public void test_369() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/density/groupBy/boundary?" + 
                    "bcircles=Ed%3A8.712%2C49.409%2C6&" + 
                    "format=json&" + 
                    "time=2014-11-03&" + 
                    "timeout=51")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_370() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/density/groupBy/type?" + 
                    "bcircles=Sncur%3A8.717%2C49.42566%2C7&" + 
                    "keys=highway&" + 
                    "showMetadata=true&" + 
                    "time=%2F%2FP2Y3M6D&" + 
                    "timeout=80&" + 
                    "values=elevator")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(321.0))
                .body("'metadata'.'description'", containsString("Density of distinct active users per time interval (number of users per square-kilometer) aggregated on the type."));
    }
    
    
    @Test
    public void test_371() throws Exception {
        
        given().accept("text/csv")
                .post(baseUrlOfSut + "/elements/perimeter/density?" + 
                    "bboxes=ZO%3A8.685%2C49.423%2C8.752%2C49.388%7CNVgm%3A8.651%2C49.4195%2C8.738%2C49.399&" + 
                    "filter=service%3Ddriveway+or+length%3A%28+..+100%29&" + 
                    "format=csv&" + 
                    "time=2010-01-08")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_372() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/key?" + 
                    "bboxes=PEoia%3A8.658331%2C49.427803%2C8.7077%2C49.3936&" + 
                    "filter=name%21%3D*+and+type%3Away+or+id%3A%281+..+9999%29&" + 
                    "groupByKeys=lanes%3Abackward%2Cbicycle&" + 
                    "showMetadata=yes&" + 
                    "timeout=32")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(5859.0))
                .body("'metadata'.'description'", containsString("Number of distinct active users per time interval aggregated on the key."));
    }
    
    
    @Test
    public void test_373() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/density?" + 
                    "bboxes=8.697%2C49.419%2C8.708%2C49.3988&" + 
                    "keys=highway&" + 
                    "showMetadata=false&" + 
                    "values=residential")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_374() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/groupBy/type?" + 
                    "bcircles=8.7209%2C49.421%2C19&" + 
                    "keys=highway&" + 
                    "timeout=70&" + 
                    "values=primary")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_375() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/ratio/groupBy/boundary?" + 
                    "bboxes=xD%3A8.697032%2C49.409387%2C8.7050%2C49.38129&" + 
                    "filter=addr%3Astreet%21%3D*+and+length%3A%28+..+100%29&" + 
                    "filter2=foot%3D*+or+geometry%3Apoint+and+length%3A%28+..+100%29&" + 
                    "format=json&" + 
                    "showMetadata=true&" + 
                    "types2=other")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(907.0))
                .body("'metadata'.'description'", containsString("Total perimeter of items in meters satisfying types2, keys2, values2 parameters (= value2 output), as well as items selected by types, keys, values parameters (= value output) and ratio of value2:value, aggregated on the boundary objects."));
    }
    
    
    @Test
    public void test_376() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/groupBy/boundary/groupBy/tag?" + 
                    "bboxes=q%3A8.676%2C49.4004%2C8.751%2C49.399%7CHBc%3A8.674%2C49.40972%2C8.7301%2C49.391%7CctSi%3A8.6744%2C49.422%2C8.748%2C49.393%7Cu%3A8.667%2C49.4035%2C8.70561%2C49.38251&" + 
                    "format=geojson&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=ship%2Coffice%2Cuniversity&" + 
                    "time=2013-08-03")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'type'", containsString("FeatureCollection"));
    }
    
    
    @Test
    public void test_377() throws Exception {
        
        given().accept("text/csv")
                .post(baseUrlOfSut + "/elements/perimeter/ratio?" + 
                    "bcircles=8.71417%2C49.427%2C33&" + 
                    "format=csv&" + 
                    "keys=highway&" + 
                    "keys2=highway&" + 
                    "time=2010-09-02&" + 
                    "values=give_way")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_378() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/density?" + 
                    "bboxes=vU%3A8.6712%2C49.422%2C8.748%2C49.391%7CyvsNt%3A8.690%2C49.4163%2C8.745%2C49.391%7CPLtY%3A8.660%2C49.409791%2C8.71528%2C49.390&" + 
                    "keys=highway&" + 
                    "showMetadata=true&" + 
                    "time=2015-07-21&" + 
                    "values=secondary")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(245.0))
                .body("'metadata'.'description'", containsString("Density of selected items (perimeter of items in meters divided by the area in square kilometers)."));
    }
    
    
    @Test
    public void test_379() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/ratio?" + 
                    "bboxes=8.68327%2C49.4034%2C8.701%2C49.382&" + 
                    "filter2=ref%21%3D*+and+geometry%3Apoint+and+length%3A%28+..+100%29&" + 
                    "keys=highway&" + 
                    "keys2=highway&" + 
                    "time=2008-05-16&" + 
                    "timeout=41&" + 
                    "types2=polygon%2C&" + 
                    "values2=primary_link")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_380() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area?" + 
                    "bboxes=w%3A8.678539%2C49.41391%2C8.728%2C49.3956&" + 
                    "format=geojson&" + 
                    "keys=highway&" + 
                    "showMetadata=no&" + 
                    "timeout=50&" + 
                    "types=polygon%2Cother")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_381() throws Exception {
        
        given().accept("text/csv")
                .post(baseUrlOfSut + "/users/count/density?" + 
                    "bboxes=8.672%2C49.426%2C8.758%2C49.384&" + 
                    "filter=maxspeed%21%3D*+and+not+area%3A%281.0+..+1E6%29&" + 
                    "format=csv&" + 
                    "time=%2F%2FP1Y10M18D&" + 
                    "timeout=90")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_382() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/groupBy/tag?" + 
                    "bcircles=8.722%2C49.425%2C84&" + 
                    "filter=turn%21%3D*+and+geometry%3Apolygon&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=cycleway%2Chotel&" + 
                    "showMetadata=no")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_383() throws Exception {
        
        given().accept("text/csv")
                .get(baseUrlOfSut + "/elements/perimeter/ratio/groupBy/boundary?" + 
                    "bboxes=SSCsg%3A8.663%2C49.41706%2C8.7227%2C49.387%7CfaQOo%3A8.689480%2C49.423%2C8.7303%2C49.399%7CZqV%3A8.694%2C49.403974%2C8.724%2C49.384&" + 
                    "format=csv&" + 
                    "keys=highway&" + 
                    "keys2=highway&" + 
                    "types2=point%2C&" + 
                    "values=tertiary&" + 
                    "values2=give_way")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_384() throws Exception {
        
        given().accept("text/csv")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/tag?" + 
                    "bcircles=8.7492%2C49.415161%2C77&" + 
                    "filter=highway%3D*+or+not+geometry%3Aline+or+length%3A%28+..+100%29&" + 
                    "format=csv&" + 
                    "groupByKey=building&" + 
                    "groupByValues=school%2Chouse&" + 
                    "time=2015-11-06")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_385() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/boundary?" + 
                    "bboxes=8.686%2C49.411%2C8.7302%2C49.398&" + 
                    "format=json&" + 
                    "keys=highway&" + 
                    "showMetadata=no&" + 
                    "values=path")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_386() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/ratio/groupBy/boundary?" + 
                    "bcircles=or%3A8.731%2C49.4032%2C1&" + 
                    "filter2=ref%3D*+and+geometry%3Aline+or+id%3A%281+..+9999%29&" + 
                    "format=geojson&" + 
                    "keys=highway&" + 
                    "time=2016-06-13&" + 
                    "types2=point%2Cline%2Cother&" + 
                    "values=primary_link")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'type'", containsString("FeatureCollection"));
    }
    
    
    @Test
    public void test_387() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/type?" + 
                    "bpolys=fvRRF%3A8.704561%2C49.403252%2C8.721%2C49.406664%2C8.7278%2C49.438%2C8.722%2C49.4130%2C8.704561%2C49.403252&" + 
                    "keys=highway&" + 
                    "showMetadata=no&" + 
                    "values=platform")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_388() throws Exception {
        
        given().accept("text/csv")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/key?" + 
                    "bcircles=aRqqx%3A8.7310%2C49.4304%2C5&" + 
                    "format=csv&" + 
                    "groupByKeys=addr%3Acountry%2Caddr%3Ahousenumber%2Clanes%3Aforward&" + 
                    "keys=highway&" + 
                    "timeout=50")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_389() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/boundary?" + 
                    "bcircles=8.732%2C49.412%2C9%7C8.734%2C49.434374%2C8%7C8.749145%2C49.404%2C1%7C8.713%2C49.43675%2C156&" + 
                    "format=geojson&" + 
                    "keys=highway&" + 
                    "showMetadata=yes&" + 
                    "timeout=75")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(334.0))
                .body("'metadata'.'description'", containsString("Number of distinct active users per time interval aggregated on the boundary."))
                .body("'type'", containsString("FeatureCollection"));
    }
    
    
    @Test
    public void test_390() throws Exception {
        
        given().accept("text/csv")
                .get(baseUrlOfSut + "/users/count/groupBy/tag?" + 
                    "bboxes=v%3A8.69438%2C49.429%2C8.751%2C49.392&" + 
                    "format=csv&" + 
                    "groupByKey=building&" + 
                    "groupByValues=ship%2Chouse&" + 
                    "keys=highway&" + 
                    "values=traffic_mirror")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_391() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/tag?" + 
                    "bcircles=8.7077%2C49.409%2C6&" + 
                    "filter=sidewalk%21%3D*+and+length%3A%28+..+100%29&" + 
                    "format=json&" + 
                    "groupByKey=building&" + 
                    "showMetadata=false&" + 
                    "time=2014-11-08")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_392() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/ratio?" + 
                    "bcircles=wrsv%3A8.7088%2C49.4231%2C7%7Cx%3A8.7198%2C49.420%2C3%7CgfY%3A8.701%2C49.4378%2C7&" + 
                    "filter=smoothness%3D*+and+geometry%3Apoint+and+id%3A%281+..+9999%29&" + 
                    "filter2=tracktype%21%3D*+and+not+area%3A%281.0+..+1E6%29&" + 
                    "keys2=highway&" + 
                    "time=2008-04-05&" + 
                    "types2=line%2Cpolygon%2Cother&" + 
                    "values2=stop")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_393() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/boundary/groupBy/tag?" + 
                    "bboxes=Cj%3A8.695%2C49.4209%2C8.742%2C49.380&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=dormitory%2Cgarage&" + 
                    "keys=highway&" + 
                    "values=primary_link")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_394() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/key?" + 
                    "bboxes=zX%3A8.686%2C49.426%2C8.7224%2C49.386&" + 
                    "groupByKeys=landuse%2Ctype&" + 
                    "keys=highway&" + 
                    "time=%2F%2FP1Y10M10D")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_395() throws Exception {
        
        given().accept("text/csv")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/boundary?" + 
                    "bcircles=e%3A8.74746%2C49.416%2C7&" + 
                    "format=csv&" + 
                    "keys=highway&" + 
                    "showMetadata=true&" + 
                    "time=2011-07-06&" + 
                    "timeout=72&" + 
                    "values=primary_link")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_396() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/ratio?" + 
                    "bcircles=jPg%3A8.715%2C49.422634%2C20&" + 
                    "format=json&" + 
                    "keys=highway&" + 
                    "keys2=highway&" + 
                    "showMetadata=true&" + 
                    "types2=relation")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(271.0))
                .body("'metadata'.'description'", containsString("Total perimeter of items in meters satisfying types2, keys2, values2 parameters (= value2 output), as well as items selected by types, keys, values parameters (= value output) and ratio of value2:value."));
    }
    
    
    @Test
    public void test_397() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/groupBy/type?" + 
                    "bboxes=8.680%2C49.4177%2C8.712692%2C49.392&" + 
                    "filter=smoothness%3D*&" + 
                    "format=geojson&" + 
                    "showMetadata=yes")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(773.0))
                .body("'metadata'.'description'", containsString("Number of distinct active users per time interval aggregated on the type."));
    }
    
    
    @Test
    public void test_398() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/ratio/groupBy/boundary?" + 
                    "bboxes=8.699760%2C49.427%2C8.726%2C49.3961%7C8.696798%2C49.4250%2C8.70292%2C49.38697%7C8.656%2C49.411%2C8.746202%2C49.392%7C8.688%2C49.403445%2C8.7241%2C49.386412&" + 
                    "filter=landuse%3D*+or+type%3Arelation+and+id%3A%281+..+9999%29&" + 
                    "filter2=bicycle%21%3D*+and+geometry%3Apolygon+and+length%3A%28+..+100%29&" + 
                    "format=geojson&" + 
                    "keys2=highway&" + 
                    "types2=point%2Cline%2C&" + 
                    "values2=primary")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'type'", containsString("FeatureCollection"));
    }
    
    
    @Test
    public void test_399() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/ratio/groupBy/boundary?" + 
                    "bcircles=E%3A8.717%2C49.4311%2C2&" + 
                    "filter2=building%21%3D*+or+type%3Anode+and+length%3A%28+..+100%29&" + 
                    "format=geojson&" + 
                    "keys=highway&" + 
                    "keys2=highway&" + 
                    "time=2009-08-25&" + 
                    "timeout=95&" + 
                    "types2=relation&" + 
                    "values=steps&" + 
                    "values2=platform")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'type'", containsString("FeatureCollection"));
    }
    
    
    @Test
    public void test_400() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/groupBy/type?" + 
                    "bcircles=bk%3A8.711%2C49.407%2C3&" + 
                    "format=csv&" + 
                    "keys=highway&" + 
                    "showMetadata=false&" + 
                    "time=2014-02-08&" + 
                    "timeout=50&" + 
                    "values=tertiary")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("You need to give at least two timestamps or a time interval for this resource."));
    }
    
    
    @Test
    public void test_401() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/groupBy/tag?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22U%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.71516%2C49.431%5D%2C%5B8.700%2C49.429863%5D%2C%5B8.700039%2C49.410%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22NYn%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.704%2C49.4320%5D%2C%5B8.704618%2C49.429162%5D%2C%5B8.7088%2C49.406%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22ZGan%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7247%2C49.430%5D%2C%5B8.708%2C49.41284%5D%2C%5B8.704%2C49.432%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "groupByKey=building&" + 
                    "keys=highway&" + 
                    "showMetadata=true&" + 
                    "time=2017-08-04&" + 
                    "values=turning_circle")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("You need to give at least two timestamps or a time interval for this resource."));
    }
    
    
    @Test
    public void test_402() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/key?" + 
                    "bcircles=agbTO%3A8.70%3A6%2C49.410%2C9&" + 
                    "filter=natural%3Dwood+and+id%3A%281+..+9999%29&" + 
                    "groupByKeys=evomaster_1770_input&" + 
                    "timeout=28&" + 
                    "values=evomaster_1771_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The keys, values and types parameters must be empty, when you set the filter parameter."));
    }
    
    
    @Test
    public void test_403() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/boundary?" + 
                    "bcircles=Rgl%3A8.72540%2C49.4371%2C68&" + 
                    "keys=highway&" + 
                    "showMetadata=no&" + 
                    "time=2009-01-30&" + 
                    "timeout=52&" + 
                    "values=living_street")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("You need to give at least two timestamps or a time interval for this resource."));
    }
    
    
    @Test
    public void test_404() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/groupBy/boundary?" + 
                    "bcircles=wY%3A8.741150%2C49.42472%2C60&" + 
                    "format=json&" + 
                    "showMetadata=false&" + 
                    "time=2014-01-01&" + 
                    "timeout=68")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("You need to give at least two timestamps or a time interval for this resource."));
    }
    
    
    @Test
    public void test_405() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/density/groupBy/type?" + 
                    "bboxes=8.6626%2C49.423102%2C8.714%2C49.389%7C8.6618%2C49.414%2C8.708672%2C49.396%7C8.6540%2C49.419%2C8.716162%2C49.384&" + 
                    "bcircles=8.71489%2C49.411%2C68&" + 
                    "format=json&" + 
                    "keys=highway&" + 
                    "time=%2F%2FP2Y7M13D&" + 
                    "values=track")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_406() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/density/groupBy/boundary?" + 
                    "bboxes=E%3A8.653%2C49.4253%2C8.746%2C49.397%7Cw%3A8.665%2C49.424%2C8.738067%2C49.399%7CN%3A8.656%2C49.416%2C8.711%2C49.3801&" + 
                    "bcircles=hfcV%3A8.723%2C49.4176%2C94449102583%7CB%3A8.7157%2C49.435613%2C76&" + 
                    "bpolys=8.704561%2C49.403252%2C8.7449%2C49.416%2C8.7071%2C49.4006%2C8.7456%2C49.4388%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.700270%2C49.430%2C8.7453%2C49.428%2C8.7258%2C49.4363%2C8.704561%2C49.403252&" + 
                    "filter=tracktype%21%3D*+and+geometry%3Apoint&" + 
                    "format=json&" + 
                    "keys=highway&" + 
                    "timeout=21")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_407() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/density?" + 
                    "bboxes=Z%3A8.654%2C49.425715%2C8.738543%2C49.385%7Cl%3A8.657%2C49.427%2C8.729%2C49.381&" + 
                    "bcircles=8.730%2C49.439%2C4&" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22h%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7496%2C49.424%5D%2C%5B8.724%2C49.4089%5D%2C%5B8.740%2C49.418%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22VM%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.73240%2C49.426%5D%2C%5B8.741%2C49.4395%5D%2C%5B8.728%2C49.429%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=maxspeed%21%3D*+or+not+geometry%3Aline+or+id%3A%281+..+9999%29&" + 
                    "format=geojson&" + 
                    "keys=highway&" + 
                    "showMetadata=false&" + 
                    "values=platform")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_408() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/density?" + 
                    "bcircles=8.71837%2C49.4092%2C6&" + 
                    "filter=bicycle%21%3D*+and+id%3A%281+..+9999%29&" + 
                    "format=json&" + 
                    "keys=highway&" + 
                    "time=%2F%2FP1Y10M22D")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The keys, values and types parameters must be empty, when you set the filter parameter."));
    }
    
    
    @Test
    public void test_409() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count?" + 
                    "bboxes=8.674737%2C49.4189%2C8.7260%2C49.386&" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22E%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.746%2C49.412%5D%2C%5B8.736%2C49.4281%5D%2C%5B8.7113%2C49.432%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22jvSi%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7283%2C49.4313%5D%2C%5B8.7136%2C49.409034%5D%2C%5B8.7045%2C49.412%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22ywR%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.70082%2C49.419%5D%2C%5B8.710%2C49.431%5D%2C%5B8.7320%2C49.438%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=tracktype%3D*+or+length%3A%28+..+100%29&" + 
                    "format=csv&" + 
                    "time=%2F%2FP3Y1M8D")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_410() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/ratio/groupBy/boundary?" + 
                    "bboxes=8.6672%2C49.408900%2C8.730%2C49.3930&" + 
                    "filter=foot%21%3D*+and+id%3A%281+..+9999%29&" + 
                    "format=json&" + 
                    "time=2009-12-16&" + 
                    "timeout=31&" + 
                    "types2=node%2Crelation")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The filter2 parameter has to be defined when using a /ratio endpoint."));
    }
    
    
    @Test
    public void test_411() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/ratio?" + 
                    "bcircles=Zwv%3A8.700%2C49.400%2C61&" + 
                    "filter2=foo&" + 
                    "keys=evomaster_2226_input&" + 
                    "time=2017-05-17&" + 
                    "values2=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("There cannot be more input values in the values|values2 than in the keys|keys2 parameter, as values_n must fit to keys_n."));
    }
    
    
    @Test
    public void test_412() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/ratio?" + 
                    "bboxes=evomaster_23_input&" + 
                    "bcircles=evomaster_3_input&" + 
                    "filter2=6FQjIiC5Hvv&" + 
                    "format=evomaster_1004_input&" + 
                    "showMetadata=bYpHXlSVDeHxUbM&" + 
                    "time=QWwsFji1WDRYWN0&" + 
                    "timeout=evomaster_22_input&" + 
                    "types2=OmIIgFVnD&" + 
                    "values=evomaster_4_input&" + 
                    "values2=stm")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_413() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/type?" + 
                    "bboxes=g%3A8.6986%2C49.406954%2C8.7449%2C49.3981&" + 
                    "bcircles=v%3A8.739%2C49.4006%2C4&" + 
                    "bpolys=F%3A8.704561%2C49.403252%2C8.72680%2C49.4257%2C8.710%2C49.420769%2C8.706%2C49.4171%2C8.704561%2C49.403252%7CDq%3A8.704561%2C49.403252%2C8.706%2C49.421%2C8.704097%2C49.414%2C8.7033%2C49.411%2C8.704561%2C49.403252%7CE%3A8.704561%2C49.403252%2C8.72630%2C49.417%2C8.7019%2C49.421%2C8.748%2C49.4193%2C8.704561%2C49.403252&" + 
                    "filter=bicycle%3D*+or+not+type%3Anode+or+not+length%3A%28+..+100%29&" + 
                    "keys=highway&" + 
                    "showMetadata=no&" + 
                    "time=2015-07-31&" + 
                    "timeout=46&" + 
                    "values=stop_line")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_414() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/tag?" + 
                    "bcircles=6Gua4EWYrTrSASFJ&" + 
                    "bpolys=TjD9P&" + 
                    "filter=C78a&" + 
                    "groupByKey=qARYLYYMXxpgoe&" + 
                    "timeout=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_415() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/groupBy/tag?" + 
                    "bcircles=dlUSu%3A8.729%2C49.4204%2C90%7CMowcb%3A8.716%2C49.40612%2C3%7CWqoz%3A8.721%2C49.4094%2C8%7Ce%3A8.74706%2C49.414%2C2&" + 
                    "format=json&" + 
                    "groupByKey=foo&" + 
                    "groupByValues=office&" + 
                    "time=2017-11-17&" + 
                    "values=cycleway")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("There cannot be more input values in the values|values2 than in the keys|keys2 parameter, as values_n must fit to keys_n."));
    }
    
    
    @Test
    public void test_416() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/key?" + 
                    "filter=bicycle%21%3D*&" + 
                    "groupByKeys=foo&" + 
                    "keys=highway&" + 
                    "showMetadata=true&" + 
                    "timeout=55&" + 
                    "values=stop_line")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("You need to define one of the boundary parameters (bboxes, bcircles, bpolys)."));
    }
    
    
    @Test
    public void test_417() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/groupBy/key?" + 
                    "bcircles=8.7072%2C49.401%2C8&" + 
                    "filter=landuse%21%3D*+or+area%3A%281.0+..+1E6%29&" + 
                    "groupByKeys=smoothness%2Cref&" + 
                    "keys=highway&" + 
                    "showMetadata=true")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The keys, values and types parameters must be empty, when you set the filter parameter."));
    }
    
    
    @Test
    public void test_418() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=l%3A8.71823%2C49.408%2C826&" + 
                    "format=csv&" + 
                    "groupByKey=highway&" + 
                    "keys=evomaster_29298_input&" + 
                    "showMetadata=falseW&" + 
                    "time=2010-05-10&" + 
                    "types=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given parameter showMetadata can only contain the values 'true', 'yes', 'false', or 'no'."));
    }
    
    
    @Test
    public void test_419() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/groupBy/boundary/groupBy/tag?" + 
                    "format=json&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=tower%2Capartments&" + 
                    "showMetadata=false&" + 
                    "timeout=87")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("You need to define one of the boundary parameters (bboxes, bcircles, bpolys)."));
    }
    
    
    @Test
    public void test_420() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/boundary?" + 
                    "bcircles=e%3A8.74746%2C49.416%2C7&" + 
                    "filter=foo&" + 
                    "format=csv&" + 
                    "keys=highway&" + 
                    "showMetadata=true&" + 
                    "time=2011-07-06J&" + 
                    "timeout=72&" + 
                    "types=foo&" + 
                    "values=primary_link")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Parameter 'types' (and 'types2') can only have 'node' and/or 'way' and/or 'relation' OR 'point' and/or 'line' and/or 'polygon' and/or 'other'"));
    }
    
    
    @Test
    public void test_421() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/groupBy/boundary?" + 
                    "bcircles=VphYA%3A8.731%2C49.409%2C2&" + 
                    "format=csv&" + 
                    "keys=evomaster_26001_input&" + 
                    "showMetadata=foo&" + 
                    "time=2009-01-04&" + 
                    "timeout=86")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given parameter showMetadata can only contain the values 'true', 'yes', 'false', or 'no'."));
    }
    
    
    @Test
    public void test_422() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/density/groupBy/type?" + 
                    "bpolys=foo&" + 
                    "filter=foo&" + 
                    "keys=highway&" + 
                    "time=2009-12-10&" + 
                    "values=stop_line")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_423() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/density/groupBy/type?" + 
                    "bboxes=evomaster_30_input&" + 
                    "bcircles=m9X5TClO&" + 
                    "bpolys=fGSkBr91eHm&" + 
                    "filter=u&" + 
                    "format=EVs&" + 
                    "time=B407TVkNkTG6NIUB")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_424() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/density/groupBy/tag?" + 
                    "bcircles=t%3A8.730%2C49.42687%2C8%7CZs%3A8.7046%2C49.43300%2C2&" + 
                    "format=csv&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=service&" + 
                    "showMetadata=true&" + 
                    "timeout=22&" + 
                    "values=unclassified")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("There cannot be more input values in the values|values2 than in the keys|keys2 parameter, as values_n must fit to keys_n."));
    }
    
    
    @Test
    public void test_425() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/density/groupBy/tag?" + 
                    "bboxes=Z%3A8.656%2C49.4189%2C8.755%2C49.39499%7CSW%3A8.671%2C49.42798%2C8.743%2C49.386547&" + 
                    "bcircles=lv%3A8.713%2C49.410%2C2%7CeVf%3A8.7307%2C49.40004%2C56&" + 
                    "bpolys=nYlVT%3A8.704561%2C49.403252%2C8.7034%2C49.405%2C8.704586%2C49.4382%2C8.741%2C49.428%2C8.704561%2C49.403252%7Cs%3A8.704561%2C49.403252%2C8.734%2C49.439079%2C8.706%2C49.436%2C8.741%2C49.4315%2C8.704561%2C49.403252%7CH%3A8.704561%2C49.403252%2C8.744949%2C49.4008%2C8.734%2C49.421%2C8.716%2C49.4262%2C8.704561%2C49.403252&" + 
                    "filter=highway%21%3D*&" + 
                    "groupByKey=foo&" + 
                    "keys=highway&" + 
                    "timeout=52&" + 
                    "values=speed_camera")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_426() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/density/groupBy/boundary/groupBy/tag?" + 
                    "format=ZDMJyaCu&" + 
                    "groupByKey=5AZJxtxt&" + 
                    "groupByValues=3KfhXHyXJFoXT&" + 
                    "keys=_GYkbHbIXBX&" + 
                    "time=L6XAhciz0")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("You need to define one of the boundary parameters (bboxes, bcircles, bpolys)."));
    }
    
    
    @Test
    public void test_427() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/density/groupBy/boundary/groupBy/tag?" + 
                    "bboxes=oQwz%3A8.686%2C49.420%2C8.7139%2C49.399%7COgvLO%3A8.693%2C49.422%2C8.728%2C49.380&" + 
                    "bpolys=8.704561%2C49.403252%2C8.730%2C49.405%2C8.704561%2C49.403%2C8.70903%2C49.4398%2C8.704561%2C49.403252&" + 
                    "filter=lit%21%3D*+and+not+type%3Anode+or+id%3A%281+..+9999%29&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=residential%2Chouse%2Capartments&" + 
                    "showMetadata=no&" + 
                    "time=2013-11-23&" + 
                    "timeout=39&" + 
                    "values=traffic_mirror")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_428() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/density/groupBy/boundary?" + 
                    "bboxes=B%3A8.680%2C49.41230%2C8.7133%2C49.383&" + 
                    "bcircles=LjdqB%3A8.724%2C49.405%2C4%7CRP%3A8.70781%2C49.410%2C266574617&" + 
                    "time=2015-09-09&" + 
                    "timeout=94")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_429() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/density/groupBy/boundary?" + 
                    "bcircles=JZcu%3A8.746%2C49.4229%2C6&" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22zR%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.71064%2C49.4123%5D%2C%5B8.709844%2C49.427620%5D%2C%5B8.738%2C49.419908%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=addr%3Astreet%3D*+or+length%3A%28+..+100%29&" + 
                    "format=geojson&" + 
                    "keys=highway&" + 
                    "showMetadata=yes&" + 
                    "time=2014-10-20")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_430() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/density?" + 
                    "bpolys=HgSFWHCpAYX5r&" + 
                    "filter=JKPGzaT&" + 
                    "keys=X&" + 
                    "showMetadata=NOFZEpyYnMHJ&" + 
                    "types=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_431() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/density?" + 
                    "bcircles=8.73161%2C49.424%2C3%7C8.720%2C49.4394%2C50&" + 
                    "filter=highway%21%3D*+or+type%3Anode&" + 
                    "format=foo&" + 
                    "showMetadata=foo&" + 
                    "time=2014-01-0%3D&" + 
                    "timeout=57&" + 
                    "types=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given parameter showMetadata can only contain the values 'true', 'yes', 'false', or 'no'."));
    }
    
    
    @Test
    public void test_432() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter?" + 
                    "bboxes=8.685%2C49.416%2C8.70606%2C49.3813&" + 
                    "bcircles=t%3A8.7263%2C49.4390%2C7&" + 
                    "showMetadata=yes&" + 
                    "timeout=26")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_433() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter?" + 
                    "bboxes=8.6702%2C49.426%2C8.755%2C49.384&" + 
                    "values=give_way")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("There cannot be more input values in the values|values2 than in the keys|keys2 parameter, as values_n must fit to keys_n."));
    }
    
    
    @Test
    public void test_434() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/ratio/groupBy/boundary?" + 
                    "bboxes=8.6715%2C49.429%2C8.717556%2C49.398&" + 
                    "bcircles=8.743%2C49.402%2C8&" + 
                    "filter2=name%21%3D*+or+area%3A%281.0+..+1E6%29&" + 
                    "keys=highway&" + 
                    "time=2015-10-05&" + 
                    "timeout=84&" + 
                    "types2=point%2Cother&" + 
                    "values=primary")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_435() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/ratio/groupBy/boundary?" + 
                    "bcircles=kN%3A8.740%2C49.402%2C21%7CQ%3A8.724379%2C49.42525%2C16%7CO%3A8.737%2C49.411654%2C3&" + 
                    "keys2=highway&" + 
                    "showMetadata=no&" + 
                    "time=2012-04-08&" + 
                    "types2=point%2C&" + 
                    "values2=living_street")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The filter2 parameter has to be defined when using a /ratio endpoint."));
    }
    
    
    @Test
    public void test_436() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/ratio?" + 
                    "bpolys=B%3A8.704561%2C49.403252%2C8.71922%2C49.409%2C8.7419%2C49.417%2C8.735%2C49.4373%2C8.704561%2C49.403252&" + 
                    "keys2=highway&" + 
                    "time=foo&" + 
                    "types2=foo&" + 
                    "values2=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_437() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/type?" + 
                    "bpolys=Zf&" + 
                    "filter=D13JmfAAsts7wj&" + 
                    "format=W1b6r&" + 
                    "keys=PzgXSYORHJhabwj&" + 
                    "showMetadata=&" + 
                    "timeout=72GSDRJ17T8xvV&" + 
                    "types=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_438() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/groupBy/type?" + 
                    "bboxes=8.679%2C49.415%2C8.727071%2C49.385&" + 
                    "bpolys=EfwNV%3A8.704561%2C49.403252%2C8.7333%2C49.4370%2C8.745%2C49.40753%2C8.704%2C49.438384%2C8.704561%2C49.403252%7Ci%3A8.704561%2C49.403252%2C8.706445%2C49.404%2C8.7071%2C49.4216%2C8.7081%2C49.403%2C8.704561%2C49.403252&" + 
                    "filter=network%3D*+or+geometry%3Aline+or+area%3A%281.0+..+1E6%29&" + 
                    "format=csv&" + 
                    "keys=highway&" + 
                    "time=2008-08-05&" + 
                    "timeout=88")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_439() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/tag?" + 
                    "format=geojson&" + 
                    "groupByKey=foo&" + 
                    "groupByValues=stop_line%2Cstation%2Cdormitory&" + 
                    "keys=highway&" + 
                    "time=2011-02-21&" + 
                    "timeout=78&" + 
                    "values=traffic_mirror")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("You need to define one of the boundary parameters (bboxes, bcircles, bpolys)."));
    }
    
    
    @Test
    public void test_440() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/groupBy/tag?" + 
                    "bcircles=DqbS%3A8.73912%2C49.4301%2C92&" + 
                    "bpolys=8.704561%2C49.403252%2C8.739%2C49.405%2C8.703%2C49.404%2C8.70486%2C49.438%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.704%2C49.425%2C8.711%2C49.411%2C8.7180%2C49.413319%2C8.704561%2C49.403252&" + 
                    "filter=maxspeed%21%3D*+and+geometry%3Apoint+or+length%3A%28+..+100%29&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=construction%2Cpedestrian%2Cplatform&" + 
                    "showMetadata=true&" + 
                    "timeout=69")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_441() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/key?" + 
                    "bcircles=Pvy%3A8.729%2C49.404%2C1&" + 
                    "groupByKeys=lanes%2Ctracktype%2Clanes%3Aforward&" + 
                    "keys=highway&" + 
                    "time=2010%2F12-15&" + 
                    "timeout=78")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_442() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/groupBy/key?" + 
                    "bcircles=8.70605%2C49.4351%2C82&" + 
                    "format=csv&" + 
                    "groupByKeys=foot%2Csurface&" + 
                    "showMetadata=no&" + 
                    "values=give_way")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("There cannot be more input values in the values|values2 than in the keys|keys2 parameter, as values_n must fit to keys_n."));
    }
    
    
    @Test
    public void test_443() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=i%3A8.734%2C49.415%2C8%7CEmvf%3A8.72340%2C49.4001%2C1%7CHmCh%3A8.71502%2C49.432%2C5&" + 
                    "filter=foo&" + 
                    "format=csv&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=residential%2Cservice&" + 
                    "showMetadata=false&" + 
                    "time=2009-05-03&" + 
                    "values=primary8")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The keys, values and types parameters must be empty, when you set the filter parameter."));
    }
    
    
    @Test
    public void test_444() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/groupBy/boundary/groupBy/tag?" + 
                    "bboxes=lQQ%3A8.6686%2C49.422%2C8.730%2C49.3972%7CrEv%3A8.6775%2C49.409%2C8.7223%2C49.392&" + 
                    "bcircles=A%3A8.709%2C49.4254%2C6&" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22lN%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7215%2C49.433%5D%2C%5B8.710%2C49.4095%5D%2C%5B8.716%2C49.41363%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22XPcm%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.710242%2C49.41393%5D%2C%5B8.702%2C49.40668%5D%2C%5B8.704%2C49.42166%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=ref%21%3D*+and+not+geometry%3Apoint&" + 
                    "format=json&" + 
                    "groupByKey=building&" + 
                    "groupByValues=office%2Cgive_way&" + 
                    "keys=highway&" + 
                    "showMetadata=false&" + 
                    "time=2017-08-13&" + 
                    "timeout=49&" + 
                    "values=pedestrian")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_445() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/boundary?" + 
                    "bboxes=8.6867%2C49.428%2C8.7501%2C49.392%7C8.66240%2C49.4283%2C8.757%2C49.399&" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22l%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7119%2C49.427%5D%2C%5B8.704%2C49.421%5D%2C%5B8.7074%2C49.434%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22D%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.74915%2C49.421671%5D%2C%5B8.748%2C49.404367%5D%2C%5B8.7437%2C49.4311%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22BY%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.720044%2C49.4119%5D%2C%5B8.71467%2C49.414888%5D%2C%5B8.716%2C49.417%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "format=csv&" + 
                    "showMetadata=true&" + 
                    "time=2013-12-19&" + 
                    "timeout=48&" + 
                    "values=secondary")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_446() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/groupBy/boundary?" + 
                    "bboxes=vUtT%3A8.689%2C49.41532%2C8.734%2C49.382%7CXyGuk%3A8.688875%2C49.4169%2C8.7186%2C49.380%7CIYwW%3A8.668%2C49.404207%2C8.729489%2C49.386&" + 
                    "bcircles=8.702%2C49.408%2C399%7C8.746%2C49.431%2C3%7C8.749675%2C49.413%2C64%7C8.701%2C49.41968%2C2&" + 
                    "bpolys=W%3A8.704561%2C49.403252%2C8.70226%2C49.439%2C8.712%2C49.400%2C8.7490%2C49.427%2C8.704561%2C49.403252%7CU%3A8.704561%2C49.403252%2C8.7153%2C49.4240%2C8.706%2C49.4221%2C8.70470%2C49.419%2C8.704561%2C49.403252%7Crxfma%3A8.704561%2C49.403252%2C8.7494%2C49.439%2C8.748%2C49.41111%2C8.7239%2C49.424%2C8.704561%2C49.403252&" + 
                    "filter=source%3Amaxspeed%3D*&" + 
                    "format=json&" + 
                    "keys=highway&" + 
                    "showMetadata=false&" + 
                    "timeout=26")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_447() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/density/groupBy/type?" + 
                    "filter=foo&" + 
                    "keys=highway&" + 
                    "time=2012-09-25&" + 
                    "timeout=38&" + 
                    "types=foo&" + 
                    "values=service")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("You need to define one of the boundary parameters (bboxes, bcircles, bpolys)."));
    }
    
    
    @Test
    public void test_448() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density/groupBy/tag?" + 
                    "bcircles=R%3A8.7431%2C49.425%2C4&" + 
                    "filter=foo&" + 
                    "format=geojson&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=foo&" + 
                    "keys=highway&" + 
                    "showMetadata=foo&" + 
                    "types=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given parameter showMetadata can only contain the values 'true', 'yes', 'false', or 'no'."));
    }
    
    
    @Test
    public void test_449() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=ezlb%3A8.746%2C49.420%2C3&" + 
                    "filter=foo&" + 
                    "format=geojson&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=foo&" + 
                    "keys=highway&" + 
                    "showMetadata=yes&" + 
                    "timeout=90")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The keys, values and types parameters must be empty, when you set the filter parameter."));
    }
    
    
    @Test
    public void test_450() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/density/groupBy/boundary/groupBy/tag?" + 
                    "bboxes=GJ%3A8.683%2C49.424%2C8.741%2C49.390&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=residential%2Ctower%2Cdemolished&" + 
                    "values=platform")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("There cannot be more input values in the values|values2 than in the keys|keys2 parameter, as values_n must fit to keys_n."));
    }
    
    
    @Test
    public void test_451() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density/groupBy/boundary?" + 
                    "bboxes=E%3A8.6735%2C49.415%2C8.739%2C49.380&" + 
                    "bcircles=8.7246%2C49.4051%2C5%7C8.741747%2C49.421%2C6&" + 
                    "format=geojson&" + 
                    "keys=highway&" + 
                    "showMetadata=no&" + 
                    "timeout=96&" + 
                    "values=living_street")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_452() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/density/groupBy/boundary?" + 
                    "bboxes=p%3A8.6514%2C49.418%2C8.72900%2C49.3928%7Cm%3A8.6772%2C49.40724%2C8.725%2C49.3927&" + 
                    "bpolys=W%3A8.704561%2C49.403252%2C8.702836%2C49.43570%2C8.71704%2C49.434%2C8.703%2C49.421%2C8.704561%2C49.403252%7CuzC%3A8.704561%2C49.403252%2C8.7337%2C49.412860%2C8.709%2C49.42853%2C8.7046%2C49.413%2C8.704561%2C49.403252%7CBI%3A8.704561%2C49.403252%2C8.7347%2C49.439%2C8.703150%2C49.432%2C8.740%2C49.437%2C8.704561%2C49.403252&" + 
                    "format=csv&" + 
                    "keys=highway&" + 
                    "showMetadata=false&" + 
                    "time=2013-05-08&" + 
                    "timeout=73")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_453() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density?" + 
                    "bboxes=pe&" + 
                    "bcircles=ER&" + 
                    "bpolys=h7xapVI_wa&" + 
                    "filter=yj_yKXsUkw&" + 
                    "time=oy07bpmN82hY5Pq0&" + 
                    "values=D0gYB")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_454() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/density?" + 
                    "bboxes=mHqeo%3A8.6863%2C49.408%2C8.7194%2C49.396%7CMCSZ%3A8.6888%2C49.4214%2C8.706%2C49.396&" + 
                    "bcircles=8.73882%2C49.400%2C4&" + 
                    "format=geojson&" + 
                    "keys=highway&" + 
                    "time=2010-06-29&" + 
                    "values=service")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_455() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length?" + 
                    "bcircles=boU&" + 
                    "format=foo&" + 
                    "keys=highway&" + 
                    "showMetadata=evomaster_4067_input&" + 
                    "time=2013-04-01")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_456() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length?" + 
                    "bboxes=E%3A8.6912%2C49.415%2C8.700%2C49.399%7CrU%3A8.6595%2C49.4106%2C8.7466%2C49.390%7CUn%3A8.680%2C49.411%2C8.7100%2C49.383&" + 
                    "bpolys=QzAye%3A8.704561%2C49.403252%2C8.706%2C49.429%2C8.702%2C49.431%2C8.703%2C49.4014%2C8.704561%2C49.403252%7CK%3A8.704561%2C49.403252%2C8.718%2C49.418%2C8.705%2C49.402927%2C8.743%2C49.409%2C8.704561%2C49.403252%7CEB%3A8.704561%2C49.403252%2C8.733%2C49.401%2C8.73383%2C49.4061%2C8.70423%2C49.428324%2C8.704561%2C49.403252&" + 
                    "filter=bicycle%3D*+and+length%3A%28+..+100%29&" + 
                    "keys=highway&" + 
                    "values=service")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_457() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/ratio/groupBy/boundary?" + 
                    "bcircles=FaI%3A8.708%2C49.43332%2C42%7CSjA%3A8.727%2C49.426%2C6&" + 
                    "format=json&" + 
                    "keys=highway&" + 
                    "showMetadata=foo&" + 
                    "time=foo&" + 
                    "values2=tertiary")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given parameter showMetadata can only contain the values 'true', 'yes', 'false', or 'no'."));
    }
    
    
    @Test
    public void test_458() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/ratio?" + 
                    "bcircles=Tu%3A8.719%2C49.43352%2C4&" + 
                    "filter=highway%3D*+and+geometry%3Aline+and+id%3A%281+..+9999%29&" + 
                    "keys2=highway&" + 
                    "showMetadata=true")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The filter2 parameter has to be defined when using a /ratio endpoint."));
    }
    
    
    @Test
    public void test_459() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/ratio?" + 
                    "filter=service%3Ddriveway+or+type%3Arelation+and+id%3A%281+..+9999%29&" + 
                    "filter2=ref%21%3D*+or+geometry%3Aline&" + 
                    "format=json&" + 
                    "showMetadata=false&" + 
                    "time=2017-07-24&" + 
                    "timeout=92&" + 
                    "values=residential")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("You need to define one of the boundary parameters (bboxes, bcircles, bpolys)."));
    }
    
    
    @Test
    public void test_460() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/type?" + 
                    "bcircles=NG%3A8.712%2C49.413%2C49%7CKY%3A8.735375%2C49.418310%2C89%7Cu%3A8.720%2C49.4249%2C3%7CrZ%3A8.720%2C49.43936%2C867&" + 
                    "filter=network%3D*+and+not+tyhe%3Away+or+area%3A%281.0+..+1E6%29&" + 
                    "format=json&" + 
                    "keys=foo&" + 
                    "showMetadata=yes&" + 
                    "time=2009-04-21")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The keys, values and types parameters must be empty, when you set the filter parameter."));
    }
    
    
    @Test
    public void test_461() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/groupBy/type?" + 
                    "bpolys=YhYs3t&" + 
                    "filter=I9pszy&" + 
                    "format=D7bSf8vK8Iwu&" + 
                    "keys=85Hcs5z72dxEm&" + 
                    "showMetadata=wKbaNu7F&" + 
                    "values=rRc2AEpWJWQtIWPE")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_462() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/tag?" + 
                    "bboxes=8.683560%2C49.425571%2C8.728%2C49.382&" + 
                    "bcircles=f%3A8.7002%2C49.420%2C5&" + 
                    "filter=ref%21%3D*&" + 
                    "format=json&" + 
                    "groupByKey=foo&" + 
                    "groupByValues=living_street%2Ccrossing%2Cunclassified&" + 
                    "time=2017-12-21&" + 
                    "timeout=36&" + 
                    "values=living_street")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_463() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/groupBy/tag?" + 
                    "bcircles=sJ%3A8.726094%2C49.400408%2C9&" + 
                    "filter=ref%3D*&" + 
                    "format=json&" + 
                    "groupByKey=highway&" + 
                    "keys=highway&" + 
                    "showMetadata=false")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The keys, values and types parameters must be empty, when you set the filter parameter."));
    }
    
    
    @Test
    public void test_464() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/key?" + 
                    "bboxes=6X&" + 
                    "bpolys=UELZ0P68AX&" + 
                    "format=DRPr1TIowFIi&" + 
                    "groupByKeys=_gsWl&" + 
                    "keys=kwP3b5Bg49QrcMkV&" + 
                    "time=yoOz2&" + 
                    "values=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_465() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/groupBy/key?" + 
                    "filter=type%3D*+or+geometry%3Aline+or+id%3A%281+..+9999%29&" + 
                    "groupByKeys=foo&" + 
                    "keys=highway&" + 
                    "timeout=99&" + 
                    "values=secondary")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("You need to define one of the boundary parameters (bboxes, bcircles, bpolys)."));
    }
    
    
    @Test
    public void test_466() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/boundary/groupBy/tag?" + 
                    "bboxes=8.663%2C49.418%2C8.7220%2C49.391&" + 
                    "bcircles=XjV%3A8.747%2C49.424%2C1&" + 
                    "filter=oneway%21%3D*+or+type%3Anode+and+area%3A%281.0+..+1E6%29&" + 
                    "format=json&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=primary%2Ctrack&" + 
                    "showMetadata=false&" + 
                    "timeout=94")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_467() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/groupBy/boundary/groupBy/tag?" + 
                    "format=json&" + 
                    "groupByKey=building&" + 
                    "groupByValues=living_street%2Cdormitory%2Capartments&" + 
                    "showMetadata=no&" + 
                    "timeout=27")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("You need to define one of the boundary parameters (bboxes, bcircles, bpolys)."));
    }
    
    
    @Test
    public void test_468() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/boundary?" + 
                    "bcircles=8.748%2C49.435%2C7&" + 
                    "filter=foo&" + 
                    "format=foo&" + 
                    "keys=evomaster_1927_input&" + 
                    "showMetadata=no")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given 'format' parameter is invalid. Please choose between 'geojson'(only available for /groupBy/boundary and data extraction requests), 'json', or 'csv'."));
    }
    
    
    @Test
    public void test_469() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/density/groupBy/type?" + 
                    "bcircles=8.7340%2C49.425%2C83&" + 
                    "filter=addr%3Astreet%21%3D*+or+type%3Arelation&" + 
                    "format=geojson&" + 
                    "keys=highway&" + 
                    "showMetadata=no&" + 
                    "time=2012-09-04&" + 
                    "timeout=85")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The keys, values and types parameters must be empty, when you set the filter parameter."));
    }
    
    
    @Test
    public void test_470() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/density/groupBy/type?" + 
                    "format=geojson&" + 
                    "showMetadata=yes&" + 
                    "time=2009-06-01")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("You need to define one of the boundary parameters (bboxes, bcircles, bpolys)."));
    }
    
    
    @Test
    public void test_471() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/density/groupBy/tag?" + 
                    "bboxes=8.675%2C49.402%2C8.74472%2C49.387&" + 
                    "bcircles=I%3A8.736%2C49.42498%2C6&" + 
                    "bpolys=s%3A8.704561%2C49.403252%2C8.7191%2C49.4125%2C8.723%2C49.439%2C8.704%2C49.4316%2C8.704561%2C49.403252%7CMD%3A8.704561%2C49.403252%2C8.72550%2C49.438%2C8.739551%2C49.422%2C8.707%2C49.4391%2C8.704561%2C49.403252%7CI%3A8.704561%2C49.403252%2C8.744%2C49.4285%2C8.716%2C49.433%2C8.70230%2C49.42916%2C8.704561%2C49.403252&" + 
                    "filter=lit%3D*+or+area%3A%281.0+..+1E6%29&" + 
                    "groupByKey=foo&" + 
                    "groupByValues=primary&" + 
                    "keys=highway&" + 
                    "timeout=26")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_472() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/density/groupBy/tag?" + 
                    "bboxes=yNN%3A8.677%2C49.41756%2C8.7375%2C49.381%7CJC%3A8.688667%2C49.402%2C8.750%2C49.3832%7CX%3A8.690%2C49.413%2C8.709%2C49.381%7Cok%3A8.697%2C49.404%2C8.7594%2C49.39958&" + 
                    "bcircles=c%3A8.728147%2C49.408%2C8%7CN%3A8.7294%2C49.422%2C7%7CvMj%3A8.71376%2C49.406319%2C483%7CQ%3A8.709078%2C49.420%2C29&" + 
                    "format=geojson&" + 
                    "groupByKey=highway&" + 
                    "keys=highway&" + 
                    "showMetadata=yes&" + 
                    "timeout=95&" + 
                    "values=crossing")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_473() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/density/groupBy/boundary/groupBy/tag?" + 
                    "bboxes=8.6778%2C49.415754%2C8.702%2C49.395&" + 
                    "bpolys=xr%3A8.704561%2C49.403252%2C8.7235%2C49.418732%2C8.7220%2C49.405%2C8.701%2C49.438%2C8.704561%2C49.403252&" + 
                    "filter=bicycle%21%3D*+and+area%3A%281.0+..+1E6%29&" + 
                    "groupByKey=foo&" + 
                    "groupByValues=living_street%2Ctower%2Csynagogue&" + 
                    "keys=highway&" + 
                    "timeout=100")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_474() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/density/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=r%3A8.704561%2C49.403252%2C8.71513%2C49.416%2C8.7049%2C49.438%2C8.702954%2C49.402%2C8.704561%2C49.403252&" + 
                    "filter=addr%3Astreet%21%3D*+or+geometry%3Aline&" + 
                    "groupByKey=building&" + 
                    "groupByValues=traffic_signals%2Cdemolished&" + 
                    "keys=highway&" + 
                    "values=pedestrian")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The keys, values and types parameters must be empty, when you set the filter parameter."));
    }
    
    
    @Test
    public void test_475() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/density/groupBy/boundary?" + 
                    "format=NB&" + 
                    "showMetadata=Dmf8F6Ac&" + 
                    "time=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("You need to define one of the boundary parameters (bboxes, bcircles, bpolys)."));
    }
    
    
    @Test
    public void test_476() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/density/groupBy/boundary?" + 
                    "bcircles=8.7264%2C49.401%2C7&" + 
                    "filter=lit%21%3D*+or+area%3A%281.0+..+1E6%29&" + 
                    "showMetadata=true&" + 
                    "values=unclassified")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The keys, values and types parameters must be empty, when you set the filter parameter."));
    }
    
    
    @Test
    public void test_477() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/density?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22tb%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.71964%2C49.4199%5D%2C%5B8.745%2C49.40273%5D%2C%5B8.718%2C49.401%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=ref%21%3D*+and+geometry%3Apoint+or+length%3A%28+..+100%29&" + 
                    "format=csv&" + 
                    "keys=highway&" + 
                    "timeout=40")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The keys, values and types parameters must be empty, when you set the filter parameter."));
    }
    
    
    @Test
    public void test_478() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/density?" + 
                    "bboxes=e%3A8.65842%2C49.413597%2C8.70004%2C49.380%7Cdqk%3A8.69477%2C49.422%2C8.717959%2C49.393%7CUmY%3A8.686%2C49.414658%2C8.708025%2C49.394&" + 
                    "bcircles=foo&" + 
                    "filter=name%3D*+and+id%3A%281+..+9999%29&" + 
                    "format=csv&" + 
                    "keys=evomaster_47_input&" + 
                    "showMetadata=true&" + 
                    "time=2014-06-10&" + 
                    "timeout=59")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_479() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count?" + 
                    "bcircles=k%3A8.72955%2C49.408370%2C1%7CXt%3A8.738%2C49.400%2C205&" + 
                    "filter=evomaster_108_input&" + 
                    "format=evomaster_124_input&" + 
                    "keys=highway&" + 
                    "showMetadata=foo&" + 
                    "types=foo&" + 
                    "values=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given parameter showMetadata can only contain the values 'true', 'yes', 'false', or 'no'."));
    }
    
    
    @Test
    public void test_480() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/ratio/groupBy/boundary?" + 
                    "bcircles=hx%3A8.732%2C49.412%2C5%7CLy%3A8.7444%2C49.405%2C78&" + 
                    "filter2=addr%3Acity%3D*+and+type%3Arelation+and+not+id%3A%281+..+9999%29&" + 
                    "keys2=highway&" + 
                    "time=2017-0%3D-06&" + 
                    "timeout=43")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_481() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/ratio/groupBy/boundary?" + 
                    "bcircles=8.719%2C49.404%2C9%7C8.72914%2C49.4044%2C9%7C8.708%2C49.411215%2C4&" + 
                    "filter=barrier%3D*+or+length%3A%28+..+100%29&" + 
                    "keys2=highway&" + 
                    "time=2011-02-26&" + 
                    "types2=relation")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The filter2 parameter has to be defined when using a /ratio endpoint."));
    }
    
    
    @Test
    public void test_482() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/ratio?" + 
                    "bcircles=8.735364%2C49.4019%2C998&" + 
                    "format=csv&" + 
                    "keys2=highway&" + 
                    "showMetadata=yes&" + 
                    "time=2009-05-01&" + 
                    "types2=point%2Cline%2Cother&" + 
                    "values2=track")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The filter2 parameter has to be defined when using a /ratio endpoint."));
    }
    
    
    @Test
    public void test_483() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/ratio?" + 
                    "bboxes=bJdU%3A8.68493%2C49.427%2C8.700533%2C49.3801%7CYAcb%3A8.696%2C49.40126%2C8.754%2C49.3977%7Cn%3A8.689%2C49.4225%2C8.701%2C49.3821%7CeMli%3A8.663%2C49.405%2C8.7210%2C49.380917&" + 
                    "filter=name%21%3D*+or+not+length%3A%28+..+100%29&" + 
                    "format=csv&" + 
                    "keys2=highway&" + 
                    "showMetadata=no&" + 
                    "time=2017-11-19&" + 
                    "timeout=74&" + 
                    "types2=line%2Cpolygon%2C&" + 
                    "values2=primary_link")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The filter2 parameter has to be defined when using a /ratio endpoint."));
    }
    
    
    @Test
    public void test_484() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/type?" + 
                    "bboxes=Qsy1R6YHoyj&" + 
                    "bcircles=lMoKyaiKEKh&" + 
                    "filter=LE0ENFaf&" + 
                    "showMetadata=Y&" + 
                    "timeout=D6gTrFrYeXnYAH_g&" + 
                    "types=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_485() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/type?" + 
                    "bboxes=8.664591%2C49.4151%2C8.7473%2C49.3834&" + 
                    "format=crv&" + 
                    "keys=hihhway&" + 
                    "time=2016-03-18")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given 'format' parameter is invalid. Please choose between 'geojson'(only available for /groupBy/boundary and data extraction requests), 'json', or 'csv'."));
    }
    
    
    @Test
    public void test_486() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/tag?" + 
                    "bcircles=FZCQa%3A8.724%2C49.410%2C1&" + 
                    "bpolys=Eb%3A8.704561%2C49.403252%2C8.7329%2C49.401%2C8.7401%2C49.402%2C8.70456%2C49.4011%2C8.704561%2C49.403252%7Cb%3A8.704561%2C49.403252%2C8.7494%2C49.41058%2C8.7471%2C49.404%2C8.7225%2C49.429%2C8.704561%2C49.403252%7Cv%3A8.704561%2C49.403252%2C8.722700%2C49.405%2C8.727%2C49.417%2C8.7431%2C49.405%2C8.704561%2C49.403252&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=primary&" + 
                    "time=2012-06-26&" + 
                    "timeout=45")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_487() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/tag?" + 
                    "bcircles=aE%3A8.711%2C49.4249%2C3&" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22L%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.706%2C49.42511%5D%2C%5B8.730550%2C49.431%5D%2C%5B8.704%2C49.432786%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "groupByKey=foo&" + 
                    "time=2008-12-05&" + 
                    "timeout=94&" + 
                    "values=residential")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_488() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/key?" + 
                    "filter=maxspeed%21%3D*+and+geometry%3Apolygon&" + 
                    "format=geojson&" + 
                    "groupByKeys=foo&" + 
                    "timeout=34")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("You need to define one of the boundary parameters (bboxes, bcircles, bpolys)."));
    }
    
    
    @Test
    public void test_489() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=u%3A8.707%2C49.40059%2C98&" + 
                    "bpolys=a%3A8.704561%2C49.403252%2C8.742%2C49.416%2C8.7047%2C49.416%2C8.7352%2C49.41566%2C8.704561%2C49.403252%7CPlfU%3A8.704561%2C49.403252%2C8.709%2C49.4302%2C8.704569%2C49.411%2C8.734%2C49.4186%2C8.704561%2C49.403252&" + 
                    "filter=oneway%3D*&" + 
                    "format=geojson&" + 
                    "groupByKey=foo&" + 
                    "groupByValues=tertiary&" + 
                    "showMetadata=false&" + 
                    "time=2012-03-16&" + 
                    "timeout=95&" + 
                    "values=elevator")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_490() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/boundary?" + 
                    "bcircles=v4_i8JUmpRiONw&" + 
                    "format=Msz&" + 
                    "keys=&" + 
                    "showMetadata=gnHxnINs7y&" + 
                    "time=vtDzy2ruiVrIPJc&" + 
                    "types=MxnA")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_491() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/boundary?" + 
                    "bboxes=8.683824%2C49.4230%2C8.73222%2C49.382&" + 
                    "bcircles=YVewJ%3A8.7057%2C49.404%2C4%7Cw%3A8.701%2C49.432980%2C92&" + 
                    "format=json&" + 
                    "keys=highway&" + 
                    "time=2010-07-17&" + 
                    "timeout=70")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_492() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/density/groupBy/type?" + 
                    "bcircles=o%3A8.736%2C49.439%2C505734864&" + 
                    "bpolys=X%3A8.704561%2C49.403252%2C8.715227%2C49.401%2C8.749%2C49.4079%2C8.7072%2C49.4378%2C8.704561%2C49.403252%7CuR%3A8.704561%2C49.403252%2C8.734311%2C49.420437%2C8.701%2C49.4125%2C8.70442%2C49.4109%2C8.704561%2C49.403252%7CA%3A8.704561%2C49.403252%2C8.706%2C49.438%2C8.7434%2C49.4152%2C8.714%2C49.403%2C8.704561%2C49.403252&" + 
                    "filter=lit%21%3D*+and+id%3A%281+..+9999%29&" + 
                    "format=json&" + 
                    "time=2015-02-05")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_493() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density/groupBy/tag?" + 
                    "filter=maxspeed%3D*+or+length%3A%28+..+100%29&" + 
                    "format=geojson&" + 
                    "groupByKey=foo&" + 
                    "time=2011-12-27&" + 
                    "timeout=50")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("You need to define one of the boundary parameters (bboxes, bcircles, bpolys)."));
    }
    
    
    @Test
    public void test_494() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/density/groupBy/tag?" + 
                    "bboxes=TxFxP%3A8.668%2C49.404380%2C8.754%2C49.385%7Cvdjla%3A8.670%2C49.4173%2C8.751%2C49.399&" + 
                    "filter=oneway%21%3D*+or+not+geometry%3Aline&" + 
                    "format=csv&" + 
                    "groupByKey=building&" + 
                    "groupByValues=chapel%2Cunclassified&" + 
                    "keys=highway&" + 
                    "showMetadata=no&" + 
                    "time=2015-04-24&" + 
                    "values=street_lamp")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The keys, values and types parameters must be empty, when you set the filter parameter."));
    }
    
    
    @Test
    public void test_495() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=lQbY%3A8.710%2C49.423045%2C1%7Cl%3A8.737144%2C49.4235%2C7%7Cwq%3A8.7028%2C49.418%2C5&" + 
                    "filter=source%3Amaxspeed%21%3D*+and+not+length%3A%28+..+100%29&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=apartments%2Cfootway%2Csecondary_link&" + 
                    "showMetadata=false&" + 
                    "values=elevator")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The keys, values and types parameters must be empty, when you set the filter parameter."));
    }
    
    
    @Test
    public void test_496() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/density/groupBy/boundary/groupBy/tag?" + 
                    "bboxes=LjQG%3A8.6977%2C49.417%2C8.70617%2C49.391&" + 
                    "bcircles=RS%3A8.7294%2C49.437%2C9&" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22B%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7452%2C49.40194%5D%2C%5B8.7003%2C49.41098%5D%2C%5B8.709706%2C49.41686%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22Rv%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.707%2C49.41563%5D%2C%5B8.704545%2C49.4207%5D%2C%5B8.726646%2C49.431%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22nPL%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.715%2C49.40488%5D%2C%5B8.705%2C49.410%5D%2C%5B8.704446%2C49.42435%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=maxspeed%3D*&" + 
                    "format=csv&" + 
                    "groupByKey=foo&" + 
                    "keys=highway&" + 
                    "showMetadata=true&" + 
                    "time=2011-09-06&" + 
                    "timeout=62&" + 
                    "values=bus_stop")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_497() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density/groupBy/boundary?" + 
                    "bpolys=eH%3A8.704561%2C49.403252%2C8.735%2C49.4155%2C8.70409%2C49.4252%2C8.7106%2C49.41105%2C8.704561%2C49.403252&" + 
                    "filter=building%21%3D*+and+type%3Arelation+or+area%3A%281.0+..+1E6%29&" + 
                    "format=csv&" + 
                    "keys=highway&" + 
                    "showMetadata=yes")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The keys, values and types parameters must be empty, when you set the filter parameter."));
    }
    
    
    @Test
    public void test_498() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/density/groupBy/boundary?" + 
                    "bcircles=wkJ%3A8.7330%2C49.439%2C733&" + 
                    "keys=highway&" + 
                    "time=evomaster_12005_input&" + 
                    "timeout=32&" + 
                    "values=street_lamp")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_499() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density?" + 
                    "bcircles=JY%3A8.707%2C49.400%2C6%7Cc%3A8.748%2C49.408%2C173%7CH%3A8.718%2C49.4391%2C3&" + 
                    "bpolys=8.704561%2C49.403252%2C8.71413%2C49.4282%2C8.7023%2C49.420%2C8.7094%2C49.435%2C8.704561%2C49.403252&" + 
                    "filter=foot%21%3D*+or+not+area%3A%281.0+..+1E6%29&" + 
                    "keys=highway&" + 
                    "showMetadata=true&" + 
                    "time=2010-08-15&" + 
                    "timeout=50")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/density?" + 
                    "bboxes=8.684%2C49.4002%2C8.734492%2C49.397%7C8.6734%2C49.403%2C8.7082%2C49.3903&" + 
                    "bpolys=II%3A8.704561%2C49.403252%2C8.748%2C49.406%2C8.7140%2C49.419%2C8.703%2C49.4204%2C8.704561%2C49.403252&" + 
                    "filter=lanes%3Aforward%21%3D*&" + 
                    "format=geojson&" + 
                    "keys=highway&" + 
                    "timeout=56")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_501() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area?" + 
                    "bboxes=1M&" + 
                    "format=bAa_WcpRcHZ&" + 
                    "showMetadata=xl0&" + 
                    "timeout=p&" + 
                    "values=lnfZA")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_502() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/density/groupBy/type?" + 
                    "bcircles=Sncur%3A8.717%2C49.42566%2C7&" + 
                    "filter=foo&" + 
                    "keys=evomaster_16706_input&" + 
                    "showMetadata=true&" + 
                    "time=evomaster_16707_input&" + 
                    "timeout=80&" + 
                    "types=foo&" + 
                    "values=elevator")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Parameter 'types' (and 'types2') can only have 'node' and/or 'way' and/or 'relation' OR 'point' and/or 'line' and/or 'polygon' and/or 'other'"));
    }
    
    
    @Test
    public void test_503() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/density/groupBy/boundary?" + 
                    "bboxes=hrt%3A8.693%2C49.409%2C8.751221%2C49.384&" + 
                    "filter=foo&" + 
                    "time=%2F%2FP2Y6M26D&" + 
                    "timeout=62&" + 
                    "values=platform")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The keys, values and types parameters must be empty, when you set the filter parameter."));
    }
    
    
    @Test
    public void test_504() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/groupBy/type?" + 
                    "bboxes=JPEgT&" + 
                    "bcircles=QT3fcTs6_HfspM&" + 
                    "format=axf&" + 
                    "time=bapLaiLVtarMo2&" + 
                    "types=U1PbuLvddQmXG")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_505() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count?" + 
                    "bpolys=ZeBlZ&" + 
                    "filter=&" + 
                    "showMetadata=g&" + 
                    "time=f8hitDsEi&" + 
                    "timeout=V9nOY&" + 
                    "types=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_506() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/key?" + 
                    "bcircles=HV%3A4.882%2C56.000%2C%3B&" + 
                    "format=fpj1&" + 
                    "groupByKeys=iTK%600dvc1DA&" + 
                    "showMetadata=HFA&" + 
                    "time=evsm%5Dstepc17585lintuv&" + 
                    "timeout=6&" + 
                    "values=QLM85xP")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Each bcircle must consist of a lon/lat coordinate pair plus a buffer in meters."));
    }
    
    
    @Test
    public void test_507() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/ratio?" + 
                    "bcircles=%3A-735364%2C46.6872%2C9%3D8&" + 
                    "filter2=fq&" + 
                    "keys=foo&" + 
                    "showMetadata=yes&" + 
                    "types2=point%2Cline*othe&" + 
                    "values2=traciaV")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Each bcircle must consist of a lon/lat coordinate pair plus a buffer in meters."));
    }
    
    
    @Test
    public void test_508() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/ratio/groupBy/boundary?" + 
                    "bpolys=o%3A8.70456%2F%2C49.403252%2C8.730%2C49.409%2C8.749%2C49.404723%2C8.7164%2C49.4005%2C8.704561%2C49.40325&" + 
                    "filter=network%21%3D*+and+area%3A%281.0+..+1E6%29&" + 
                    "format=foo&" + 
                    "time=ONaHnuJsf5&" + 
                    "types=foo&" + 
                    "values=evomaster_2957_input&" + 
                    "values2=primary_link")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The bpolys parameter must contain double-parseable values in form of lon/lat coordinate pairs."));
    }
    
    
    @Test
    public void test_509() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/key?" + 
                    "bboxes=jGJYv%3A8.6931%2C49.4241%2C8.7%251%2C49.38568&" + 
                    "bpolys=give_way&" + 
                    "filter=fpo&" + 
                    "format=foo&" + 
                    "groupByKeys=evomaster_1326_input&" + 
                    "keys=foo&" + 
                    "time=2017-11-2%2F&" + 
                    "types=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_510() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/tag?" + 
                    "bboxes=U%3A8.68221%2C49.419%2C8.73723%2C49.3839&" + 
                    "bcircles=8.726%2C49.4303%2C6&" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22k%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.712%2C49.419%5D%2C%5B8.744%2C49.4184%5D%2C%5B8.729%2C49.407%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=bicycle%21%3D*&" + 
                    "format=geojson&" + 
                    "groupByKey=foo&" + 
                    "groupByValues=crossing&" + 
                    "timeout=67")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_511() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/ratio?" + 
                    "bcircles=dN%3A8.708881%2C49.426%2C936&" + 
                    "format=json&" + 
                    "keys2=highway&" + 
                    "values2=speed_camera")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The filter2 parameter has to be defined when using a /ratio endpoint."));
    }
    
    
    @Test
    public void test_512() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/groupBy/boundary?" + 
                    "bcircles=0.708%2C02.011%2C7&" + 
                    "filter=mzCQ0qoeg3TmVK&" + 
                    "format=CsV&" + 
                    "keys=source%3Ageometry%2Badr.&" + 
                    "types=oThER&" + 
                    "values=ev%3BmastUr_11Q09ainpuT")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The keys, values and types parameters must be empty, when you set the filter parameter."));
    }
    
    
    @Test
    public void test_513() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/ratio?" + 
                    "bboxes=8.688681%2C49.42381%2C8.720%2C49.386&" + 
                    "showMetadata=false&" + 
                    "time=2007-10%2C15&" + 
                    "timeout=82&" + 
                    "types2=evomaster_14804_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_514() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/key?" + 
                    "bcircles=LV%3A012.0%2C62.549%2C%3B&" + 
                    "format=geOjSon&" + 
                    "groupByKeys=Tunm%60wraTC0SY4Va&" + 
                    "keys=evknayxer_.3642cinpx&" + 
                    "showMetadata=tRue&" + 
                    "types=IN%3E&" + 
                    "values=LV%3A031.3%2C94.%3B55%2C")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Each bcircle must consist of a lon/lat coordinate pair plus a buffer in meters."));
    }
    
    
    @Test
    public void test_515() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/key?" + 
                    "bcircles=LV%3A0%3A003%2C79.617%2C7&" + 
                    "filter=etomaster_17%2C0%3D_inlut&" + 
                    "format=csV&" + 
                    "groupByKeys=evomaster_22570_inpu&" + 
                    "showMetadata=evomaster_22574_input&" + 
                    "time=exomastes_182%294_in&" + 
                    "timeout=-6490.265048602342&" + 
                    "types=evomaster_18558%5Dinpuv&" + 
                    "values=evom%60ster_18559_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given parameter showMetadata can only contain the values 'true', 'yes', 'false', or 'no'."));
    }
    
    
    @Test
    public void test_516() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/key?" + 
                    "bcircles=LV%3A042.0%2C80.448%2C%3B&" + 
                    "bpolys=&" + 
                    "filter=etooaster_1751%3D_inlvt&" + 
                    "format=CSv&" + 
                    "groupByKeys=Uvom%60wresQ23T44%60qjsu&" + 
                    "time=exomawtds_182%290%5Din&" + 
                    "timeout=-6474.352408211762&" + 
                    "types=LR%3A")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Each bcircle must consist of a lon/lat coordinate pair plus a buffer in meters."));
    }
    
    
    @Test
    public void test_517() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/key?" + 
                    "bcircles=agbTO%3A8.7066%2C49.410%2C9&" + 
                    "bpolys=8.704561%2C49.403252%2C8.725%2C49.4270%2C8.715%2C49.4022%2C8.704987%2C49.400%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.709%2C49.4014%2C8.726%2C49.417%2C8.702%2C49.412%2C8.704561%2C49.403252&" + 
                    "filter=natural%3Dwood+and+id%3A%281+..+9999%29&" + 
                    "groupByKeys=foo&" + 
                    "timeout=28&" + 
                    "values=elevator")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_518() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/groupBy/boundary?" + 
                    "bcircles=0.708%2C00.000%2C7l&" + 
                    "filter=OO4AFLy&" + 
                    "keys=source%3Ageometry%2Badr.&" + 
                    "showMetadata=HN&" + 
                    "time=evomaster_5862_input&" + 
                    "values=D")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Each bcircle must consist of a lon/lat coordinate pair plus a buffer in meters."));
    }
    
    
    @Test
    public void test_519() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/type?" + 
                    "bpolys=C%3A8.704561%2C49.403252%2C8.717795%2C49.409%2C8.7207%2C49.413%2C8.704355%2C49.41329%2C8.704561%2C49.403252&" + 
                    "filter=oneway%3D*+and+area%3A%281.0+..+1E6%29&" + 
                    "showMetadata=true&" + 
                    "time=2013-08-21&" + 
                    "timeout=96")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("You need to give at least two timestamps or a time interval for this resource."));
    }
    
    
    @Test
    public void test_520() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/groupBy/boundary?" + 
                    "bboxes=XMch%3A8.674%2C49.421%2C8.7570%2C49.387&" + 
                    "filter=foo&" + 
                    "keys=evomaster_1058_input&" + 
                    "showMetadata=no&" + 
                    "time=&" + 
                    "values=primaryalinl")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The keys, values and types parameters must be empty, when you set the filter parameter."));
    }
    
    
    @Test
    public void test_521() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/groupBy/boundary?" + 
                    "bboxes=XMch%3A8.674%2C49.421%2C8.7570%2C49.387&" + 
                    "filter=evomaster_3838_input&" + 
                    "format=geojson&" + 
                    "keys=evomaster_1058_input&" + 
                    "showMetadata=no&" + 
                    "time=evomaster_%2F059_input&" + 
                    "values=primaryalink")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_522() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22if%22%3A%22Xh%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704521%2C49.403252%5D%2C%5B8.721%2C49.424%5D%2C%5B8.70625%2C49.409%5D%2C%5B8.7055%2C49.42024%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22KTsEN%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7200%2C49.406%5D%2C%5B8.742%2C49.433210%5D%2C%5B8.706%2C49.438%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=foo&" + 
                    "format=Uow&" + 
                    "keys=evomaster_15951_input&" + 
                    "showMetadata=foo&" + 
                    "types=point%2Cline%2Cpolygon%2Cother&" + 
                    "values=evomaster_7180_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided GeoJSON cannot be converted."));
    }
    
    
    @Test
    public void test_523() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/density/groupBy/tag?" + 
                    "bcircles=e%3A8.709%2C49.430%2C9&" + 
                    "filter=fso&" + 
                    "groupByKey=highwaz&" + 
                    "groupByValues=foo&" + 
                    "keys=highway&" + 
                    "showMetadata=no&" + 
                    "time=%2F1P3Y8L9")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_524() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/density/groupBy/tag?" + 
                    "bboxes=8.659%2C49.407%2C8.7028%2C49.382554%7C8.684%2C49.4203%2C8.7007%2C49.3914%7C8.6734%2C49.425%2C8.719%2C49.387%7C8.6526%2C49.406%2C8.7576%2C49.398631&" + 
                    "filter=turn%3D*+and+type%3Away+or+area%3A%281.0+..+1E6%29&" + 
                    "format=geojson&" + 
                    "groupByKey=building&" + 
                    "groupByValues=track%2Cstation&" + 
                    "keys=highway&" + 
                    "showMetadata=true&" + 
                    "time=%2F%2FP1Y9M19D&" + 
                    "timeout=84")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The keys, values and types parameters must be empty, when you set the filter parameter."));
    }
    
    
    @Test
    public void test_525() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/key?" + 
                    "bboxes=jGJYv%3A8.6931%2C49.4241%2C8.751%2C49.38568&" + 
                    "filter=evomaster_17209_input&" + 
                    "groupByKeys=eUomaster_U8999_Unput&" + 
                    "time=evomaster_19105_input&" + 
                    "types=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_526() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/density/groupBy/tag?" + 
                    "bboxes=f%3A8.692%2C49.428183%2C8.702%2C49.397&" + 
                    "bcircles=foo&" + 
                    "filter=foo&" + 
                    "format=json&" + 
                    "groupByKey=f%3A8.692%2C49.428183%2C8.702%2C49.397&" + 
                    "groupByValues=foo&" + 
                    "keys=highway&" + 
                    "time=goo&" + 
                    "timeout=foo1&" + 
                    "types=fom%3A")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("You need to give one groupByKey parameter, if you want to use groupBy/tag."));
    }
    
    
    @Test
    public void test_527() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/groupBy/boundary?" + 
                    "bcircles=8.708%2C49.434%2C7&" + 
                    "format=geojson&" + 
                    "keys=evomaster_44_input&" + 
                    "showMetadata=no&" + 
                    "types=foo&" + 
                    "values=primary_link")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Parameter 'types' (and 'types2') can only have 'node' and/or 'way' and/or 'relation' OR 'point' and/or 'line' and/or 'polygon' and/or 'other'"));
    }
    
    
    @Test
    public void test_528() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/key?" + 
                    "bcircles=agbTO%3A8.%3B0%3A6%2C49.41009&" + 
                    "filter=evomaster_736_input&" + 
                    "groupByKeys=evomaster_410_input&" + 
                    "keys=foo&" + 
                    "showMetadata=foo&" + 
                    "types=evomaster_413_input&" + 
                    "values=elevator")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_529() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/ratio?" + 
                    "bboxes=P%3A8.651%2C49.410909%2C8.723449.399%7Cm%3A8.664916%2C49.426%2C8.758%2C49.385%7Cdqo%3A8.69312%2C49.424%2C8.710276%2C49.387&" + 
                    "filter=tracktype%21%3D*+or+geometry%3Apoint&" + 
                    "format=geojso%7E&" + 
                    "keys=foo&" + 
                    "keys2=foo&" + 
                    "showMetadata=foo&" + 
                    "timeout=93&" + 
                    "types=foo&" + 
                    "values=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_530() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/groupBy/boundary?" + 
                    "bcircles=8.708%2C%3A9.434%2C7l&" + 
                    "format=evomaster_5012_input&" + 
                    "showMetadata=no&" + 
                    "types=evomaster_5139_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_531() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/key?" + 
                    "bcircles=LVB10%3A.3%2C59.416%2C7&" + 
                    "format=CSv&" + 
                    "groupByKeys=UvouawresU23V44_inxv&" + 
                    "keys=csV&" + 
                    "showMetadata=&" + 
                    "time=exqmasteo_182%294_in&" + 
                    "timeout=-7550.673646584564")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_532() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/key?" + 
                    "bcircles=HV%3A42700%2C57.207%2C%3B&" + 
                    "filter=uVohb95RWnF&" + 
                    "groupByKeys=DYwgZCekE&" + 
                    "showMetadata=FF&" + 
                    "time=evomaster_19851_input&" + 
                    "timeout=57&" + 
                    "types=FFA")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Each bcircle must consist of a lon/lat coordinate pair plus a buffer in meters."));
    }
    
    
    @Test
    public void test_533() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/groupBy/boundary?" + 
                    "bcircles=2.%3A09%2C73.686%2C7r&" + 
                    "keys=source%3Ageometry%2Badr.&" + 
                    "time=kYUf%60xS67ENRo_y&" + 
                    "types=OtHEr&" + 
                    "values=evomaster_29313_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Each bcircle must consist of a lon/lat coordinate pair plus a buffer in meters."));
    }
    
    
    @Test
    public void test_534() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/key?" + 
                    "bcircles=LV%3A021.0%2C80.526%2C%3B&" + 
                    "filter=etooaster_1741A_irlut&" + 
                    "groupByKeys=exkqautdr_07UU4_i&" + 
                    "keys=eroiawtera23646_gnpst&" + 
                    "showMetadata=&" + 
                    "time=ewomaw%7E%5Ds_182%293_i&" + 
                    "timeout=-6477.954239861183&" + 
                    "types=LI%3A")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Each bcircle must consist of a lon/lat coordinate pair plus a buffer in meters."));
    }
    
    
    @Test
    public void test_535() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/key?" + 
                    "bcircles=LV%3A033.%3A%2C82.556%2C%3B&" + 
                    "filter=eukm_%7Bter_25%3A76_inpw&" + 
                    "format=CsV&" + 
                    "groupByKeys=Xspmawthp_58U%29._&" + 
                    "keys=evlm_wter_23376_inp&" + 
                    "showMetadata=tRUe&" + 
                    "time=exomawujo_282-%2F%5Eij")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Each bcircle must consist of a lon/lat coordinate pair plus a buffer in meters."));
    }
    
    
    @Test
    public void test_536() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/ratio?" + 
                    "bcircles=8.735364%2C49.3019%2C998&" + 
                    "filter2=foo&" + 
                    "format=csv&" + 
                    "keys=foo&" + 
                    "keys2=evomastera28768_input&" + 
                    "showMetadata=yes&" + 
                    "time=2%2F09-%2F5-%2F1&" + 
                    "types2=point%2Cline%2Cother&" + 
                    "values2=traci")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_537() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/ratio?" + 
                    "bcircles=8.735364%2C49.4017%2C998&" + 
                    "filter2=foo&" + 
                    "format=csv&" + 
                    "keys2=evomaster_28768_input&" + 
                    "showMetadata=yes&" + 
                    "time=2009-%2F5-%2F&" + 
                    "types2=point%2Cline%2Cother&" + 
                    "values2=trac")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_538() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/density/groupBy/tag?" + 
                    "bboxes=foo&" + 
                    "bcircles=e%3A8.709%2C49.430%2C7&" + 
                    "bpolys=foo&" + 
                    "format=evomaster_29716_input&" + 
                    "groupByKey=e%3A8.709%2C49.430%2C7&" + 
                    "showMetadata=no&" + 
                    "time=%2F%2FP3Y8M9D&" + 
                    "timeout=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("You need to give one groupByKey parameter, if you want to use groupBy/tag."));
    }
    
    
    @Test
    public void test_539() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/key?" + 
                    "bpolys=%3A&" + 
                    "format=Csv&" + 
                    "groupByKeys=Uvom%60wresU23V44_qjput&" + 
                    "showMetadata=YEs&" + 
                    "time=exomawtds_182%290%5Din")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_540() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/density/groupBy/tag?" + 
                    "bcircles=e%3A4.70%3A%2C49.432%2C9&" + 
                    "filter=pUq&" + 
                    "groupByKey=hgggQUz&" + 
                    "groupByValues=fpq&" + 
                    "keys=hhghway&" + 
                    "showMetadata=no&" + 
                    "time=%2F%2FN%2FTJ")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_541() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/key?" + 
                    "bcircles=HV%3A8.706%2C492407%2C7&" + 
                    "groupByKeys=foo&" + 
                    "keys=foo&" + 
                    "showMetadata=foo&" + 
                    "time=2017-11-20&" + 
                    "timeout=57")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given parameter showMetadata can only contain the values 'true', 'yes', 'false', or 'no'."));
    }
    
    
    @Test
    public void test_542() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/groupBy/key?" + 
                    "filter=oneway%21%3D*+and+area%3A%281.0+..+1E6%29&" + 
                    "groupByKeys=foo&" + 
                    "values=turning_circle")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("You need to define one of the boundary parameters (bboxes, bcircles, bpolys)."));
    }
    
    
    @Test
    public void test_543() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/ratio/groupBy/boundary?" + 
                    "bpolys=o%3A8.704561%2C49.40325%3A%2C8.730%2C49.409%2C8.749%2C49.404723%2C8.7164%2C49.4005%2C8.704561%2C49.40325&" + 
                    "filter=network%21%3D*+and+area%3A%281.0+..+1E6%29&" + 
                    "filter2=foo&" + 
                    "format=foo&" + 
                    "keys=foo&" + 
                    "time=ONaHnuJsf1&" + 
                    "types=foo&" + 
                    "types2=foo&" + 
                    "values=evomaster_2957_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_544() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/key?" + 
                    "bboxes=jGJYv88.6931%2C49.8241%2C8.750%2C49.3856%3A&" + 
                    "bpolys=&" + 
                    "format=csV&" + 
                    "groupByKeys=Sunm%60wraTC0SY4Xa&" + 
                    "keys=evknayxer_.3642cinpx&" + 
                    "values=LV%3A031.3%2C902%3B55%2C")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("One or more boundary object(s) have a custom id (or at least a colon), whereas other(s) don't. You can either set custom ids for all your boundary objects, or for none."));
    }
    
    
    @Test
    public void test_545() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/density/groupBy/boundary?" + 
                    "bboxes=8.652%2C49.40744%2C8.717%2C49.385%7C8.664%2C49.410801%2C8.741%2C49.394&" + 
                    "filter=foo&" + 
                    "format=json&" + 
                    "keys=highway&" + 
                    "types=8.652%2C49.40744%2C8.717%2C49.385%7C8.664%2C49.410801%2C8.741%2C49.394&" + 
                    "values=evomaster_8323_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Parameter 'types' (and 'types2') cannot have more than 4 entries."));
    }
    
    
    @Test
    public void test_546() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/ratio?" + 
                    "bcircles=Zwv%3A8.700%2C49.400%2C61&" + 
                    "filter=fno&" + 
                    "format=evomaster_65_input&" + 
                    "keys=highway&" + 
                    "time=2017-05-17&" + 
                    "types2=way%2C&" + 
                    "values=evomaster_67_input&" + 
                    "values2=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given 'format' parameter is invalid. Please choose between 'geojson'(only available for /groupBy/boundary and data extraction requests), 'json', or 'csv'."));
    }
    
    
    @Test
    public void test_547() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/ratio?" + 
                    "bcircles=Zwv%3A8.700%2C49.400%2C61&" + 
                    "filter=foo&" + 
                    "format=evomaster_65_input&" + 
                    "keys2=evomaster_66_input&" + 
                    "showMetadata=foo&" + 
                    "time=2017-05-17&" + 
                    "types=foo&" + 
                    "types2=way%2C&" + 
                    "values=evomaster_67_input&" + 
                    "values2=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given parameter showMetadata can only contain the values 'true', 'yes', 'false', or 'no'."));
    }
    
    
    @Test
    public void test_548() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureColl%5Dction%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22Xh%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704521%2C49.403252%5D%2C%5B8.721%2C49.424%5D%2C%5B8.70625%2C49.409%5D%2C%5B8.7055%2C49.42024%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22KTsEN%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7200%2C49.406%5D%2C%5B8.742%2C49.433210%5D%2C%5B8.706%2C49.438%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=foo&" + 
                    "format=foo&" + 
                    "keys=foo&" + 
                    "showMetadata=foo&" + 
                    "time=foo&" + 
                    "types=point%2Cline%2Cpolygon%2Cother&" + 
                    "values=evomaster_7180_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given GeoJSON has to be of the type 'FeatureCollection'."));
    }
    
    
    @Test
    public void test_549() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/density/groupBy/tag?" + 
                    "bcircles=zI%3A8.715%2C49.425533%2C2%7CHshU%3A8.7161%2C49.414556%2C5&" + 
                    "format=csv&" + 
                    "groupByKey=building&" + 
                    "showMetadata=no&" + 
                    "values=street_lamp")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("There cannot be more input values in the values|values2 than in the keys|keys2 parameter, as values_n must fit to keys_n."));
    }
    
    
    @Test
    public void test_550() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/key?" + 
                    "bcircles=LV%3A86503%2C79.607%2C7&" + 
                    "filter=etomaster_1740%3D_inlut&" + 
                    "format=Un&" + 
                    "groupByKeys=%2C&" + 
                    "showMetadata=cqn&" + 
                    "time=evomaster_172%294_inp&" + 
                    "timeout=0.2885254699543308&" + 
                    "types=NjAt_5YkF")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("You need to give one groupByKeys parameter, if you want to use groupBy/key."));
    }
    
    
    @Test
    public void test_551() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density/groupBy/type?" + 
                    "bboxes=CRM%3A8.68H2%2C49.4262%2C8.727%2C49.387&" + 
                    "keys=highway&" + 
                    "showMetadata=evomaster_164_input&" + 
                    "time=2018-02-21&" + 
                    "types=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Apart from the custom ids, the bboxeses array must contain double-parseable values in the following order: minLon, minLat, maxLon, maxLat."));
    }
    
    
    @Test
    public void test_552() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/boundary/groupBy/tag?" + 
                    "bboxes=8.6610%2C49.41516%2C8.749%2C49.391&" + 
                    "filter=destination%21%3D*+or+area%3A%281.0+..+1E6%29&" + 
                    "format=geojson&" + 
                    "groupByKey=highw&" + 
                    "groupByValues=pedestrian%2Cgive_way&" + 
                    "time=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_553() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density/groupBy/type?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%23features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22oYj%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7408%2C49.4068%5D%2C%5B8.738%2C49.427%5D%2C%5B8.707857%2C49.43135%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22u%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.706%2C49.439%5D%2C%5B8.720426%2C49.43218%5D%2C%5B8.707%2C49.425%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22mm%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.734%2C49.400%5D%2C%5B8.7033%2C49.433631%5D%2C%5B8.73267%2C49.432329%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "format=evomaster_1566_input&" + 
                    "showMetadata=foo&" + 
                    "time=foo&" + 
                    "types=foo&" + 
                    "values=stop_line")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in reading of the given GeoJSON."));
    }
    
    
    @Test
    public void test_554() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/type?" + 
                    "bboxes=os&" + 
                    "bcircles=pEv40q_vt2q2&" + 
                    "bpolys=Zi_9&" + 
                    "format=E9aI1VZc5_&" + 
                    "showMetadata=hI86C&" + 
                    "timeout=SE2ZEbNXSZtF&" + 
                    "types=SW5LG&" + 
                    "values=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_555() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/groupBy/boundary?" + 
                    "bcircles=H.708%2C69.434%2C7&" + 
                    "format=geojson&" + 
                    "keys=highway&" + 
                    "showMetadata=no&" + 
                    "time=fo&" + 
                    "values=evomaster_1012_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Each bcircle must consist of a lon/lat coordinate pair plus a buffer in meters."));
    }
    
    
    @Test
    public void test_556() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/ratio/groupBy/boundary?" + 
                    "bpolys=n%3A8.704561%2C49.403252%2C8.730%2C49.409%2C8.749%2C49.404723%2C8.7164%2C49.4005%2C8.704561%2C%249.40325&" + 
                    "filter2=evomaster_2982_input&" + 
                    "format=evomaster_2962_input&" + 
                    "showMetadata=foo&" + 
                    "time=evomaster_2909_input&" + 
                    "types=foo&" + 
                    "values=foo&" + 
                    "values2=pvimary_link")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The bpolys parameter must contain double-parseable values in form of lon/lat coordinate pairs."));
    }
    
    
    @Test
    public void test_557() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/density/groupBy/tag?" + 
                    "bboxes=8.659%2C49.407%2C8.7028%2C49.382554%7C8.684%2C49.4203%2C8.7007%2C49.3914%7C8.6734%2C49.425%2C8.719%2C49.387%7C8.6526%2C49.406%2C8.7576%2C49.398631&" + 
                    "filter=turn%3D*+and+type%3Away+or+area%3A%281.0+..+1E6%29&" + 
                    "format=geojson&" + 
                    "groupByKey=building&" + 
                    "groupByValues=track%2Cstation&" + 
                    "keys=highway&" + 
                    "time=%2F%2FP1Y9MA9D")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The interval (period) of the provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_558() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22Xh%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704521%2C49.403252%5D%2C%5B8.721%2C49.424%5D%2C%5B8.70625%2C49.409%5D%2C%5B8.7055%2C49.42024%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22KTsEN%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7200%2C49.406%5D%2C%5B8.742%2C49.433210%5D%2C%5B8.706%2C49.438%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "types=point%2Cline%2Cpolygon%2Cother&" + 
                    "values=elevator")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided GeoJSON cannot be converted."));
    }
    
    
    @Test
    public void test_559() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/key?" + 
                    "bcircles=LV%3A020.3%2C79.617%2C7&" + 
                    "format=csV&" + 
                    "groupByKeys=evomaster_22570_inpu&" + 
                    "showMetadata=evomaster_22574_input&" + 
                    "timeout=-6485.617350524154&" + 
                    "types=evomaster_18558%5Dinpuv")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given parameter showMetadata can only contain the values 'true', 'yes', 'false', or 'no'."));
    }
    
    
    @Test
    public void test_560() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/key?" + 
                    "bcircles=LV%3A021.3%2C79.617%2C7&" + 
                    "groupByKeys=UvomawresU23V44_input&" + 
                    "keys=csV&" + 
                    "showMetadata=evomaster_22574_input&" + 
                    "timeout=-6485.617350524154&" + 
                    "values=evom%60ster_18559_inp%7Dt")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given parameter showMetadata can only contain the values 'true', 'yes', 'false', or 'no'."));
    }
    
    
    @Test
    public void test_561() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/key?" + 
                    "bcircles=LV%3A041.3%2C79.617%2C%3B&" + 
                    "filter=etomaster_1740%3D_inlut&" + 
                    "format=csV&" + 
                    "groupByKeys=UvomawresU23V44_input&" + 
                    "showMetadata=tRuE&" + 
                    "time=exomastes_182%294_in&" + 
                    "types=LR8_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Each bcircle must consist of a lon/lat coordinate pair plus a buffer in meters."));
    }
    
    
    @Test
    public void test_562() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/key?" + 
                    "bpolys=evomaster_2%2C715_input&" + 
                    "format=Un&" + 
                    "groupByKeys=lvMl_vzsr&" + 
                    "time=exomaster_182%294ginp&" + 
                    "timeout=0.29&" + 
                    "types=evomaster_18558_input&" + 
                    "values=evom%60ster_18559_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The bpolys parameter must contain double-parseable values in form of lon/lat coordinate pairs."));
    }
    
    
    @Test
    public void test_563() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/key?" + 
                    "bcircles=HV%3A8.706%2C49.407%2C7&" + 
                    "filter=foo&" + 
                    "groupByKeys=foo&" + 
                    "keys=foo&" + 
                    "time=2017-11-2%2F&" + 
                    "timeout=57")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_564() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/ratio/groupBy/boundary?" + 
                    "bcircles=LcvgA%3A8.720%2C49.415211%2C7%7CW%3A8.706%2C49.4007%2C7&" + 
                    "filter=landuse%21%3D*+or+id%3A%281+..+9999%29&" + 
                    "keys2=highway&" + 
                    "timeout=42&" + 
                    "types2=other&" + 
                    "values2=elevator")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The filter2 parameter has to be defined when using a /ratio endpoint."));
    }
    
    
    @Test
    public void test_565() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/type?" + 
                    "bboxes=8.6557%2C49.4203%2C8.727%2C49.397664&" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22UHa%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7106%2C49.4231%5D%2C%5B8.7181%2C49.404%5D%2C%5B8.714152%2C49.4267%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22BnHUl%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.710%2C49.413%5D%2C%5B8.720%2C49.437%5D%2C%5B8.70232%2C49.406%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22FXg%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.704%2C49.436%5D%2C%5B8.742%2C49.4224%5D%2C%5B8.706%2C49.43435%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "keys=highway&" + 
                    "showMetadata=true&" + 
                    "time=2014-11-11")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_566() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/groupBy/boundary?" + 
                    "bcircles=8.708%2C69.434%2C7&" + 
                    "filter=foo&" + 
                    "keys=highway&" + 
                    "showMetadata=no&" + 
                    "types=foo&" + 
                    "values=evomaster_1012_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Parameter 'types' (and 'types2') can only have 'node' and/or 'way' and/or 'relation' OR 'point' and/or 'line' and/or 'polygon' and/or 'other'"));
    }
    
    
    @Test
    public void test_567() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/ratio?" + 
                    "bcircles=8.735364%2C49.4019%2C998&" + 
                    "filter2=foo&" + 
                    "format=csv&" + 
                    "keys=foo&" + 
                    "keys2=evomaster_28768_input&" + 
                    "showMetadata=yes&" + 
                    "time=2009-%2F5-%2F1&" + 
                    "types2=point%2Cline%2Cother&" + 
                    "values2=track")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_568() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/type")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("You need to define one of the boundary parameters (bboxes, bcircles, bpolys)."));
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/density?" + 
                    "bboxes=if&" + 
                    "bcircles=R7&" + 
                    "time=m_9ZU5P&" + 
                    "timeout=xP&" + 
                    "types=6e82")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/groupBy/key?" + 
                    "bboxes=p8&" + 
                    "filter=BTILE&" + 
                    "format=OQKBkV6IrlSchSs0&" + 
                    "groupByKeys=96CO_&" + 
                    "showMetadata=W&" + 
                    "time=Jn6u3")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_569() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/type?" + 
                    "bboxes=uz%3A8.6992%2C49.423%2C8.719415%2C49.385&" + 
                    "filter=addr%3Ahousenumber%21%3D*+or+geometry%3Apoint+or+length%3A%28+..+100%29&" + 
                    "format=csv&" + 
                    "time=2017-04-11&" + 
                    "timeout=60")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("You need to give at least two timestamps or a time interval for this resource."));
    }
    
    
    @Test
    public void test_570() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/density/groupBy/tag?" + 
                    "bcircles=e%3A8.709%2C37.823%2C9&" + 
                    "filter=foo&" + 
                    "groupByKey=highwaz&" + 
                    "groupByValues=fpo&" + 
                    "keys=highway&" + 
                    "showMetadata=no&" + 
                    "time=%2F1N%2FY8L%3A")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_571() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/density/groupBy/tag?" + 
                    "bcircles=e%3A8.70%3A%2C35.922%2C9&" + 
                    "filter=pUo&" + 
                    "groupByKey=higgQQz&" + 
                    "groupByValues=fpq&" + 
                    "keys=hggUwaU&" + 
                    "time=%2F%2F&" + 
                    "values=stop")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_572() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area?" + 
                    "bpolys=ipjK%3A8.704561%2C49.403252%2C8.74782%2C49.40984%2C8.705%2C49.43418%2C8.72205%2C49.416%2C8.704561%2C49.403252%7Cygyvh%3A8.704561%2C49.403252%2C8.717%2C49.414%2C8.70425%2C49.433%2C8.747913%2C49.410%2C8.704561%2C49.403252%7CpaAwp%3A8.704561%2C49.403252%2C8.713635%2C49.429160%2C8.7048%2C49.41227%2C8.721%2C49.410%2C8.704561%2C49.403252&" + 
                    "format=json&" + 
                    "time=2013-12-29&" + 
                    "timeout=890&" + 
                    "types=point%2Cpolygon%2C&" + 
                    "values=footway")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout is too long. It has to be shorter than 100.0 seconds"));
    }
    
    
    @Test
    public void test_573() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/ratio/groupBy/boundary?" + 
                    "bboxes=phFpi%3A8.670%2C49.41856%2C8.750%2C49.3988%7Ch%3A8.661124%2C49.42817%2C8.7461%2C49.380%7CRx%3A8.684%2C49.42139%2C8.7307%2C49.386&" + 
                    "filter=smoothness%3D*+or+geometry%3Apoint+or+id%3A%281+..+9999%29&" + 
                    "filter2=evomaster_156_input&" + 
                    "format=csv&" + 
                    "keys2=highwa%C2%81&" + 
                    "time=2007-12-25&" + 
                    "timeout=35&" + 
                    "types2=foo&" + 
                    "values2=turning_circleH")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Invalid filter syntax. Please look at the additional info and examples about the filter parameter at https://docs.ohsome.org/ohsome-api. Detailed error message: line 1, column 20: whitespaces, EQUALS (=), NOT_EQUALS (!=) or in expected, EOF encountered."));
    }
    
    
    @Test
    public void test_574() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/density/groupBy/tag?" + 
                    "bcircles=e%3A8.70%3A%2C35.920%2C9&" + 
                    "filter=pUo&" + 
                    "groupByKey=higgQQz&" + 
                    "groupByValues=fpq&" + 
                    "keys=hggUwaU&" + 
                    "time=%2F&" + 
                    "values=stop")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The keys, values and types parameters must be empty, when you set the filter parameter."));
    }
    
    
    @Test
    public void test_575() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count?" + 
                    "bcircles=iptTPkm&" + 
                    "filter=JlzNInVBE&" + 
                    "keys=Wu13AwouNd4Vs&" + 
                    "time=5&" + 
                    "values=lSp4")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_576() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/ratio/groupBy/boundary?" + 
                    "bboxes=l&" + 
                    "filter=aPvn&" + 
                    "filter2=aupXGiqnnfoz&" + 
                    "format=rf8PhLo3YmKeux&" + 
                    "keys=fbzUmi&" + 
                    "keys2=PE&" + 
                    "types2=p4WLN&" + 
                    "values=UaKH&" + 
                    "values2=jroc")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_577() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/density/groupBy/boundary/groupBy/tag?" + 
                    "bboxes=yGeOE0&" + 
                    "bcircles=_OhbIFLZ&" + 
                    "bpolys=evomaster_8478_input&" + 
                    "filter=evomaster_8490_input&" + 
                    "format=evomaster_8491_input&" + 
                    "groupByKey=evomaster_621%2C_input&" + 
                    "groupByValues=5MMJb&" + 
                    "showMetadata=uChIZzC&" + 
                    "time=&" + 
                    "timeout=evomaster_8492_input&" + 
                    "types=evomaster_8480_input&" + 
                    "values=sQpxn")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("You need to give one groupByKey parameter, if you want to use groupBy/tag."));
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/key?" + 
                    "bboxes=I1CdOVlMrY&" + 
                    "filter=evomaster_6212_input&" + 
                    "format=evomaster_8493_input&" + 
                    "groupByKeys=evomaster_8481_input&" + 
                    "keys=NBjOfOMN&" + 
                    "showMetadata=evomaster_8482_input&" + 
                    "time=Jh&" + 
                    "timeout=f")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/density/groupBy/type?" + 
                    "bboxes=ZhLJuzQV&" + 
                    "bcircles=O&" + 
                    "filter=U&" + 
                    "format=X7wdwjOL&" + 
                    "showMetadata=STVGunwQ&" + 
                    "timeout=A_T3AirDfi5ETZkv&" + 
                    "types=2Ur8JFZLkHl")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/boundary/groupBy/tag?" + 
                    "bboxes=v4UMpjfHDbRAiC&" + 
                    "bpolys=evomaster_6213_input&" + 
                    "filter=bQHepwETx&" + 
                    "format=annIgcf6fmKhsKx&" + 
                    "groupByKey=evomaster_8494_input&" + 
                    "time=Op&" + 
                    "timeout=Ed6DPUXuMSe&" + 
                    "values=evomaster_8495_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/density/groupBy/type?" + 
                    "bpolys=38cD&" + 
                    "keys=&" + 
                    "timeout=&" + 
                    "types=mJVerdH206ua&" + 
                    "values=kym")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/groupBy/boundary?" + 
                    "bboxes=B&" + 
                    "bcircles=evomaster_8496_input&" + 
                    "bpolys=1Vly&" + 
                    "filter=evomaster_8483_input&" + 
                    "keys=1J72SW4DjLNCOWg&" + 
                    "showMetadata=IY&" + 
                    "time=pleCOHmZ8Tl6I&" + 
                    "types=Lae7HQSfR&" + 
                    "values=XX*")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_578() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22fj%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Pplygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.736%2C49.407%5D%2C%5B8.707%2C49.4075%5D%2C%5B8.717%2C49.42671%5D%2C%5B8.706561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=foo&" + 
                    "format=foo&" + 
                    "keys=highw%5Dyr&" + 
                    "showMetadata=UqU&" + 
                    "time=fko&" + 
                    "timeout=37&" + 
                    "types=hine%2Cother&" + 
                    "values=foj")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The geometry of each feature in the GeoJSON has to be of type 'Polygon' or 'MultiPolygon'."));
    }
    
    
    @Test
    public void test_579() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/groupBy/type?" + 
                    "bpolys=qR&" + 
                    "keys=Cb3NgrDG&" + 
                    "showMetadata=gfP8AUrH4MhithGB&" + 
                    "types=LOUFvJgX3i8&" + 
                    "values=mznTGAQH")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_580() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/groupBy/boundary?" + 
                    "bcircles=2.%3A-9%2C75.898%2C%3B&" + 
                    "format=GeOJsOn&" + 
                    "showMetadata=O&" + 
                    "types=OtHEr&" + 
                    "values=NvoRA")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Each bcircle must consist of a lon/lat coordinate pair plus a buffer in meters."));
    }
    
    
    @Test
    public void test_581() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/key?" + 
                    "bcircles=HV%3A8.706%2C59.407%2C7&" + 
                    "filter=evomaster_17209_input&" + 
                    "groupByKeys=foo&" + 
                    "keys=foo&" + 
                    "time=evomaster_17210_input&" + 
                    "timeout=57&" + 
                    "types=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Parameter 'types' (and 'types2') can only have 'node' and/or 'way' and/or 'relation' OR 'point' and/or 'line' and/or 'polygon' and/or 'other'"));
    }
    
    
    @Test
    public void test_582() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/key?" + 
                    "bcircles=HV%3A8.706%2C79.407%2C7&" + 
                    "filter=evomaster_17209_input&" + 
                    "groupByKeys=&" + 
                    "keys=foo&" + 
                    "time=evomaster_172%290_input&" + 
                    "timeout=0.2885254699543308&" + 
                    "types=foo&" + 
                    "values=give_way")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Parameter 'types' (and 'types2') can only have 'node' and/or 'way' and/or 'relation' OR 'point' and/or 'line' and/or 'polygon' and/or 'other'"));
    }
    
    
    @Test
    public void test_583() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/tag?" + 
                    "bboxes=eOhq%3A8.6696%2C49.40510%2C8.747%2C49.3988&" + 
                    "format=geojson&" + 
                    "groupByKey=building&" + 
                    "groupByValues=cycleway%2Cconstruction&" + 
                    "keys=highway&" + 
                    "time=2017-08-15&" + 
                    "values=crossing")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("You need to give at least two timestamps or a time interval for this resource."));
    }
    
    
    @Test
    public void test_584() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/key?" + 
                    "bcircles=LV%3A86503%2C79.607%2C7&" + 
                    "filter=etomaster_1740%3D_inlut&" + 
                    "format=Un&" + 
                    "groupByKeys=&" + 
                    "showMetadata=con&" + 
                    "time=evomaster_172%294_inp&" + 
                    "types=evomaster_18558_input&" + 
                    "values=evomaster_18559_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Each bcircle must consist of a lon/lat coordinate pair plus a buffer in meters."));
    }
    
    
    @Test
    public void test_585() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/type?" + 
                    "bpolys=l%3A8.704561%2C49.403252%2C8.745%2C49.437266%2C8.726%2C49.424%2C8.702873%2C49.412%2C8.704561%2C49.403252%7Cagd%3A8.704561%2C49.403252%2C8.7474%2C49.4041%2C8.7045%2C49.4190%2C8.70720%2C49.410%2C8.704561%2C49.40325&" + 
                    "keys=highway&" + 
                    "types=fko&" + 
                    "values=street_laip")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Parameter 'types' (and 'types2') can only have 'node' and/or 'way' and/or 'relation' OR 'point' and/or 'line' and/or 'polygon' and/or 'other'"));
    }
    
    
    @Test
    public void test_586() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/type?" + 
                    "bcircles=8.712%2C49.413%2C12&" + 
                    "format=csv&" + 
                    "keys=highway&" + 
                    "showMetadata=false&" + 
                    "time=2010-08-25&" + 
                    "timeout=57&" + 
                    "values=platform")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("You need to give at least two timestamps or a time interval for this resource."));
    }
    
    
    @Test
    public void test_587() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/type?" + 
                    "bcircles=BTEz%3A8.745%2C49.4131%2C7%7Ch%3A8.701%2C49.425%2C9&" + 
                    "filter=network%3D*+or+geometry%3Aline+or+length%3A%28+..+100%29&" + 
                    "format=json&" + 
                    "showMetadata=no&" + 
                    "time=2018-04-10&" + 
                    "timeout=62")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("You need to give at least two timestamps or a time interval for this resource."));
    }
    
    
    @Test
    public void test_588() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/type?" + 
                    "bboxes=ds%3A8.6570%2C49.4047%2C8.716%2C49.388%7CPOF%3A8.692%2C49.4122%2C8.7266%2C49.399%7Cc%3A8.650%2C49.4216%2C8.71953%2C49.38929%7CLDRp%3A8.690%2C49.413%2C8.7169%2C49.3914&" + 
                    "keys=highway&" + 
                    "time=2011-04-23&" + 
                    "values=secondary_link")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("You need to give at least two timestamps or a time interval for this resource."));
    }
    
    
    @Test
    public void test_589() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/groupBy/boundary?" + 
                    "bcircles=8.718%2C49.42250%2C6%7C8.7097%2C89.406%2C7&" + 
                    "filter=lanes%21%3D*+and+geometry%3Apoint&" + 
                    "format=csv&" + 
                    "keys=foo&" + 
                    "showMetadata=true")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_590() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/density/groupBy/tag?" + 
                    "bboxes=8.659%2C49.407%2C8.7028%2C49.382554%7C8.684%2C49.4203%2C8.7007%2C49.3914%7C8.6734%2C49.425%2C8.719%2C59.387%7C8.6526%2C49.406%2C8.7576%2C49.398631&" + 
                    "groupByKey=building&" + 
                    "groupByValues=track%2Cstation&" + 
                    "keys=evomaster_8719_input&" + 
                    "showMetadata=true&" + 
                    "time=%2F%2FP1W9M19D&" + 
                    "values=foo")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_591() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/density/groupBy/boundary?" + 
                    "bboxes=hrt%3A8.693%2C49.309%2C8.751221%2C49.384&" + 
                    "filter=foo&" + 
                    "time=%2F%2FP2Y6M26D&" + 
                    "timeout=62&" + 
                    "types=foo")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_592() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/tag?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22ohi%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.726%2C49.415471%5D%2C%5B8.71915%2C49.410%5D%2C%5B8.731%2C49.454%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=e&" + 
                    "format=%5Doo&" + 
                    "groupByKey=evomaster_25857_input&" + 
                    "time=q%5BxU&" + 
                    "types=eromaster_2654U_input&" + 
                    "values=fq%60H")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_593() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/type?" + 
                    "bpolys=l%3A8.704541%2C49.403252%2C8.745%2C49.437266%2C8.726%2C49.424%2C8.702873%2C49.412%2C8.704561%2C49.403252%7Cagd%3A8.704561%2C49.403252%2C8.7474%2C49.4041%2C8.7045%2C49.4190%2C8.70720%2C49.410%2C8.704561%2C49.403252&" + 
                    "keys=highway&" + 
                    "showMetadata=foo&" + 
                    "types=foo&" + 
                    "values=street_laip")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_594() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22fj%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.736%2C49.407%5D%2C%5B8.707%2C49.4075%5D%2C%5B8%2C717%2C49.42671%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "time=foo&" + 
                    "timeout=39")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_595() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density/groupBy/tag?" + 
                    "bcircles=8.711%2C49.424443%2C2%7C8.7056%2C49.319%2C5&" + 
                    "filter=turn%3Alanes%3D*+and+type%3Arelation&" + 
                    "groupByKey=building&" + 
                    "groupByValues=foo&" + 
                    "showMetadata=true&" + 
                    "timeout=98")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_596() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/type?" + 
                    "bcircles=8.74501%2C49.404447%2C1%7C8.745%2C39.413%2C5&" + 
                    "format=json&" + 
                    "keys=highway&" + 
                    "time=2008-01-31&" + 
                    "timeout=29")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_597() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/density/groupBy/type?" + 
                    "bboxes=pYU%3A8.682802%2C49.409%2C8.7564%2C49.3805%7CLH%3A82657%2C49.4206%2C7.739%2C49.381&" + 
                    "format=gaojton&" + 
                    "keys=fqjK")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_598() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/ratio/groupBy/boundary?" + 
                    "bpolys=n%3A8.704561%2C49.403252%2C8.730%2C49.409%2C8.749%2C49.404723%2C6.7164%2C49.4005%2C8.704561%2C49.40325&" + 
                    "filter2=foo&" + 
                    "format=foo&" + 
                    "showMetadata=foo&" + 
                    "time=evomaster_2909_input&" + 
                    "types=foo&" + 
                    "values=foo&" + 
                    "values2=primary_link")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_599() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/ratio/groupBy/boundary?" + 
                    "bpolys=n%3A8.704561%2C49.403252%2C8.730%2C49.409%2C8.749%2C49.404723%2C8.7124%2C49.4005%2C8.704561%2C49.40425&" + 
                    "filter=network%21%3D*+and+area%3A%281.0+..+1E6%29&" + 
                    "format=cSV&" + 
                    "keys=foo&" + 
                    "showMetadata=foo&" + 
                    "time=evomaster_290A_input&" + 
                    "types=evomaster_6946_input&" + 
                    "types2=evomaster_6999_input")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_600() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/ratio?" + 
                    "bcircles=8.735364%2C49.4019%2C998&" + 
                    "format=csv&" + 
                    "keys2=highway&" + 
                    "showMetadata=yes&" + 
                    "time=0009-03-01&" + 
                    "types2=point%2Cline%2Cother&" + 
                    "values2=track")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The given time parameter is not completely within the timeframe (2007-10-07 to 2018-05-10T"));
    }
    
    
    @Test
    public void test_601() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/key?" + 
                    "bcircles=HV%3A8.706%2C49.407%2C7&" + 
                    "filter=evomaster_2788_input&" + 
                    "groupByKeys=foo&" + 
                    "keys=evomaster_11477_input&" + 
                    "time=2417-11-20&" + 
                    "timeout=57")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The given time parameter is not completely within the timeframe (2007-10-07 to 2018-05-10T"));
    }
    
    
    @Test
    public void test_602() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/ratio?" + 
                    "bboxes=8.688681%2C49.42381%2C7.720%2C49.386&" + 
                    "filter=foo&" + 
                    "filter2=foo&" + 
                    "format=foo&" + 
                    "keys=foo&" + 
                    "keys2=foo&" + 
                    "showMetadata=false&" + 
                    "time=2007-10-15&" + 
                    "timeout=82&" + 
                    "values=foo")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_603() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/ratio/groupBy/boundary?" + 
                    "bpolys=n%3A8.704561%2C49.403252%2C8.730%2C49.409%2C8.749%2C49.404723%2C8.7164%2C49.4005%2C8.704561%2C49.40325&" + 
                    "filter2=foo&" + 
                    "format=foo&" + 
                    "keys2=highway&" + 
                    "time=evomaster_2909_input&" + 
                    "types=foo&" + 
                    "values2=primary_link")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_604() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/key?" + 
                    "bcircles=LV%3A102.2%2C79.436%2C7&" + 
                    "format=CSv&" + 
                    "groupByKeys=UvouawresU23V44_inxv&" + 
                    "keys=JSoN&" + 
                    "showMetadata=&" + 
                    "timeout=-7547.687015641528")
                .then()
                .statusCode(413)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(413.0))
                .body("'message'", containsString("The given query is too large in respect to the given timeout. Please use a smaller region and/or coarser time period."));
    }
    
    
    @Test
    public void test_605() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/groupBy/boundary?" + 
                    "bcircles=0.708%2C00.001%2C7&" + 
                    "format=gEOJSoN&" + 
                    "keys=source%3Ageometry%2Badr.&" + 
                    "timeout=-2.149762035423592&" + 
                    "types=otHER")
                .then()
                .statusCode(413)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(413.0))
                .body("'message'", containsString("The given query is too large in respect to the given timeout. Please use a smaller region and/or coarser time period."));
    }


}
