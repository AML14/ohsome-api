package old;

import org.heigit.ohsome.ohsomeapi.EMDriver;
import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.controller.api.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import static org.evomaster.client.java.controller.db.dsl.SqlDsl.sql;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto;
import  java.util.List;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
 * This file was automatically generated by EvoMaster on 2020-11-20T18:52:42.180+01:00[Europe/Paris]
 * <br>
 * The generated test suite contains 394 tests
 * <br>
 * Covered targets: 5664
 * <br>
 * Used time: 1h 0m 0s
 * <br>
 * Needed budget for current results: 99%
 * <br>
 * 
 */
public class EvoMasterTest_1h_seed_1_per_op {

    
    private static final SutHandler controller = new EMDriver();
    private static String baseUrlOfSut;
    
    
    @BeforeClass
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    @AfterClass
    public static void tearDown() {
        controller.stopSut();
    }
    
    
    @Before
    public void initTest() {
        controller.resetStateOfSUT();
    }
    
    
    
    
    @Test
    public void test_0() throws Exception {
        
        try{
            given().accept("*/*")
                    .get(baseUrlOfSut + "/users/count/groupBy/boundary?" + 
                        "bcircles=H%3A8.719945%2C49.4063%2C88&" + 
                        "time=%2F%2FP11D")
                    .then();
        } catch(Exception e){
        }
    }
    
    
    @Test
    public void test_1() throws Exception {
        
        try{
            given().accept("*/*")
                    .get(baseUrlOfSut + "/users/count/density/groupBy/type?" + 
                        "bcircles=oxxhE%3A8.70247%2C49.418%2C23&" + 
                        "time=%2F%2FP3Y7D&" + 
                        "timeout=90")
                    .then();
        } catch(Exception e){
        }
    }
    
    
    @Test
    public void test_2() throws Exception {
        
        try{
            given().accept("*/*")
                    .get(baseUrlOfSut + "/users/count/density/groupBy/boundary?" + 
                        "bboxes=8.696%2C49.40177%2C8.707%2C49.39583%7C8.69241%2C49.424%2C8.73865%2C49.385&" + 
                        "format=csv&" + 
                        "time=%2F%2FP2M7D")
                    .then();
        } catch(Exception e){
        }
    }
    
    
    @Test
    public void test_3() throws Exception {
        
        try{
            given().accept("*/*")
                    .post(baseUrlOfSut + "/users/count/density/groupBy/tag?" + 
                        "bcircles=rHa%3A8.703224%2C49.4224%2C9&" + 
                        "groupByKey=buildin&" + 
                        "groupByValues=steps%2Croof&" + 
                        "timeout=88")
                    .then();
        } catch(Exception e){
        }
    }
    
    
    @Test
    public void test_4_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/groupBy/key?" + 
                    "bboxes=BrZSo%3A8.6627%2C49.422%2C8.749%2C49.38773%7CNAX%3A8.676%2C49.428%2C8.724%2C49.398%7ChwZ%3A8.665627%2C49.4267%2C8.700%2C49.383%7CQuCdV%3A8.66208%2C49.42070%2C8.720.3%2C49.39843&" + 
                    "format=csv&" + 
                    "groupByKeys=addr%3Acountpy.addr%3Aeit&" + 
                    "keys=WotB&" + 
                    "time=%2F1P2M2&" + 
                    "values=hooF")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_74_createBboxes
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/users/count/groupBy/key"));
    }
    
    
    @Test
    public void test_5() throws Exception {
        
        try{
            given().accept("*/*")
                    .post(baseUrlOfSut + "/users/count?" + 
                        "bcircles=QTrOL%3A8.702%2C49.4036%2C111&" + 
                        "filter=barrier%21%3D*&" + 
                        "format=geojson&" + 
                        "time=%2F%2FP1Y8D")
                    .then();
        } catch(Exception e){
        }
    }
    
    
    @Test
    public void test_6_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count?" + 
                    "bcircles=Li%3A8.7252%2C49.438%2C972139796&" + 
                    "format=json&" + 
                    "keys=highway&" + 
                    "timeout=22")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El ángulo 8.609.727.597.496.649.700 es demasiado grande."))
                .body("'path'", containsString("/users/count"));
    }
    
    
    @Test
    public void test_7_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/ratio/groupBy/boundary?" + 
                    "bcircles=sy%3A56.101%2C59.609%2C6%7CAK%3A8.737.%2C07.030195%2C70&" + 
                    "filter=evomastmr_60167_ilput&" + 
                    "format=Csv&" + 
                    "keys=evkmast%5Dr_630%3F4_input&" + 
                    "keys2=evsmaster_64058_inpu&" + 
                    "timeout=31&" + 
                    "types2=pf1DfA%2F4ZT9ZITYE&" + 
                    "values=avomaster_80730_inpu&" + 
                    "values2=JLOu")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_114_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/perimeter/ratio/groupBy/boundary"));
    }
    
    
    @Test
    public void test_8_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/ratio/groupBy/boundary?" + 
                    "bcircles=8.712%2C49.42165%2C19573234690%7C8.719%2C49.430%2C9&" + 
                    "filter2=oneway%3D*+or+type%3Away+or+id%3A%281+..+9999%29&" + 
                    "keys=highway&" + 
                    "keys2=highway&" + 
                    "time=2015-11-10&" + 
                    "timeout=43&" + 
                    "types2=point%2Cline%2Cpolygon%2Cother&" + 
                    "values2=secondary_link")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El ángulo 231.952.862.905.726.700.000.000.000.000 es demasiado grande."))
                .body("'path'", containsString("/elements/perimeter/ratio/groupBy/boundary"));
    }
    
    
    @Test
    public void test_9_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/density/groupBy/tag?" + 
                    "bpolys=B%3A8.704561%2C49.403252%2C8.718326%2C49.414%2C8.722%2C49.439%2C8.723%2C49.405071%2C8.704561%2C49.403252%7Cb%3A8.704561%2C49.403252%2C8.725%2C49.414%2C8.704%2C49.416%2C8.7162%2C49.4381%2C8.704561%2C49.403252%7CtYg%3A8.704561%2C49.403252%2C8.74576%2C49.418%2C8.700%2C49.4202%2C8.701%2C49.433%2C8.704561%2C49.403252&" + 
                    "groupByKey=building&" + 
                    "time=2013-03-10")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.718326 49.414 ) and LINESTRING ( 8.7162 49.4381, 8.704561 49.403252 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/perimeter/density/groupBy/tag"));
    }
    
    
    @Test
    public void test_10_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/density/groupBy/boundary?" + 
                    "bpolys=8.704561%2C49.403252%2C8.722%2C49.41750%2C8.7454%2C49.412619%2C8.7489%2C49.426%2C8.704561%2C49.403252&" + 
                    "filter=destination%21%3D*+and+length%3A%28+..+100%29&" + 
                    "format=geojson&" + 
                    "time=2016-04-19")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.722 49.4175, 8.7454 49.412619 ) and LINESTRING ( 8.7489 49.426, 8.704561 49.403252 ) [ (8.72934575719125, 49.415967750391005, NaN) ]"))
                .body("'path'", containsString("/elements/perimeter/density/groupBy/boundary"));
    }
    
    
    @Test
    public void test_11_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=xV%3A8.704561%2C49.403252%2C8.735%2C49.414%2C8.708%2C49.4297%2C8.7035%2C49.4196%2C8.704561%2C49.403252%7CTnS%3A8.704561%2C49.403252%2C8.7492%2C49.4001%2C8.706493%2C49.42894%2C8.709%2C49.4014%2C8.704561%2C49.403252&" + 
                    "groupByKey=building&" + 
                    "keys=highway&" + 
                    "timeout=59&" + 
                    "values=residential")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.735 49.414 ) and LINESTRING ( 8.7035 49.4196, 8.704561 49.403252 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/length/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_12_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/groupBy/boundary?" + 
                    "bcircles=Mw%3A8.722%2C49.4101%2C9585886661%7CMKbiU%3A8.7326%2C49.426%2C6%7CuJu%3A8.716%2C49.433%2C4&" + 
                    "keys=highway&" + 
                    "showMetadata=true&" + 
                    "values=path")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El ángulo 766.200.699.175.382.800.000.000.000 es demasiado grande."))
                .body("'path'", containsString("/elements/length/groupBy/boundary"));
    }
    
    
    @Test
    public void test_13_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/density/groupBy/type?" + 
                    "bpolys=D%3A8.704561%2C49.403252%2C8.712%2C49.407%2C8.733%2C49.43038%2C8.702%2C49.40254%2C8.704561%2C49.403252%7CiBu%3A8.704561%2C49.403252%2C8.724%2C49.415%2C8.733%2C49.4165%2C8.721%2C49.404594%2C8.704561%2C49.403252&" + 
                    "filter=ref%21%3D*+or+type%3Anode+or+id%3A%281+..+9999%29&" + 
                    "format=csv&" + 
                    "showMetadata=yes&" + 
                    "time=2015-09-07&" + 
                    "timeout=57")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.712 49.407 ) and LINESTRING ( 8.702 49.40254, 8.704561 49.403252 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/length/density/groupBy/type"));
    }
    
    
    @Test
    public void test_14_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/density/groupBy/tag?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22uTa%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.716%2C49.4181%5D%2C%5B8.747%2C49.421%5D%2C%5B8.710365%2C49.405%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22x%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.746%2C49.4301%5D%2C%5B8.708%2C49.42053%5D%2C%5B8.743%2C49.400723%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22b%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7171%2C49.400%5D%2C%5B8.718%2C49.40446%5D%2C%5B8.7057%2C49.421%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=barrier%3D*+or+geometry%3Apoint+or+id%3A%281+..+9999%29&" + 
                    "format=json&" + 
                    "groupByKey=building&" + 
                    "showMetadata=false")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.729415436188736 49.41935499241766 ) and LINESTRING ( 8.714874789043353 49.416639458669096, 8.724519032239495 49.411181643669494 ) [ (8.720398929124904, 49.413513268880656, NaN) ]"))
                .body("'path'", containsString("/elements/count/density/groupBy/tag"));
    }
    
    
    @Test
    public void test_15_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/density?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22qua%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.721%2C49.428935%5D%2C%5B8.709003%2C49.4250%5D%2C%5B8.7047%2C49.40883%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22QL%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.723%2C49.416%5D%2C%5B8.748%2C49.423%5D%2C%5B8.749%2C49.405%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22fF%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7067%2C49.43168%5D%2C%5B8.721%2C49.403%5D%2C%5B8.7170%2C49.429%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "format=geojson&" + 
                    "keys=highway&" + 
                    "time=2016-09-06")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.709886237145632 49.42528970060582, 8.713731050261831 49.417578564929414 ) and LINESTRING ( 8.71620950631326 49.427363724459674, 8.704561 49.403252 ) [ (8.712588893432361, 49.41986926827691, NaN) ]"))
                .body("'path'", containsString("/elements/count/density"));
    }
    
    
    @Test
    public void test_16_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/ratio/groupBy/boundary?" + 
                    "bboxes=E%3A8.659%2C49.4.15%2C8.710%2C49.384&" + 
                    "filter=foo&" + 
                    "filter2=foo&" + 
                    "format=csv&" + 
                    "keys=foo&" + 
                    "keys2=foo&" + 
                    "time=foo&" + 
                    "timeout=31&" + 
                    "types=evomaster_34656_input&" + 
                    "types2=foo&" + 
                    "values=foo&" + 
                    "values2=evomaster_28997_input")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_64_createBboxes
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/area/ratio/groupBy/boundary"));
    }
    
    
    @Test
    public void test_17_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/ratio/groupBy/boundary?" + 
                    "bcircles=ugdtL%3A8.720%2C49.441%2C833546681&" + 
                    "filter2=turn%21%3D*+and+geometry%3Apoint+or+id%3A%28%29+..+9999%29&" + 
                    "keys2=highway&" + 
                    "showMetadata=false&" + 
                    "time=2012512-22&" + 
                    "types=evomaster_43953_input&" + 
                    "types2=node%2C&" + 
                    "values2=evomaster_43954_input")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El ángulo 2.516.467.028.365.549.100 es demasiado grande."))
                .body("'path'", containsString("/elements/area/ratio/groupBy/boundary"));
    }
    
    
    @Test
    public void test_18_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/ratio?" + 
                    "bcircles=mvv%3A8.7048%2C49.40.%2C60&" + 
                    "filter=evomaster_18480_input&" + 
                    "filter2=fgo&" + 
                    "format=csv&" + 
                    "keys2=foo&" + 
                    "showMetadata=true&" + 
                    "time=fo&" + 
                    "timeout=22&" + 
                    "types2=evomaster_48429_input&" + 
                    "values=evomaster_18481_input&" + 
                    "values2=evomaster_48430_input")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_114_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/area/ratio"));
    }
    
    
    @Test
    public void test_19_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/tag?" + 
                    "bpolys=nr%3A8.704561%2C49.403252%2C8.705%2C49.417%2C8.718865%2C49.4221%2C8.70448%2C49.428%2C8.704561%2C49.403252%7Cj%3A8.704561%2C49.403252%2C8.72345%2C49.41322%2C8.7030%2C49.400%2C8.703%2C49.407%2C8.704561%2C49.403252%7CwIMcP%3A8.704561%2C49.403252%2C8.707%2C49.427%2C8.705%2C49.4137%2C8.70601%2C49.429%2C8.704561%2C49.403252&" + 
                    "format=geojson&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=hut&" + 
                    "keys=highway&" + 
                    "showMetadata=true")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.705 49.417 ) and LINESTRING ( 8.703 49.407, 8.704561 49.403252 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/area/groupBy/tag"));
    }
    
    
    @Test
    public void test_20_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/boundary?" + 
                    "bpolys=8.704561%2C49.403252%2C8.7073%2C49.404322%2C8.721%2C49.40058%2C8.732%2C49.400%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.7337%2C49.411%2C8.703%2C49.4169%2C8.715%2C49.418%2C8.704561%2C49.403252&" + 
                    "keys=highway&" + 
                    "time=2011-03-08&" + 
                    "timeout=58&" + 
                    "values=cycleway")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.7073 49.404322 ) and LINESTRING ( 8.732 49.4, 8.704561 49.403252 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/area/groupBy/boundary"));
    }
    
    
    @Test
    public void test_21_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/density/groupBy/tag?" + 
                    "bpolys=a%3A8.704561%2C49.403252%2C8.704%2C49.4370%2C8.701%2C49.4203%2C8.725%2C49.41817%2C8.704561%2C49.403252%7Cvc%3A8.704561%2C49.403252%2C8.700862%2C49.4301%2C8.70414%2C49.4119%2C8.7049%2C49.436%2C8.704561%2C49.403252%7CIR%3A8.704561%2C49.403252%2C8.718%2C49.41659%2C8.705%2C49.4291%2C8.70459%2C49.402%2C8.704561%2C49.403252&" + 
                    "filter=name%3D*+or+length%3A%28+..+100%29&" + 
                    "format=csv&" + 
                    "groupByKey=building&" + 
                    "groupByValues=speed_camera%2Cplatform%2Chotel&" + 
                    "showMetadata=false&" + 
                    "time=2008-10-28")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.704 49.437 ) and LINESTRING ( 8.704561 49.403252, 8.700862 49.4301 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/area/density/groupBy/tag"));
    }
    
    
    @Test
    public void test_22_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area?" + 
                    "bpolys=hTRa%3A8.704561%2C49.403252%2C8.719%2C49.4197%2C8.709%2C49.41384%2C8.7231%2C49.400%2C8.704561%2C49.403252%7Cwdv%3A8.704561%2C49.403252%2C8.73178%2C49.412%2C8.726641%2C49.423799%2C8.716%2C49.412%2C8.704561%2C49.403252%7CaIfGD%3A8.704561%2C49.403252%2C8.712%2C49.427%2C8.707%2C49.423355%2C8.721%2C49.422%2C8.704561%2C49.403252&" + 
                    "filter=foo&" + 
                    "format=evomaster_2335_input&" + 
                    "keys=foo&" + 
                    "time=2010-10-24&" + 
                    "timeout=42&" + 
                    "values=foo")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.719 49.4197 ) and LINESTRING ( 8.704561 49.403252, 8.712 49.427 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/area"));
    }
    
    
    @Test
    public void test_23_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density/groupBy/tag?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22febtures%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22AJ%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7301%2C49.422%5D%2C%5B8.704%2C49.418%5D%2C%5B8.700%2C49.423%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22leJO%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.719%2C49.434%5D%2C%5B8.71244%2C49.425279%5D%2C%5B8.707624%2C49.416178%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22Gmnwr%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7106%2C49.426%5D%2C%5B8.708539%2C49.4338%5D%2C%5B8.709%2C49.41405%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=fooY&" + 
                    "format=Csv&" + 
                    "groupByKey=2GRpRnA&" + 
                    "groupByValues=foo&" + 
                    "keys=highway&" + 
                    "showMetadata=foo&" + 
                    "types=foo&" + 
                    "values=lifing_street")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_237_createGeometryFromGeoJson
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/elements/area/density/groupBy/tag"));
    }
    
    
    @Test
    public void test_24_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area?" + 
                    "bpolys=hTRa%3A8.704561%2C49.403252%2C8.719%2C49.4197%2C8.709%2C49.41384%2C8.7231%2C49.400%2C8.704561%2C49.403252%7Cwdv%3A8.704561%2C49.403252%2C8.73178%2C49.412%2C8.726641%2C49.423799%2C8.716%2C49.412%2C8.704561%2C49.403252%7CaIfGD%3A8.704561%2C49.403252%2C8.712%2C49.427%2C8.707%2C49.423355%2C8.721%2C49.422%2C8.704561%2C49.40325&" + 
                    "filter=evomaster_20970_input&" + 
                    "format=evo%7Daster_2335_input&" + 
                    "keys=evomaster_20992_input&" + 
                    "showMetadata=false&" + 
                    "time=2010-10-2%3C&" + 
                    "timeout=42&" + 
                    "values=evomaster_56305_input")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.719 49.4197 ) and LINESTRING ( 8.709 49.41384, 8.713119116917776 49.40979683842964 ) [ (8.711608279117094, 49.41127981680989, NaN) ]"))
                .body("'path'", containsString("/elements/area"));
    }
    
    
    @Test
    public void test_25_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/ratio/groupBy/boundary?" + 
                    "bpolys=8.704561%2C49.403252%2C8.724%2C49.4036%2C8.725%2C49.4199%2C8.7435%2C49.4332%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.72695%2C49.4040%2C8.7308%2C49.412%2C8.711%2C49.426%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.725%2C49.410%2C8.701295%2C49.431646%2C8.7208%2C49.409837%2C8.704561%2C49&" + 
                    "filter=aio&" + 
                    "filter2=foo&" + 
                    "format=jss1n&" + 
                    "keys=hifhw%5Dy&" + 
                    "keys2=digkw%5DyM&" + 
                    "time=2008%2B08-1&" + 
                    "types=doq&" + 
                    "types2=s%60%7D%2C&" + 
                    "values=sdrvib")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.72477662291382 49.41625895349528, 8.725 49.4199 ) and LINESTRING ( 8.7435 49.4332, 8.72305535229964 49.41747601352551 ) [ (8.724940225151329, 49.41892566996667, NaN) ]"))
                .body("'path'", containsString("/elements/length/ratio/groupBy/boundary"));
    }
    
    
    @Test
    public void test_26_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density/groupBy/type?" + 
                    "bpolys=I%3A8.704561%2C49.403252%2C8.70588%2C49.439%2C8.740135%2C49.41201%2C8.700%2C49.428%2C8.704561%2C49.403252%7CbWn%3A8.704561%2C49.403252%2C8.7140%2C49.402506%2C8.70488%2C49.432%2C8.7338%2C49.422543%2C8.704561%2C49.403252%7Cptr%3A8.704561%2C49.403252%2C8.716958%2C49.40353%2C8.709421%2C49.4142%2C8.7048%2C49.429%2C8.704551%2C69.4&" + 
                    "format=lso&" + 
                    "keys=fio&" + 
                    "showMetadata=hU&" + 
                    "types=Uoolg")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.714 49.402506, 8.706976292824729 49.425220607393356 ) and LINESTRING ( 8.726231211371765 49.417549344217406, 8.704561 49.403252 ) [ (8.712209041415193, 49.40829794435311, NaN) ]"))
                .body("'path'", containsString("/elements/length/density/groupBy/type"));
    }
    
    
    @Test
    public void test_27_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/ratio/groupBy/boundary?" + 
                    "bcircles=tgdtJ%3A8.860%2C59.130%2C84154266&" + 
                    "filter=higjway%21%3B*+or+area9%281.0+..+1E6&" + 
                    "format=cSV&" + 
                    "keys=evkV&" + 
                    "keys2=hbcgwey%5B&" + 
                    "showMetadata=Ih3Jw%5D%3Bv&" + 
                    "time=fk&" + 
                    "types=%3BU1HVWYFw&" + 
                    "types2=euom_rter_%2F34%3A1_inp&" + 
                    "values2=CsV")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( -29335.43911069815 -9.302046261105485E20, 9.0 -90.0 ) and LINESTRING ( 0.0 -9.316506660190789E20, -92.4389264366601 -90.0 ) [ (-92.12087650847025, -3.2054832184623759E18, NaN) ]"))
                .body("'path'", containsString("/elements/area/ratio/groupBy/boundary"));
    }
    
    
    @Test
    public void test_28_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/density/groupBy/boundary?" + 
                    "bpolys=8.704561%2C49.40325208.72783%2C49.4075408.702%2C49.423494%2C8.722%2C49.408%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.749%2C49.428%2C8.7047%2C49.8169%2C8.709%2C49.4063%2C80704561%2C49.403252%7C8.704561%2C49.403252%2C9.7.31%2C49.436%2C8.704596%2C49.41849%2C8.742%2C49.402%2C8.704561%2C49.4&" + 
                    "filter=oneway%22%3D*&" + 
                    "format=jq&" + 
                    "showMetadata=ycs2&" + 
                    "time=8.704561%2C49.40325208.72783%2C49.40954%2C8.702%2C49.423494%2C8.722%2C49.408%2C8.704561%2C45.403252%7C8.704561%2C49.403252%2C8.749%2C49.428%2C8.7047%2C49.4169%2C8.709%2C49.4063%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.7031%2C49.436%2C8.704596%2C49.41%3C49%2C8.742%2C49.402%2C8.704561%2C49.403252&" + 
                    "types=emU&" + 
                    "values=hoo")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_186_createBpolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/perimeter/density/groupBy/boundary"));
    }
    
    
    @Test
    public void test_29_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/boundary?" + 
                    "bpolys=8.704561%2C49.403252%2C8.7073%2C49.404322%2C8.721%2C49.40058%2C8.73.%2C49.400%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.7337%2C49.411%2C8.703%2C49.4169%2C8.715%2C49.418%2C8.704561%2C49.403252&" + 
                    "filter=foo&" + 
                    "keys=highway&" + 
                    "time=2011-03-08&" + 
                    "timeout=58&" + 
                    "types=foo&" + 
                    "values=cycleway")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_161_createBpolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/area/groupBy/boundary"));
    }
    
    
    @Test
    public void test_30_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/boundary?" + 
                    "bpolys=8.704561%2C49.403252%2C8.7073%2C49.404322%2C8.721%2C49.40058%2C8.73.%2C49.400%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.7337%2C49.411%2C8.703%2C49.4169%2C8.715%2C49.418%2C8.704561%2C49.403&" + 
                    "filter=fo&" + 
                    "format=joo&" + 
                    "time=%3C.704561%2C49.403252%2C8.7073%2C49.404322%2C8.721%2C49.40058%2C8.73.%2C49.400%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.7337%2C49.411%2C8.703%2C49.4169%2C8.715%2C49.418%2C8.704561%2C49.403252&" + 
                    "timeout=95&" + 
                    "types=bov&" + 
                    "values=cycleway")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_175_createBpolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/area/groupBy/boundary"));
    }
    
    
    @Test
    public void test_31_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density/groupBy/tag?" + 
                    "bpolys=IYu%3A8.704561%2C49.403252%2C8.7156%2C49.4384%2C8.703%2C49.431%2C8.704%2C49.435%2C8.704561%2C49.403252%7CstVs%3A8.704561%2C49.403252%2C8.740741%2C49.418258%2C8.743%2C49.430%2C8.734%2C49.419%2C8.704561%2C49.403252%7CMb%3A8.704561%2C49.403252%2C8.7164%2C49.42216%2C8.70092%2C49.416%2C8.701%2C49.43716%2C8.704561%2C49.4&" + 
                    "filter=LpoK&" + 
                    "format=jssr&" + 
                    "groupByKey=VQTldipg&" + 
                    "groupByValues=street%5Dlbmp%2Chouse%2Chotel&" + 
                    "keys=fok&" + 
                    "showMetadata=GUj&" + 
                    "time=2011-.1-15&" + 
                    "values=csm")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.7156 49.4384, 8.703 49.431 ) and LINESTRING ( 8.704 49.435, 8.704561 49.403252 ) [ (8.704059684365383, 49.43162235430982, NaN) ]"))
                .body("'path'", containsString("/elements/length/density/groupBy/tag"));
    }
    
    
    @Test
    public void test_32_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=xV%3A8.704561%2C49.403252%2C8.735%2C49.414%2C8.708%2C49.4.97%2C8.7035%2C49.4196%2C8.704561%2C49.403252%7CTnS%3A8.704561%2C49.403252%2C8.7492%2C49.4001%2C8.706493%2C49.42894%2C8.709%2C49.4014%2C8.704561%2C49.403252&" + 
                    "filter=eko&" + 
                    "format=fooN&" + 
                    "groupByKey=buildiUg&" + 
                    "groupByValues=f%7Fo&" + 
                    "keys=b353sRqHO&" + 
                    "showMetadata=foo&" + 
                    "time=foo&" + 
                    "types=foU&" + 
                    "values=residential")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_161_createBpolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/length/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_33_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=xV%3A8.705561%2C49.403252%2C8.735%2C49.414%2C8.708%2C49.4.97%2C8.7035%2C49.4196%2C8.704561%2C49.403252%7CTnS%3A8.704561%2C49.403252%2C8.7492%2C49.4001%2C8.706493%2C49.42894%2C8.709%2C49.4014%2C8.704561%2C49.40&" + 
                    "filter=eko&" + 
                    "format=fqoN&" + 
                    "groupByKey=builUeUg&" + 
                    "showMetadata=foo&" + 
                    "time=foo&" + 
                    "timeout=59")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_186_createBpolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/length/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_34_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/density/groupBy/tag?" + 
                    "bpolys=B%3A8.704561%2C49.403252%2C8.718326%2C49.414%2C8.722%2C49.439%2C8.723%2C49.405071%2C8.704561%2C49.403252%7Cb%3A8.704561%2C49.403252%2C8.725%2C49.414%2C8.704%2C49.416%2C8.7162%2C49.4381%2C8.704561%2C49.403252%7CtYg%3A8.704561%2C49.403252%2C8.74576%2C49.418%2C8.700%2C49.4202%2C8.701%2C49.433%2C8.704561%2C49.4032&" + 
                    "filter=fog&" + 
                    "format=foo&" + 
                    "groupByKey=buildinf&" + 
                    "groupByValues=hoo&" + 
                    "showMetadata=fUo&" + 
                    "time=2013-03-10&" + 
                    "types=fo&" + 
                    "values=foo")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.71841812122897 49.41462684559724, 8.704 49.416 ) and LINESTRING ( 8.7162 49.4381, 8.704561 49.403252 ) [ (8.708670193461407, 49.41555521967034, NaN) ]"))
                .body("'path'", containsString("/elements/perimeter/density/groupBy/tag"));
    }
    
    
    @Test
    public void test_35_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22sSl%22%7D%2C%22geomatry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.722%2C49.42849%5D%2C%5B8.71204%2C49.407%5D%2C%5B8.705%2C49.4094%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22hZGdW%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.74641%2C49.439%5D%2C%5B8.700%2C49.4316%5D%2C%5B8.705%2C49.403096%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22aAksI%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.728%2C49.416754%5D%2C%5B8.7040%2C49.423%5D%2C%5B8.70458%2C49.41975%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=foo&" + 
                    "format=gUojson&" + 
                    "groupByKey=buijhinf&" + 
                    "groupByValues=roof%2Chotel%2Cdormitory&" + 
                    "showMetadata=true&" + 
                    "values=secondary_link")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_343_checkGeometryTypeOfFeature
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/elements/perimeter/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_36_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/boundary?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22Fb%22%7D%2C%22geometry%22%3A%7B%22typg%22%3A%22Polwgon%22%2C%22coordinates%22%3A%5B%5B%5B8.304561%2C49.403252%5D%2C%5B8.729%2C49.401%5D%2C%5B8.70456%2C49.434%5D%2C%5B8.7325%2C49.4308%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22z%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7083%2C49.416%5D%2C%5B8.732%2C49.436%5D%2C%5B8.70421%2C49.4007%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "keys=YA&" + 
                    "showMetadata=UsuUP&" + 
                    "time=&" + 
                    "types=jwP")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_343_checkGeometryTypeOfFeature
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/elements/count/groupBy/boundary"));
    }
    
    
    @Test
    public void test_37_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/boundary?" + 
                    "bpolys=%7B%22pype%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22Fb%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polwgon%22%2C%22coordinates%22%3A%5B%5B%5B8.304561%2C49.403252%5D%2C%5B8.729%2C49.401%5D%2C%5B8.70456%2C49.434%5D%2C%5B8.7325%2C49.4308%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22z%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7083%2C49.416%5D%2C%5B8.732%2C49.436%5D%2C%5B8.70421%2C49.4007%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "format=bws9R&" + 
                    "keys=UA&" + 
                    "showMetadata=UruUP&" + 
                    "types=jwL")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_233_createGeometryFromGeoJson
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/elements/count/groupBy/boundary"));
    }
    
    
    @Test
    public void test_38_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=8.726%2C49.4372%2C148235235%7C8.727%2C49.42234%2C2&" + 
                    "filter=barrier%3D*+or+not+id%3A%281+..+9999%29&" + 
                    "groupByKey=bqilbknU&" + 
                    "showMetadata=no&" + 
                    "timeout=61&" + 
                    "types=fo&" + 
                    "values=foo")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 9.0 -90.0, -36.81930951349098 2.5153470639299575E12 ) and LINESTRING ( 9.0 90.0, -65.12978792503351 2.509957452726035E12 ) [ (8.99999999144411, 379.693603515625, NaN) ]"))
                .body("'path'", containsString("/elements/area/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_39_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=8.726%2C49.4772%2C148235235%7C8.727%2C49.4.234%2C2&" + 
                    "filter=barrier%3D*+or+not+id%3A%281+.0+9999%29&" + 
                    "groupByKey=bqinbknU&" + 
                    "showMetadata=nk&" + 
                    "timeout=61&" + 
                    "types=fo&" + 
                    "values=foo")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_114_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/area/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_40_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/density/groupBy/type?" + 
                    "bpolys=D%3A8.704561%2C49.403252%2C8.712%2C49.407%2C8.733%2C49.43038%2C8.702%2C49.40254%2C8.704561%2C49.403252%7CiBu%3A8.704561%2C49.403252%2C8.724%2C49.415%2C8.733%2C49.4165%2C8.721%2C49.404594%2C8.704561%2C49.40325.&" + 
                    "filter=ref%22%3D*+or+tyre%3Anode+or+id%3A%281+..+9999%29&" + 
                    "format=csv&" + 
                    "keys=boo&" + 
                    "showMetadata=yfs&" + 
                    "time=2015-09-07&" + 
                    "timeout=79&" + 
                    "types=foo")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_176_createBpolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/length/density/groupBy/type"));
    }
    
    
    @Test
    public void test_41_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/boundary?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22feavures%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22Fb%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polwgon%22%2C%22coordinates%22%3A%5B%5B%5B8.304561%2C49.403252%5D%2C%5B8.729%2C49.401%5D%2C%5B8.70456%2C49.434%5D%2C%5B8.7325%2C49.4308%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22z%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7083%2C49.416%5D%2C%5B8.732%2C49.436%5D%2C%5B8.70421%2C49.4007%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "format=cys9R&" + 
                    "keys=WC&" + 
                    "time=i")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_237_createGeometryFromGeoJson
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/elements/count/groupBy/boundary"));
    }
    
    
    @Test
    public void test_42_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/groupBy/boundary?" + 
                    "bcircles=Mw%3A8.722%2C49.6101%2C9585886661%7CMKbiU%3A8.7326%2C49.422%2C6%7CuJu%3A8.716%2C49.433%2C4&" + 
                    "filter=foo&" + 
                    "format=fooR&" + 
                    "keys=highvay&" + 
                    "time=foo&" + 
                    "types=foo&" + 
                    "values=pat")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 9.0 -90.0, 0.0 7.914228318363441E26 ) and LINESTRING ( 9.0 90.0, 0.0 7.91396301578406E26 ) [ (9.0, 90.0, NaN) ]"))
                .body("'path'", containsString("/elements/length/groupBy/boundary"));
    }
    
    
    @Test
    public void test_43_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density/groupBy/tag?" + 
                    "bpolys=%7B%22sype%22%3A%22FeatureCollection%22%2C%22febtures%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22AJ%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7301%2C49.822%5D%2C%5B8.704%2C49.418%5D%2C%5B8.700%2C49.423%5D%2C%5B8.705561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22leJO%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.719%2C49.434%5D%2C%5B8.71244%2C49.425279%5D%2C%5B8.707624%2C49.416178%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22Gmnwr%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7106%2C49.426%5D%2C%5B8.708539%2C49.4338%5D%2C%5B8.709%2C49.41405%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=fop&" + 
                    "groupByKey=tsg15UDPJTRj&" + 
                    "groupByValues=gso&" + 
                    "keys=hikhw&" + 
                    "showMetadata=foo&" + 
                    "types=%60o&" + 
                    "values=evomaster_49954_input")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_233_createGeometryFromGeoJson
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/elements/area/density/groupBy/tag"));
    }
    
    
    @Test
    public void test_44_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/density/groupBy/type?" + 
                    "bpolys=D%3A8.704561%2C49.403252%2C8.712%2C49.407%2C8.733%2C49.43038%2C8.702%2C49.40254%2C8.704561%2C49.403252%7CiBu%3A8.704561%2C49.40325.%2C8.724%2C49.415%2C8.733%2C49.4165%2C8.721%2C49.404594%2C8.704561%2C49.4032&" + 
                    "filter=ref%22%3D*+or+tyre%3Anode+or+id%3A%281+..+9999%29&" + 
                    "format=gsv&" + 
                    "showMetadata=yfs&" + 
                    "types=foo&" + 
                    "values=hU%5B")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_186_createBpolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/length/density/groupBy/type"));
    }
    
    
    @Test
    public void test_45_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/type?" + 
                    "bpolys=DRMw%3A8.704561%2C49.403252%2C8.7470%2C49.435%2C8.704488%2C49.434%2C8.70450%2C49.420%2C8.704561%2C49.403252%7CBBaQ%3A8.704561%2C49.40325.%2C8.742%2C49.432995%2C8.745%2C49.433%2C8.722%2C49.4239%2C8.704561%2C49.403252%7Cp%3A8.704561%2C49.403252%2C8.741%2C49.4301%2C8.740228%2C49.426271%2C8.725672%2C49.420%2C8.704561%2C49.403252&" + 
                    "format=fpm&" + 
                    "keys=zoV6&" + 
                    "showMetadata=gon&" + 
                    "time=evomaster_13301_input&" + 
                    "timeout=87&" + 
                    "types=PfVwIJr&" + 
                    "values=tpaco7Y")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_161_createBpolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/count/groupBy/type"));
    }
    
    
    @Test
    public void test_46_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/type?" + 
                    "bpolys=DRMw%3A8.704561%2C49.403252%2C8.7470%2C49.435%2C8.704488%2C49.434%2C8.70450%2C49.420%2C8.704561%2C49.403252%7CBBaQ%3A8.7045%3A1%2C49.40325.%2C8.742%2C49.432995%2C8.745%2C49.433%2C8.722%2C49.4239%2C8.704561%2C49.403252%7Cp%3A8.704561%2C49.303252%2C8.741%2C49.4301%2C8.740228%2C49.426271%2C6.725672%2C49.420%2C8.704561%2C49.403&" + 
                    "filter=evomaster_13411%5Binpu&" + 
                    "format=fpm&" + 
                    "keys=%7EkV6&" + 
                    "time=evomauter_13301_input&" + 
                    "values=tpaco7W")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_186_createBpolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/count/groupBy/type"));
    }
    
    
    @Test
    public void test_47_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22featuras%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22sSl%22%7D%2C%22geomatry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.722%2C49.42849%5D%2C%5B8.71204%2C49.407%5D%2C%5B8.705%2C49.4094%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22hZGdW%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.74641%2C49.439%5D%2C%5B8.700%2C49.4316%5D%2C%5B8.705%2C49.403096%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22aAksI%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.728%2C49.416754%5D%2C%5B8.7040%2C49.423%5D%2C%5B8.70458%2C49.41975%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=highway&" + 
                    "format=gUojsqn&" + 
                    "groupByKey=buikhinf&" + 
                    "groupByValues=toof%2Chotel%2Cdormitory&" + 
                    "keys=highway&" + 
                    "showMetadata=true&" + 
                    "time=evomaster_52022_input&" + 
                    "values=secondary_link")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_237_createGeometryFromGeoJson
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/elements/perimeter/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_48_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/density/groupBy/tag?" + 
                    "bpolys=a%3A8.704561%2C49.403252%2C8.704%2C49.4370%2C8.701%2C49.42.3%2C8.725%2C49.41817%2C8.704561%2C49.403252%7Cvc%3A8.704561%2C49.403252%2C8.700862%2C49.4301%2C8.70414%2C49.4119%2C8.7049%2C49.436%2C8.704561%2C49.403252%7CIR%3A8.704561%2C49.403252%2C8.718%2C49.41639%2C8.705%2C49.4291%2C8.70449%2C49.402%2C8.704561%2C49.403252&" + 
                    "filter=name%3D*+or+length%3A%28+..+100%29&" + 
                    "groupByKey=bukldilUz&" + 
                    "groupByValues=speed_camera%2Cpjatform%2Chotel&" + 
                    "keys=fomq%7B&" + 
                    "showMetadata=galue&" + 
                    "types=gooX&" + 
                    "values=foor")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_161_createBpolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/area/density/groupBy/tag"));
    }
    
    
    @Test
    public void test_49_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count?" + 
                    "bcircles=Li%3A8.7252%2C49.436%2C972139796&" + 
                    "filter=fo2o&" + 
                    "format=lson&" + 
                    "keys=w3RiD&" + 
                    "showMetadata=IcuURQQiHTZID&" + 
                    "time=foo&" + 
                    "timeout=22")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( -114.59155902616465 8.6097710545181757E18, 9.0 90.0 ) and LINESTRING ( 180.0 90.0, 8.999999999999986 90.0 ) [ (9.0, 90.0, NaN) ]"))
                .body("'path'", containsString("/users/count"));
    }
    
    
    @Test
    public void test_50_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/density/groupBy/boundary?" + 
                    "bpolys=w%3A8.704561%2C49.403252%2C8.73250%2C49.422107%2C8.704%2C49.420%2C8.714%2C49.418%2C8.7.4561%2C49.403252%7CDNi%3A8.704561%2C49.403253%2C8.734%2C49.412415%2C8.709%2C49.414%2C8.7097%2C49.4142%2C8.704561%2C49.403252&" + 
                    "filter=JDMKdYLiHnepnU&" + 
                    "format=bom&" + 
                    "keys=&" + 
                    "showMetadata=booC&" + 
                    "time=%2F%2FP1M%3A2D&" + 
                    "timeout=3&" + 
                    "types=GfSUW3oAHeb&" + 
                    "values=evomaster_36119_input")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_161_createBpolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/users/count/density/groupBy/boundary"));
    }
    
    
    @Test
    public void test_51_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/density/groupBy/boundary?" + 
                    "bpolys=w%3A8.704561%2C49.403252%2C8.73250%2C49.422107%2C8.704%2C49.420%2C8.714%2C49.418%2C8.7.4561%2C49.403252%7CDNi%3A8.704561%2C49.403253%2C8.734%2C49.412415%2C8.709%2C49.414%2C8.7097%2C49.4142%2C8.704561%2C45.403252&" + 
                    "filter=JDMKdYLjHnepnU&" + 
                    "format=bom&" + 
                    "keys=6&" + 
                    "time=%2F%2FP1M%3A2D&" + 
                    "timeout=3&" + 
                    "types=GfSUW3oAHcb")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_175_createBpolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/users/count/density/groupBy/boundary"));
    }
    
    
    @Test
    public void test_52_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/density/groupBy/boundary?" + 
                    "bboxes=&" + 
                    "bpolys=w%3A8.704561%2C49.403252%2C8.73250%2C49.42.107%2C8.704%2C49.420%2C8.714%2C49.418%2C8.7.4561%2C49.403252%7CDNi%3A8.704561%2C49.403253%2C8.734%2C49.412415%2C8.709%2C49.414%2C8.7097%2C49.4142%2C8.704561%2C45.4032&" + 
                    "filter=JDMKdYLjHnepnU&" + 
                    "format=%60no&" + 
                    "keys=%3AX&" + 
                    "showMetadata=booC")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_186_createBpolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/users/count/density/groupBy/boundary"));
    }
    
    
    @Test
    public void test_53_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/density/groupBy/tag?" + 
                    "bpolys=a%3A8.704561%2C49.403252%2C8.704%2C49.4370%2C8.701%2C49.42.3%2C8.725%2C49.41817%2C8.704561%2C49.403252%7Cvc%3A8.704561%2C49.403252%2C8.700862%2C49.4301%2C8.70414%2C49.4119%2C8.7049%2C49.436%2C8.704561%2C49.403252%7CIR%3A8.704561%2C49.403252%2C8.718%2C49.41639%2C8.705%2C49.4291%2C8.70449%2C49.402%2C8.704561%2C49.40325&" + 
                    "filter=name%3D*+or%22lengtd%3A%28+..+10&" + 
                    "format=cUu&" + 
                    "groupByKey=auUldilUz&" + 
                    "groupByValues=speed_camera%2Cpjatform%2Chotel&" + 
                    "keys=fomq%7B&" + 
                    "showMetadata=galue&" + 
                    "time=20.4--..2&" + 
                    "types=enTX")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_186_createBpolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/area/density/groupBy/tag"));
    }
    
    
    @Test
    public void test_54_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density/groupBy/tag?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22AJ%22%7D%2C%22geomeury%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7301%2C49.422%5D%2C%5B8.704%2C49.418%5D%2C%5B8.700%2C29.423%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22leJO%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordimates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.719%2C49.434%5D%2C%5B8.71244%2C49.425279%5D%2C%5B8.707624%2C49.416178%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22Gmnwr%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7106%2C49.426%5D%2C%5B8.708539%2C49.4338%5D%2C%5B8.709%2C49.41405%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=foo&" + 
                    "format=csv&" + 
                    "groupByKey=evomastep_5832Winput&" + 
                    "groupByValues=fno&" + 
                    "keys=hhghway&" + 
                    "showMetadata=evomaster_16211_input&" + 
                    "time=6vGGu&" + 
                    "types=goP")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_343_checkGeometryTypeOfFeature
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/elements/area/density/groupBy/tag"));
    }
    
    
    @Test
    public void test_55_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/density/groupBy/tag?" + 
                    "bpolys=B%3A8.704561%2C49.403252%2C8.7183.6%2C49.414%2C8.722%2C49.439%2C8.723%2C49.405071%2C8.704561%2C49.403252%7Cb%3A8.704561%2C49.403252%2C8.725%2C49.414%2C8.704%2C49.416%2C8.7162%2C49.4381%2C8.704561%2C49.403262%7CtYg%3A8.704561%2C49.403252%2C8.74576%2C49.418%2C8.700%2C49.4202%2C8.701%2C49.433%2C8.704561%2C49.4032&" + 
                    "format=foo&" + 
                    "groupByKey=buildinf&" + 
                    "groupByValues=hoU&" + 
                    "showMetadata=fUo&" + 
                    "time=2013-03-10&" + 
                    "types=fo")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_175_createBpolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/perimeter/density/groupBy/tag"));
    }
    
    
    @Test
    public void test_56_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/density/groupBy/tag?" + 
                    "bpolys=8.704561%2C49.403252%2C8.725%2C49.41231%2C8.707%2C49.438%2C8.7312%2C49.402%2C8.704561%2C49.4.3252%7C8.704561%2C49.403252%2C8.717057%2C49.403%2C8.704591%2C49.424%2C8.705%2C49.4040%2C8.704561%2C49.4032&" + 
                    "format=gaojsms&" + 
                    "groupByKey=ezU%7DatteU_941U_Qlput&" + 
                    "groupByValues=epp&" + 
                    "keys=highway16&" + 
                    "showMetadata=%7Be&" + 
                    "types=cp&" + 
                    "values=euomastera9428")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_176_createBpolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/count/density/groupBy/tag"));
    }
    
    
    @Test
    public void test_57_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/density?" + 
                    "bpolys=NUM%3A8.704561%2C49.403252%2C8.742%2C49.4212%2C8.7.0%2C49.409%2C8.70019%2C49.41546%2C8.704561%2C49.403252&" + 
                    "filter=fpo&" + 
                    "format=doo&" + 
                    "keys=hichway&" + 
                    "time=doo&" + 
                    "timeout=88&" + 
                    "values=6")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_161_createBpolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/count/density"));
    }
    
    
    @Test
    public void test_58_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/density?" + 
                    "bpolys=NUM%3A8.704571%2C49.403252%2C8.742%2C49.4212%2C8.7.0%2C49.409%2C8.70019%2C49.41546%2C8.704561%2C49.403252&" + 
                    "format=dso&" + 
                    "keys=hichw%5Dy&" + 
                    "showMetadata=fqo&" + 
                    "time=dqm&" + 
                    "values=%5B")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_175_createBpolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/count/density"));
    }
    
    
    @Test
    public void test_59_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/groupBy/key?" + 
                    "bboxes=BrZSo%3A8.6627%2C49.422%2C8.749%2C49.38773%7CNAX%3A8.676%2C49.4.8%2C8.724%2C49.398%7ChwZ%3A8.665627%2C49.4267%2C8.700%2C49.383%7CQuCdV%3A8.66208%2C49.42070%2C8.72023%2C49.3984&" + 
                    "filter=fso&" + 
                    "format=csv&" + 
                    "groupByKeys=addU%3Acountpy.addU%3Eeit&" + 
                    "keys=Wru&" + 
                    "time=%2B%2F&" + 
                    "timeout=65&" + 
                    "values=hooA")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_73_createBboxes
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/users/count/groupBy/key"));
    }
    
    
    @Test
    public void test_60() throws Exception {
        
        try{
            given().accept("*/*")
                    .get(baseUrlOfSut + "/users/count/density/groupBy/tag?" + 
                        "bcircles=8.7446%2C49.431%2C7&" + 
                        "filter=highway%3D*+or+area%3A%281.0+..+1E6%29&" + 
                        "format=json&" + 
                        "groupByKey=building&" + 
                        "showMetadata=true&" + 
                        "timeout=25")
                    .then();
        } catch(Exception e){
        }
    }
    
    
    @Test
    public void test_61_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/density/groupBy/boundary?" + 
                    "bpolys=w%3A8.704561%2C49.403252%2C8.73250%2C49.422107%2C8.704%2C49.420%2C8.714%2C49.418%2C8.704561%2C49.403252%7CDNi%3A8.704561%2C49.403252%2C8.734%2C49.412415%2C8.709%2C49.414%2C8.7097%2C49.4142%2C8.704561%2C49.403252&" + 
                    "time=%2F%2FP1M22D&" + 
                    "timeout=36")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.7325 49.422107 ) and LINESTRING ( 8.714 49.418, 8.704561 49.403252 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/users/count/density/groupBy/boundary"));
    }
    
    
    @Test
    public void test_62_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/ratio/groupBy/boundary?" + 
                    "bpolys=8.704561%2C49.403252%2C8.730%2C49.420%2C8.744%2C49.409%2C8.722%2C49.43385%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.7087%2C49.40559%2C8.700%2C49.41033%2C8.7096%2C49.4154%2C8.704561%2C49.403252&" + 
                    "filter2=destination%21%3D*+and+geometry%3Apolygon&" + 
                    "keys=highway&" + 
                    "time=2007-11-17&" + 
                    "timeout=70&" + 
                    "values=street_lamp")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.73 49.42 ) and LINESTRING ( 8.704561 49.403252, 8.7087 49.40559 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/length/ratio/groupBy/boundary"));
    }
    
    
    @Test
    public void test_63_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=8.704561%2C49.403252%2C8.722312%2C49.408%2C8.7375%2C49.416%2C8.703221%2C49.437%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.73011%2C49.401%2C8.702%2C49.42297%2C8.741%2C49.4161%2C8.704561%2C49.403252&" + 
                    "format=json&" + 
                    "groupByKey=building&" + 
                    "keys=highway&" + 
                    "timeout=83")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.722312 49.408, 8.7375 49.416 ) and LINESTRING ( 8.741 49.4161, 8.704561 49.403252 ) [ (8.730987728482917, 49.41256978060728, NaN) ]"))
                .body("'path'", containsString("/elements/length/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_64_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density/groupBy/type?" + 
                    "bpolys=I%3A8.704561%2C49.403252%2C8.70588%2C49.439%2C8.740135%2C49.41201%2C8.700%2C49.428%2C8.704561%2C49.403252%7CbWn%3A8.704561%2C49.403252%2C8.7140%2C49.402506%2C8.70488%2C49.432%2C8.7338%2C49.422543%2C8.704561%2C49.403252%7Cptr%3A8.704561%2C49.403252%2C8.716958%2C49.40353%2C8.709421%2C49.4142%2C8.7048%2C49.429%2C8.704561%2C49.403252&" + 
                    "format=json")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.70588 49.439 ) and LINESTRING ( 8.7 49.428, 8.704561 49.403252 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/length/density/groupBy/type"));
    }
    
    
    @Test
    public void test_65_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density/groupBy/tag?" + 
                    "bpolys=IYu%3A8.704561%2C49.403252%2C8.7156%2C49.4384%2C8.703%2C49.431%2C8.704%2C49.435%2C8.704561%2C49.403252%7CstVs%3A8.704561%2C49.403252%2C8.740741%2C49.418258%2C8.743%2C49.430%2C8.734%2C49.419%2C8.704561%2C49.403252%7CMb%3A8.704561%2C49.403252%2C8.7164%2C49.42216%2C8.70092%2C49.416%2C8.701%2C49.43716%2C8.704561%2C49.403252&" + 
                    "format=json&" + 
                    "groupByKey=building&" + 
                    "groupByValues=street_lamp%2Chouse%2Chotel&" + 
                    "showMetadata=no&" + 
                    "time=2011-01-15")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.7156 49.4384 ) and LINESTRING ( 8.704 49.435, 8.704561 49.403252 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/length/density/groupBy/tag"));
    }
    
    
    @Test
    public void test_66_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/type?" + 
                    "bpolys=DRMw%3A8.704561%2C49.403252%2C8.7470%2C49.435%2C8.704488%2C49.434%2C8.70450%2C49.420%2C8.704561%2C49.403252%7CBBaQ%3A8.704561%2C49.403252%2C8.742%2C49.432995%2C8.745%2C49.433%2C8.722%2C49.4239%2C8.704561%2C49.403252%7Cp%3A8.704561%2C49.403252%2C8.741%2C49.4301%2C8.740228%2C49.426271%2C8.725672%2C49.420%2C8.704561%2C49.403252&" + 
                    "keys=highway&" + 
                    "time=2016-05-05&" + 
                    "timeout=97&" + 
                    "values=track")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.747 49.435 ) and LINESTRING ( 8.704561 49.403252, 8.741 49.4301 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/count/groupBy/type"));
    }
    
    
    @Test
    public void test_67_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/density/groupBy/tag?" + 
                    "bpolys=8.704561%2C49.403252%2C8.725%2C49.41231%2C8.707%2C49.438%2C8.7312%2C49.402%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.717057%2C49.403%2C8.704591%2C49.424%2C8.705%2C49.4040%2C8.704561%2C49.403252&" + 
                    "format=geojson&" + 
                    "groupByKey=building&" + 
                    "keys=highway&" + 
                    "showMetadata=yes&" + 
                    "time=2010-05-16&" + 
                    "timeout=36&" + 
                    "values=residential")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.725 49.41231 ) and LINESTRING ( 8.704561 49.403252, 8.717057 49.403 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/count/density/groupBy/tag"));
    }
    
    
    @Test
    public void test_68_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=8.726%2C49.4373%2C148235235%7C8.727%2C49.42234%2C2&" + 
                    "filter=barrier%3D*+or+not+id%3A%281+..+9999%29&" + 
                    "format=json&" + 
                    "groupByKey=building&" + 
                    "groupByValues=elevator&" + 
                    "showMetadata=no&" + 
                    "time=2017-01-10&" + 
                    "timeout=61")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El ángulo 2.509.997.995.987,854 es demasiado grande."))
                .body("'path'", containsString("/elements/area/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_69_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density/groupBy/tag?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22AJ%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7301%2C49.422%5D%2C%5B8.704%2C49.418%5D%2C%5B8.700%2C49.423%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22leJO%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.719%2C49.434%5D%2C%5B8.71244%2C49.425279%5D%2C%5B8.707624%2C49.416178%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22Gmnwr%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7106%2C49.426%5D%2C%5B8.708539%2C49.4338%5D%2C%5B8.709%2C49.41405%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "format=csv&" + 
                    "groupByKey=building&" + 
                    "keys=highway&" + 
                    "time=2017-03-28&" + 
                    "values=living_street")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.708363511706436 49.41757548671933, 8.7106 49.426 ) and LINESTRING ( 8.708539 49.4338, 8.708894296027992 49.41857853242333 ) [ (8.708872919269576, 49.41949434799542, NaN) ]"))
                .body("'path'", containsString("/elements/area/density/groupBy/tag"));
    }
    
    
    @Test
    public void test_70_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22sSl%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.722%2C49.42849%5D%2C%5B8.71204%2C49.407%5D%2C%5B8.705%2C49.4094%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22hZGdW%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.74641%2C49.439%5D%2C%5B8.700%2C49.4316%5D%2C%5B8.705%2C49.403096%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22propdrties%22%3A%7B%22id%22%3A%22aAksI%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.728%2C49.416754%5D%2C%5B8.7040%2C49.423%5D%2C%5B8.70458%2C49.41975%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "format=geojson&" + 
                    "groupByKey=building&" + 
                    "groupByValues=roof%2Chotel%2Cdormitory&" + 
                    "keys=highway&" + 
                    "showMetadata=true&" + 
                    "time=2015512-22&" + 
                    "values=secondary_linkT")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704889294060434 49.40372711242028, 8.722 49.42849 ) and LINESTRING ( 8.709830465004151 49.40775325056676, 8.705 49.4094 ) [ (8.708082934280426, 49.40834899967712, NaN) ]"))
                .body("'path'", containsString("/elements/perimeter/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_71_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/ratio/groupBy/boundary?" + 
                    "bpolys=8.704561%2C49.403252%2C8.724%2C49.4036%2C8.725%2C49.4199%2C8.7435%2C49.4332%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.72695%2C49.4040%2C8.7308%2C49.412%2C8.711%2C49.426%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.725%2C49.410%2C8.701295%2C49.431646%2C8.7208%2C49.409837%2C8.704561%2C49.403252&" + 
                    "format=json&" + 
                    "keys=highway&" + 
                    "keys2=highway&" + 
                    "time=2008-07-12&" + 
                    "timeout=49&" + 
                    "types2=way%2C&" + 
                    "values=service")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.724 49.4036 ) and LINESTRING ( 8.711 49.426, 8.704561 49.403252 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/length/ratio/groupBy/boundary"));
    }
    
    
    @Test
    public void test_72_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/density/groupBy/boundary?" + 
                    "bpolys=8.704561%2C49.403252%2C8.72783%2C49.40954%2C8.702%2C49.423494%2C8.722%2C49.408%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.749%2C49.428%2C8.7047%2C49.4169%2C8.709%2C49.4063%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.7031%2C49.436%2C8.704596%2C49.41849%2C8.742%2C49.402%2C8.704561%2C49.403252&" + 
                    "filter=oneway%21%3D*&" + 
                    "showMetadata=yes")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.72783 49.40954 ) and LINESTRING ( 8.709 49.4063, 8.704561 49.403252 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/perimeter/density/groupBy/boundary"));
    }
    
    
    @Test
    public void test_73_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/boundary?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22Fb%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.729%2C49.401%5D%2C%5B8.70456%2C49.434%5D%2C%5B8.7325%2C49.4308%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22z%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7083%2C49.416%5D%2C%5B8.732%2C49.436%5D%2C%5B8.70421%2C49.4007%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=turn%3D*+and+not+geometry%3Apolygon&" + 
                    "showMetadata=true")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.729 49.401, 8.71709790639633 49.4170707483192 ) and LINESTRING ( 8.7325 49.4308, 8.711970850801073 49.4105581516113 ) [ (8.71772168066986, 49.416228499913856, NaN) ]"))
                .body("'path'", containsString("/elements/count/groupBy/boundary"));
    }
    
    
    @Test
    public void test_74_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/density?" + 
                    "bpolys=NUM%3A8.704561%2C49.403252%2C8.742%2C49.4212%2C8.700%2C49.409%2C8.70019%2C49.41546%2C8.704561%2C49.403252&" + 
                    "keys=highway&" + 
                    "timeout=88&" + 
                    "values=turning_circle")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.742 49.4212, 8.7 49.409 ) and LINESTRING ( 8.70019 49.41546, 8.704561 49.403252 ) [ (8.702267170568888, 49.40965855907001, NaN) ]"))
                .body("'path'", containsString("/elements/count/density"));
    }
    
    
    @Test
    public void test_75_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count?" + 
                    "bpolys=LElWx%3A8.704561%2C49.403252%2C8.744%2C49.417%2C8.705%2C49.404%2C8.7195%2C49.432%2C8.704561%2C49.403252%7CEnBk%3A8.704561%2C49.403252%2C8.714%2C49.433%2C8.701%2C49.405%2C8.714596%2C49.418%2C8.704561%2C49.403252%7Cp%3A8.704561%2C49.403252%2C8.731%2C49.428608%2C8.704759%2C49.406%2C8.706%2C49.435%2C8.704561%2C49.403252&" + 
                    "filter=highway%21%3D*+or+geometry%3Aline+or+length%3A%28+..+100%29&" + 
                    "showMetadata=true&" + 
                    "timeout=50")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.744 49.417 ) and LINESTRING ( 8.704561 49.403252, 8.714 49.433 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/count"));
    }
    
    
    @Test
    public void test_76_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density/groupBy/boundary?" + 
                    "bpolys=Jicp%3A8.704561%2C49.403252%2C8.7468%2C49.421%2C8.7044%2C49.439794%2C8.724%2C49.42007%2C8.704561%2C49.403252%7CUGsL%3A8.704561%2C49.403252%2C8.72933%2C49.406%2C8.736%2C49.423%2C8.716%2C49.4180%2C8.704561%2C49.403252%7Cybgyk%3A8.704561%2C49.403252%2C8.71207%2C49.412%2C8.711%2C49.415%2C8.748%2C49.401%2C8.704561%2C49.403252&" + 
                    "filter=maxspeed%3D*+and+geometry%3Apolygon+and+length%3A%28+..+100%29&" + 
                    "showMetadata=false&" + 
                    "time=2007-12-29")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.7468 49.421 ) and LINESTRING ( 8.704561 49.403252, 8.71207 49.412 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/area/density/groupBy/boundary"));
    }
    
    
    @Test
    public void test_77_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/density/groupBy/type?" + 
                    "bpolys=8.704561%2C49.403252%2C8.701%2C49.4127%2C8.7073%2C49.42284%2C8.7059%2C49.430%2C8.704561%2C49.403252&" + 
                    "keys=highway&" + 
                    "showMetadata=false")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.701 49.4127, 8.7073 49.42284 ) and LINESTRING ( 8.7059 49.43, 8.704561 49.403252 ) [ (8.705387474832985, 49.419761745207374, NaN) ]"))
                .body("'path'", containsString("/users/count/density/groupBy/type"));
    }
    
    
    @Test
    public void test_78_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/density/groupBy/type?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22gL%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.71060%2C49.429334%5D%2C%5B8.744%2C49.4307%5D%2C%5B8.7048%2C49.407%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22K%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.715788%2C49.40598%5D%2C%5B8.700%2C49.417%5D%2C%5B8.717%2C49.418%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22HI%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.718340%2C49.429%5D%2C%5B8.711%2C49.425%5D%2C%5B8.717%2C49.426%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "format=csv&" + 
                    "keys=highway&" + 
                    "values=residential")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.707411762101222 49.40857905004589, 8.71834 49.429 ) and LINESTRING ( 8.711 49.425, 8.717 49.426 ) [ (8.716708561072851, 49.42595142684548, NaN) ]"))
                .body("'path'", containsString("/elements/count/density/groupBy/type"));
    }
    
    
    @Test
    public void test_79_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/ratio?" + 
                    "bpolys=8.704561%2C49.403252%2C8.724%2C49.4176%2C8.714%2C49.42420%2C8.7323%2C49.4357%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.7049%2C49.4253%2C8.7217%2C49.4039%2C8.70785%2C49.42552%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.718%2C49.415%2C8.7245%2C49.428%2C8.744%2C49.429%2C8.704561%2C49.403252&" + 
                    "filter2=addr%3Ahousenumber%21%3D*+or+area%3A%281.0+..+1E6%29&" + 
                    "format=geojson&" + 
                    "keys=highway&" + 
                    "time=2016-09-09&" + 
                    "values=street_lamp")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.724 49.4176 ) and LINESTRING ( 8.704561 49.403252, 8.7049 49.4253 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/perimeter/ratio"));
    }
    
    
    @Test
    public void test_80_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22sSl%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.722%2C49.42849%5D%2C%5B8.71204%2C49.407%5D%2C%5B8.705%2C49.4094%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22hZGdW%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.74641%2C49.439%5D%2C%5B8.700%2C49.4316%5D%2C%5B8.705%2C49.403096%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22aAksI%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.728%2C49.416754%5D%2C%5B8.7040%2C49.423%5D%2C%5B8.70458%2C49.41975%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "format=geojson&" + 
                    "groupByKey=building&" + 
                    "groupByValues=roof%2Chotel%2Cdormitory&" + 
                    "keys=highway&" + 
                    "showMetadata=true&" + 
                    "time=2015-12-22&" + 
                    "values=secondary_link")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704889294060434 49.40372711242028, 8.722 49.42849 ) and LINESTRING ( 8.709830465004151 49.40775325056676, 8.705 49.4094 ) [ (8.708082934280426, 49.40834899967712, NaN) ]"))
                .body("'path'", containsString("/elements/perimeter/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_81_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/ratio?" + 
                    "bpolys=r%3A8.704561%2C49.403252%2C8.7252%2C49.407%2C8.74438%2C49.400%2C8.701%2C49.415%2C8.704561%2C49.403252&" + 
                    "format=json&" + 
                    "keys2=highway&" + 
                    "time=2015-01-07&" + 
                    "timeout=20&" + 
                    "types2=other")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.7252 49.407 ) and LINESTRING ( 8.74438 49.4, 8.701 49.415 ) [ (8.724502378000079, 49.40687331327798, NaN) ]"))
                .body("'path'", containsString("/elements/perimeter/ratio"));
    }
    
    
    @Test
    public void test_82() throws Exception {
        
        try{
            given().accept("*/*")
                    .post(baseUrlOfSut + "/users/count/density?" + 
                        "bboxes=WA%3A8.6831%2C49.417%2C8.7016%2C49.398%7CLqqtC%3A8.677%2C49.400728%2C8.7348%2C49.389&" + 
                        "filter=destination%3D*+and+geometry%3Aline+or+not+id%3A%281+..+9999%29&" + 
                        "format=csv&" + 
                        "showMetadata=true&" + 
                        "time=%2F%2FP6M16D&" + 
                        "timeout=76")
                    .then();
        } catch(Exception e){
        }
    }
    
    
    @Test
    public void test_83() throws Exception {
        
        try{
            given().accept("*/*")
                    .post(baseUrlOfSut + "/users/count/groupBy/boundary?" + 
                        "bboxes=8.696%2C49.41493%2C8.728%2C49.389%7C8.650%2C49.414%2C8.7180%2C49.385%7C8.69567%2C49.413%2C8.759%2C49.3993%7C8.683268%2C49.405%2C8.713975%2C49.387&" + 
                        "showMetadata=no")
                    .then();
        } catch(Exception e){
        }
    }
    
    
    @Test
    public void test_84() throws Exception {
        
        try{
            given().accept("*/*")
                    .get(baseUrlOfSut + "/users/count/groupBy/type?" + 
                        "bcircles=pZT%3A8.71756%2C49.432%2C9%7CS%3A8.71790%2C49.4291%2C54&" + 
                        "filter=ref%3D*+or+type%3Arelation&" + 
                        "format=csv&" + 
                        "showMetadata=yes&" + 
                        "time=%2F%2FP9M23D")
                    .then();
        } catch(Exception e){
        }
    }
    
    
    @Test
    public void test_85_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/type?" + 
                    "bpolys=hE%3A8.704561%2C49.403252%2C8.7493%2C49.434649%2C8.749960%2C49.43915%2C8.7410%2C49.422%2C8.704561%2C49.403252&" + 
                    "filter=foot%3D*+or+type%3Away+or+length%3A%28+..+100%29&" + 
                    "format=json&" + 
                    "timeout=25")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.7493 49.434649 ) and LINESTRING ( 8.74996 49.43915, 8.741 49.422 ) [ (8.746629234229477, 49.43277470614236, NaN) ]"))
                .body("'path'", containsString("/users/count/groupBy/type"));
    }
    
    
    @Test
    public void test_86() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/groupBy/key?" + 
                    "bboxes=8.664%2C49.4014%2C8.710%2C49.383&" + 
                    "groupByKeys=lanes%3Abackward%2Cbicycle&" + 
                    "keys=highway&" + 
                    "timeout=60")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_87() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/density/groupBy/type?" + 
                    "bboxes=SB%3A8.675%2C49.403%2C8.754%2C49.380&" + 
                    "time=2009-12-19&" + 
                    "timeout=82")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_88() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/density?" + 
                    "bcircles=lBny%3A8.7222%2C49.414%2C4%7CylXHQ%3A8.74542%2C49.424%2C4&" + 
                    "filter=addr%3Acity%3D*+or+id%3A%281+..+9999%29&" + 
                    "showMetadata=no&" + 
                    "timeout=74")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_89() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter?" + 
                    "bboxes=Ym%3A8.6745%2C49.427%2C8.741%2C49.395%7CmDzf%3A8.6916%2C49.416%2C8.709%2C49.397&" + 
                    "time=2010-07-25&" + 
                    "timeout=72")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_90() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/groupBy/tag?" + 
                    "bpolys=lnYnh%3A8.704561%2C49.403252%2C8.727%2C49.4370%2C8.7356%2C49.427%2C8.73351%2C49.420%2C8.704561%2C49.403252&" + 
                    "format=json&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=platform%2Cchurch&" + 
                    "timeout=33")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_91() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/groupBy/key?" + 
                    "bboxes=8.6865%2C49.414178%2C8.737%2C49.391&" + 
                    "format=geojson&" + 
                    "groupByKeys=addr%3Acity%2Cbuilding%2Ctype&" + 
                    "keys=highway&" + 
                    "timeout=55&" + 
                    "values=elevator")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_92() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/density?" + 
                    "bboxes=XYOCP%3A8.68943%2C49.406%2C8.705%2C49.3944&" + 
                    "keys=highway&" + 
                    "values=secondary")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_93() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length?" + 
                    "bboxes=E%3A8.6737%2C49.4135%2C8.708094%2C49.395&" + 
                    "keys=highway&" + 
                    "timeout=43")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_94() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/groupBy/tag?" + 
                    "bboxes=jsr%3A8.67938%2C49.427%2C8.7189%2C49.381%7CI%3A8.650%2C49.423%2C8.709%2C49.394%7Ca%3A8.661%2C49.4029%2C8.703%2C49.387%7CiDBa%3A8.6736%2C49.401%2C8.7358%2C49.382&" + 
                    "format=geojson&" + 
                    "groupByKey=building&" + 
                    "groupByValues=cycleway%2Cstop_line&" + 
                    "keys=highway&" + 
                    "showMetadata=true&" + 
                    "values=stop")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(295.0))
                .body("'metadata'.'description'", containsString("Total count of items in absolute values, aggregated on the tag."));
    }
    
    
    @Test
    public void test_95() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/groupBy/key?" + 
                    "bboxes=nGfaa%3A8.672%2C49.425%2C8.710974%2C49.383%7Cl%3A8.667%2C49.4006%2C8.739%2C49.386%7Cb%3A8.6712%2C49.4260%2C8.700%2C49.398&" + 
                    "format=json&" + 
                    "groupByKeys=turn%3Alanes%2Cref&" + 
                    "showMetadata=yes&" + 
                    "time=2017-05-31")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(1297.0))
                .body("'metadata'.'description'", containsString("Total count of items in absolute values, aggregated on the key."));
    }
    
    
    @Test
    public void test_96() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=sXOjI%3A8.703%2C49.425210%2C2%7CyacHa%3A8.709%2C49.41886%2C5&" + 
                    "format=geojson&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=crossing%2Cchurch&" + 
                    "keys=highway&" + 
                    "showMetadata=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(252.0))
                .body("'metadata'.'description'", containsString("Total count of items in absolute values, aggregated on the boundary and on the tag."))
                .body("'type'", containsString("FeatureCollection"));
    }
    
    
    @Test
    public void test_97() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/density/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=iH%3A8.724042%2C49.41740%2C6&" + 
                    "groupByKey=building&" + 
                    "time=2014-07-09&" + 
                    "timeout=34")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_98() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/density/groupBy/boundary?" + 
                    "bcircles=8.741%2C49.43142%2C41&" + 
                    "keys=highway&" + 
                    "showMetadata=true&" + 
                    "time=2015-04-16&" + 
                    "timeout=63")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(218.0))
                .body("'metadata'.'description'", containsString("Density of selected items (count of items in absolute values divided by the area in square kilometers)."));
    }
    
    
    @Test
    public void test_99() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/type?" + 
                    "bcircles=wc%3A8.708%2C49.436%2C6&" + 
                    "format=json&" + 
                    "keys=highway&" + 
                    "showMetadata=yes&" + 
                    "timeout=37&" + 
                    "values=street_lamp")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(220.0))
                .body("'metadata'.'description'", containsString("Total area of items in square meters, aggregated on the type."));
    }
    
    
    @Test
    public void test_100() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/key?" + 
                    "bboxes=qyWmb%3A8.6885%2C49.404%2C8.70476%2C49.388&" + 
                    "format=json&" + 
                    "groupByKeys=source%3Amaxspeed%2Caddr%3Apostcode&" + 
                    "keys=highway&" + 
                    "showMetadata=false&" + 
                    "timeout=27&" + 
                    "values=elevator")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_101() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/density/groupBy/type?" + 
                    "bboxes=U%3A8.691333%2C49.409%2C8.757%2C49.3858%7Cpgg%3A8.650%2C49.406%2C8.7406%2C49.388%7CiR%3A8.6561%2C49.405%2C8.70141%2C49.3802&" + 
                    "filter=type%3D*+or+type%3Arelation+or+area%3A%281.0+..+1E6%29&" + 
                    "showMetadata=yes&" + 
                    "timeout=51")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(1097.0))
                .body("'metadata'.'description'", containsString("Density of selected items (area of items in square meters divided by the area in square kilometers), aggregated on the type."));
    }
    
    
    @Test
    public void test_102() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/density/groupBy/boundary/groupBy/tag?" + 
                    "bboxes=U%3A8.6535%2C49.407%2C8.759%2C49.388%7CgQI%3A8.685%2C49.402%2C8.749%2C49.383%7CVAL%3A8.664%2C49.427%2C8.7519%2C49.381&" + 
                    "groupByKey=building&" + 
                    "keys=highway&" + 
                    "time=2009-10-15&" + 
                    "timeout=43&" + 
                    "values=stop")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_103() throws Exception {
        
        given().accept("text/csv")
                .post(baseUrlOfSut + "/elements/area/ratio/groupBy/boundary?" + 
                    "bboxes=E%3A8.659%2C49.4215%2C8.710%2C49.384&" + 
                    "filter2=doo&" + 
                    "format=csv&" + 
                    "keys=foo&" + 
                    "keys2=foo&" + 
                    "timeout=33&" + 
                    "values=foo")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_104() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/groupBy/type?" + 
                    "bcircles=B%3A8.7122%2C49.4202%2C9%7CWeAWG%3A8.72206%2C49.405%2C5&" + 
                    "time=2009-06-02&" + 
                    "timeout=58")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_105() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/groupBy/boundary?" + 
                    "bboxes=8.676%2C49.412%2C8.738%2C49.398&" + 
                    "time=2018-01-13&" + 
                    "timeout=83")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_106() throws Exception {
        
        given().accept("text/csv")
                .get(baseUrlOfSut + "/elements/count/density/groupBy/type?" + 
                    "bcircles=HuAT%3A8.71017%2C49.4080%2C2&" + 
                    "format=csv&" + 
                    "keys=highway&" + 
                    "showMetadata=false&" + 
                    "time=2012-02-21&" + 
                    "values=track")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_107() throws Exception {
        
        given().accept("text/csv")
                .post(baseUrlOfSut + "/elements/area/ratio/groupBy/boundary?" + 
                    "bboxes=E%3A8.659%2C49.4215%2C8.710%2C49.384&" + 
                    "format=csv&" + 
                    "keys=foo&" + 
                    "keys2=foo&" + 
                    "timeout=33")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_108() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/density/groupBy/boundary?" + 
                    "bpolys=EN%3A8.704561%2C49.403252%2C8.728%2C49.4042%2C8.7055%2C49.415%2C8.743%2C49.4040%2C8.704561%2C49.403252&" + 
                    "keys=highway&" + 
                    "values=elevator")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_109() throws Exception {
        
        given().accept("text/csv")
                .post(baseUrlOfSut + "/elements/area/ratio?" + 
                    "bcircles=mvv%3A8.7048%2C49.800%2C60&" + 
                    "filter2=&" + 
                    "format=csv&" + 
                    "keys2=foo&" + 
                    "showMetadata=true&" + 
                    "timeout=22&" + 
                    "types=PolyGon&" + 
                    "types2=relation&" + 
                    "values2=evomaster_40351_input")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_110() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/ratio?" + 
                    "bcircles=mvv%3A8.7048%2C49.800%2C60&" + 
                    "filter2=evomaster_39858_input&" + 
                    "keys=evomaster_38756_ioput&" + 
                    "keys2=parking%3Acondition%3Aright%3Adescription&" + 
                    "showMetadata=true&" + 
                    "timeout=22&" + 
                    "values2=evomaster_7100_inpu")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(211.0))
                .body("'metadata'.'description'", containsString("Total area of items in square meters satisfying types2, keys2, values2 parameters (= value2 output), as well as items selected by types, keys, values parameters (= value output) and ratio of value2:value."));
    }
    
    
    @Test
    public void test_111() throws Exception {
        
        given().accept("text/csv")
                .post(baseUrlOfSut + "/elements/area/ratio?" + 
                    "bcircles=mvv%3A8.7048%2C49.800%2C60&" + 
                    "filter2=EgHRWkeo&" + 
                    "format=csv&" + 
                    "keys=doctor&" + 
                    "keys2=evomaster_40572_input&" + 
                    "timeout=22&" + 
                    "types2=relation&" + 
                    "values=foo")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_112() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/density/groupBy/tag?" + 
                    "bpolys=iFwHy%3A8.704561%2C49.403252%2C8.718%2C49.425843%2C8.7044%2C49.4194%2C8.7004%2C49.4262%2C8.704561%2C49.403252&" + 
                    "format=json&" + 
                    "groupByKey=building&" + 
                    "groupByValues=church&" + 
                    "keys=highway&" + 
                    "time=2015-02-17&" + 
                    "timeout=100&" + 
                    "values=path")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_113() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/ratio/groupBy/boundary?" + 
                    "bcircles=sy%3A8.7115%2C49.409%2C6%7CAK%3A8.7373%2C49.438295%2C70&" + 
                    "filter2=foo&" + 
                    "keys=evomaster_18029_input&" + 
                    "showMetadata=no&" + 
                    "time=2010-02-01&" + 
                    "values=foo")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_114() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/density/groupBy/tag?" + 
                    "bboxes=jt%3A8.6555%2C49.414%2C8.7132%2C49.388%7CY%3A8.652%2C49.414%2C8.751084%2C49.388&" + 
                    "groupByKey=highway&" + 
                    "keys=highway&" + 
                    "time=2009-03-05")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_115() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/type?" + 
                    "bcircles=8.714980%2C49.43550%2C3&" + 
                    "filter=barrier%3D*+or+geometry%3Aline&" + 
                    "format=json&" + 
                    "showMetadata=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(420.0))
                .body("'metadata'.'description'", containsString("Total length of items in meters, aggregated on the type."));
    }
    
    
    @Test
    public void test_116() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/tag?" + 
                    "bboxes=My%3A8.6711%2C49.428%2C8.727%2C49.392%7CXe%3A8.6577%2C49.4203%2C8.758%2C49.399&" + 
                    "groupByKey=highway&" + 
                    "keys=highway&" + 
                    "showMetadata=no&" + 
                    "time=2016-01-20")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_117() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/tag?" + 
                    "bcircles=8.738%2C49.419%2C920%7C8.7324%2C49.43491%2C65&" + 
                    "groupByKey=building&" + 
                    "groupByValues=church%2Ccivic%2Cpedestrian&" + 
                    "keys=highway&" + 
                    "showMetadata=false&" + 
                    "time=2017-02-28&" + 
                    "values=residential")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_118() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/density/groupBy/boundary/groupBy/tag?" + 
                    "bboxes=8.666988%2C49.420203%2C8.738%2C49.397&" + 
                    "groupByKey=building&" + 
                    "groupByValues=church%2Cpublic&" + 
                    "keys=highway&" + 
                    "time=2013-02-06&" + 
                    "timeout=96&" + 
                    "values=turning_circle")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_119() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/tag?" + 
                    "bboxes=Z%3A8.6752%2C49.404%2C8.74123%2C49.392&" + 
                    "format=geojson&" + 
                    "groupByKey=highway&" + 
                    "showMetadata=no")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_120() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/key?" + 
                    "bboxes=BgA%3A8.6719%2C49.425%2C8.738%2C49.384&" + 
                    "groupByKeys=addr%3Apostcode%2Clit%2Clanes%3Aforward&" + 
                    "showMetadata=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_121() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density/groupBy/type?" + 
                    "bcircles=8.72786%2C49.404558%2C6%7C8.718%2C49.43768%2C17&" + 
                    "filter=highway+in+%28secondary%2Cpath%2Cunclassified%2Ctrack%2Cprimary%2Cresidential%2Ccycleway%2Cservice%2Cfootway%29+or+type%3Away+and+length%3A%28+..+100%29&" + 
                    "format=json&" + 
                    "showMetadata=yes&" + 
                    "time=2016-06-08&" + 
                    "timeout=92")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(336.0))
                .body("'metadata'.'description'", containsString("Density of selected items (area of items in square meters divided by the area in square kilometers), aggregated on the type."));
    }
    
    
    @Test
    public void test_122() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/groupBy/type?" + 
                    "bcircles=Q%3A8.7270%2C49.42119%2C7%7CSd%3A8.7402%2C49.403%2C7%7CAuxio%3A8.7276%2C49.431%2C1&" + 
                    "timeout=63")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_123() throws Exception {
        
        given().accept("text/csv")
                .post(baseUrlOfSut + "/elements/area/ratio?" + 
                    "bcircles=mvv%3A8.7048%2C49.800%2C60&" + 
                    "filter2=&" + 
                    "format=csv&" + 
                    "keys2=foo&" + 
                    "showMetadata=true&" + 
                    "timeout=22&" + 
                    "types=PoLyGOn&" + 
                    "values2=evomaster_40351_input")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_124() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter?" + 
                    "bboxes=bRuJa%3A8.65330%2C49.428%2C8.717521%2C49.384%7CtRkQE%3A8.6743%2C49.412%2C8.739%2C49.3808&" + 
                    "keys=highway&" + 
                    "timeout=86&" + 
                    "values=unclassified")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_125() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length?" + 
                    "bcircles=xbE%3A8.714%2C49.42323%2C1&" + 
                    "format=json&" + 
                    "keys=highway&" + 
                    "time=2015-03-01&" + 
                    "timeout=50&" + 
                    "values=give_way")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_126() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/ratio?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22Va%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.71351%2C49.436%5D%2C%5B8.70047%2C49.429326%5D%2C%5B8.705%2C49.41079%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=oneway%21%3D*+and+geometry%3Aline&" + 
                    "filter2=bicycle%3D*+and+not+area%3A%281.0+..+1E6%29&" + 
                    "showMetadata=no")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_127() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/density/groupBy/boundary?" + 
                    "bcircles=zmJ%3A8.71725%2C49.408%2C1%7CKRH%3A8.742%2C49.4038%2C7%7CFQ%3A8.7299%2C49.415%2C9&" + 
                    "showMetadata=true&" + 
                    "time=2011-11-14")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(528.0))
                .body("'metadata'.'description'", containsString("Density of selected items (count of items in absolute values divided by the area in square kilometers)."));
    }
    
    
    @Test
    public void test_128() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count?" + 
                    "bcircles=xAP%3A8.7221%2C49.435%2C1&" + 
                    "filter=bicycle%3D*+and+id%3A%281+..+9999%29&" + 
                    "format=json&" + 
                    "timeout=63")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_129() throws Exception {
        
        given().accept("text/csv")
                .post(baseUrlOfSut + "/elements/area/ratio/groupBy/boundary?" + 
                    "bboxes=E%3A8.659%2C49.4215%2C8.710%2C49.384&" + 
                    "format=csv&" + 
                    "keys=foo&" + 
                    "timeout=33")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_130() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/boundary/groupBy/tag?" + 
                    "bboxes=8.656%2C49.41764%2C8.70638%2C49.385&" + 
                    "filter=highway%3D*+and+length%3A%28+..+100%29&" + 
                    "groupByKey=building&" + 
                    "showMetadata=no&" + 
                    "time=2014-05-17&" + 
                    "timeout=73")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_131() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area?" + 
                    "bcircles=AqPi%3A8.71291%2C49.4221%2C2&" + 
                    "keys=highway&" + 
                    "showMetadata=false&" + 
                    "values=platform")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_132() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density/groupBy/boundary/groupBy/tag?" + 
                    "bboxes=ICjH%3A8.6969%2C49.4159%2C8.7599%2C49.399%7CyB%3A8.671%2C49.423%2C8.723%2C49.3993&" + 
                    "format=geojson&" + 
                    "groupByKey=building&" + 
                    "showMetadata=true&" + 
                    "timeout=55")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(2482.0))
                .body("'metadata'.'description'", containsString("Density of selected items (length of items in meters divided by the area in square kilometers), aggregated on the boundary and on the tag."))
                .body("'type'", containsString("FeatureCollection"));
    }
    
    
    @Test
    public void test_133() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/boundary/groupBy/tag?" + 
                    "bboxes=Z%3A8.678%2C49.40657%2C8.748%2C49.390%7CK%3A8.668%2C49.426937%2C8.745%2C49.3973&" + 
                    "filter=oneway%3D*+and+area%3A%281.0+..+1E6%29&" + 
                    "groupByKey=highway&" + 
                    "time=2007-12-15&" + 
                    "timeout=52")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_134() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/type?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22Y%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7011%2C49.432%5D%2C%5B8.709%2C49.4084%5D%2C%5B8.719%2C49.4196%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "keys=highway&" + 
                    "showMetadata=false&" + 
                    "time=2017-07-12&" + 
                    "values=platform")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_135() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/boundary?" + 
                    "bboxes=xM%3A8.660%2C49.42917%2C8.74903%2C49.398&" + 
                    "keys=highway&" + 
                    "showMetadata=false&" + 
                    "timeout=39&" + 
                    "values=secondary")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_136() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/boundary?" + 
                    "bcircles=c%3A8.742%2C49.4277%2C2%7Cigrci%3A8.7316%2C49.4364%2C3&" + 
                    "filter=maxspeed%3D*+and+area%3A%281.0+..+1E6%29&" + 
                    "format=geojson&" + 
                    "time=2010-05-30")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'type'", containsString("FeatureCollection"));
    }
    
    
    @Test
    public void test_137() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/ratio/groupBy/boundary?" + 
                    "bboxes=K%3A8.674%2C49.418%2C8.75950%2C49.3935&" + 
                    "keys=highway")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_138() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/density/groupBy/boundary?" + 
                    "bboxes=r%3A8.685645%2C49.421%2C8.7404%2C49.389%7Ct%3A8.667455%2C49.429%2C8.759%2C49.395&" + 
                    "showMetadata=true&" + 
                    "timeout=31")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(3190.0))
                .body("'metadata'.'description'", containsString("Density of selected items (length of items in meters divided by the area in square kilometers)."));
    }
    
    
    @Test
    public void test_139() throws Exception {
        
        given().accept("text/csv")
                .get(baseUrlOfSut + "/elements/area/ratio?" + 
                    "bboxes=mfxBk%3A8.69656%2C49.413%2C8.757%2C49.387&" + 
                    "format=csv&" + 
                    "keys=foo&" + 
                    "keys2=highway&" + 
                    "showMetadata=yes&" + 
                    "time=2016-07-01&" + 
                    "timeout=53&" + 
                    "types2=line%2C&" + 
                    "values2=street_lamp")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_140() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/groupBy/boundary?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22FInZR%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.735%2C49.4015%5D%2C%5B8.709%2C49.431%5D%2C%5B8.704%2C49.43599%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "keys=highway&" + 
                    "time=2013-08-13&" + 
                    "timeout=98")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_141() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density?" + 
                    "bboxes=Ns%3A8.698%2C49.4085%2C8.72603%2C49.387%7CcKIi%3A8.682%2C49.424632%2C8.727062%2C49.394&" + 
                    "format=geojson&" + 
                    "keys=highway&" + 
                    "time=2011-05-29&" + 
                    "timeout=65")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_142() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22I%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.709%2C49.4096%5D%2C%5B8.730%2C49.4110%5D%2C%5B8.702%2C49.43697%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "format=json&" + 
                    "time=2008-11-20&" + 
                    "timeout=53")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_143() throws Exception {
        
        given().accept("text/csv")
                .post(baseUrlOfSut + "/elements/count/groupBy/key?" + 
                    "bboxes=e%3A8.695%2C49.420%2C8.758%2C49.386%7Cp%3A8.652%2C49.4167%2C8.745625%2C49.3805&" + 
                    "format=csv&" + 
                    "groupByKeys=destination%2Cref&" + 
                    "showMetadata=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_144() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/density/groupBy/boundary/groupBy/tag?" + 
                    "bboxes=8.682%2C49.40756%2C8.725%2C49.398%7C8.6520%2C49.424%2C8.758%2C49.385&" + 
                    "filter=lit%3D*+and+geometry%3Apolygon+or+id%3A%281+..+9999%29&" + 
                    "groupByKey=building&" + 
                    "showMetadata=no")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_145() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/density/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=WF%3A8.703%2C49.4079%2C85&" + 
                    "format=json&" + 
                    "groupByKey=building&" + 
                    "groupByValues=turning_circle&" + 
                    "keys=highway&" + 
                    "showMetadata=false&" + 
                    "time=2015-04-17")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_146() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/groupBy/boundary?" + 
                    "bboxes=8.676%2C49.412%2C8.738%2C49.398&" + 
                    "filter=service%3Ddriveway+and+geometry%3Aline&" + 
                    "time=2018-01-13&" + 
                    "timeout=83")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_147() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/ratio?" + 
                    "bboxes=vhViO%3A8.6784%2C49.41149%2C8.7215%2C49.394087%7Cb%3A8.671%2C49.409%2C8.713%2C49.380&" + 
                    "filter=network%3D*&" + 
                    "filter2=ref%3D*+or+id%3A%281+..+9999%29&" + 
                    "format=geojson&" + 
                    "keys2=highway&" + 
                    "showMetadata=yes&" + 
                    "time=2017-02-07&" + 
                    "values2=primary")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(1648.0))
                .body("'metadata'.'description'", containsString("Total length of items in meters satisfying types2, keys2, values2 parameters (= value2 output), as well as items selected by types, keys, values parameters (= value output) and ratio of value2:value."));
    }
    
    
    @Test
    public void test_148() throws Exception {
        
        given().accept("text/csv")
                .post(baseUrlOfSut + "/elements/area/density/groupBy/boundary/groupBy/tag?" + 
                    "bboxes=fE%3A8.677%2C49.4057%2C8.731%2C49.388%7Ca%3A8.6953%2C49.428869%2C8.750%2C49.3981%7CYT%3A8.659369%2C49.414%2C8.7573%2C49.3918%7CHfNXq%3A8.6959%2C49.423757%2C8.703%2C49.394&" + 
                    "format=csv&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=bus_stop%2Cchurch&" + 
                    "keys=highway")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_149() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/density/groupBy/type?" + 
                    "bcircles=XXxY%3A8.730582%2C49.4019%2C6&" + 
                    "keys=highway&" + 
                    "showMetadata=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(1211.0))
                .body("'metadata'.'description'", containsString("Density of selected items (perimeter of items in meters divided by the area in square kilometers), aggregated on the type."));
    }
    
    
    @Test
    public void test_150() throws Exception {
        
        given().accept("text/csv")
                .post(baseUrlOfSut + "/elements/area/ratio?" + 
                    "bcircles=mvv%3A8.7048%2C49.800%2C60&" + 
                    "filter2=evomaster_40549_input&" + 
                    "format=csv&" + 
                    "keys2=foo&" + 
                    "types=OTHer&" + 
                    "values2=uWPxLlC")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_151() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/key?" + 
                    "bcircles=8.70681%2C49.438%2C785&" + 
                    "groupByKeys=source%3Amaxspeed%2Caddr%3Ahousenumber&" + 
                    "keys=highway&" + 
                    "showMetadata=yes&" + 
                    "time=2011-01-07&" + 
                    "values=traffic_mirror")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(391.0))
                .body("'metadata'.'description'", containsString("Total length of items in meters, aggregated on the key."));
    }
    
    
    @Test
    public void test_152() throws Exception {
        
        given().accept("text/csv")
                .get(baseUrlOfSut + "/elements/area/density?" + 
                    "bcircles=Z%3A8.708196%2C49.433584%2C6%7Cjd%3A8.744289%2C49.437%2C6%7Cg%3A8.729%2C49.4061%2C4&" + 
                    "format=csv&" + 
                    "showMetadata=false&" + 
                    "timeout=65")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_153() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/ratio/groupBy/boundary?" + 
                    "bcircles=sy%3A8.7115%2C49.409%2C6%7CAK%3A8.7373%2C49.438295%2C70&" + 
                    "keys=evomaster_2855_input&" + 
                    "keys2=highway&" + 
                    "time=2010-02-01&" + 
                    "types2=node%2C&" + 
                    "values=evomaster_6922_input&" + 
                    "values2=foo")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_154() throws Exception {
        
        given().accept("text/csv")
                .post(baseUrlOfSut + "/elements/area/ratio?" + 
                    "bcircles=mvv%3A8.7048%2C49.800%2C60&" + 
                    "filter2=evomaster_39964_input&" + 
                    "format=csv&" + 
                    "keys=evomaster_38756_input&" + 
                    "keys2=foo&" + 
                    "types=PoLyGOn&" + 
                    "values2=u_PxLlC")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_155() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/groupBy/tag?" + 
                    "bboxes=T%3A8.658%2C49.409%2C8.7467%2C49.384&" + 
                    "groupByKey=building&" + 
                    "groupByValues=traffic_signals%2Cresidential%2Capartments&" + 
                    "timeout=99")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_156() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/density/groupBy/boundary/groupBy/tag?" + 
                    "bboxes=Q%3A8.67149%2C49.405%2C8.7337%2C49.3970&" + 
                    "format=geojson&" + 
                    "groupByKey=highway&" + 
                    "showMetadata=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(1708.0))
                .body("'metadata'.'description'", containsString("Density of selected items (perimeter of items in meters divided by the area in square kilometers), aggregated on the boundary and on the tag."))
                .body("'type'", containsString("FeatureCollection"));
    }
    
    
    @Test
    public void test_157() throws Exception {
        
        given().accept("text/csv")
                .post(baseUrlOfSut + "/users/count/density?" + 
                    "bboxes=WA%3A8.6831%2C49.417%2C8.7018%2C49.398%7CDaqtC%3A8.677%2C49.400728%2C8.7348%2C49.389&" + 
                    "format=csv&" + 
                    "keys=evomaster_17901_input&" + 
                    "showMetadata=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_158() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/density/groupBy/tag?" + 
                    "bcircles=rHa%3A8.703224%2C49.4224%2C9&" + 
                    "filter=maxspeed%3D*+and+geometry%3Apoint+and+not+id%3A%281+..+9999%29&" + 
                    "groupByKey=building&" + 
                    "groupByValues=steps%2Croof&" + 
                    "timeout=88")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_159() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/density?" + 
                    "bboxes=iA%3A8.665%2C49.406%2C8.74324%2C49.388&" + 
                    "filter=foot%21%3D*+or+type%3Away+or+id%3A%281+..+9999%29&" + 
                    "format=json&" + 
                    "showMetadata=false&" + 
                    "time=2014-10-20&" + 
                    "timeout=37")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_160() throws Exception {
        
        given().accept("text/csv")
                .get(baseUrlOfSut + "/elements/length/groupBy/type?" + 
                    "bcircles=W%3A8.7418%2C49.403%2C5%7CZDm%3A8.71690%2C49.422%2C1&" + 
                    "format=csv&" + 
                    "keys=highway&" + 
                    "showMetadata=yes&" + 
                    "time=2018-03-07")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_161() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/groupBy/tag?" + 
                    "bcircles=8.712963%2C49.417907%2C369&" + 
                    "groupByKey=building&" + 
                    "groupByValues=apartments%2Croof%2Ccommercial&" + 
                    "keys=highway&" + 
                    "timeout=57")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_162() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/ratio/groupBy/boundary?" + 
                    "bboxes=zMC%3A8.6574%2C49.419%2C8.726%2C49.385%7Cl%3A8.684%2C49.404265%2C8.712%2C49.3823%7CD%3A8.6846%2C49.4268%2C8.7276%2C49.3904%7COW%3A8.65126%2C49.417%2C8.7376%2C49.389294&" + 
                    "filter2=highway%21%3D*&" + 
                    "format=json&" + 
                    "keys=highway&" + 
                    "showMetadata=no&" + 
                    "time=2011-04-14&" + 
                    "timeout=86")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_163() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/density?" + 
                    "bcircles=JWA%3A8.7365%2C49.408%2C53%7Cyz%3A8.726%2C49.4255%2C3&" + 
                    "keys=highway&" + 
                    "timeout=45")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_164() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/key?" + 
                    "bboxes=b%3A8.6618%2C49.4051%2C8.736%2C49.383&" + 
                    "filter=lanes%3D*+or+type%3Anode&" + 
                    "format=geojson&" + 
                    "groupByKeys=lit%2Coneway%2Caddr%3Astreet&" + 
                    "timeout=55")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_165() throws Exception {
        
        given().accept("text/csv")
                .post(baseUrlOfSut + "/elements/length/density/groupBy/boundary?" + 
                    "bcircles=8.7364%2C49.433%2C1&" + 
                    "format=csv&" + 
                    "keys=highway&" + 
                    "time=2013-01-20&" + 
                    "timeout=83")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_166() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/key?" + 
                    "bboxes=bpO%3A8.6927%2C49.403%2C8.753%2C49.384&" + 
                    "groupByKeys=addr%3Ahousenumber%2Clanes&" + 
                    "keys=highway&" + 
                    "time=%2F%2FP3M16D&" + 
                    "timeout=89")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_167() throws Exception {
        
        given().accept("text/csv")
                .get(baseUrlOfSut + "/users/count/groupBy/key?" + 
                    "bboxes=BrZSo%3A8.6627%2C49.422%2C8.749%2C49.38773%7CNAX%3A8.676%2C49.428%2C8.724%2C49.398%7ChwZ%3A8.665627%2C49.4267%2C8.700%2C49.383%7CQuCdV%3A8.66208%2C49.42070%2C8.72023%2C49.39843&" + 
                    "format=csv&" + 
                    "groupByKeys=addr%3Acountry%2Caddr%3Acity&" + 
                    "keys=highway&" + 
                    "showMetadata=no&" + 
                    "time=%2F%2FP2M27D&" + 
                    "timeout=61")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_168() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/tag?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22jT%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.722%2C49.43714%5D%2C%5B8.744%2C49.437%5D%2C%5B8.7261%2C49.4029%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=ref%3D*&" + 
                    "format=json&" + 
                    "groupByKey=highway&" + 
                    "showMetadata=yes&" + 
                    "time=2016-12-07&" + 
                    "timeout=88")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(2839.0))
                .body("'metadata'.'description'", containsString("Total perimeter of items in meters, aggregated on the tag."));
    }
    
    
    @Test
    public void test_169() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22eQY%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.701490%2C49.431%5D%2C%5B8.736128%2C49.428%5D%2C%5B8.7164%2C49.4147%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22IulBS%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7049%2C49.4112%5D%2C%5B8.708%2C49.408%5D%2C%5B8.72747%2C49.41355%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22w%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7463%2C49.4043%5D%2C%5B8.707%2C49.4042%5D%2C%5B8.705%2C49.412%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=barrier%3D*+or+not+area%3A%281.0+..+1E6%29&" + 
                    "groupByKey=highway&" + 
                    "showMetadata=true&" + 
                    "time=2009-05-31")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(1157.0))
                .body("'metadata'.'description'", containsString("Total perimeter of items in meters, aggregated on the boundary and on the tag."));
    }
    
    
    @Test
    public void test_170() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/ratio?" + 
                    "bboxes=yUiGs%3A8.691%2C49.4181%2C8.7026%2C49.386%7CRuO%3A8.688819%2C49.404%2C8.731589%2C49.3928%7CN%3A8.6739%2C49.423%2C8.71904%2C49.3904%7CNGZvp%3A8.696513%2C49.410730%2C8.741671%2C49.396&" + 
                    "filter=ref%3D*+and+type%3Anode+and+area%3A%281.0+..+1E6%29&" + 
                    "filter2=oneway%3D*+or+geometry%3Aline+or+length%3A%28+..+100%29&" + 
                    "keys2=highway&" + 
                    "time=2011-02-28&" + 
                    "timeout=46")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_171() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/boundary?" + 
                    "bboxes=vlkIC%3A8.690402%2C49.40893%2C8.73893%2C49.385&" + 
                    "format=geojson&" + 
                    "keys=highway&" + 
                    "time=2012-01-29&" + 
                    "timeout=21&" + 
                    "values=platform")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'type'", containsString("FeatureCollection"));
    }
    
    
    @Test
    public void test_172() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/type?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22Zv%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.712%2C49.418316%5D%2C%5B8.744%2C49.407387%5D%2C%5B8.7040%2C49.428%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "showMetadata=true&" + 
                    "time=2013-03-30&" + 
                    "timeout=46")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(3486.0))
                .body("'metadata'.'description'", containsString("Total perimeter of items in meters, aggregated on the type."));
    }
    
    
    @Test
    public void test_173() throws Exception {
        
        given().accept("text/csv")
                .post(baseUrlOfSut + "/elements/area/ratio?" + 
                    "bcircles=mvv%3A8.7048%2C49.800%2C60&" + 
                    "filter2=fo&" + 
                    "format=csv&" + 
                    "keys=evomaster_38756_ioput&" + 
                    "keys2=evomaster_38842_input&" + 
                    "showMetadata=true&" + 
                    "timeout=22&" + 
                    "values=foo&" + 
                    "values2=evomaster_7100_inpu")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_174() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/tag?" + 
                    "bboxes=T%3A8.673301%2C49.409%2C8.7320%2C49.3868%7CEoGQd%3A8.681%2C49.415%2C8.73361%2C49.385%7CJrq%3A8.6613%2C49.407%2C8.7489%2C49.388%7Cj%3A8.673%2C49.418%2C8.750%2C49.3903&" + 
                    "format=geojson&" + 
                    "groupByKey=highway&" + 
                    "keys=highway&" + 
                    "showMetadata=yes&" + 
                    "timeout=41")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(2000.0))
                .body("'metadata'.'description'", containsString("Number of distinct active users per time interval aggregated on the tag."));
    }
    
    
    @Test
    public void test_175() throws Exception {
        
        given().accept("text/csv")
                .post(baseUrlOfSut + "/elements/perimeter/ratio/groupBy/boundary?" + 
                    "bcircles=sy%3A8.7115%2C49.409%2C6%7CAK%3A8.7373%2C49.438295%2C70&" + 
                    "format=csv&" + 
                    "keys=highway&" + 
                    "keys2=highway&" + 
                    "showMetadata=no&" + 
                    "time=2010-02-01&" + 
                    "timeout=41&" + 
                    "types2=node%2C")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_176() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/groupBy/tag?" + 
                    "bcircles=8.712963%2C49.417907%2C369&" + 
                    "groupByKey=building&" + 
                    "groupByValues=apartments%2Croof%2Ccwmmercial&" + 
                    "showMetadata=Voo&" + 
                    "types=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given parameter showMetadata can only contain the values 'true', 'yes', 'false', or 'no'."));
    }
    
    
    @Test
    public void test_177() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/key?" + 
                    "bboxes=bpO%3A8.6927%2C49.403%2C8.753%2C49.384&" + 
                    "filter=goo&" + 
                    "groupByKeys=addr%3Ahousenumber%2Clanes&" + 
                    "keys=highway&" + 
                    "timeout=89&" + 
                    "types=foo&" + 
                    "values=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Parameter 'types' (and 'types2') can only have 'node' and/or 'way' and/or 'relation' OR 'point' and/or 'line' and/or 'polygon' and/or 'other'"));
    }
    
    
    @Test
    public void test_178() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/boundary?" + 
                    "bpolys=SXz&" + 
                    "filter=H9F6R2&" + 
                    "keys=f533_X5aO&" + 
                    "showMetadata=&" + 
                    "values=zD")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_179() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/groupBy/boundary?" + 
                    "bcircles=evomaster_2649_input&" + 
                    "bpolys=J25Tdey&" + 
                    "filter=oE2U&" + 
                    "format=&" + 
                    "showMetadata=Nou&" + 
                    "time=WLXEb22ObBMxoYO9&" + 
                    "timeout=xih7d56msZ_IX&" + 
                    "types=evomaster_2650cinput&" + 
                    "values=KI9ayWQi8eMXHA")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_180() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/density/groupBy/type?" + 
                    "bpolys=8.704561%2C49.403252%2C8.701%2C49.4127%2C6.7073%2C49.42284%2C8.7059%2C49.430%2C8.704561%2C49.403252&" + 
                    "filter=foo&" + 
                    "time=foo&" + 
                    "values=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_181() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/density/groupBy/type?" + 
                    "bpolys=k&" + 
                    "keys=IL9s_B&" + 
                    "showMetadata=evomaster_51667_input&" + 
                    "timeout=&" + 
                    "values=GXgFa9iD4R90lg")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_182() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/density/groupBy/tag?" + 
                    "bcircles=rHa%3A8.703224%2C49.4224%2C9&" + 
                    "format=foo&" + 
                    "groupByKey=buildin&" + 
                    "keys=foo&" + 
                    "showMetadata=foo&" + 
                    "timeout=88")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given parameter showMetadata can only contain the values 'true', 'yes', 'false', or 'no'."));
    }
    
    
    @Test
    public void test_183() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/density/groupBy/tag?" + 
                    "bpolys=xyfYgSwM%5CAiuko&" + 
                    "filter=PbzDJXZ&" + 
                    "format=t2wuqf&" + 
                    "groupByKey=evomaster_549%3A4_ioput&" + 
                    "groupByValues=Ct4J&" + 
                    "keys=8TM6S&" + 
                    "showMetadata=TYD&" + 
                    "timeout=0.0&" + 
                    "types=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_184() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/density/groupBy/boundary?" + 
                    "bpolys=_CI4iv6iCg&" + 
                    "format=x8o4fXbeeO&" + 
                    "showMetadata=&" + 
                    "time=WSfmHG0&" + 
                    "timeout=E6&" + 
                    "types=&" + 
                    "values=2y")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_185() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/density/groupBy/boundary?" + 
                    "bpolys=FUuF1jxCtCuar&" + 
                    "format=Tb&" + 
                    "time=wEFPi4xzn1fSv&" + 
                    "types=evomaster_19837_input&" + 
                    "values=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_186() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/density?" + 
                    "bboxes=foo&" + 
                    "bpolys=foo&" + 
                    "filter=foo&" + 
                    "format=foo&" + 
                    "keys=evomaster_617_input&" + 
                    "showMetadata=foo&" + 
                    "timeout=46")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_187() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count?" + 
                    "bpolys=t&" + 
                    "filter=mQW3&" + 
                    "format=E0cu&" + 
                    "keys=K8wvG9KHY6jjOMVR&" + 
                    "showMetadata=mQW3&" + 
                    "time=4uQayM7T&" + 
                    "types=VKkyzz_8Y&" + 
                    "values=3mwqUkNJ6")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_188() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count?" + 
                    "bcircles=Li%3A8.7252%2C49.438%2C972139796&" + 
                    "filter=fo2o&" + 
                    "keys=w3RiDn&" + 
                    "showMetadata=IcuURQQiHTZID&" + 
                    "timeout=22")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given parameter showMetadata can only contain the values 'true', 'yes', 'false', or 'no'."));
    }
    
    
    @Test
    public void test_189() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/ratio/groupBy/boundary?" + 
                    "bboxes=foo&" + 
                    "bcircles=evomaster_134_input&" + 
                    "filter=foo&" + 
                    "filter2=evomaster_135_input&" + 
                    "keys=highway&" + 
                    "keys2=evomaster_136_input&" + 
                    "time=2015-11-10&" + 
                    "timeout=43&" + 
                    "types=foo&" + 
                    "types2=point%2Cline%2Cpolygon%2Cother&" + 
                    "values=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_190() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/ratio?" + 
                    "bboxes=evomaster_22267_input&" + 
                    "bcircles=KPpLGTcqpz_i&" + 
                    "bpolys=evomaster_222.8_input&" + 
                    "keys=22sJdL&" + 
                    "time=evomaster_22269_input&" + 
                    "values=tI&" + 
                    "values2=5DA")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_191() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/ratio?" + 
                    "bboxes=2U5&" + 
                    "bcircles=ZiggkY_IuBb&" + 
                    "bpolys=8xwzZGOomWgQK&" + 
                    "filter2=evomaster_690_input&" + 
                    "format=evomaster_693_input&" + 
                    "keys=E3qd&" + 
                    "showMetadata=evomaster_695_input&" + 
                    "time=evomaster_696_input&" + 
                    "timeout=0.11793354393115019&" + 
                    "types=PwJ&" + 
                    "types2=Jzn3odtSGQjZqwk&" + 
                    "values=ZGwIHU5eB&" + 
                    "values2=evomaster_603_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_192() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/type?" + 
                    "bboxes=foo&" + 
                    "bcircles=foo&" + 
                    "filter=foo&" + 
                    "format=foo&" + 
                    "showMetadata=evomaster_709_input&" + 
                    "time=2013-03-30&" + 
                    "timeout=46&" + 
                    "types=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_193() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/groupBy/type?" + 
                    "bcircles=Q%3A8.7270%2C49.42119%2C7%7CSd%3A8.7402%2C49.403%2C7%7CAuxio%3A8.7276%2C49.431%2C1&" + 
                    "timeout=63&" + 
                    "types=foo&" + 
                    "values=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Parameter 'types' (and 'types2') can only have 'node' and/or 'way' and/or 'relation' OR 'point' and/or 'line' and/or 'polygon' and/or 'other'"));
    }
    
    
    @Test
    public void test_194() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/tag?" + 
                    "bpolys=IvCY2zjBa&" + 
                    "filter=g&" + 
                    "format=N7zF_y&" + 
                    "groupByKey=tDS6s6Z2btkMt&" + 
                    "keys=4sxhtHyDBgcbKq&" + 
                    "showMetadata=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_195() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/groupBy/tag?" + 
                    "bpolys=eoz7CTY&" + 
                    "filter=lDzoWpqj9HW3k&" + 
                    "format=4ze9_h6K_yZE&" + 
                    "groupByKey=i&" + 
                    "groupByValues=miBhopBpSlNEaaJ&" + 
                    "time=Y&" + 
                    "values=HIacnsQpEqm9mD")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_196() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/key?" + 
                    "bpolys=haGxYX4Wq8gpg&" + 
                    "format=f7BTtkL08iq&" + 
                    "groupByKeys=cXwcT7WwL6xC&" + 
                    "keys=Pav9CHvV8D&" + 
                    "showMetadata=ufH6zM1XI4r0x&" + 
                    "time=2EGkULA&" + 
                    "values=w_A")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_197() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/groupBy/key?" + 
                    "bboxes=8.664%2C49.4014%2C8.710%2C49.383&" + 
                    "filter=foo&" + 
                    "groupByKeys=lanes%3Abackward%2Cbicycle&" + 
                    "time=foq&" + 
                    "timeout=60")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_198() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=f&" + 
                    "filter=yVysrRAaN&" + 
                    "format=7S6WNd5SSv&" + 
                    "groupByKey=0aIqWm&" + 
                    "keys=Hp0erGrvorQW&" + 
                    "showMetadata=aHy1rW9UTNPeaAZ&" + 
                    "time=Bzap8Rfri08wO&" + 
                    "types=egQOmLZOXpN")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_199() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/boundary?" + 
                    "bboxes=vlkIC%3A8.690402%2C49.40893%2C8.73893%2C49.385&" + 
                    "filter=foo&" + 
                    "format=Weojson&" + 
                    "keys=highway&" + 
                    "time=evomaster_51502_input&" + 
                    "timeout=21")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given 'format' parameter is invalid. Please choose between 'geojson'(only available for /groupBy/boundary and data extraction requests), 'json', or 'csv'."));
    }
    
    
    @Test
    public void test_200() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/groupBy/boundary?" + 
                    "bboxes=kXu&" + 
                    "bpolys=EN8J2TCg&" + 
                    "filter=bAwip5Nc&" + 
                    "format=4E6eF&" + 
                    "showMetadata=xm&" + 
                    "time=&" + 
                    "timeout=pHdCXAg&" + 
                    "values=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_201() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/density/groupBy/type?" + 
                    "bcircles=XXxY%3A8.730582%2C49.4019%2C6&" + 
                    "filter=foo&" + 
                    "keys=evomaster_2982_input&" + 
                    "showMetadata=true")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The keys, values and types parameters must be empty, when you set the filter parameter."));
    }
    
    
    @Test
    public void test_202() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/density/groupBy/type?" + 
                    "bcircles=Sp7L&" + 
                    "bpolys=&" + 
                    "format=NwkygeG8guB5skk&" + 
                    "keys=dn_bgGw&" + 
                    "timeout=6qT_7&" + 
                    "types=MY_a0Tzyx5NC")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_203() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/density/groupBy/tag?" + 
                    "bpolys=x&" + 
                    "groupByKey=W2MD6fKsJK3Q9s&" + 
                    "time=L_LYdtQv&" + 
                    "values=xtFds")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_204() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/density/groupBy/tag?" + 
                    "bboxes=S5&" + 
                    "bcircles=evomaster_904_input&" + 
                    "bpolys=OFoyUnns&" + 
                    "format=t2wXO3S5&" + 
                    "groupByKey=T7usFWRx2Ond&" + 
                    "groupByValues=evomaster_905_input&" + 
                    "timeout=2&" + 
                    "types=x1k8j8q7oT6mmUWe")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_205() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/density/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=3mLT4Q7y&" + 
                    "filter=Tz&" + 
                    "format=6DagYg9xulthzXK&" + 
                    "groupByKey=RSMnpy&" + 
                    "groupByValues=n&" + 
                    "time=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_206() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/density/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=cRHJdqhM1fJUZ8R_&" + 
                    "bpolys=4vY4&" + 
                    "filter=qrY0L9xAz3op&" + 
                    "format=hOaM_Y81T&" + 
                    "groupByKey=zrWqH&" + 
                    "groupByValues=eDXDSlAs&" + 
                    "time=CVX&" + 
                    "timeout=Yc8Hk&" + 
                    "types=SuB")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_207() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/density?" + 
                    "bboxes=evomaster_3335_input&" + 
                    "bpolys=foo&" + 
                    "format=json&" + 
                    "time=2014-10-20&" + 
                    "types=foo&" + 
                    "values=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_208() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/density?" + 
                    "bcircles=lBny%3A8.7222%2C49.414%2C4%7CylXHQ%3A8.74542%2C49.424%2C4&" + 
                    "filter=evomaster_1317_input&" + 
                    "keys=5o7MLvi1uLHVT83V&" + 
                    "time=foo&" + 
                    "timeout=74&" + 
                    "values=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_209() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter?" + 
                    "bpolys=z&" + 
                    "filter=ijU1QtOrC1gXq&" + 
                    "format=bnaEW16FTX&" + 
                    "showMetadata=evomaster_11559_input&" + 
                    "time=evomaster_49838_input&" + 
                    "types=evomaster_11560_input&" + 
                    "values=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_210() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter?" + 
                    "bpolys=BIj_6vJeCAKCgOYk&" + 
                    "filter=usiHjPNSdbcg5s&" + 
                    "keys=5ZpR&" + 
                    "time=cD4cE&" + 
                    "timeout=tlrH1wM8&" + 
                    "types=evomaster_1053_input&" + 
                    "values=NYkLGnCDgLLf8kb")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_211() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/ratio/groupBy/boundary?" + 
                    "bpolys=5&" + 
                    "filter2=V_RD&" + 
                    "format=KPINBVU8QfVhb&" + 
                    "keys2=SiyLBTSpbq6j15&" + 
                    "showMetadata=Lszu02NedBI&" + 
                    "timeout=&" + 
                    "types=5kM8KOj1kaTm&" + 
                    "types2=1DnGc2uYu3QfbsCL&" + 
                    "values2=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_212() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/ratio/groupBy/boundary?" + 
                    "bboxes=foo&" + 
                    "bpolys=8.704561%2C49.403252%2C8.730%2C49.420%2C8.744%2C49.409%2C8.722%2C49.43385%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.7087%2C49.40559%2C8.700%2C49.41033%2C8.7096%2C49.4154%2C8.704561%2C49.403252&" + 
                    "filter=foo&" + 
                    "format=foo&" + 
                    "keys2=foo&" + 
                    "showMetadata=foo&" + 
                    "time=2007-11-170&" + 
                    "timeout=evomaster_20881_input&" + 
                    "types2=foo&" + 
                    "values=street_lamp&" + 
                    "values2=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_213() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/ratio?" + 
                    "bboxes=wRTwOWvAFzqqeos&" + 
                    "bcircles=evomaster_21559_input&" + 
                    "keys=B4Y3tMN&" + 
                    "keys2=qd&" + 
                    "time=ZxmLsZ&" + 
                    "types=evomaster_21560_input&" + 
                    "types2=evomaster_21561_input&" + 
                    "values=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_214() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/ratio?" + 
                    "bboxes=R&" + 
                    "format=pby&" + 
                    "keys=qvVNuMwzC7Htc4ck&" + 
                    "keys2=M_nTwHCbq&" + 
                    "time=Btlj2FGbT9FSji&" + 
                    "timeout=SywON&" + 
                    "types=0&" + 
                    "values2=PdY")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_215() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/type?" + 
                    "bpolys=FB5nu7cfa4&" + 
                    "filter=4EWt3Yi1vEi4eku&" + 
                    "format=Q2Ab&" + 
                    "showMetadata=evomaster_12880_input&" + 
                    "types=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_216() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/groupBy/type?" + 
                    "bcircles=W%3A8.7418%2C49.403%2C5%7CZDm%3A8.71690%2C49.422%2C1&" + 
                    "format=csv&" + 
                    "keys=highway&" + 
                    "showMetadata=yes&" + 
                    "time=201%3A-03-07")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_217() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/tag?" + 
                    "bboxes=My%3A8.6711%2C49.428%2C8.727%2C49.392%7CXe%3A8.6577%2C49.4203%2C8.758%2C49.399&" + 
                    "filter=highway&" + 
                    "groupByKey=highuay&" + 
                    "groupByValues=foo&" + 
                    "keys=highway&" + 
                    "showMetadata=no&" + 
                    "time=2016-01-20")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The keys, values and types parameters must be empty, when you set the filter parameter."));
    }
    
    
    @Test
    public void test_218() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/groupBy/tag?" + 
                    "format=wuTQt5hAcwp&" + 
                    "groupByKey=vAhWPKBcWkBf&" + 
                    "showMetadata=Z8LwRydHuE2TUBg&" + 
                    "time=hfWRCUZKB_Lyh2&" + 
                    "types=ypzhde&" + 
                    "values=gr5oB")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("You need to define one of the boundary parameters (bboxes, bcircles, bpolys)."));
    }
    
    
    @Test
    public void test_219() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/key?" + 
                    "bcircles=8.70681%2C49.438%2C785&" + 
                    "format=foo&" + 
                    "groupByKeys=source%3Amaxspeed%2Caddr%3Ahousenumber&" + 
                    "keys=highway&" + 
                    "showMetadata=yes&" + 
                    "time=2011-01-07&" + 
                    "values=traffic_mirror")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given 'format' parameter is invalid. Please choose between 'geojson'(only available for /groupBy/boundary and data extraction requests), 'json', or 'csv'."));
    }
    
    
    @Test
    public void test_220() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/groupBy/key?" + 
                    "filter=1ZiLZ1fwkI&" + 
                    "groupByKeys=EEZCa2my&" + 
                    "keys=4pkV&" + 
                    "time=dkTtuDEjmZb&" + 
                    "timeout=Zioi&" + 
                    "types=NEkO9pqwfbtDXNhD")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_221() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/boundary/groupBy/tag?" + 
                    "filter=evomaster_30158_input&" + 
                    "format=MWfATala0NZ&" + 
                    "groupByKey=YQtY&" + 
                    "groupByValues=WzNn&" + 
                    "keys=w&" + 
                    "showMetadata=evomaster_30159_input&" + 
                    "types=tslQZMPqRa&" + 
                    "values=7e2Tt7Os_lKezjLB")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("You need to define one of the boundary parameters (bboxes, bcircles, bpolys)."));
    }
    
    
    @Test
    public void test_222() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/boundary?" + 
                    "bboxes=xM%3A8.660%2C49.42917%2C8.74903%2C49.398&" + 
                    "filter=foo&" + 
                    "keys=evomaster_1283_input&" + 
                    "time=foo&" + 
                    "timeout=39&" + 
                    "values=secondary")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_223() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/groupBy/boundary?" + 
                    "bcircles=Mw%3A8.722%2C49.6101%2C9585886661%7CMKbiU%3A8.7326%2C49.426%2C6%7CuJu%3A8.716%2C4%3D.433%2C4&" + 
                    "filter=foo&" + 
                    "format=fooR&" + 
                    "keys=highway&" + 
                    "time=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Each bcircle must consist of a lon/lat coordinate pair plus a buffer in meters."));
    }
    
    
    @Test
    public void test_224() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density/groupBy/type?" + 
                    "bboxes=S9764lSMhN_AaFN&" + 
                    "bpolys=cuyEFLM0iI3y8Xeb&" + 
                    "filter=XRu&" + 
                    "format=Rj_c6jE1OEC&" + 
                    "showMetadata=oFRe77o2vuXwt&" + 
                    "time=sERBWX_91")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_225() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/density/groupBy/type?" + 
                    "bboxes=foo&" + 
                    "bpolys=D%3A8.704561%2C49.403252%2C8.712%2C49.407%2C8.733%2C49.43038%2C8.702%2C49.40254%2C8.704561%2C49.403252%7CiBu%3A8.704561%2C49.403252%2C8.724%2C49.415%2C8.733%2C49.4165%2C8.721%2C49.404594%2C8.704561%2C49.403252&" + 
                    "filter=ref%22%3D*+or+tyre%3Anode+or+id%3A%281+..+9999%29&" + 
                    "format=csv&" + 
                    "keys=foo&" + 
                    "showMetadata=yfs&" + 
                    "time=2015-09-07&" + 
                    "timeout=7%3A")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_226() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density/groupBy/tag?" + 
                    "bboxes=YrwvqF09dmMiNMS&" + 
                    "bpolys=gfrKrQP&" + 
                    "groupByKey=&" + 
                    "groupByValues=gL8nSf5g&" + 
                    "keys=MxmZh8&" + 
                    "time=e1&" + 
                    "timeout=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_227() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/density/groupBy/tag?" + 
                    "bpolys=iFwHy%3A8.704561%2C49.403252%2C8.718%2C49.425843%2C8.7044%2C49.4194%2C8.7004%2C49.4262%2C8.704561%2C49.403252&" + 
                    "filter=foo&" + 
                    "format=json&" + 
                    "groupByKey=UUilcjng&" + 
                    "keys=highwax&" + 
                    "time=2015-02-17&" + 
                    "values=path")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The keys, values and types parameters must be empty, when you set the filter parameter."));
    }
    
    
    @Test
    public void test_228() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density/groupBy/boundary/groupBy/tag?" + 
                    "bboxes=evomaster_8440_input&" + 
                    "bcircles=&" + 
                    "format=G8d3ncCCxQQAEN&" + 
                    "groupByKey=IiIf&" + 
                    "keys=c7OGxNYEz_6ANIf&" + 
                    "time=hAD0_AXoOt0&" + 
                    "types=wAFWgFLMq&" + 
                    "values=b")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_229() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/density/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=eI2z7Q2rZS8V7W0m&" + 
                    "bpolys=V4UZSgtGy5VZ7s&" + 
                    "format=Vl4Iqgt6t&" + 
                    "groupByKey=80ecVM&" + 
                    "keys=WDrgYX&" + 
                    "time=MIzpS&" + 
                    "values=0N1JioA")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_230() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density/groupBy/boundary?" + 
                    "bcircles=8.7364%2C49.433%2C1&" + 
                    "format=evomaster_15374_input&" + 
                    "keys=highway&" + 
                    "showMetadata=foo&" + 
                    "time=2013-01-20&" + 
                    "timeout=83&" + 
                    "types=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given parameter showMetadata can only contain the values 'true', 'yes', 'false', or 'no'."));
    }
    
    
    @Test
    public void test_231() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density?" + 
                    "bboxes=Ns%3A8.698%2C49.4085%2C8.72603%2C49.387%7CcKIi%3A8.682%2C49.424632%2C8.727062%2C49.394&" + 
                    "filter=foo&" + 
                    "format=geojson&" + 
                    "keys=highwau&" + 
                    "time=2011-05-29")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The keys, values and types parameters must be empty, when you set the filter parameter."));
    }
    
    
    @Test
    public void test_232() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/density?" + 
                    "bboxes=XYOCP%3A8.68943%2C49.406%2C8.705%2C49.3944&" + 
                    "filter=foo&" + 
                    "keys=evomaster_51876_input&" + 
                    "showMetadata=foo&" + 
                    "types=foo&" + 
                    "values=seconbary")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given parameter showMetadata can only contain the values 'true', 'yes', 'false', or 'no'."));
    }
    
    
    @Test
    public void test_233() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length?" + 
                    "bcircles=xbE%3A8.714%2C49.42323%2C1&" + 
                    "filter=foo&" + 
                    "format=json&" + 
                    "time=2015-83-01&" + 
                    "timeout=50&" + 
                    "types=foo&" + 
                    "values=give_way")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Parameter 'types' (and 'types2') can only have 'node' and/or 'way' and/or 'relation' OR 'point' and/or 'line' and/or 'polygon' and/or 'other'"));
    }
    
    
    @Test
    public void test_234() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length?" + 
                    "bboxes=E%3A8.6737%2C49.4135%2C8.708094%2C49.395&" + 
                    "filter=foo&" + 
                    "keys=highway&" + 
                    "time=foo&" + 
                    "timeout=43")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_235() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/ratio/groupBy/boundary?" + 
                    "bboxes=zMC%3A8.6574%2C49.419%2C8.726%2C49.385%7Cl%3A8.684%2C49.404265%2C8.712%2C49.3823%7CD%3A8.6846%2C49.4268%2C8.7276%2C49.3904%7COW%3A8.65126%2C49.417%2C8.7376%2C49.389294&" + 
                    "filter=foo&" + 
                    "filter2=highway%21%3D*&" + 
                    "keys=highway&" + 
                    "showMetadata=no&" + 
                    "time=evomaster_39863_input&" + 
                    "types=foo&" + 
                    "values=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Parameter 'types' (and 'types2') can only have 'node' and/or 'way' and/or 'relation' OR 'point' and/or 'line' and/or 'polygon' and/or 'other'"));
    }
    
    
    @Test
    public void test_236() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/ratio/groupBy/boundary?" + 
                    "bboxes=K%3A8.674%2C49.418%2C8.75950%2C49.3935&" + 
                    "filter2=foo&" + 
                    "keys=highwa&" + 
                    "keys2=foo&" + 
                    "time=foo&" + 
                    "types2=foo&" + 
                    "values=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_237() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/ratio?" + 
                    "keys=2vG&" + 
                    "keys2=XUKFNodHlLfNDw&" + 
                    "showMetadata=YBi0E&" + 
                    "time=xum61WEkAlKXC2&" + 
                    "types=f73cE&" + 
                    "types2=7iAKV5YlDdeJVqTB")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("You need to define one of the boundary parameters (bboxes, bcircles, bpolys)."));
    }
    
    
    @Test
    public void test_238() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/groupBy/type?" + 
                    "bcircles=B%3A8.7122%2C49.4202%2C9%7CWeAWG%3A8.72206%2C49.405%2C5&" + 
                    "filter=foo&" + 
                    "format=evomaster_1910_input&" + 
                    "time=evomaster_1911_input&" + 
                    "types=evomaster_1912_input&" + 
                    "values=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given 'format' parameter is invalid. Please choose between 'geojson'(only available for /groupBy/boundary and data extraction requests), 'json', or 'csv'."));
    }
    
    
    @Test
    public void test_239() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/tag?" + 
                    "bcircles=8.738%2C49.419%2C920%7C8.7324%2C49.43491%2C65&" + 
                    "groupByKey=building&" + 
                    "groupByValues=church%2Ccivic%2Cpedestrian&" + 
                    "showMetadata=false&" + 
                    "time=2017-02-28&" + 
                    "types=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Parameter 'types' (and 'types2') can only have 'node' and/or 'way' and/or 'relation' OR 'point' and/or 'line' and/or 'polygon' and/or 'other'"));
    }
    
    
    @Test
    public void test_240() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/groupBy/tag?" + 
                    "bboxes=jsr%3A8.67938%2C49.427%2C8.7189%2C49.381%7CI%3A8.650%2C49.423%2C8.709%2C49.394%7Ca%3A8.661%2C49.4029%2C8.703%2C49.387%7CiDBa%3A8.6736%2C49.401%2C8.7358%2C49.382&" + 
                    "format=geojson&" + 
                    "groupByKey=building&" + 
                    "groupByValues=cycleway%2Cstop_lin&" + 
                    "keys=highway&" + 
                    "showMetadata=true&" + 
                    "time=foo&" + 
                    "values=stop")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_241() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/key?" + 
                    "bpolys=JnRYp&" + 
                    "filter=FhsjYO41YMGg4WX&" + 
                    "format=ovHqenk79GIC7I&" + 
                    "groupByKeys=8Zo_L3bb8UVxLlA&" + 
                    "time=AcihxQcFWRFoZU&" + 
                    "timeout=E5sA")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_242() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/groupBy/key?" + 
                    "bboxes=Qls0hXm1hk&" + 
                    "bpolys=u9M8&" + 
                    "filter=8&" + 
                    "groupByKeys=SozxxIDnSmlo9i2&" + 
                    "keys=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_243() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/boundary/groupBy/tag?" + 
                    "bboxes=Z%3A8.678%2C49.40657%2C8.748%2C49.390%7CK%3A8.668%2C49.426937%2C8.745%2C49.3973&" + 
                    "filter=oneway%3D*+and+area%3A%281.0+..+1E6%29&" + 
                    "format=evomaster_7051_input&" + 
                    "groupByKey=evomaster_7052_input&" + 
                    "groupByValues=foo&" + 
                    "keys=foo&" + 
                    "showMetadata=foo&" + 
                    "time=2007-12-15&" + 
                    "timeout=52&" + 
                    "types=foo&" + 
                    "values=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given parameter showMetadata can only contain the values 'true', 'yes', 'false', or 'no'."));
    }
    
    
    @Test
    public void test_244() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=sXOjI%3A8.703%2C49.445210%2C2%7CuacHa%3A8.709%2C49.41886%2C5&" + 
                    "filter=fko&" + 
                    "format=geojson&" + 
                    "groupByKey=highw_y&" + 
                    "keys=highway&" + 
                    "showMetadata=true&" + 
                    "time=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_245() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/boundary?" + 
                    "bpolys=q&" + 
                    "filter=hAguiyMC2iX72pJ_&" + 
                    "time=qJo364U&" + 
                    "values=C6i6mcprwATpW")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_246() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/density/groupBy/type?" + 
                    "bcircles=HuAT%3A8.71017%2C49.4080%2C2&" + 
                    "filter=foo&" + 
                    "format=csv&" + 
                    "keys=highway&" + 
                    "showMetadata=false&" + 
                    "time=2012-02-21&" + 
                    "values=track")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The keys, values and types parameters must be empty, when you set the filter parameter."));
    }
    
    
    @Test
    public void test_247() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/density/groupBy/tag?" + 
                    "bpolys=uO&" + 
                    "filter=iqB8Wh8HyIwOhSA&" + 
                    "groupByKey=t%25UAQ8I0a9PtUM&" + 
                    "groupByValues=I&" + 
                    "showMetadata=evomaster_1824_input&" + 
                    "time=evomaster_1819_input&" + 
                    "types=WQ&" + 
                    "values=nz7ELKHKcxbYmFeI")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_248() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/density/groupBy/tag?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22uTa%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.716%2C49.4181%5D%2C%5B8.747%2C49.421%5D%2C%5B8.710365%2C49.405%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22x%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Oolygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.746%2C49.4301%5D%2C%5B8.708%2C49.42053%5D%2C%5B8.743%2C49.400723%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22b%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7171%2C49.400%5D%2C%5B8.718%2C49.40446%5D%2C%5B8.7057%2C49.421%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "format=jsoo&" + 
                    "groupByKey=dU2D1UHg&" + 
                    "groupByValues=qE5CDWZClGhH&" + 
                    "showMetadata=evomasver_5556_enpu&" + 
                    "time=foo&" + 
                    "timeout=-146.1541545618823&" + 
                    "types=foo&" + 
                    "values=dU.D3UGkA")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The geometry of each feature in the GeoJSON has to be of type 'Polygon' or 'MultiPolygon'."));
    }
    
    
    @Test
    public void test_249() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/density/groupBy/boundary/groupBy/tag?" + 
                    "bboxes=8.666988%2C49.420203%2C8.738%2C49.397&" + 
                    "groupByKey=building&" + 
                    "groupByValues=church%2Cpubli&" + 
                    "time=2013-02-06&" + 
                    "timeout=96&" + 
                    "values=turning_circle")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("There cannot be more input values in the values|values2 than in the keys|keys2 parameter, as values_n must fit to keys_n."));
    }
    
    
    @Test
    public void test_250() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/density/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=iH%3A8.724042%2C49.41740%2C6&" + 
                    "format=foo&" + 
                    "groupByKey=building&" + 
                    "groupByValues=foo&" + 
                    "keys=foo&" + 
                    "time=2014-07-09&" + 
                    "timeout=34")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given 'format' parameter is invalid. Please choose between 'geojson'(only available for /groupBy/boundary and data extraction requests), 'json', or 'csv'."));
    }
    
    
    @Test
    public void test_251() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/density/groupBy/boundary?" + 
                    "bcircles=zmJ%3A8.71725%2C49.408%2C1%7CKRH%3A8.742%2C49.4038%2C7%7CFQ%3A8.7299%2C49.415%2C9&" + 
                    "filter=foo&" + 
                    "format=foo&" + 
                    "time=2011-11-14")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given 'format' parameter is invalid. Please choose between 'geojson'(only available for /groupBy/boundary and data extraction requests), 'json', or 'csv'."));
    }
    
    
    @Test
    public void test_252() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/density/groupBy/boundary?" + 
                    "bcircles=8.741%2C49.43142%2C41&" + 
                    "format=foo&" + 
                    "keys=highway&" + 
                    "showMetadata=trse&" + 
                    "time=2015-04-16&" + 
                    "values=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given parameter showMetadata can only contain the values 'true', 'yes', 'false', or 'no'."));
    }
    
    
    @Test
    public void test_253() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/density?" + 
                    "bboxes=Nhuv9o9N7Fta3mf&" + 
                    "filter=ktqZprXt&" + 
                    "showMetadata=N_mU126jpo&" + 
                    "time=9A4PJ81D&" + 
                    "types=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_254() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/density?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22qua%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.721%2C49.428935%5D%2C%5B8.709003%2C49.4250%5D%2C%5B8.7047%2C49.40883%5D%2C%5B8.704581%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22QL%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.723%2C49.416%5D%2C%5B8.748%2C49.423%5D%2C%5B8.749%2C49.405%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22fF%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7067%2C49.43168%5D%2C%5B8.721%2C49.403%5D%2C%5B8.7170%2C49.429%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "keys=highway&" + 
                    "showMetadata=foo&" + 
                    "time=evomaster_7316_input&" + 
                    "timeout=0.988879440777394&" + 
                    "types=evomatter_%27289_inpu&" + 
                    "values=J")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided GeoJSON cannot be converted."));
    }
    
    
    @Test
    public void test_255() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count?" + 
                    "bboxes=2ZQg&" + 
                    "bcircles=&" + 
                    "format=m3nGze6RAN6KaK&" + 
                    "time=X&" + 
                    "values=h8ArrssULr6fA")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_256() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count?" + 
                    "bcircles=xAP%3A8.7221%2C49.435%2C1&" + 
                    "filter=bicycle%3D*+and+id%3A%281+..+9999%29&" + 
                    "format=json&" + 
                    "keys=foo&" + 
                    "time=foo&" + 
                    "timeout=63&" + 
                    "values=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_257() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/ratio/groupBy/boundary?" + 
                    "bcircles=ugdtL%3A8.720%2C49.431%2C8335466%3A1&" + 
                    "filter=evomaster_43882_input&" + 
                    "format=foo&" + 
                    "keys=foo&" + 
                    "time=2012-12-22&" + 
                    "types=evomaster_43902_input&" + 
                    "types2=node%2C&" + 
                    "values=fow&" + 
                    "values2=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Each bcircle must consist of a lon/lat coordinate pair plus a buffer in meters."));
    }
    
    
    @Test
    public void test_258() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/type?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22Y%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7011%2C49.432%5D%2C%5B8.709%2C49.4084%5D%2C%5B8.719%2C49.4196%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "keys=hmghway&" + 
                    "showMetadata=false&" + 
                    "time=20-7-07-12&" + 
                    "values=platform")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_259() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/type?" + 
                    "bcircles=wc%3A8.708%2C49.436%2C6&" + 
                    "keys=hiihway&" + 
                    "showMetadata=yes&" + 
                    "timeout=37&" + 
                    "types=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Parameter 'types' (and 'types2') can only have 'node' and/or 'way' and/or 'relation' OR 'point' and/or 'line' and/or 'polygon' and/or 'other'"));
    }
    
    
    @Test
    public void test_260() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/tag?" + 
                    "bboxes=Z%3A8.6752%2C49.404%2C8.74123%2C49.392&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=foo&" + 
                    "showMetadata=no&" + 
                    "types=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Parameter 'types' (and 'types2') can only have 'node' and/or 'way' and/or 'relation' OR 'point' and/or 'line' and/or 'polygon' and/or 'other'"));
    }
    
    
    @Test
    public void test_261() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/key?" + 
                    "groupByKeys=_ZHRCKvd8xtDjpiq&" + 
                    "keys=KroHujhOIaaVDJwK&" + 
                    "time=8nbeGc&" + 
                    "timeout=vHpmu&" + 
                    "types=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_262() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/key?" + 
                    "bpolys=2B4&" + 
                    "filter=evomaster_2178_input&" + 
                    "groupByKeys=Z&" + 
                    "keys=UnnOerRNqZJr&" + 
                    "showMetadata=evomaster_2179_input&" + 
                    "time=evomaster_2180_input&" + 
                    "types=B&" + 
                    "values=Lwoo8SzC")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_263() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=8.726%2C49.4373%2C14823523-%7C8.727%2C49.42234%2C2&" + 
                    "filter=barrier%3D*+or+not+id%3A%281+..+9999%29&" + 
                    "groupByKey=evomaster_26324_input&" + 
                    "keys=evomaster_26325_input&" + 
                    "showMetadata=no&" + 
                    "timeout=61&" + 
                    "types=foo&" + 
                    "values=evomaster_26326_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Each bcircle must consist of a lon/lat coordinate pair plus a buffer in meters."));
    }
    
    
    @Test
    public void test_264() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/boundary?" + 
                    "bboxes=IycskJ&" + 
                    "filter=5SnxIcg&" + 
                    "keys=kAgyNqVVsmrcbIHq&" + 
                    "showMetadata=XO5ZbcCQsuqw&" + 
                    "time=X&" + 
                    "timeout=s&" + 
                    "types=zDnfvHeI10BhJ&" + 
                    "values=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_265() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density/groupBy/type?" + 
                    "bboxes=foo&" + 
                    "bcircles=evomaster_189_input&" + 
                    "bpolys=evomaster_190_input&" + 
                    "filter=highway+in+%28secondary%2Cpath%2Cunclassified%2Ctrack%2Cprimary%2Cresidential%2Ccycleway%2Cservice%2Cfootway%29+or+type%3Away+and+length%3A%28+..+100%29&" + 
                    "format=json&" + 
                    "keys=foo&" + 
                    "timeout=92&" + 
                    "types=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_266() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/density/groupBy/type?" + 
                    "bboxes=vc_&" + 
                    "bcircles=wZ05OWCx3c&" + 
                    "bpolys=d&" + 
                    "format=Gl_am2WN2Lrd5MN&" + 
                    "keys=0&" + 
                    "showMetadata=zctGei&" + 
                    "time=Od&" + 
                    "values=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_267() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/density/groupBy/tag?" + 
                    "bpolys=v&" + 
                    "groupByKey=SFB_ogaE9sHll&" + 
                    "groupByValues=NXBzdI6rCnA1Sb&" + 
                    "keys=&" + 
                    "showMetadata=q5cTqVW&" + 
                    "values=_IEm")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_268() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density/groupBy/boundary/groupBy/tag?" + 
                    "bboxes=FwhtyviWT5HPgTs0&" + 
                    "filter=vZFnvfDfkZEjz6f&" + 
                    "groupByKey=wS8mCZZF0qfL&" + 
                    "groupByValues=L1G3b0_sUtvPNtR&" + 
                    "keys=ZShYDfkFivnUt&" + 
                    "time=pb0NEA")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_269() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/density/groupBy/boundary/groupBy/tag?" + 
                    "bboxes=U%3A8.6535%2C49.407%2C8.759%2C49.388%7CgQI%3A8.685%2C49.402%2C8.749%2C49.383%7CVAL%3A8.664%2C49.427%2C8.7519%2C49.381&" + 
                    "filter=foo&" + 
                    "groupByKey=building&" + 
                    "groupByValues=fooA&" + 
                    "keys=highway&" + 
                    "time=2009-10-15&" + 
                    "timeout=43&" + 
                    "values=stop")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The keys, values and types parameters must be empty, when you set the filter parameter."));
    }
    
    
    @Test
    public void test_270() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density/groupBy/boundary?" + 
                    "bpolys=E&" + 
                    "filter=mVJUrb_ot&" + 
                    "keys=&" + 
                    "showMetadata=&" + 
                    "types=3")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_271() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/density/groupBy/boundary?" + 
                    "bpolys=EN%3A8.704561%2C49.403252%2C8.728%2C49.4042%2C8.7055%2C49.415%2C8.743%2C49.4040%2C8.704561%2C49.403252&" + 
                    "keys=highway&" + 
                    "time=foo&" + 
                    "values=elerato")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_272() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22I%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.709%2C49.4096%5D%2C%5B8.730%2C49.4110%5D%2C%5B8.702%2C49.43697%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=foo&" + 
                    "time=2008-11-20&" + 
                    "timeout=53&" + 
                    "values=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The keys, values and types parameters must be empty, when you set the filter parameter."));
    }
    
    
    @Test
    public void test_273() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/density?" + 
                    "bcircles=Z%3A8.708196%2C49.433584%2C6%7Cjd%3A8.744289%2C49.437%2C6%7Cg%3A8.729%2C49.4061%2C4&" + 
                    "filter=foo&" + 
                    "format=Csv&" + 
                    "keys=evomaster_4487_input&" + 
                    "showMetadata=evomaster_4488_input&" + 
                    "values=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given parameter showMetadata can only contain the values 'true', 'yes', 'false', or 'no'."));
    }
    
    
    @Test
    public void test_274() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area?" + 
                    "bcircles=AqPi%3A8.71291%2C49.4221%2C2&" + 
                    "keys=highway&" + 
                    "showMetadata=false&" + 
                    "time=foo&" + 
                    "values=platfqrm")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_275() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area?" + 
                    "bboxes=evomaster_56_input&" + 
                    "bcircles=evomaster_57_input&" + 
                    "filter=foo&" + 
                    "keys=foo&" + 
                    "showMetadata=evomaster_58_input&" + 
                    "time=2010-10-24&" + 
                    "timeout=42&" + 
                    "types=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_276() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/density/groupBy/type?" + 
                    "bcircles=0e&" + 
                    "bpolys=noihzNnrmd1N3r&" + 
                    "filter=BK_F22VgeJMj&" + 
                    "format=5m6&" + 
                    "keys=WMoSh0&" + 
                    "showMetadata=6ypCZt7aiJ4emzh&" + 
                    "values=AnyBMzIq")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_277() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/boundary?" + 
                    "bboxes=&" + 
                    "bcircles=zQgsp&" + 
                    "bpolys=RPMz15v7EbHz&" + 
                    "filter=QgncIgLlM4&" + 
                    "format=BFGwBXGL8v&" + 
                    "time=TIpXa&" + 
                    "values=xdk")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_278() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/ratio/groupBy/boundary?" + 
                    "bcircles=sy%3A-400.2%2C78.689%2C6%7CBM%3A7.727%2F%2C24%2F05%3C1%3D5%2C7&" + 
                    "filter=evomaster_73539_input&" + 
                    "filter2=N4t&" + 
                    "format=csv&" + 
                    "keys2=y&" + 
                    "showMetadata=Sv4-TgOZwss5S_GC&" + 
                    "timeout=-1504.5154522055398&" + 
                    "types=evomaster_73745_input&" + 
                    "types2=3gR&" + 
                    "values=wt&" + 
                    "values2=sy%3B-00003%2C78.689%2C6%7C%40M%3A7.717%2F%2C24%2F05%3C1%3D5%2C7")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Each bcircle must consist of a lon/lat coordinate pair plus a buffer in meters."));
    }
    
    
    @Test
    public void test_279() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/ratio?" + 
                    "bcircles=evomaster_25584_input&" + 
                    "bpolys=evomaster_2923_input&" + 
                    "filter2=f4cExKno6gS&" + 
                    "format=Csv&" + 
                    "keys=fog&" + 
                    "keys2=highway&" + 
                    "time=2016-07-0%2F&" + 
                    "timeout=evomaster_2007_input&" + 
                    "types2=evomaster_19085_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_280() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/ratio?" + 
                    "bcircles=mvv%3A8.7048%2C49.400%2C60&" + 
                    "filter=addr%3Apostcode%21%3D*+and+length%3A%28+..+100%29&" + 
                    "format=csv&" + 
                    "showMetadata=true&" + 
                    "timeout=22&" + 
                    "types2=relation")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The filter2 parameter has to be defined when using a /ratio endpoint."));
    }
    
    
    @Test
    public void test_281() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/ratio?" + 
                    "bcircles=mvv%3A8.7048%2C49.400%2C60&" + 
                    "filter2=evomaster_17098_input&" + 
                    "format=csv&" + 
                    "keys=foo&" + 
                    "keys2=noo&" + 
                    "time=foo&" + 
                    "types=RElatiOn&" + 
                    "values=foo&" + 
                    "values2=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_282() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/type?" + 
                    "bpolys=DRMw%3A8.704561%2C49.403252%2C8.7470%2C49.435%2C8.704488%2C49.434%2C8.70450%2C49.420%2C8.704561%2C49.403252%7CBBaQ%3A8.704561%2C49.403250%2C8.742%2C49.432995%2C8.745%2C49.433%2C8.722%2C49.4239%2C8.704561%2C49.403252%7Cp%3A8.704561%2C49.403252%2C8.741%2C49.4301%2C8.740228%2C49.426271%2C8.725672%2C49.420%2C%40.704561%2C49.403252&" + 
                    "filter=foo&" + 
                    "format=evomaster_13324_input&" + 
                    "keys=evomaster_22767_input&" + 
                    "showMetadata=foo&" + 
                    "time=evomasterg1330%29_input&" + 
                    "timeout=97&" + 
                    "types=evomaster_13302_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The bpolys parameter must contain double-parseable values in form of lon/lat coordinate pairs."));
    }
    
    
    @Test
    public void test_283() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/type?" + 
                    "bpolys=DRMw%3A8.704561%2C89.403252%2C8.7470%2C49.435%2C8.704488%2C49.434%2C8.70450%2C49.420%2C8.704561%2C49.403252%7CBBaQ%3A8.704561%2C49.403252%2C8.742%2C49.432995%2C8.745%2C49.433%2C8.722%2C49.4239%2C8.704561%2C49.403252%7Cp%3A8.704561%2C49.403252%2C8.741%2C49.4301%2C8.740228%2C49.426271%2C8.725672%2C49.420%2C%40.704561%2C49.403252&" + 
                    "filter=evomaster_13490_input&" + 
                    "format=evomaster_13324_input&" + 
                    "showMetadata=foo&" + 
                    "types=evomaster_13302_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The bpolys parameter must contain double-parseable values in form of lon/lat coordinate pairs."));
    }
    
    
    @Test
    public void test_284() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/ratio?" + 
                    "bcircles=mvv%3A8.7048%2C49.800%2C60&" + 
                    "filter=&" + 
                    "filter2=evomaster_39964_input&" + 
                    "format=csv")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Invalid filter syntax. Please look at the additional info and examples about the filter parameter at https://docs.ohsome.org/ohsome-api. Detailed error message: line 1, column 22: whitespaces, EQUALS (=), NOT_EQUALS (!=) or in expected, EOF encountered."));
    }
    
    
    @Test
    public void test_285() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/ratio/groupBy/boundary?" + 
                    "bcircles=sy%3A-003.4%2C79.689%2C6%7CAK%3A7.737%2F%2C05.0381%3D5%2C70&" + 
                    "filter=ue&" + 
                    "format=CsV&" + 
                    "keys=evomaster_73135_input&" + 
                    "time=ojBw&" + 
                    "types=dvomasterW61448ainput")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Each bcircle must consist of a lon/lat coordinate pair plus a buffer in meters."));
    }
    
    
    @Test
    public void test_286() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/ratio/groupBy/boundary?" + 
                    "bboxes=&" + 
                    "bcircles=su%3A0000.0%2C83.977%2C0%7C%40O%3A9.%3B77%2F%2C%2F0--5%3F1A5%2C7&" + 
                    "filter=CN&" + 
                    "format=CSV&" + 
                    "keys=CS&" + 
                    "keys2=%3EWdjR%3Ee&" + 
                    "showMetadata=k&" + 
                    "types=%5Czoqcsrdr_50246_jo&" + 
                    "types2=eoj&" + 
                    "values=eznm%5Doudv%60906")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Each bcircle must consist of a lon/lat coordinate pair plus a buffer in meters."));
    }
    
    
    @Test
    public void test_287() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/ratio/groupBy/boundary?" + 
                    "bcircles=sy%3A-003.4%2C79.689%2C6%7CAK%3A7.737%2F%2C05.0381%3D5%2C70&" + 
                    "filter=ue&" + 
                    "format=CsV&" + 
                    "keys=evomaster_73135_input&" + 
                    "keys2=MCqz0&" + 
                    "time=ojBw&" + 
                    "types=dvomasterW61448ainput")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Each bcircle must consist of a lon/lat coordinate pair plus a buffer in meters."));
    }
    
    
    @Test
    public void test_288() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/ratio/groupBy/boundary?" + 
                    "bcircles=su%3A000042%2C81.555%2C0%7C%40O%3A9.%3B77%2F%2C%2F1.-5%3F1A5%2C7&" + 
                    "filter2=cSv&" + 
                    "format=CSV&" + 
                    "keys=%5Bp&" + 
                    "keys2=x%3EVdjXBithW&" + 
                    "showMetadata=q2&" + 
                    "time=-6.06.%287%3A3-75%2F297&" + 
                    "timeout=-1800.5212365810473&" + 
                    "types2=eyohmU&" + 
                    "values=ewni%5Dqtdxa516%3A")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Each bcircle must consist of a lon/lat coordinate pair plus a buffer in meters."));
    }
    
    
    @Test
    public void test_289() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/groupBy/boundary?" + 
                    "bboxes=8.676%2C49.412%2C8.738%2C49.388&" + 
                    "filter=service%3Ddriveway+and+geometrw%3Alkn&" + 
                    "keys=service%3Ddrivew%5Dy+and+geometrwUUin&" + 
                    "time=4%2C%27%3C-%2FU%2FT&" + 
                    "timeout=5&" + 
                    "values=fr%3F")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_290() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/ratio/groupBy/boundary?" + 
                    "bcircles=sy%3A56.101%2C-9.609%2C6%7CAK%3A8.737%2F%2C07.030195%2C70&" + 
                    "filter2=%3C&" + 
                    "keys=evkmas%7C%5Dr_630%3F4_inp%7Dt&" + 
                    "showMetadata=B&" + 
                    "time=VTl8QELTViqQfY15&" + 
                    "timeout=31&" + 
                    "types=IBaS8zKkXI&" + 
                    "types2=rf1DbA%2F4ZT9ZITYE")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Each bcircle must consist of a lon/lat coordinate pair plus a buffer in meters."));
    }
    
    
    @Test
    public void test_291() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/groupBy/boundary?" + 
                    "bboxes=8.676%2C49.412%2C8.738%2C49.388&" + 
                    "filter=service%3Ddriveway+and+geometrw%3Alin&" + 
                    "keys=service%3Ddriveway+and+geoketrwUUin&" + 
                    "time=&" + 
                    "timeout=3&" + 
                    "values=Ur%3E")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The keys, values and types parameters must be empty, when you set the filter parameter."));
    }
    
    
    @Test
    public void test_292() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/groupBy/key?" + 
                    "bboxes=BrZSo%3A8.6627%2C49.422%2C8.749%2C49.38773%7CNAX%3A8.676%2C49.428%2C8.724%2C49.398%7ChwZ%3A8.665627%2C49.4267%2C8.700%2C49.383%7CQuCdV%3A8.66208%2C49.42070%2C8.72023%2C49.39843&" + 
                    "format=csv&" + 
                    "groupByKeys=addr%3Acountry%2Caddr%3Aci%7Cy&" + 
                    "keys=evomaster_18277_input&" + 
                    "showMetadata=no&" + 
                    "time=%2F.P2M27D&" + 
                    "values=BrZSo%3A8.6627%2C49.422%2C8.749%2C49.38773%7CNAX%3A8.676%2C49.428%2C8.724%2C49.398%7ChwZ%3A8.665627%2C49.4267%2C8.700%2C49.383%7CQuCdV%3A8.66208%2C49.42070%2C8.72023%2C49.39843")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_293() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/groupBy/boundary?" + 
                    "bboxes=8.676%2C49.412%2C8.738%2C49.398&" + 
                    "filter=service%3Ddriveway+and+geometry%3Aline&" + 
                    "time=2%2F-8-03-13&" + 
                    "timeout=83&" + 
                    "values=fo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_294() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/groupBy/boundary?" + 
                    "bboxes=8.676%2C49.412%2C8.738%2C49.388&" + 
                    "keys=Uervice%3Ddrivew%5Dy%21and+geometrwUUi&" + 
                    "time=4%2C%27%3C-*U&" + 
                    "types=&" + 
                    "values=fUmZ")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_295() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/boundary?" + 
                    "bcircles=c%3A8.742%2C49.4277%2C2%7Cigrci%3A8.7316%2C49.4364%2C3&" + 
                    "filter=maxspeed%3D*+and+area%3A%281.0+..+1E6%29&" + 
                    "format=geojson&" + 
                    "time=2010-05-30&" + 
                    "values=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The keys, values and types parameters must be empty, when you set the filter parameter."));
    }
    
    
    @Test
    public void test_296() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/boundary?" + 
                    "bcircles=c%3A8.742%2C49.4277%2C2%7Cigrci%3A8.7316%2C49.4364%2C&" + 
                    "filter=maxspeed%3D*+and+area%3A%281.0+..+1E6%29&" + 
                    "format=evomaster_172_input&" + 
                    "keys=foo&" + 
                    "types=foo&" + 
                    "values=evomaster_173_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_297() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/boundary?" + 
                    "bboxes=evomaster_119%3A6_knput&" + 
                    "filter=evomaster_11987_input&" + 
                    "format=geojso&" + 
                    "keys=evomaster_13626_input&" + 
                    "showMetadata=evomaster_11989_input&" + 
                    "time=2010-05-3&" + 
                    "values=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_298() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density/groupBy/tag?" + 
                    "bboxes=foo&" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22AJ%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7301%2C49.422%5D%2C%5B8.704%2C49.418%5D%2C%5B8.700%2C49.423%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22leJO%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.719%2C49.434%5D%2C%5B8.71244%2C49.425279%5D%2C%5B8.707624%2C49.416178%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22Gmnwr%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7106%2C49.426%5D%2C%5B8.708539%2C49.4338%5D%2C%5B8.709%2C49.41405%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=foo&" + 
                    "format=evomaster_16275_input&" + 
                    "groupByKey=evomaster_373%2C_input&" + 
                    "keys=highway&" + 
                    "time=2017-03-2&" + 
                    "values=evomaster_16274_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("You need to give one groupByKey parameter, if you want to use groupBy/tag."));
    }
    
    
    @Test
    public void test_299() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/ratio/groupBy/boundary?" + 
                    "bcircles=sy%3A8.7115%2C49.409%2C6%7CAK%3C8.7373%2C09.438295%2C70&" + 
                    "filter=evomaster_25406_input&" + 
                    "filter2=foo&" + 
                    "keys=highway&" + 
                    "keys2=evomaster_25407_input&" + 
                    "showMetadata=evomaster_3528_input&" + 
                    "timeout=41&" + 
                    "types2=node%2C&" + 
                    "values=evomaster_3529_input&" + 
                    "values2=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_300() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/groupBy/boundary/groupBy/tag?" + 
                    "bboxes=foo&" + 
                    "bpolys=foo&" + 
                    "filter=evomaster_1700_input&" + 
                    "format=evomaster_1697_input&" + 
                    "groupByKey=sXOjI%3A8.703%2C49.425210%2C2%7CyacHa%3A8.709%2C49.41886%2C5&" + 
                    "groupByValues=crossing%2Cchurch&" + 
                    "keys=highway&" + 
                    "timeout=evoiaster_9910_input&" + 
                    "types=evomaster_42967_input&" + 
                    "values=evomaster_9911_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("You need to give one groupByKey parameter, if you want to use groupBy/tag."));
    }
    
    
    @Test
    public void test_301() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/ratio/groupBy/boundary?" + 
                    "bcircles=s%7D%3A9.%3A10%3A%2C72.203%2C6%7CAO%3A8.7371%2C00.000100%2C%3B0&" + 
                    "format=cSV&" + 
                    "keys=Pm0o&" + 
                    "keys2=No&" + 
                    "showMetadata=6q&" + 
                    "time=evooatrer_65846_enp&" + 
                    "timeout=-7510.945901332616&" + 
                    "values2=A")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Each bcircle must consist of a lon/lat coordinate pair plus a buffer in meters."));
    }
    
    
    @Test
    public void test_302() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/ratio/groupBy/boundary?" + 
                    "bcircles=sy25%3A.101%2C59.609%2C6%7CAK%3A8.%2F37%2F%2C07.030195%2C70&" + 
                    "format=evomaster_2979_input&" + 
                    "keys=evkmas%7C%5Dr_630%3F4Winput&" + 
                    "keys2=evomaster_69938_input&" + 
                    "timeout=31&" + 
                    "types=avomastgr_80730_inpu&" + 
                    "types2=rd1DbA%2F4ZT9ZITYE")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Each bcircle must consist of a lon/lat coordinate pair plus a buffer in meters."));
    }
    
    
    @Test
    public void test_303() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/density/groupBy/boundary?" + 
                    "bpolys=8.704561%2C49.403252%2C8.72783%2C4%3A.40954%2C8.702%2C49.423494%2C8.722%2C49.408%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.749%2C49.428%2C8.7047%2C49.4169%2C8.709%2C49.4063%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.7031%2C49.436%2C8.704596%2C49.41849%2C8.742%2C49.402%2C8.704561%2C49.403252&" + 
                    "filter=oneway%21%3D*&" + 
                    "format=foo&" + 
                    "keys=for&" + 
                    "showMetadata=yes&" + 
                    "time=foo&" + 
                    "types=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_304() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/groupBy/boundary?" + 
                    "bboxes=8.676%2C49.412%2C8.738%2C49.38&" + 
                    "keys=service%3Ddriveway+and+geometrw%3Alin&" + 
                    "time=6%2F-8-%2FU%2F1&" + 
                    "timeout=4&" + 
                    "values=fo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_305() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/groupBy/key?" + 
                    "bboxes=BrZSo%3A8.6627%2C49.422%2C8.749%2C49.38773%7CNAX%3A8.676%2C49.428%2C8.724%2C49.398%7ChwZ%3A8.665627%2C49.4267%2C8.700%2C49.383%7CQuCdV%3A8.66208%2C49.42070%2C8.72023%2C49.3984&" + 
                    "filter=fso&" + 
                    "format=csv&" + 
                    "groupByKeys=addU%3Acountpy.addU%3Aeit&" + 
                    "keys=Wru&" + 
                    "time=-%2F&" + 
                    "timeout=65&" + 
                    "values=hooA")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_306() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/groupBy/boundary?" + 
                    "bboxes=8.67%3A%2C49.412%2C8.739%2C48.388&" + 
                    "filter=service%3Ddriveway+and+geometrw%3Alkn&" + 
                    "keys=service%3Ddrivew%5Dy+and+geometrwUWin&" + 
                    "time=4%2C0%3C-%2FU%2B&" + 
                    "timeout=9&" + 
                    "types=foo&" + 
                    "values=fr%3B")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_307() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/ratio/groupBy/boundary?" + 
                    "filter=1KYkXHmA&" + 
                    "keys=r8Ed&" + 
                    "keys2=jpQ&" + 
                    "showMetadata=w&" + 
                    "time=O&" + 
                    "values=x64tFs7iEm4iGFwL")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("You need to define one of the boundary parameters (bboxes, bcircles, bpolys)."));
    }
    
    
    @Test
    public void test_308() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/groupBy/tag?" + 
                    "bboxes=LoA2Q_QKRINni7&" + 
                    "bcircles=Nx&" + 
                    "filter=6y80OXEDQ&" + 
                    "format=907nmSA&" + 
                    "groupByKey=IRN&" + 
                    "showMetadata=ofQYLsZ&" + 
                    "time=joy33C6E&" + 
                    "types=AfDGuV44ZnPX&" + 
                    "values=OPfEhgoRpy5a")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_309() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=xV%3A8.7R4SJ2%2C49340P2US%2C80U3EUU964U4%2CU.U08%2C49.4297U8%3E7035%2C4I.4196%2C027UU561U49.4U3%3A52%7CUnS%3A8UU04E61%2CU8.403252%2C8.949U%2C48.4U0UU82706493UU9.428944%5BU709%2C4%3A.40UU%2C8.704561UU9U4U3252&" + 
                    "filter=foo&" + 
                    "groupByKey=building&" + 
                    "groupByValues=evomaster_42409_input&" + 
                    "keys=evomaster_42410_input&" + 
                    "showMetadata=foo&" + 
                    "timeout=59&" + 
                    "types=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_310() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/ratio?" + 
                    "bcircles=mvv%3A8.7048%2C496800%2C60&" + 
                    "filter=PI90uvmSlZ&" + 
                    "keys=evomaster_38756_input&" + 
                    "keys2=foo&" + 
                    "showMetadata=true&" + 
                    "time=evomaster_39161_input&" + 
                    "types=foo&" + 
                    "types2=relation&" + 
                    "values2=evomaster_7100_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Parameter 'types' (and 'types2') can only have 'node' and/or 'way' and/or 'relation' OR 'point' and/or 'line' and/or 'polygon' and/or 'other'"));
    }
    
    
    @Test
    public void test_311() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/ratio/groupBy/boundary?" + 
                    "bcircles=sy%3A56.101%2C-92619%2C6%7CAK%3A8.7370%2C07-030196%2C70&" + 
                    "filter=gvomastmr_60167_ilput&" + 
                    "format=evomaster_2979_input&" + 
                    "keys=evkmas%7C%5Dr_630%3F4_inp%7Dt&" + 
                    "types2=rf1DbA%2F4ZT9%5CITYE")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Each bcircle must consist of a lon/lat coordinate pair plus a buffer in meters."));
    }
    
    
    @Test
    public void test_312() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/density/groupBy/boundary?" + 
                    "bboxes=r%3A8.685645%2C49.421%2C8.7404%2C49.389%7Ct%3A8.667455%2C49.429%2C8.759%2C49.395&" + 
                    "format=foo&" + 
                    "keys=foo&" + 
                    "timeout=31&" + 
                    "types=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given 'format' parameter is invalid. Please choose between 'geojson'(only available for /groupBy/boundary and data extraction requests), 'json', or 'csv'."));
    }
    
    
    @Test
    public void test_313() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/density/groupBy/boundary?" + 
                    "bpolys=8.704561%2C49.403252%2C8.72783%2C49.40954%2C8.702%2C49.423494%2C8.722%2C49.408%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.749%2C49.428%2C8.7047%2C49.4169%2C8.709%2C49.4063%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.7031%2C49.437%2C8.704596%2C49.41849%2C8.742%2C49.402%2C8.704561%2C49.40325&" + 
                    "filter=oneway%21%3D*&" + 
                    "time=foo&" + 
                    "types=8.704561%2C49.403252%2C8.72783%2C49.40954%2C8.702%2C49.423494%2C8.722%2C49.408%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.749%2C49.428%2C8.7047%2C49.4169%2C8.709%2C49.4063%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.7031%2C49.437%2C8.704596%2C49.41849%2C8.742%2C49.402%2C8.704561%2C49.40325")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Parameter 'types' (and 'types2') cannot have more than 4 entries."));
    }
    
    
    @Test
    public void test_314() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/groupBy/type?" + 
                    "bboxes=dZk3Lxmc&" + 
                    "bpolys=30GERjFaag&" + 
                    "keys=y2xD&" + 
                    "showMetadata=T7E2E7or0e&" + 
                    "time=GktO6UmIyex")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_315() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/groupBy/key?" + 
                    "bboxes=BrZSo%3A8.6627%2C49.422%2C8.749%2C49.38773%7CNAXB8.676%2C49.428%2C8.724%2C49.398%7ChwZ%3A8.665627%2C49.4267%2C8.700%2C49.383%7CQuCdV%3A8.66208%2C49.42070%2C8.72023%2C49.39843&" + 
                    "filter=evomaster_56942_input&" + 
                    "format=evomaster_57937_input&" + 
                    "groupByKeys=1yXUMh&" + 
                    "showMetadata=no&" + 
                    "time=evomaster_57936_input&" + 
                    "timeout=61&" + 
                    "types=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("One or more boundary object(s) have a custom id (or at least a colon), whereas other(s) don't. You can either set custom ids for all your boundary objects, or for none."));
    }
    
    
    @Test
    public void test_316() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/density?" + 
                    "bboxes=WA%3A8.6831%2C49.417%2C8.7016%2C49.398%7CDqqtC%3A8.677%2C49.400728%2C8.7348%2C49.389&" + 
                    "format=csv&" + 
                    "timeout=76&" + 
                    "values=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("There cannot be more input values in the values|values2 than in the keys|keys2 parameter, as values_n must fit to keys_n."));
    }
    
    
    @Test
    public void test_317() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/boundary/groupBy/tag?" + 
                    "bboxes=8.656%2C49.41764%2C8.70638%2C49.385&" + 
                    "filter=highway%3D*+and+length%3A%28+..+100%29&" + 
                    "format=foo&" + 
                    "groupByKey=building&" + 
                    "showMetadata=evomaster_152_input&" + 
                    "timeout=73&" + 
                    "types=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given parameter showMetadata can only contain the values 'true', 'yes', 'false', or 'no'."));
    }
    
    
    @Test
    public void test_318() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density/groupBy/tag?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCojlection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22AJ%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7301%2C49.422%5D%2C%5B8.704%2C49.418%5D%2C%5B8.700%2C49.423%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22leJO%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.719%2C49.434%5D%2C%5B8.71244%2C49.425279%5D%2C%5B8.707624%2C49.416178%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22Gmnwr%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7106%2C49.426%5D%2C%5B8.708539%2C49.4338%5D%2C%5B8.709%2C49.41405%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=evomaster_16134_input&" + 
                    "format=evomaster_16049_input&" + 
                    "groupByKey=evomaster_16050_input&" + 
                    "groupByValues=fso&" + 
                    "keys=evomaster_16135_input&" + 
                    "time=2017-03-2&" + 
                    "types=foo&" + 
                    "values=living_street")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given GeoJSON has to be of the type 'FeatureCollection'."));
    }
    
    
    @Test
    public void test_319() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/ratio?" + 
                    "bboxes=mfxBk%3A%3C.69656%2C49.413%2C8.757%2C49.387&" + 
                    "filter=lanes%3Aforward%21%3D*&" + 
                    "filter2=foo&" + 
                    "keys2=highway&" + 
                    "showMetadata=evomaster_7833_input&" + 
                    "time=evomaster_7834_input&" + 
                    "types=foo&" + 
                    "types2=line%2C&" + 
                    "values2=evomaster_7835_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Apart from the custom ids, the bboxeses array must contain double-parseable values in the following order: minLon, minLat, maxLon, maxLat."));
    }
    
    
    @Test
    public void test_320() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/type?" + 
                    "filter=9v6o_0JTF1Ot7&" + 
                    "format=&" + 
                    "keys=1Hlkl&" + 
                    "time=_N&" + 
                    "timeout=wcH9zkvZO_eZ&" + 
                    "types=hd&" + 
                    "values=_laET")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_321() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density/groupBy/tag?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22AJ%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7301%2C49.422%5D%2C%5B8.704%2C49.418%5D%2C%5B8.700%2C49.423%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22leJO%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordimates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.719%2C49.434%5D%2C%5B8.71244%2C49.425279%5D%2C%5B8.707624%2C49.416178%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22Gmnwr%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7106%2C49.426%5D%2C%5B8.708539%2C49.4338%5D%2C%5B8.709%2C49.41405%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "format=csv&" + 
                    "groupByKey=evomaster_5832_input&" + 
                    "groupByValues=foo&" + 
                    "keys=highway&" + 
                    "showMetadata=foo&" + 
                    "time=2017-03-28&" + 
                    "values=living_street")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided GeoJSON cannot be converted."));
    }
    
    
    @Test
    public void test_322() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/ratio/groupBy/boundary?" + 
                    "bcircles=sy%3A8.7115%2C49.409%2C6%7CAK%3A8.737%3B%2C49.438295%2C70&" + 
                    "filter=foo&" + 
                    "format=csv&" + 
                    "showMetadata=no&" + 
                    "timeout=41&" + 
                    "types2=node%2C&" + 
                    "values=foo&" + 
                    "values2=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Each bcircle must consist of a lon/lat coordinate pair plus a buffer in meters."));
    }
    
    
    @Test
    public void test_323() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/density?" + 
                    "bboxes=WA%3A8.6831%2C49.417%2C8.7016%2C49.398%7CDqqtC%3A8.677%2C49.400728%2C8.7348%2C49.389&" + 
                    "keys=evomaster_6504%60input&" + 
                    "showMetadata=true&" + 
                    "time=IVYJqiiIe2Agkn&" + 
                    "values=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_324() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density/groupBy/tag?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22AJ%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7301%2C49.422%5D%2C%5B8.704%2C49.418%5D%2C%5B8.700%2C49.423%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22leJO%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.719%2C49.434%5D%2C%5B8.71244%2C49.42527%3D%5D%2C%5B8.707624%2C49.416178%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22Gmnwr%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7106%2C49.426%5D%2C%5B8.708539%2C49.4338%5D%2C%5B8.709%2C49.41405%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "format=evomaster_16284_input&" + 
                    "groupByKey=evomaster_3730_input&" + 
                    "time=2017W-03-2&" + 
                    "values=evomaster_8519_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in reading of the given GeoJSON."));
    }
    
    
    @Test
    public void test_325() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/tag?" + 
                    "bpolys=nr%3A8.704561%2C49.403252%2C8.705%2C49.417%2C8.718865%2C49.4221%2C8.70448%2C49.428%2C8.704561%2C49.403252%7Cj%3A8.704561%2C49.403252%2C8.72345%2C49.41322%2C8.7030%2C49.400%2C8.703%2C49.407%2C8.704561%2C49.4+3252%7CwIMcP%3A8.704561%2C49.403252%2C8.707%2C49.427%2C8.705%2C49.4137%2C8.70601%2C49.429%2C8.704561%2C49.403252&" + 
                    "format=geojson&" + 
                    "groupByKey=highwayM&" + 
                    "groupByValues=Uut&" + 
                    "keys=evomaster_24957_input&" + 
                    "showMetadata=evomaster_24958_input&" + 
                    "time=foo&" + 
                    "values=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The bpolys parameter must contain double-parseable values in form of lon/lat coordinate pairs."));
    }
    
    
    @Test
    public void test_326() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/groupBy/key?" + 
                    "bboxes=BrZSo%3A8.6627%2C49.422%2C8.749%2C49.38773%7CNAX%3A8.676%2C49.428%2C8.724%2C49.398%7ChwZ%3A8.665627%2C49.4267%2C8.700%2C49.383%7CQuCdV%3A8.66208%2C49.42070%2C8.72023%2C49.39843&" + 
                    "format=csv&" + 
                    "groupByKeys=addr%3Acountry%2Caddr%3Acit&" + 
                    "time=%2F%2FP*M27D&" + 
                    "timeout=61")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The interval (period) of the provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_327() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/ratio/groupBy/boundary?" + 
                    "bcircles=su%3A000041%2C81.785%2C0%7C%40O%3A9.%3B77%2F%2C%2F1.-5%3F1A5%2C7&" + 
                    "filter=H&" + 
                    "keys=%5B&" + 
                    "showMetadata=q4&" + 
                    "time=-6.06.%287%3A3-75%2F2976&" + 
                    "types=%5Czoqcsvdr_50245_jo&" + 
                    "types2=eyohmU&" + 
                    "values=ewni%5Dqtdva516%3A")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Each bcircle must consist of a lon/lat coordinate pair plus a buffer in meters."));
    }
    
    
    @Test
    public void test_328() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/ratio/groupBy/boundary?" + 
                    "bcircles=sy%3A5%3A.101%2C59.609%2C6%7CAK%3A8.737%2F%2C07.030195%2C70&" + 
                    "filter=gvomastmr_60167_ilput&" + 
                    "keys=evkmas%7C%5Dr_630%3F4_input&" + 
                    "showMetadata=B&" + 
                    "timeout=31&" + 
                    "types=IBaS8zKkXI&" + 
                    "values=avomaster_80730_inpu&" + 
                    "values2=JLOu")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Each bcircle must consist of a lon/lat coordinate pair plus a buffer in meters."));
    }
    
    
    @Test
    public void test_329() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/type?" + 
                    "bboxes=WxV3KbKW3&" + 
                    "bcircles=yzZESM92Em&" + 
                    "filter=EWvRKGkAP4&" + 
                    "format=o&" + 
                    "keys=qpeBee&" + 
                    "showMetadata=f2dhroxsaj50Rly&" + 
                    "time=kVkGyAWncuWbZJL&" + 
                    "timeout=sKesMvTNcY&" + 
                    "values=6NKlP28QTL")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/type?" + 
                    "bboxes=&" + 
                    "bpolys=Ef&" + 
                    "format=37E&" + 
                    "keys=pLpnXXuoUhSB&" + 
                    "showMetadata=wrokA1_wbs&" + 
                    "types=H3k")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/type?" + 
                    "bboxes=oyeEf0GFY&" + 
                    "bcircles=T8c&" + 
                    "bpolys=WpXz3jA&" + 
                    "filter=&" + 
                    "format=rORtWr_&" + 
                    "keys=D0rZdhrpzO&" + 
                    "showMetadata=5VXz4rzRX_oou3X3&" + 
                    "time=Eh_1VAz2mAx")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/type?" + 
                    "bcircles=bD&" + 
                    "bpolys=GJakivtvoPQ6oai&" + 
                    "filter=W9A&" + 
                    "format=KMwXH&" + 
                    "keys=aXK&" + 
                    "showMetadata=eO8rLUlHSe64Az&" + 
                    "time=xzrWL9HzZ2oVCdcH&" + 
                    "timeout=fskBDtIEpz0mISW&" + 
                    "types=iP&" + 
                    "values=Q7AabFFYLpvc")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/type")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("You need to define one of the boundary parameters (bboxes, bcircles, bpolys)."));
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/type?" + 
                    "bcircles=G4X1Qs&" + 
                    "filter=xr_hd_&" + 
                    "keys=3F0P13LO0o6TQ1&" + 
                    "showMetadata=mBggXY4r&" + 
                    "time=26Xlxy2T5d&" + 
                    "timeout=Nf0yT6")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/groupBy/type?" + 
                    "bboxes=fjPV_TnMn_biU8hj&" + 
                    "filter=A8CQIGcZTUl&" + 
                    "format=kdlZN&" + 
                    "showMetadata=bT4gxEJQQrjAq&" + 
                    "timeout=dSFUVA")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_330() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/ratio?" + 
                    "bcircles=mvv%3A8.7048%2C69.800%2C60&" + 
                    "filter=evomaster_38765_input&" + 
                    "filter2=fo&" + 
                    "format=csv&" + 
                    "keys=evomaster_38756_ioput&" + 
                    "keys2=evomaster_38842_input&" + 
                    "types=foo&" + 
                    "types2=evomaster_38843_input&" + 
                    "values=evomaster_39924_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Parameter 'types' (and 'types2') can only have 'node' and/or 'way' and/or 'relation' OR 'point' and/or 'line' and/or 'polygon' and/or 'other'"));
    }
    
    
    @Test
    public void test_331() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/groupBy/boundary?" + 
                    "bboxes=8.676%2C49.412%2C8.738%2C49.388&" + 
                    "keys=service%3Ddriveway+and+geometrwUUin&" + 
                    "time=4%2F%2B%3C-%2FU%2F&" + 
                    "timeout=5&" + 
                    "values=fr%40")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_332() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/groupBy/boundary?" + 
                    "bboxes=8.676%2C49.412%2C8.738%2C49.388&" + 
                    "keys=epo&" + 
                    "time=6%2F-8-%2FU-1.&" + 
                    "timeout=4")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_333() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/ratio/groupBy/boundary?" + 
                    "bcircles=su%3A000021%2C81.987%2C0%7C%40O%3A9.%3B77%2F%2C%2F1.-5%3F1A5%2C7&" + 
                    "filter=H&" + 
                    "format=Csv&" + 
                    "keys2=x%3EWdjXBith&" + 
                    "showMetadata=q4&" + 
                    "time=-6.06.%287%3A3-75%2F2976&" + 
                    "timeout=-2541.8318322328873&" + 
                    "types2=eyohmU&" + 
                    "values=ewni%5Dqtcva516%3A")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Each bcircle must consist of a lon/lat coordinate pair plus a buffer in meters."));
    }
    
    
    @Test
    public void test_334() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/groupBy/key?" + 
                    "bboxes=BrZSo%3A8.6627%2C49.422%2C8.749%2C49.38773%7CNAX%3A8.676%2C49.428%2C8.724%2C49.398%7ChwZ%3A8.665627%2C49.4267%2C8.700%2C49.383%7CQuCdV%3A8.66208%2C49.42070%2C8.72023%2C49.3984&" + 
                    "filter=fso&" + 
                    "groupByKeys=addU%3Acountpy.addU%3Aeit&" + 
                    "keys=Wru&" + 
                    "time=%2F%2F&" + 
                    "timeout=65&" + 
                    "values=hooA")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_335() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/ratio/groupBy/boundary?" + 
                    "bcircles=sy%3A8.7115%2C49.409%2C6%7CAK%3A8.7373%2C49.438295%2C70&" + 
                    "filter=foo&" + 
                    "keys2=highway&" + 
                    "time=2010-02-01&" + 
                    "types2=node%2C&" + 
                    "values2=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Invalid filter syntax. Please look at the additional info and examples about the filter parameter at https://docs.ohsome.org/ohsome-api. Detailed error message: line 1, column 4: whitespaces, EQUALS (=), NOT_EQUALS (!=) or in expected, EOF encountered."));
    }
    
    
    @Test
    public void test_336() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/ratio/groupBy/boundary?" + 
                    "bcircles=sy%3A-003.4%2C79.689%2C6%7CAK%3A7.737%2F%2C05.0381%3D5%2C70&" + 
                    "filter=ue&" + 
                    "format=CsV&" + 
                    "keys=mvoq_staq_63.83Zimps&" + 
                    "time=ojBw&" + 
                    "types=dvomasterW61448ainput")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Each bcircle must consist of a lon/lat coordinate pair plus a buffer in meters."));
    }
    
    
    @Test
    public void test_337() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/ratio?" + 
                    "bcircles=mvv%3A8.7048%2C49.800%2C60&" + 
                    "filter=evomaster_38765_input&" + 
                    "filter2=evomaster_39964_input&" + 
                    "format=csv&" + 
                    "keys=evomaster_38756_input&" + 
                    "keys2=foo&" + 
                    "types=OtHer&" + 
                    "types2=relation&" + 
                    "values2=uWPxLlC")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The keys, values and types parameters must be empty, when you set the filter parameter."));
    }
    
    
    @Test
    public void test_338() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/tag?" + 
                    "bboxes=Lq6elljHYF&" + 
                    "bcircles=&" + 
                    "filter=Ot1QOwfJwao1w&" + 
                    "groupByKey=TeI9Ft&" + 
                    "groupByValues=DWBIVQDRJ2RnyTmO&" + 
                    "keys=cvwHJuOne5&" + 
                    "time=824SJI")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_339() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/density/groupBy/boundary?" + 
                    "bcircles=ncOu4iy9Jgf9zm&" + 
                    "format=&" + 
                    "keys=iFy5TN5QscNJ&" + 
                    "showMetadata=nyIwz&" + 
                    "types=TxK0c_cxH&" + 
                    "values=Y3Zq2lhv")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_340() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/density?" + 
                    "bboxes=&" + 
                    "bpolys=l&" + 
                    "filter=bvmDxBUO1mtbcg&" + 
                    "format=1PH95a2KOxy5hlq&" + 
                    "keys=zZHk0uR6&" + 
                    "showMetadata=1WRj&" + 
                    "time=8&" + 
                    "values=fd1b9y")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_341() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/density/groupBy/type?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22gL%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.71060%2C49.429334%5D%2C%5B8.744%2C49.4307%5D%2C%5B8.7048%2C49.407%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22K%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.715788%2C49.40598%5D%2C%5B8.700%2C49.417%5D%2C%5B8.717%2C49.418%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22HI%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Pnlygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.718340%2C49.429%5D%2C%5B8.711%2C49.425%5D%2C%5B8.717%2C49.426%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=evomaster_6255_input&" + 
                    "format=CSv&" + 
                    "keys=highway&" + 
                    "time=Foo&" + 
                    "types=jooN&" + 
                    "values=Tjy02iCJIwW0Ij")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The geometry of each feature in the GeoJSON has to be of type 'Polygon' or 'MultiPolygon'."));
    }
    
    
    @Test
    public void test_342() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/ratio/groupBy/boundary?" + 
                    "bcircles=sy%3A763105%2C59.409%2C6%7CAK%3A8.737%2F%2C05.030195%2C70&" + 
                    "filter=evomastmr_60167_ilput&" + 
                    "keys=evomaster_63074_input&" + 
                    "keys2=evqmaster_62845_input&" + 
                    "showMetadata=%3Ed&" + 
                    "time=evomaster_62935_input&" + 
                    "timeout=31&" + 
                    "types=evomasterW61448_input&" + 
                    "values=avomaster_80730_inpu")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Each bcircle must consist of a lon/lat coordinate pair plus a buffer in meters."));
    }
    
    
    @Test
    public void test_343() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/boundary/groupBy/tag?" + 
                    "bboxes=J1a5X7eeP2HwyL&" + 
                    "bcircles=rI3DTN67&" + 
                    "bpolys=LGTrHaz&" + 
                    "groupByKey=evomaster_958_input&" + 
                    "groupByValues=evomaster_959_input&" + 
                    "showMetadata=BBdAZv_m5&" + 
                    "time=4rziLn13&" + 
                    "types=evomaster_960_input&" + 
                    "values=JUBVWtLD")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/density/groupBy/boundary?" + 
                    "bcircles=5&" + 
                    "bpolys=evomaster_961_input&" + 
                    "filter=3HTmByPy&" + 
                    "showMetadata=T&" + 
                    "time=evomaster_962_input&" + 
                    "timeout=169&" + 
                    "types=yGLdBmp&" + 
                    "values=S")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout is too long. It has to be shorter than 100.0 seconds"));
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/ratio?" + 
                    "bpolys=hlhuFizdBtieni&" + 
                    "filter=4Pc9WOCvnDTdsC&" + 
                    "filter2=QHEso11lAh&" + 
                    "keys2=ha2URzuJ&" + 
                    "time=rsaT&" + 
                    "types2=E3rp&" + 
                    "values=Ki19K90&" + 
                    "values2=evomaster_963_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/groupBy/key?" + 
                    "bboxes=evomaster_964_input&" + 
                    "bcircles=W3yrzs07w&" + 
                    "filter=xaBz9a&" + 
                    "format=dtbMvJ1Zciw2VA9&" + 
                    "groupByKeys=2W&" + 
                    "showMetadata=lWIUbTRxnd&" + 
                    "time=evomaster_965_input&" + 
                    "timeout=Wuoi0SNER&" + 
                    "types=r5zR7&" + 
                    "values=Ys4VX")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_344() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/tag?" + 
                    "bpolys=nr%3A8.704561%2C49.403252%2C8.705%2C49.417%2C8.718865%2C49.4221%2C8.70448%2C49.428%2C8.704561%2C49.403252%7Cj%3A8.704561%2C49.403252%2C8.72345%2C49.41322%2C8.7030%2C49.400%2C8.703%2C49.407%2C8.704561%2C49.403252%7CwIMcP%3A8.704561%2C49.403252%2C8.707%2C49.427%2C8.705%2C49.4137%2C8.70601%2C49.429%2C8.704561%2C49.40325&" + 
                    "format=evomaster_24818_input&" + 
                    "groupByKey=evomaster_24826_input&" + 
                    "groupByValues=evomaster_24820_input&" + 
                    "keys=highway&" + 
                    "showMetadata=tzue&" + 
                    "time=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given parameter showMetadata can only contain the values 'true', 'yes', 'false', or 'no'."));
    }
    
    
    @Test
    public void test_345() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22eQY%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.701490%2C49.431%5D%2C%5B8.736128%2C49.428%5D%2C%5B8.7164%2C49.4147%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22IulBS%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7049%2C49.4112%5D%2C%5B8.708%2C49.408%5D%2C%5B8.72747%2C49.41355%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22w%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7463%2C49.4043%5D%2C%5B8.707%2C49.4042%5D%2C%5B8.705%2C49.412%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=barrier%3D*+or+not+area%3A%281.0+..+1E6%29&" + 
                    "groupByKey=evomaster_1621_input&" + 
                    "groupByValues=foo&" + 
                    "showMetadata=true&" + 
                    "time=2009-05-31&" + 
                    "types=foo&" + 
                    "values=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Parameter 'types' (and 'types2') can only have 'node' and/or 'way' and/or 'relation' OR 'point' and/or 'line' and/or 'polygon' and/or 'other'"));
    }
    
    
    @Test
    public void test_346() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/ratio?" + 
                    "bboxes=8.684%2C49.418%2C8.7550%2C49.388&" + 
                    "filter=network%3D*+and+not+geometry%3Aline&" + 
                    "format=csv&" + 
                    "keys2=highway&" + 
                    "timeout=42")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The filter2 parameter has to be defined when using a /ratio endpoint."));
    }
    
    
    @Test
    public void test_347() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/ratio/groupBy/boundary?" + 
                    "bboxes=E%3A8.659%2C49.4215%2C8.710%2C49.384&" + 
                    "filter2=foo&" + 
                    "format=csv")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Invalid filter syntax. Please look at the additional info and examples about the filter parameter at https://docs.ohsome.org/ohsome-api. Detailed error message: line 1, column 4: whitespaces, EQUALS (=), NOT_EQUALS (!=) or in expected, EOF encountered."));
    }
    
    
    @Test
    public void test_348() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/groupBy/key?" + 
                    "bboxes=BrZSo%3A8.6627%2C49.422%2C8.749%2C49.38773%7CNAX%3A8.676%2C49.428%2C8.724%2C49.398%7ChwZ%3A8.665627%2C49.4267%2C8.700%2C49.383%7CQuCdV%3A8.66208%2C49.42070%2C8.72023%2C49.3984&" + 
                    "filter=fso&" + 
                    "format=csv&" + 
                    "groupByKeys=addU%3Acountpy.addU%3Aeit&" + 
                    "keys=Wru&" + 
                    "time=%2F&" + 
                    "timeout=65&" + 
                    "values=hooA")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The keys, values and types parameters must be empty, when you set the filter parameter."));
    }
    
    
    @Test
    public void test_349() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/ratio?" + 
                    "bcircles=mvv%3A8.7048%2C49.800%2C60&" + 
                    "filter=evomaster_38765_input&" + 
                    "format=csv&" + 
                    "keys=evomaster_38756_input&" + 
                    "showMetadata=true&" + 
                    "time=evomaster_7099_input&" + 
                    "timeout=22&" + 
                    "types=PoLyGOn&" + 
                    "values2=evomaster_7100_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_350() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/ratio/groupBy/boundary?" + 
                    "bcircles=sy%3A867115%2C79.409%2C6%7CAK%3A8.7373%2C05.030295%2C70&" + 
                    "filter=evomastmr_60167_ilput&" + 
                    "format=cSV&" + 
                    "keys=hieh%C2%87ay&" + 
                    "time=2014-02.01&" + 
                    "types=uWtb&" + 
                    "values2=QIOta")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Each bcircle must consist of a lon/lat coordinate pair plus a buffer in meters."));
    }
    
    
    @Test
    public void test_351() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/ratio/groupBy/boundary?" + 
                    "bboxes=E%3A8.659%2C49.4215%2C8.710%2C49.384&" + 
                    "format=csv&" + 
                    "timeout=33")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The filter2 parameter has to be defined when using a /ratio endpoint."));
    }
    
    
    @Test
    public void test_352() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/type?" + 
                    "bpolys=DRMw%3A8.704561%2C49.403252%2C8.7470%2C49.435%2C8.704488%2C49.434%2C8.70450%2C49.420%2C8.704561%2C49.403252%7CBBaQ%3A8.704561%2C49.403252%2C8.742%2C49.432995%2C8.745%2C49.433%2C8.722%2C49.4239%2C8.704561%2C49.403252%7Cp%3A8.704561%2C49.403252%2C8.741%2C49.4301%2C8.740228%2C49.426271%2C8.725672%2C49.420%2C%40.704561%2C49.403252&" + 
                    "format=foo&" + 
                    "showMetadata=foo&" + 
                    "time=evomaster_13301_input&" + 
                    "timeout=97&" + 
                    "types=evomaster_13302_input&" + 
                    "values=track")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The bpolys parameter must contain double-parseable values in form of lon/lat coordinate pairs."));
    }
    
    
    @Test
    public void test_353() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/groupBy/tag?" + 
                    "bboxes=jsr%3A8.67938%2C49.427%2C8.7189%2C49.381%7CI%3A8.650%2C49.423%2C8.709%2C49.394%7Ca%3A8.661%2C49.4029%2C8.703%2C49.387%7CiDBa%3A806736%2C49.401%2C8.7358%2C49.382&" + 
                    "filter=foo&" + 
                    "groupByKey=evomaster_1658_input&" + 
                    "groupByValues=evomaster_1659_input&" + 
                    "keys=highway&" + 
                    "showMetadata=true&" + 
                    "time=foo&" + 
                    "types=foo&" + 
                    "values=stop")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_354() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/density?" + 
                    "bboxes=WA%3A8.6831%2C49.417%2C8.7016%2C49.398%7CDqqtC%3A8.677%2C49.400728%2C8.7348%2C49.189&" + 
                    "filter=destination%3D*+and+geometry%3Aline+or%18not+id%3A%281+..+9999%29&" + 
                    "keys=evomaster_18571_input&" + 
                    "showMetadata=true&" + 
                    "time=evomaster_49482_input&" + 
                    "types=VzwMrlU")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_355() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/ratio/groupBy/boundary?" + 
                    "bboxes=E%3A8.659%2C49.4215%2C8.710%2C45.384&" + 
                    "filter2=evomaster_14135_input&" + 
                    "format=csv&" + 
                    "keys=foo&" + 
                    "keys2=otPn0&" + 
                    "showMetadata=foo&" + 
                    "time=fmo&" + 
                    "timeout=0.3107364439418796&" + 
                    "values=foo")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_356() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/groupBy/key?" + 
                    "bboxes=BrZSo%3A8.6627%2C49.422%2C8.749%2C49.38773%7CNAX%3A8.876%2C49.428%2C8.724%2C49.398%7ChwZ%3A8.665627%2C49.4267%2C8.700%2C49.383%7CQuCdV%3A8.66208%2C49.42070%2C8.72023%2C49.39843&" + 
                    "filter=evomaster_46407_inpu&" + 
                    "groupByKeys=evomaster_46410_input&" + 
                    "keys=evomaster_46402_input&" + 
                    "time=%2F%2FP2M27D")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_357() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density/groupBy/boundary?" + 
                    "bcircles=8.7364%2C49.433%2C1&" + 
                    "format=csv&" + 
                    "keys=highway&" + 
                    "time=1013-01-20&" + 
                    "timeout=83")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The given time parameter is not completely within the timeframe (2007-10-07 to 2018-05-10T"));
    }
    
    
    @Test
    public void test_358() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/density/groupBy/boundary?" + 
                    "bpolys=8.704561%2C49.203252%2C8.722%2C49.41750%2C8.7454%2C49.412619%2C8.7489%2C49.426%2C8.704561%2C49.403252&" + 
                    "format=gejjsop&" + 
                    "keys=fp&" + 
                    "showMetadata=Uo&" + 
                    "time=2016-04-19&" + 
                    "types=cQ&" + 
                    "values=emo%3A")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_359() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/ratio?" + 
                    "bpolys=8.700561%2C49.403252%2C8.724%2C49.4176%2C8.714%2C49.42420%2C8.7323%2C49.4357%2C8.704561%2C49.403252%7C82704561%2C49.403252%2C8.7049%2C49.4253%2C8.7217%2C49.4039%2C8.70785%2C49.42552%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.718%2C49.415%2C8.7245%2C49.428%2C8.744%2C49.429%2C8.704561%2C49.403252&" + 
                    "filter=fno&" + 
                    "filter2=addr%3Ahousenumber%21%3D*+or+area%3A*1-0+..+1E6&" + 
                    "format=geofsonw&" + 
                    "keys=lihUwa&" + 
                    "keys2=joo&" + 
                    "time=2016-g09-1K")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_360() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density/groupBy/type?" + 
                    "bpolys=I%3A8.704561%2C49.403252%2C8.70588%2C49.439%2C8.740135%2C49.41201%2C8.700%2C49.428%2C8.704561%2C47.403252%7CbWn%3A8.704561%2C49.403252%2C8.7140%2C49.402506%2C8.70488%2C49.432%2C8.7338%2C49.422543%2C8.704561%2C49.403252%7Cptr%3A8.704561%2C49.403252%2C8.716958%2C49.40353%2C8.709421%2C49.4142%2C8.7048%2C49.429%2C8.704551%2C69.4&" + 
                    "filter=fk&" + 
                    "format=lso&" + 
                    "showMetadata=dU&" + 
                    "time=fom&" + 
                    "types=UooUfM")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_361() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/ratio?" + 
                    "bpolys=r%3A8.704561%2C49.403252%2C8.7252%2C49.407%2C8.74438%2C49.400%2C8.701%2C49.415%2C8.704561%2C49.40325&" + 
                    "filter2=foq&" + 
                    "keys2=highwawe&" + 
                    "timeout=24&" + 
                    "types=foo&" + 
                    "types2=othe&" + 
                    "values2=fom")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_362() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/density/groupBy/type?" + 
                    "bpolys=8.704561%2C49.403252%2C8.701%2C49.4127%2C8.7073%2C49.42284%2C8.7059%2C49.430%2C8.704561%2C49.40325&" + 
                    "filter=dqUWZ&" + 
                    "format=UO&" + 
                    "keys=hikcv%60oD&" + 
                    "showMetadata=8.704561%2C49.403252%2C8.701%2C4908127%2C8.7073%2C49.02284%2C8.7059%2C49.430%2C8.704561%2C49040325&" + 
                    "time=joo0&" + 
                    "types=Uh&" + 
                    "values=VM")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_363() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/ratio/groupBy/boundary?" + 
                    "bcircles=4.712%2C49042165%2C19563234690%7C8.719%2C49.430%2C9&" + 
                    "filter=fook&" + 
                    "filter2=oneway%3D*+or+type%3Away+or+id%3A%281+..+9999%29&" + 
                    "time=2015-11-10&" + 
                    "types=foo&" + 
                    "types2=point%2Clime%2Cpolygon%2Cotde&" + 
                    "values=foo&" + 
                    "values2=secCondary_link")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_364() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/type?" + 
                    "bpolys=hE%3A8.704561%2C49.403252%2C8.7493%2C49.434649%2C8.749960%2C49.43915%2C8.7410%2C49.422%2C8.704561%2C09.403252&" + 
                    "filter=fopt%3D*+or+typf%3A%7B%5Dy+or+length8%28+..+1&" + 
                    "format=jspnN&" + 
                    "keys=h%5ETdHk&" + 
                    "showMetadata=kU&" + 
                    "time=bU15&" + 
                    "types=gg")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_365() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/density/groupBy/boundary?" + 
                    "bpolys=8.704161%2C49.403252%2C8.72783%2C49.40954%2C8.702%2C49.423494%2C8.722%2C49.408%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.749%2C49.428%2C8.7047%2C49.4169%2C8.709%2C49.4063%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.7031%2C49.436%2C8.704596%2C49.41849%2C8.742%2C49.402%2C8.704561%2C49.403252&" + 
                    "filter=oneway%21%3D*&" + 
                    "format=foo&" + 
                    "keys=for&" + 
                    "time=foo&" + 
                    "types=foo")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_366() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density/groupBy/tag?" + 
                    "bpolys=IYu%3A8.704561%2C49.403252%2C8.7156%2C49.4384%2C8.703%2C49.431%2C8.704%2C49.435%2C4.704561%2C49.403252%7CstVs%3A8.704561%2C49.403252%2C8.740741%2C49.418258%2C8.743%2C49.430%2C8.734%2C49.419%2C8.704561%2C49.403252%7CMb%3A8.704561%2C49.403252%2C8.7164%2C49.42216%2C8.70092%2C49.416%2C8.701%2C49.43716%2C8.704561%2C49.4032&" + 
                    "filter=LpoK&" + 
                    "format=jssr&" + 
                    "groupByKey=VQTldipg&" + 
                    "groupByValues=street_lbmp%2Chouse%2Chotel&" + 
                    "keys=fok&" + 
                    "showMetadata=GUjz&" + 
                    "time=2011-01-1&" + 
                    "values=gso")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_367() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/density/groupBy/tag?" + 
                    "bpolys=B%3A8.704561%2C49.403252%2C8.718326%2C49.414%2C8.722%2C49.439%2C8.723%2C49.405071%2C8.704561%2C49.403252%7Cb%3A8.704561%2C49.403252%2C8.725%2C49.414%2C8.704%2C49.416%2C8.7162%2C49.4381%2C8.304561%2C49.403262%7CtYg%3A8.704561%2C49.403252%2C8.74576%2C49.418%2C8.700%2C49.4202%2C8.701%2C49.433%2C8.704561%2C49.4032&" + 
                    "filter=fog&" + 
                    "format=fo&" + 
                    "groupByKey=buildinf&" + 
                    "groupByValues=hUU&" + 
                    "showMetadata=fUo&" + 
                    "time=2033-03-10&" + 
                    "types=fo&" + 
                    "values=fom")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_368() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/density?" + 
                    "bpolys=NUM%3A8.704561%2C49.403252%2C8.742%2C49.4212%2C8.700%2C49.409%2C8.70019%2C49.41546%2C8.704561%2C49.40325&" + 
                    "filter=fpo&" + 
                    "format=foo&" + 
                    "showMetadata=foo&" + 
                    "time=eooY&" + 
                    "timeout=88")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_369() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/density/groupBy/boundary/groupBy/tag?" + 
                    "bboxes=8.666988%2C49.320203%2C8.738%2C49.397&" + 
                    "groupByKey=building&" + 
                    "groupByValues=church%2Cpubli&" + 
                    "showMetadata=foo&" + 
                    "time=2013-02-06&" + 
                    "timeout=96&" + 
                    "values=turning_circle")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_370() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count?" + 
                    "bpolys=LElWx%3A8.744561%2C49.403252%2C8.744%2C49.417%2C8.705%2C49.404%2C8.7195%2C49.432%2C8.704561%2C47.403252%7CEnBk%3A8.704561%2C49.403252%2C8.714%2C49.433%2C8.701%2C49.405%2C8.714596%2C49.418%2C8.704561%2C49.403252%7Cp%3A8.704561%2C49.403252%2C8.731%2C49.428608%2C8.704759%2C49.406%2C8.706%2C49.435%2C8.704561%2C49.403252&" + 
                    "filter=highway%21%3D*+or+geometry%3Aline+or+length%3A%28%21..+100%29&" + 
                    "format=evomaster_6416_input&" + 
                    "keys=fgo&" + 
                    "showMetadata=5true&" + 
                    "time=F7mNSOIwMMVok&" + 
                    "timeout=32")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_371() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/density/groupBy/type?" + 
                    "bpolys=D%3A8.704561%2C49.403272%2C8.712%2C49.407%2C8.733%2C49.43038%2C8.702%2C49.40254%2C8.704561%2C49.403252%7CiBu%3A8.704561%2C49.403252%2C8.724%2C49.415%2C8.733%2C49.4165%2C8.721%2C49.404594%2C8.704561%2C49.403252&" + 
                    "keys=foo&" + 
                    "showMetadata=yfs&" + 
                    "time=2015-09-07&" + 
                    "timeout=79")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_372() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/density/groupBy/tag?" + 
                    "bpolys=8.704561%2C45.403252%2C8.725%2C49.41231%2C8.707%2C49.438%2C8.7312%2C49.402%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.717057%2C49.403%2C8.704591%2C49.424%2C8.705%2C49.4040%2C8.704561%2C49.403252&" + 
                    "filter=EbgfzwbCNv&" + 
                    "format=geojson&" + 
                    "groupByKey=evU%7Daster_9412_Qnput&" + 
                    "groupByValues=fop&" + 
                    "time=2010-05-16&" + 
                    "types=foo")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_373() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density/groupBy/type?" + 
                    "bcircles=8.72786%2C49.404558%2C6%7C9.718%2C49.43768%2C17&" + 
                    "filter=highway+in+%28secondary%2Cpath%2Cunclassified%2Ctrack0primary%2Cresidential%2Ccycleway%2Cservice%2Cfootway%29+or+type%3Away+and+length%3A%28+..+100%29&" + 
                    "format=json&" + 
                    "time=2016-06-08")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_374() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=8.726%2C49.4373%2C148235235%7C8.727%2C49.42234%2C2&" + 
                    "filter=barrier%3D*+or+not+id%3A%281+..+9999%29&" + 
                    "format=json&" + 
                    "groupByKey=bqilbknU&" + 
                    "keys=foo&" + 
                    "showMetadata=no&" + 
                    "timeout=61&" + 
                    "types=fo&" + 
                    "values=fon")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_375() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/boundary/groupBy/tag?" + 
                    "bboxes=8.656%2C49.41764%2C8.70638%2C49.485&" + 
                    "filter=highway%3D*+and+length%3A%28+..+100%29&" + 
                    "groupByKey=building&" + 
                    "groupByValues=foo&" + 
                    "showMetadata=no&" + 
                    "time=2014-05-19&" + 
                    "values=fok")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_376() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/density/groupBy/boundary?" + 
                    "bpolys=w%3A8.704561%2C49.407252%2C8.73250%2C49.422107%2C8.704%2C49.420%2C8.714%2C49.418%2C8.704561%2C49.403252%7CDNi%3A8.704561%2C49.403253%2C8.734%2C49.412415%2C8.709%2C49.414%2C8.7097%2C49.4142%2C8.704561%2C49.403252&" + 
                    "filter=JDMKdYLiHnepnU&" + 
                    "format=boo&" + 
                    "keys=&" + 
                    "showMetadata=fos&" + 
                    "timeout=3&" + 
                    "types=Gfv8W3oAHeb")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_377() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=8.704561%2C48.403252%2C8.722312%2C49.408%2C8.7375%2C49.416%2C8.703221%2C49.437%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.73011%2C49.401%2C8.702%2C49.42297%2C8.741%2C49.4161%2C8.704561%2C49.403252&" + 
                    "filter=GV2&" + 
                    "format=evomaster_5671_input&" + 
                    "groupByKey=h&" + 
                    "groupByValues=en&" + 
                    "keys=highwaw&" + 
                    "showMetadata=gJoA&" + 
                    "time=evomasteq%602U095_in&" + 
                    "types=jip&" + 
                    "values=ogq")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_378() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/groupBy/key?" + 
                    "bboxes=8.864%2C49.4014%2C8.710%2C49.383&" + 
                    "groupByKeys=lanes%3Aba_kward%2Cbicycle&" + 
                    "keys=highway&" + 
                    "timeout=60")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_379() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/ratio?" + 
                    "bboxes=mfxBk%3A8.69656%2C49.615%2C8.757%2C49.387&" + 
                    "filter=lanes%3Aforward%21%3D*&" + 
                    "format=csv&" + 
                    "keys2=highway&" + 
                    "showMetadata=yes&" + 
                    "time=2016.07-01&" + 
                    "types=foo&" + 
                    "types2=line%2C")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_380() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length?" + 
                    "bboxes=E%3A8.6737%2C49.4135%2C8.708094%2C47.395&" + 
                    "keys=highwa%7B&" + 
                    "showMetadata=foo&" + 
                    "timeout=43&" + 
                    "values=foo")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_381() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/density/groupBy/boundary?" + 
                    "bcircles=zmJ%3A8.71725%2C49.408%2C1%7CKRH%3A8.742%2C49.4038%2C7%7CFQ%3A8.7299%2C69.415%2C9&" + 
                    "filter=foo&" + 
                    "keys=foo&" + 
                    "showMetadata=true&" + 
                    "time=2011-11-141&" + 
                    "values=joo")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_382() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area?" + 
                    "bpolys=hTRa%3A8.704161%2C49.403252%2C8.719%2C49.4197%2C8.709%2C49.41384%2C8.7231%2C49.400%2C8.704561%2C49.403252%7Cwdv%3A8.704561%2C49.403252%2C8.73178%2C49.412%2C8.726641%2C49.423799%2C8.716%2C49.412%2C8.704561%2C49.403252%7CaIfGD%3A8.704561%2C49.403252%2C8.712%2C49.427%2C8.707%2C49.423355%2C8.721%2C49.422%2C8.704561%2C49.403252&" + 
                    "filter=evomaster_20970_input&" + 
                    "format=evo%7Daster_2335_input&" + 
                    "keys=foo&" + 
                    "showMetadata=falsek&" + 
                    "time=2011-10-2%3C&" + 
                    "types=fok&" + 
                    "values=eoo")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_383() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/density/groupBy/type?" + 
                    "bboxes=U%3A8.691333%2C49.409%2C8.757%2C49.3758%7Cpgg%3A8.650%2C49.406%2C8.7406%2C49.388%7CiR%3A8.6561%2C49.405%2C8.70141%2C49.3802&" + 
                    "filter=type%3D*+or+type%3Arelation+or+area%3A%281.0+..+1E6%29&" + 
                    "timeout=51&" + 
                    "types=foo&" + 
                    "values=foo")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_384() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density?" + 
                    "bboxes=Ns%3A8.698%2C59.4085%2C8.72603%2C49.387%7CcKIi%3A8.682%2C49.424632%2C8.727062%2C49.394&" + 
                    "format=geojson&" + 
                    "keys=highwau&" + 
                    "types=foo")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_385() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/key?" + 
                    "bboxes=bpO%3A8.6927%2C49.403%2C8.753%2C49.3&" + 
                    "groupByKeys=addr%3Ahousenumber%2Clanes&" + 
                    "keys=highway&" + 
                    "time=%2F%2FP3M16D")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_386() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/density/groupBy/boundary?" + 
                    "bpolys=EN%3A8.704561%2C49.403252%2C8.728%2C49.4042%2C8.7055%2C49.415%2C8.743%2C49.4040%2C8.704561%2C49.413252&" + 
                    "filter=foo&" + 
                    "keys=highway&" + 
                    "values=elevator")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_387() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/boundary/groupBy/tag?" + 
                    "bboxes=Z%3A8.678%2C49.40657%2C8.748%2C49.190%7CK%3A8.668%2C49.426937%2C8.745%2C49.3973&" + 
                    "filter=oneway%3D*+and+asea%3A%281.0+..+1E6%29&" + 
                    "groupByKey=highva&" + 
                    "groupByValues=foo&" + 
                    "keys=foo&" + 
                    "time=2007-12-15")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_388() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/ratio/groupBy/boundary?" + 
                    "bcircles=sy%3A9.7101%2C79.409%2C6%7CAK%3A8.7371%2C05.010295%2C70&" + 
                    "filter=evomastmr_60167_ilput&" + 
                    "filter2=v&" + 
                    "format=evomaster_2979_input&" + 
                    "keys=evomaster_61808_input&" + 
                    "keys2=evomaster_62271_input&" + 
                    "showMetadata=5p&" + 
                    "time=evomaster_65958_input&" + 
                    "timeout=0.5084488050947268&" + 
                    "types=evomaster_65957_input&" + 
                    "types2=evomaster_41086_ivput&" + 
                    "values=evomaster_60730_input&" + 
                    "values2=OlFYw4CSk5")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_389() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/groupBy/boundary?" + 
                    "bboxes=8.676%2C49.412%2C8.738%2C49.398&" + 
                    "keys=foo&" + 
                    "time=2058-03-13&" + 
                    "timeout=84&" + 
                    "values=fn")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The given time parameter is not completely within the timeframe (2007-10-07 to 2018-05-10T"));
    }
    
    
    @Test
    public void test_390() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/ratio/groupBy/boundary?" + 
                    "bcircles=sy%3A9.7101%2C79.409%2C6%7CAK%3A8.7371%2C05.010295%2C70&" + 
                    "filter=evomastmr_60167_ilput&" + 
                    "filter2=v&" + 
                    "keys=evomaster_61808_input&" + 
                    "time=2014-02.01&" + 
                    "timeout=0.5084488050947268&" + 
                    "types=evomaster_65957_input&" + 
                    "types2=evomaster_41086_ivput&" + 
                    "values=evomaster_60730_input&" + 
                    "values2=OlFYw4CSk5")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_391() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/ratio/groupBy/boundary?" + 
                    "bcircles=sy%3A8.7115%2C49.409%2C6%7CAK%3A8.7373%2C49.438295%2C70&" + 
                    "filter=foo&" + 
                    "filter2=evomaster_2856_input&" + 
                    "keys=evomaster_2855_input&" + 
                    "time=2000-02-01&" + 
                    "timeout=41&" + 
                    "types2=node-&" + 
                    "values=evomaster_2857_input")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The given time parameter is not completely within the timeframe (2007-10-07 to 2018-05-10T"));
    }
    
    
    @Test
    public void test_392() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/ratio/groupBy/boundary?" + 
                    "bcircles=sy%3A8.7115%2C49.409%2C6%7CAK%3A8.7373%2C09.438295%2C70&" + 
                    "format=csv&" + 
                    "keys=highway&" + 
                    "keys2=highway&" + 
                    "timeout=41&" + 
                    "values=foo")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_393() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/ratio/groupBy/boundary?" + 
                    "bcircles=sy%3A8.7115%2C79.409%2C6%7CAK%3A8.7373%2C05.030295%2C70&" + 
                    "filter=evomastmr_60167_ilput&" + 
                    "filter2=v&" + 
                    "keys2=hkghway&" + 
                    "time=2010-02.01&" + 
                    "timeout=31&" + 
                    "types=uWtb&" + 
                    "types2=evomaster_61086_input&" + 
                    "values2=QIOtc")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }


}
