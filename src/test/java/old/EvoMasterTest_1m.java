package old;

import org.heigit.ohsome.ohsomeapi.EMDriver;
import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.controller.api.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import static org.evomaster.client.java.controller.db.dsl.SqlDsl.sql;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto;
import  java.util.List;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
 * This file was automatically generated by EvoMaster on 2020-11-19T11:44:46.262+01:00[Europe/Paris]
 * <br>
 * The generated test suite contains 137 tests
 * <br>
 * Covered targets: 1215
 * <br>
 * Used time: 0h 1m 0s
 * <br>
 * Needed budget for current results: 93%
 * <br>
 * 
 */
public class EvoMasterTest_1m {

    
    private static final SutHandler controller = new EMDriver();
    private static String baseUrlOfSut;
    
    
    @BeforeClass
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    @AfterClass
    public static void tearDown() {
        controller.stopSut();
    }
    
    
    @Before
    public void initTest() {
        controller.resetStateOfSUT();
    }
    
    
    
    
    @Test
    public void test_0() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/groupBy/tag?" + 
                    "bboxes=HVrB1biLd62JWgk&" + 
                    "bcircles=nWBMG5x0irrm&" + 
                    "filter=T&" + 
                    "groupByKey=qjN6WH1qYVuQFp7&" + 
                    "showMetadata=4h&" + 
                    "time=1mwyyKOW3XCmf_k&" + 
                    "timeout=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_1() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/groupBy/key?" + 
                    "bcircles=Oo36kjnpRnnJbbCi&" + 
                    "filter=aem6PE&" + 
                    "format=PqMhH&" + 
                    "groupByKeys=1aJlQeHz&" + 
                    "keys=bPGx9&" + 
                    "values=8klybZZSXch")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_2() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/groupBy/boundary?" + 
                    "bboxes=Y&" + 
                    "bpolys=Ho0qxT1hCOj&" + 
                    "format=55VLCo&" + 
                    "keys=P&" + 
                    "showMetadata=vO80t2IjxTJgM&" + 
                    "timeout=Z9Y&" + 
                    "types=0_XNM8o7KM&" + 
                    "values=kIELk3")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_3() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/density/groupBy/type?" + 
                    "bboxes=gXBkLRYU&" + 
                    "bcircles=HZu&" + 
                    "bpolys=Tr4mLZgNaB7SD&" + 
                    "time=rtV4yr&" + 
                    "values=ctq")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_4() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/density?" + 
                    "bcircles=PnJ&" + 
                    "format=CSV&" + 
                    "keys=evomaster_712_input&" + 
                    "time=evomaster_686_input&" + 
                    "timeout=-1.9205569274976708&" + 
                    "types=evomaster_817_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_5() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count?" + 
                    "bboxes=oOP3Hgbl8mEC&" + 
                    "bcircles=&" + 
                    "bpolys=&" + 
                    "format=ea&" + 
                    "keys=q83bM4&" + 
                    "showMetadata=M5VZObOKEm7&" + 
                    "timeout=YlPkvW9y0lbABH2")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_6() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/groupBy/type?" + 
                    "bcircles=Z5wLdhJVP&" + 
                    "filter=Ru5TsDdMFv5U&" + 
                    "format=hClcp6KxQk&" + 
                    "keys=%3Cy4&" + 
                    "showMetadata=&" + 
                    "time=VDDugUI3DoXkLI&" + 
                    "types=un&" + 
                    "values=GEs1adC_Qe8zjs")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_7() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/groupBy/tag?" + 
                    "bcircles=&" + 
                    "bpolys=03iQ&" + 
                    "filter=jb5G38x0S7OBLae&" + 
                    "groupByKey=ICAhmlOb0QKdd5Ms&" + 
                    "keys=YavMwwk5Y7BFFxk&" + 
                    "showMetadata=RmJPTMJfQ&" + 
                    "time=2Tj6krzdfziU&" + 
                    "types=4v9kkEw_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_8() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/groupBy/key?" + 
                    "bpolys=gzQj&" + 
                    "filter=xEWTO5RHS75pXBe&" + 
                    "format=&" + 
                    "groupByKeys=6M4&" + 
                    "types=cUKolo8Xy67dDX4")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_9() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=56NfuElP&" + 
                    "bpolys=&" + 
                    "filter=TYhW0By12&" + 
                    "groupByKey=rOpVhtq_YPo3xs&" + 
                    "keys=Bw_dpoNCak9TNf&" + 
                    "types=EzmRPB&" + 
                    "values=cnJG90c1Aj8UM")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_10() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/groupBy/boundary?" + 
                    "bcircles=U2H17rtMIpS6aS&" + 
                    "time=tgZ3y&" + 
                    "types=DHTW3NsljgWXq0&" + 
                    "values=s")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_11() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/density/groupBy/type?" + 
                    "bcircles=x&" + 
                    "format=ngL0&" + 
                    "keys=1viibEfPheuh4&" + 
                    "time=sJudz&" + 
                    "values=lXoKrS")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_12() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/density/groupBy/type?" + 
                    "bcircles=pT&" + 
                    "bpolys=DVmcf9rlF&" + 
                    "filter=JLWp&" + 
                    "format=T9F70Q0ilhgY5LjH&" + 
                    "showMetadata=ZUWsusrgnScz&" + 
                    "time=JBrD1Obv5GGu0K&" + 
                    "timeout=QsCFPe_&" + 
                    "types=dshX9gLf64Q3x&" + 
                    "values=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_13() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/density/groupBy/tag?" + 
                    "bpolys=rSHV1JtAxEdhsU7&" + 
                    "filter=hJkI&" + 
                    "groupByKey=oCQM&" + 
                    "groupByValues=iX&" + 
                    "keys=E1Mru&" + 
                    "showMetadata=TKeVltU&" + 
                    "time=M3IaFZwfG&" + 
                    "types=TKeVltU&" + 
                    "values=IafVP")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_14() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/density/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=mMSqIKYkCaK9O&" + 
                    "format=evomaster_271_input&" + 
                    "groupByKey=evomaster_916%5Dinput&" + 
                    "keys=7h%5Ce&" + 
                    "showMetadata=7M2D&" + 
                    "time=iT&" + 
                    "timeout=-0.47")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_15() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/density/groupBy/boundary/groupBy/tag?" + 
                    "bboxes=S1m&" + 
                    "bcircles=YX2fOm&" + 
                    "bpolys=2YM&" + 
                    "filter=evomaster_919_input&" + 
                    "format=LzZnGL&" + 
                    "groupByKey=Q&" + 
                    "groupByValues=evomaster_920_input&" + 
                    "keys=BHQLL&" + 
                    "showMetadata=9vStKW0M9Bv&" + 
                    "time=G&" + 
                    "timeout=XHx&" + 
                    "values=dhF")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_16() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/density/groupBy/boundary?" + 
                    "bpolys=xzwFIPl87vJ&" + 
                    "filter=6&" + 
                    "format=cgLoaIz_1f&" + 
                    "time=sK")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_17() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/density?" + 
                    "bboxes=hB2kp5Q&" + 
                    "bcircles=jAPIIm5SfhUM2&" + 
                    "bpolys=0yWsFEWlu6q&" + 
                    "format=Jg5bUXmXDLpad&" + 
                    "showMetadata=evomaster_933_input&" + 
                    "time=84_6&" + 
                    "timeout=rD&" + 
                    "values=hyJyCJUd8zqiVKt")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_18() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter?" + 
                    "bcircles=fvVHCo%5ElO5vU1q0&" + 
                    "filter=A7cCA&" + 
                    "keys=pW55q&" + 
                    "time=Jy&" + 
                    "types=82IknmD4rWVQ&" + 
                    "values=B")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_19() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/ratio/groupBy/boundary?" + 
                    "bpolys=G&" + 
                    "filter=4NrK&" + 
                    "filter2=plEa41mm&" + 
                    "format=LEkW&" + 
                    "keys=e9jjwm1FYm&" + 
                    "keys2=QT5TS8SdBX_wk&" + 
                    "showMetadata=&" + 
                    "time=2YQZljpef6&" + 
                    "types=29&" + 
                    "types2=mpFWYsYDKr96AjC1&" + 
                    "values=GT8_kxRvK8ey&" + 
                    "values2=fJbBW5LmI0U5I")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_20() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/ratio?" + 
                    "bboxes=Wgb8&" + 
                    "bcircles=dEN92u5FSdqD&" + 
                    "filter=lypuksHFZdI6Q&" + 
                    "filter2=T&" + 
                    "keys=B6Qrg&" + 
                    "keys2=6G9k&" + 
                    "time=18hWFeMA&" + 
                    "timeout=2ty&" + 
                    "types=4ovFktTuFSgA&" + 
                    "values2=Bzi1luau")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_21() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/groupBy/type?" + 
                    "bboxes=PkJTOeK_17&" + 
                    "bcircles=fFi7SwWskWaR&" + 
                    "bpolys=xzDgNuedwUsNIx&" + 
                    "time=c295PEoKPW&" + 
                    "timeout=Nh&" + 
                    "types=N")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_22() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/groupBy/tag?" + 
                    "bboxes=_VaNbPcCz&" + 
                    "bpolys=08&" + 
                    "filter=dajGduKkhQNB&" + 
                    "format=55F&" + 
                    "groupByKey=&" + 
                    "time=S7bUg&" + 
                    "timeout=v_ZnK")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_23() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/groupBy/key?" + 
                    "bpolys=p&" + 
                    "filter=PzSfC64hpN0qMQ4&" + 
                    "format=O&" + 
                    "groupByKeys=w1U&" + 
                    "keys=wW&" + 
                    "showMetadata=Z&" + 
                    "time=0QxTD&" + 
                    "types=a")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_24() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=vZYy&" + 
                    "filter=KTmctGsuQ0Qn&" + 
                    "format=pWpATkuxRiAI01P3&" + 
                    "groupByKey=JMDSF9%5BnW&" + 
                    "types=1LeTT77hiBGCQr&" + 
                    "values=DCBLqsBOOFVRFF%5DN")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_25() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/groupBy/boundary?" + 
                    "bcircles=W7wVWi9&" + 
                    "bpolys=0&" + 
                    "showMetadata=c6Fx&" + 
                    "time=cBKMu96yx5&" + 
                    "values=x3")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_26() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density/groupBy/type?" + 
                    "bcircles=kSsB_Po&" + 
                    "filter=T2gzw&" + 
                    "keys=pLHq&" + 
                    "showMetadata=MSrclS&" + 
                    "time=Z")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_27() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/density/groupBy/type?" + 
                    "bboxes=%3BmJvvJeCepyK%3EVfw&" + 
                    "bcircles=IKuXkhTQI&" + 
                    "bpolys=dl03z87wAZeobow0&" + 
                    "format=XTe9bK0pwBaU&" + 
                    "keys=gGrHQiv3i&" + 
                    "time=M_j0&" + 
                    "types=aKNweiAr6d&" + 
                    "values=KjFJNyrKU0")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_28() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/density/groupBy/tag?" + 
                    "bboxes=_&" + 
                    "format=MY0PH&" + 
                    "groupByKey=w0pI0CPOs7ugvEfV&" + 
                    "showMetadata=na&" + 
                    "time=JMc0c&" + 
                    "timeout=5Rp6y&" + 
                    "types=PtgxkS9u")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_29() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/density/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=0l&" + 
                    "filter=KwT1aK&" + 
                    "groupByKey=SwB4wcDe&" + 
                    "groupByValues=lZJjexcVsY130SP&" + 
                    "keys=DoU8LLcYE0M")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_30() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/density/groupBy/boundary?" + 
                    "bcircles=&" + 
                    "bpolys=2syoq&" + 
                    "showMetadata=UaS7b3&" + 
                    "time=lHq3")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_31() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/density?" + 
                    "bpolys=13C%5Eux&" + 
                    "time=ZmSq1CJuQGZQS&" + 
                    "types=2Y&" + 
                    "values=%5C5Ha2etuMcybbTU")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_32() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length?" + 
                    "bboxes=fZEHBKFr&" + 
                    "bcircles=NzG6eW_S&" + 
                    "format=G&" + 
                    "keys=voyEjX8eq7UeQ4&" + 
                    "time=Y2t44YBGjHb5&" + 
                    "timeout=DIusXBsD%3AH&" + 
                    "types=0Cp&" + 
                    "values=pZ8f5AyBNyj1Bso")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_33() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/ratio/groupBy/boundary?" + 
                    "bpolys=vP&" + 
                    "format=LqDbfwC8TFmR&" + 
                    "keys=jh7FcBZ&" + 
                    "keys2=2XjAzaG7r2Dr1&" + 
                    "showMetadata=EMEzpP&" + 
                    "types2=a2fHf5i")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_34() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/ratio?" + 
                    "bcircles=R&" + 
                    "filter=c&" + 
                    "filter2=iu2lTxFvz&" + 
                    "format=Gw2O&" + 
                    "types=tZwvZwo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_35() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/type?" + 
                    "bcircles=g7x&" + 
                    "format=rTQydD&" + 
                    "keys=GZhRxz&" + 
                    "showMetadata=evomaster_417_input&" + 
                    "time=evomaster_418_input&" + 
                    "timeout=u4g7&" + 
                    "types=dXhGh73q&" + 
                    "values=hM")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_36() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/groupBy/type?" + 
                    "bcircles=KV&" + 
                    "filter=hhHhcQF&" + 
                    "keys=g8RFThfVOuPuStfW&" + 
                    "showMetadata=fJn%40wX2yztS1x2&" + 
                    "time=uNg4lSVkxLzkIbR&" + 
                    "types=K&" + 
                    "values=HsclOWIxTk")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_37() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/groupBy/tag?" + 
                    "bboxes=Z22IUFTPLSkLhM3&" + 
                    "bpolys=LtZ&" + 
                    "groupByKey=xcPsk7g8kwmW1G&" + 
                    "time=&" + 
                    "types=3")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_38() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/groupBy/key?" + 
                    "filter=QW5UX&" + 
                    "groupByKeys=I&" + 
                    "keys=v20K3BTGe&" + 
                    "time=gV&" + 
                    "timeout=znIRn5235&" + 
                    "types=jtPK&" + 
                    "values=2OO")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_39() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/groupBy/boundary?" + 
                    "bpolys=H8Q44GNbnpPJNJIr&" + 
                    "filter=BGhLlpgH&" + 
                    "format=jMIBQgCRicOv&" + 
                    "showMetadata=s6B9G4ztjRTeKBT4&" + 
                    "time=1BgjQQGpZ46OCM5&" + 
                    "types=GOmA&" + 
                    "values=o1tT6CL2tW74m5S")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_40() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/density/groupBy/type?" + 
                    "bcircles=Ng7m02O2_b&" + 
                    "filter=7cL&" + 
                    "format=iZ&" + 
                    "keys=eZ&" + 
                    "time=p&" + 
                    "timeout=cR32V3O&" + 
                    "values=k%403o6Qh")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_41() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/density/groupBy/tag?" + 
                    "bcircles=wZCcbpDvbKxDHZng&" + 
                    "groupByKey=tqnu%5E6&" + 
                    "keys=69g9SQ6&" + 
                    "showMetadata=A&" + 
                    "time=bx&" + 
                    "types=BLRoBT")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_42() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/density/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=ydeUbHx&" + 
                    "filter=H4UllvHvSC5Gh&" + 
                    "format=0EOrIrT1HYsuUvkc&" + 
                    "groupByKey=l7La6&" + 
                    "groupByValues=b&" + 
                    "showMetadata=fj&" + 
                    "time=l7Ja6&" + 
                    "types=lDl_&" + 
                    "values=rIN37A")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_43() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/density/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=sacc4hn1M0GfqMO&" + 
                    "format=ASkl%3B4VOdfi3a&" + 
                    "groupByKey=zK4CWg7%3B&" + 
                    "groupByValues=HE3dNol_qIcszD&" + 
                    "keys=eH0XjVYuKUSQWzY&" + 
                    "showMetadata=HEBK091F13mX7n_&" + 
                    "values=Kuae7X40PU_cPos")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_44() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/density?" + 
                    "bboxes=bCxjv&" + 
                    "bcircles=eHa_Lbh5RK&" + 
                    "format=PhMFn&" + 
                    "keys=rErFmVlEm9TMb&" + 
                    "time=6JP3uE7mwZoZgZI&" + 
                    "timeout=3R&" + 
                    "types=jgbAm4")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_45() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count?" + 
                    "bcircles=QI7dwGqaPsb5h_&" + 
                    "keys=z38l6QE&" + 
                    "types=OkOaZBTbop8H")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_46() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/ratio/groupBy/boundary?" + 
                    "bpolys=U&" + 
                    "filter2=NzFMFipX8iHCrm0&" + 
                    "format=LqvrqjdlUixOFivg&" + 
                    "keys=&" + 
                    "keys2=se4G9VKAz&" + 
                    "time=AqTmG&" + 
                    "values=HiO%3A_X&" + 
                    "values2=RO5ctSvSXs")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_47() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/ratio?" + 
                    "bcircles=ZpkKoLXrlWr1i&" + 
                    "bpolys=SE0JgLLor&" + 
                    "filter2=MXpEgAXHg2kITL1&" + 
                    "keys=Rve5c3LVeGNvJP&" + 
                    "keys2=ZpkKoLXrlWr1i&" + 
                    "time=S%5BC&" + 
                    "timeout=7UTovqCsm2uSVybX&" + 
                    "types=ra4Wge4Fo&" + 
                    "types2=Dl&" + 
                    "values=bOlCXMA&" + 
                    "values2=rPL")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_48() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/type?" + 
                    "bboxes=erQ7CnQRFt55&" + 
                    "bcircles=V01CKfrpLV&" + 
                    "bpolys=wvnTNhMkCT5&" + 
                    "filter=m3_UXLZn1sB&" + 
                    "format=cSV&" + 
                    "keys=&" + 
                    "showMetadata=%60ep&" + 
                    "time=bx&" + 
                    "timeout=zoOQjkGp_1rRwp&" + 
                    "types=n")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_49() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/type?" + 
                    "bboxes=t6d4J&" + 
                    "bcircles=JwGgqd%5B&" + 
                    "bpolys=o5UvHzBUwxx6h&" + 
                    "keys=I&" + 
                    "showMetadata=tUGE&" + 
                    "time=eIsmNMlFA50s1VT&" + 
                    "types=ZODlbAr1Y1zTto")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_50() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/tag?" + 
                    "bboxes=xum&" + 
                    "bcircles=tQdvhB5Zq7Ad6z4&" + 
                    "bpolys=4lALDeiE&" + 
                    "format=F&" + 
                    "groupByKey=Mg&" + 
                    "groupByValues=zREjjfkt&" + 
                    "keys=Z13qa4yjNB&" + 
                    "time=qZ&" + 
                    "timeout=y&" + 
                    "values=UhjdjETLwB3QYod")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_51() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/key?" + 
                    "bcircles=U&" + 
                    "format=CsV&" + 
                    "groupByKeys=XYfZvuYnInS&" + 
                    "showMetadata=sKkeO&" + 
                    "time=lKOju0&" + 
                    "timeout=0.7016072134831913&" + 
                    "types=evomaster_878_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_52() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/key?" + 
                    "bboxes=6HNq0&" + 
                    "bcircles=&" + 
                    "format=O5UcSUZZR&" + 
                    "groupByKeys=&" + 
                    "types=iwa4bz4Qvok_X")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_53() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/boundary/groupBy/tag?" + 
                    "bboxes=JttUjkyal&" + 
                    "bcircles=3U%5DF&" + 
                    "bpolys=Odvi0uqs_z5&" + 
                    "format=sfpWvg4Kt2SqKLv&" + 
                    "groupByKey=hWa0kYneXVOPZW&" + 
                    "keys=dHFN&" + 
                    "time=bXE&" + 
                    "timeout=zMKnj8wldlbEz&" + 
                    "types=M5H")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_54() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=DQPKdw&" + 
                    "bpolys=ttHK1Pe&" + 
                    "format=yJelIaRCzm2xa&" + 
                    "groupByKey=9pNe0T&" + 
                    "groupByValues=Mr&" + 
                    "showMetadata=OK3K&" + 
                    "time=e4zGwdvrnda4Sz&" + 
                    "timeout=he6Dy4kU8")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_55() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/boundary?" + 
                    "bpolys=%7C&" + 
                    "filter=KujMEj_0Pb&" + 
                    "keys=&" + 
                    "showMetadata=e8Qa7UnCz&" + 
                    "time=0sm3oLm_C&" + 
                    "timeout=MFdYp8S4PEgtmXt&" + 
                    "values=hE5sfPZI")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_56() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/boundary?" + 
                    "bpolys=faOzf4&" + 
                    "format=ykZfBcaNPTT&" + 
                    "showMetadata=C1xPFkrLh&" + 
                    "values=tR5NRGD")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_57() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density/groupBy/type?" + 
                    "bboxes=&" + 
                    "bcircles=ZtpdUt&" + 
                    "filter=vs3NSnqpxk5K8wYC&" + 
                    "format=&" + 
                    "showMetadata=83C0X%5D7L&" + 
                    "time=m_EtAOYLh_EJ&" + 
                    "types=39gAGSN&" + 
                    "values=BXk0KyWHQ9DY")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_58() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/density/groupBy/type?" + 
                    "bboxes=OsYvg&" + 
                    "bcircles=X&" + 
                    "filter=2NxGMwO7cx3aKE&" + 
                    "showMetadata=xn4Hz&" + 
                    "time=XppP7lc&" + 
                    "timeout=1Nhrd55VaO&" + 
                    "values=A4ILyUqAYs")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_59() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density/groupBy/tag?" + 
                    "bcircles=evomaster_25_input&" + 
                    "groupByKey=evomaster_27_ijput&" + 
                    "groupByValues=yah5Lt4_W72&" + 
                    "showMetadata=iC7B%40&" + 
                    "time=whuiRznLtxtTBF3V&" + 
                    "values=evomaster_29_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_60() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/density/groupBy/tag?" + 
                    "bboxes=7lOitzvjvxJ&" + 
                    "bpolys=V&" + 
                    "filter=3Fh2o2TqKNaiSuA&" + 
                    "groupByKey=w2v2GB&" + 
                    "groupByValues=&" + 
                    "time=6gVZ4_Sm&" + 
                    "types=f")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_61() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=lHQ&" + 
                    "format=SnoVxtLpMck&" + 
                    "groupByKey=Xmwm&" + 
                    "groupByValues=Q_FaT4lwnuD&" + 
                    "keys=hC&" + 
                    "showMetadata=ZQ5WZUPsbZSeKN&" + 
                    "time=4_mLes&" + 
                    "types=0z%3BZMP27j3uo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_62() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/density/groupBy/boundary/groupBy/tag?" + 
                    "bboxes=VaakocHxxC&" + 
                    "bcircles=Q0fk2&" + 
                    "filter=QFZVMvOwwTe&" + 
                    "format=90vNmYPI&" + 
                    "groupByKey=3CU2hOTx7NG82e3&" + 
                    "keys=dEcCrWZXDiRgcJ&" + 
                    "showMetadata=jJXdtOjgTQUMDHC5&" + 
                    "time=nQMqiKP2aY%5BKpu&" + 
                    "types=1W&" + 
                    "values=k1ahFdrE0oLwmE6N")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_63() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/density/groupBy/boundary?" + 
                    "bcircles=rFvcHKV4&" + 
                    "format=I&" + 
                    "types=Mm")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_64() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/density?" + 
                    "bpolys=4chlcz6iN&" + 
                    "format=a8r%2F&" + 
                    "keys=w4_NnnvkHN6tSJr&" + 
                    "time=mpaUVZ_hcPHj_MtJ&" + 
                    "timeout=PJJdS&" + 
                    "types=MaJ5DmUOHCe&" + 
                    "values=8TYzZg2QxId")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_65() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area?" + 
                    "bcircles=P2QbHXs_P7MH&" + 
                    "showMetadata=rh0dW9wu7u1z&" + 
                    "time=0x2riM6Adu&" + 
                    "types=MKn5B0XNl&" + 
                    "values=s2o65")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_66() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area?" + 
                    "bcircles=PJyFd&" + 
                    "bpolys=g9Fa4&" + 
                    "format=z3AAGHgfQ1&" + 
                    "time=QtFajG&" + 
                    "timeout=p0&" + 
                    "types=awhhOg")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_67() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/density/groupBy/tag?" + 
                    "bboxes=6O0O1w&" + 
                    "bcircles=s&" + 
                    "bpolys=x8uk&" + 
                    "filter=KikOMFFhO&" + 
                    "format=cYIcbXLt8xf4&" + 
                    "groupByKey=5CGWe0rmKhA3&" + 
                    "time=gg0OIQlPRJ")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_68() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count?" + 
                    "bcircles=YYTex8yosdLRRCxF&" + 
                    "bpolys=G6kfemZgTt2B2KR&" + 
                    "filter=InPkj5ecsmu&" + 
                    "showMetadata=m&" + 
                    "time=uY06RL9dyAAh1&" + 
                    "types=jhpnBcdK&" + 
                    "values=WDez1_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_69() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/density/groupBy/type?" + 
                    "bboxes=YpL&" + 
                    "bpolys=q3L5VE7mCZTQH&" + 
                    "filter=cOq70Wmcv&" + 
                    "types=nAPVg&" + 
                    "values=lXoKsS")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_70() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/density/groupBy/tag?" + 
                    "bboxes=zyZAaIPpcJQ&" + 
                    "bcircles=p8yAJDM&" + 
                    "bpolys=lgKr&" + 
                    "filter=tWh0K7xZRTiXj&" + 
                    "groupByKey=T1gJNoQt7HIsdzUb&" + 
                    "groupByValues=NndzHrWuowMrgh&" + 
                    "keys=bW5ERwN_zE6&" + 
                    "showMetadata=ei9XFq4nv&" + 
                    "time=w5&" + 
                    "timeout=4tI3nmOp&" + 
                    "types=LXs31")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_71() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/density/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=mMSqIKYkCaK9O&" + 
                    "bpolys=QjaMp8a4Vu&" + 
                    "filter=ocq&" + 
                    "format=svLZ&" + 
                    "groupByKey=N_AyfDA0ZsLZ&" + 
                    "groupByValues=KSxgA&" + 
                    "keys=7dXe&" + 
                    "types=0to")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_72() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/ratio?" + 
                    "bboxes=7_5HkAtWAM&" + 
                    "filter2=_HwOaJb&" + 
                    "format=UA5su5UC8g&" + 
                    "keys=71g5s9&" + 
                    "keys2=fr&" + 
                    "showMetadata=k3RzHN&" + 
                    "time=&" + 
                    "types=4QHd_E&" + 
                    "types2=9GIsg2XfV0u")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_73() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/type?" + 
                    "bboxes=raMu0W9uVekKH_T&" + 
                    "bpolys=bemLFJ_9fegME0a&" + 
                    "showMetadata=v_u0p0Lzh&" + 
                    "time=jjEAutPeUZjZ&" + 
                    "types=Rfpk")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_74() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/tag?" + 
                    "bboxes=1KUBU7R&" + 
                    "bcircles=Y4qUIC&" + 
                    "bpolys=5w9ejWs&" + 
                    "format=7dKgDpyYOooxOjsr&" + 
                    "groupByKey=YvvMsHI98KHVN27H&" + 
                    "groupByValues=_PBmqWfBf2IcO&" + 
                    "time=k9BtWyt6YX&" + 
                    "timeout=tE9YJ&" + 
                    "values=MQlWSIp_h7yY1lZ")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_75() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/key?" + 
                    "bboxes=HUh3vXIe&" + 
                    "bcircles=&" + 
                    "bpolys=lVWbWeFIyOADiW&" + 
                    "format=N9mnBNs4f&" + 
                    "groupByKeys=yiPfEM9bZ59jCM&" + 
                    "keys=aLwhaYHEZVXQ&" + 
                    "types=FqP6wNuz&" + 
                    "values=5O")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_76() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=pHn92tt&" + 
                    "filter=t3all4qNcBI9C&" + 
                    "format=oDoHyG_DFANSWL&" + 
                    "groupByKey=NmgPNKjgkX6_hto1&" + 
                    "time=puzGyzVFL1&" + 
                    "timeout=gBjWMGZUAcYuP&" + 
                    "values=_112")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_77() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density/groupBy/type?" + 
                    "bpolys=GAREiHiSJLuJj_&" + 
                    "filter=T2kzw&" + 
                    "keys=pMHq&" + 
                    "showMetadata=MSrclS&" + 
                    "timeout=SZcdAqtuxiYg7&" + 
                    "types=kix8F&" + 
                    "values=geVJ5De")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_78() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density/groupBy/tag?" + 
                    "bpolys=IeWFtwCgq&" + 
                    "groupByKey=PMfdQ1dPDKfw&" + 
                    "keys=Sccm5NPB1bZ&" + 
                    "showMetadata=83y8ZXWLlvbP2Suv&" + 
                    "time=e&" + 
                    "timeout=T8oRpeBgk")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_79() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density/groupBy/boundary/groupBy/tag?" + 
                    "bboxes=apAsylpUfAZX&" + 
                    "filter=tXvH8B&" + 
                    "format=bitk3OaRo2&" + 
                    "groupByKey=7c&" + 
                    "groupByValues=GPJLG3&" + 
                    "time=Stm6OVBMeiC")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_80() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/ratio?" + 
                    "bcircles=NT7y4hN8qWZMxaaK&" + 
                    "filter=8nVNllzBeqLi&" + 
                    "filter2=2rOFJumbodMX1spL&" + 
                    "format=Ilyw8vaE&" + 
                    "keys=LgGfpci80NBJ&" + 
                    "time=rggDN&" + 
                    "types=&" + 
                    "values2=44pPH9bFcPslY")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_81() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/type?" + 
                    "bboxes=HZATNb445LBJ0A&" + 
                    "bcircles=g7t&" + 
                    "bpolys=&" + 
                    "keys=GZfRxz&" + 
                    "showMetadata=uLxH_VHEtT&" + 
                    "time=tSOOHi&" + 
                    "types=dXhGh73q&" + 
                    "values=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_82() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/tag?" + 
                    "bboxes=HHZtco&" + 
                    "bcircles=POiRX9qNfMoiX&" + 
                    "bpolys=6tKjQw5uLfjwP&" + 
                    "filter=_&" + 
                    "format=ttld&" + 
                    "groupByKey=yGqEE&" + 
                    "keys=kRWdZ3&" + 
                    "showMetadata=&" + 
                    "time=himS306B&" + 
                    "types=WOef2Kbp&" + 
                    "values=tX164P1fk9Y")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_83() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/key?" + 
                    "bboxes=&" + 
                    "bcircles=H&" + 
                    "bpolys=Q_T5Mfu3&" + 
                    "filter=U7WyCy&" + 
                    "format=&" + 
                    "groupByKeys=2ye9tkV&" + 
                    "time=97Wi8PtCoIZWCp1U&" + 
                    "timeout=eXOd2E7A8OM")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_84() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=hGWj&" + 
                    "bpolys=ZA92qYrfr1L&" + 
                    "filter=NcBGAqenb&" + 
                    "format=aG36FzFl&" + 
                    "groupByKey=CDKiB8bt78zyA&" + 
                    "keys=iZ9fR&" + 
                    "showMetadata=&" + 
                    "time=HjJ&" + 
                    "timeout=&" + 
                    "types=_wuCE&" + 
                    "values=lXnQ8I_10")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_85() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/density/groupBy/type?" + 
                    "bboxes=hl5&" + 
                    "bpolys=N0&" + 
                    "format=lzpNVbeaGJ&" + 
                    "showMetadata=XdetNvoeywYW")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_86() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/density/groupBy/tag?" + 
                    "bboxes=aaU66DK_8FA6r&" + 
                    "bcircles=9U5&" + 
                    "filter=uuvK5G&" + 
                    "groupByKey=AgOWwvAflJAandQ&" + 
                    "showMetadata=6pbU3WjPIGxITfyK&" + 
                    "time=56S&" + 
                    "timeout=hzoNIr1SEI36hhli&" + 
                    "types=zyX0ro4uGqiKo&" + 
                    "values=XG6DIStOWyUfIwj")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_87() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/density/groupBy/boundary/groupBy/tag?" + 
                    "bboxes=m78&" + 
                    "filter=G4UllvHvSC5Gh&" + 
                    "format=0EOrIrT1HYquUvkc&" + 
                    "groupByKey=l7Ja6&" + 
                    "groupByValues=b&" + 
                    "showMetadata=fj&" + 
                    "time=5otPbBp3RR&" + 
                    "timeout=GDSpb&" + 
                    "types=lDl_&" + 
                    "values=rIN37A")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_88() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/ratio?" + 
                    "bcircles=xzS_LrGXSopX&" + 
                    "filter=RpvyW414NWB_&" + 
                    "showMetadata=PMmQ2ZlKQ&" + 
                    "types=AknE5yA&" + 
                    "values2=V0UI_R8nQFj")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_89() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/type?" + 
                    "bpolys=9bq3Cu_BJnOw&" + 
                    "format=ES8ot92IlK&" + 
                    "showMetadata=Q&" + 
                    "timeout=J5Q&" + 
                    "values=tkgSq")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_90() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/tag?" + 
                    "bboxes=xf2Wuq&" + 
                    "format=pmVTM6H8cVyY&" + 
                    "groupByKey=3P&" + 
                    "keys=ZHV&" + 
                    "time=qmA&" + 
                    "timeout=T&" + 
                    "types=5MT")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_91() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/key?" + 
                    "groupByKeys=Z5T7Lf7R&" + 
                    "keys=Y&" + 
                    "time=lGOju0&" + 
                    "timeout=NH1H7779kfoGmJS&" + 
                    "values=r6L2bYD4R")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_92() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=3UUF&" + 
                    "bpolys=Odvi0uqs_z5&" + 
                    "filter=&" + 
                    "groupByKey=hWa0kYneXVOPZW&" + 
                    "groupByValues=i4g&" + 
                    "timeout=zMKnj8wldlbEz&" + 
                    "types=M5H&" + 
                    "values=V")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_93() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density/groupBy/type?" + 
                    "bcircles=319cfKR0j&" + 
                    "filter=C&" + 
                    "format=XqAYiylq2uCMn&" + 
                    "time=Ef3vS&" + 
                    "timeout=1Qz&" + 
                    "types=E&" + 
                    "values=_llUykY7zpQDGDl")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_94() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density/groupBy/tag?" + 
                    "bcircles=&" + 
                    "bpolys=Uik7SE44UhA&" + 
                    "filter=gNT&" + 
                    "format=8sT&" + 
                    "groupByKey=&" + 
                    "keys=&" + 
                    "showMetadata=iC7BD&" + 
                    "timeout=LE28s9bKNOUdUcWO&" + 
                    "values=wQMZNHadXH")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_95() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density/groupBy/boundary/groupBy/tag?" + 
                    "bboxes=8qajXTEz&" + 
                    "bcircles=AHzTxDnlM&" + 
                    "bpolys=L2BEp_2_o_UdDP&" + 
                    "format=5U5E3NdcZ5YSikp&" + 
                    "groupByKey=zN&" + 
                    "groupByValues=Xk7&" + 
                    "keys=XNNMRe&" + 
                    "types=IjHnxrk5oStQU_&" + 
                    "values=9XpKe6iGoapw0")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_96() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/density/groupBy/type?" + 
                    "bboxes=KdAFJmnkDsiBbADm&" + 
                    "bpolys=i0ijn5&" + 
                    "format=htnoBF3MvM&" + 
                    "keys=lDDW&" + 
                    "types=2p5qJNvuqRyJjunJ")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_97() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/ratio/groupBy/boundary?" + 
                    "bboxes=DNUVVANn7Olg&" + 
                    "bpolys=Cjp2epWP6WpL93G&" + 
                    "filter=1SFzC&" + 
                    "filter2=PqWFJ4brLfz9LY&" + 
                    "showMetadata=x_rzKC&" + 
                    "time=p&" + 
                    "timeout=LXM&" + 
                    "types=Sth_kVvSflST&" + 
                    "values=17reW9GU&" + 
                    "values2=At")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_98() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/ratio/groupBy/boundary?" + 
                    "bcircles=Mcyg&" + 
                    "filter=ZeXlLTNEqr7T&" + 
                    "format=vJw_Dp&" + 
                    "keys=q9S9z&" + 
                    "time=vD1nEIvmNMM&" + 
                    "timeout=QtGUFBFm5K")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_99() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/density/groupBy/boundary?" + 
                    "bboxes=RBtB6he&" + 
                    "filter=PZG_W&" + 
                    "types=D2_jhxdr&" + 
                    "values=RUN8BlPaL_UEwOv")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_100() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter?" + 
                    "bboxes=Gz&" + 
                    "bcircles=w8cH&" + 
                    "filter=3YGHUWoyeTyFPaq&" + 
                    "format=HuLv&" + 
                    "showMetadata=W&" + 
                    "time=48Dllq5&" + 
                    "timeout=KpJZ6fvhQlDcr&" + 
                    "values=PtNiIF8_tQ")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_101() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/boundary?" + 
                    "bboxes=gUvg8arFyoeSoJB&" + 
                    "bcircles=4fuKM71PEHSRgiM&" + 
                    "keys=k4x5Q0&" + 
                    "showMetadata=CM&" + 
                    "types=InrwHRXjuh")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_102() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density/groupBy/boundary?" + 
                    "bpolys=5Rvp4&" + 
                    "format=hyl5NKR&" + 
                    "showMetadata=UDfINrF91UXAm&" + 
                    "types=rOIi6a")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_103() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density?" + 
                    "bboxes=Q7&" + 
                    "bpolys=V4LyF&" + 
                    "format=Zs4&" + 
                    "keys=&" + 
                    "showMetadata=E7LibR6TNN_JyMo&" + 
                    "values=iqsTkLEmvY2C8")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_104() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length?" + 
                    "bboxes=UrSIaaotmzs1&" + 
                    "filter=0Xc&" + 
                    "format=yg8JgS&" + 
                    "keys=&" + 
                    "timeout=l9uQu&" + 
                    "types=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_105() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/boundary?" + 
                    "bcircles=&" + 
                    "filter=58Ng&" + 
                    "time=9q86&" + 
                    "values=xM0Q3")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("You need to define one of the boundary parameters (bboxes, bcircles, bpolys)."));
    }
    
    
    @Test
    public void test_106() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/density/groupBy/boundary?" + 
                    "filter=p7I6tpE&" + 
                    "format=CnE4MEl&" + 
                    "time=XGnRNs2e6B&" + 
                    "types=jw3BS7UP")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("You need to define one of the boundary parameters (bboxes, bcircles, bpolys)."));
    }
    
    
    @Test
    public void test_107() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/density?" + 
                    "bpolys=uHNH4&" + 
                    "format=0TyG34zi&" + 
                    "keys=1oZIu3wzIvMo3Pd&" + 
                    "showMetadata=upHlQsHvOWyS7f&" + 
                    "time=pQe0WBOvPbN4OH")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_108() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count?" + 
                    "bboxes=KqJS&" + 
                    "bcircles=MJSCx5I9Jjqwk7Ix&" + 
                    "filter=hi8ajkBjCgEm4lnY&" + 
                    "keys=UVJq9Nji&" + 
                    "showMetadata=qQqKlbRVk&" + 
                    "time=ETKwQetjaC66dFY&" + 
                    "timeout=gABP0cwJa7BW3_&" + 
                    "types=XgokkBvhXV0GU7pB")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_109() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/boundary?" + 
                    "bboxes=Hf&" + 
                    "bcircles=8Mo&" + 
                    "bpolys=&" + 
                    "filter=KujMEj_0Pb&" + 
                    "timeout=MFdYp8S4PEgtmXt&" + 
                    "values=hE5sfPZ")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_110() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density/groupBy/boundary?" + 
                    "bboxes=pHCb7o&" + 
                    "bcircles=RFx3mDQVpjOWTAg8&" + 
                    "bpolys=W9TQW7gTJs_u0I&" + 
                    "filter=NNAYGB2&" + 
                    "keys=2Jtwjj9FAaC3awg&" + 
                    "showMetadata=ON_XKGC0Omb&" + 
                    "timeout=Abdlk")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_111() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density?" + 
                    "bboxes=Ae_VBDjc6cKlRP&" + 
                    "bcircles=R02u2BA&" + 
                    "format=9XXKIMwY_NbDU5fq&" + 
                    "time=tbeddx5jroI5r2QK&" + 
                    "types=qrCG9JMll3W1El&" + 
                    "values=NCEBJrH")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_112() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area?" + 
                    "bcircles=BnArE&" + 
                    "bpolys=tmLDLwZtLs&" + 
                    "filter=V7575_Vez0Cd0&" + 
                    "format=kOvmUY1FKXoL&" + 
                    "keys=ByBojB_od&" + 
                    "time=gKPFs2Cs&" + 
                    "values=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_113() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/density/groupBy/boundary?" + 
                    "bboxes=evomaster_306_input&" + 
                    "bcircles=%C2%80E&" + 
                    "bpolys=EYFon&" + 
                    "filter=9ZJNxN_&" + 
                    "showMetadata=S2xSNuWbUUwD_ug&" + 
                    "time=evomaster_136_input&" + 
                    "values=evomaster_137_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/density/groupBy/boundary?" + 
                    "bboxes=zZDp&" + 
                    "bcircles=evomaster_307_input&" + 
                    "bpolys=vtcX_h0MJQMSahGV&" + 
                    "filter=Jb40dO&" + 
                    "format=cSv&" + 
                    "showMetadata=evsmaster_297_input&" + 
                    "time=evomaster_298_input&" + 
                    "timeout=oppfGbr8hnb&" + 
                    "values=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/density/groupBy/boundary?" + 
                    "bcircles=evomaster_138_input&" + 
                    "bpolys=evomasrer_130_input&" + 
                    "filter=evomaster_299_input&" + 
                    "format=evomaster_300_input&" + 
                    "keys=evomaster_301_input&" + 
                    "showMetadata=ZciV9&" + 
                    "time=evomaster_308_input&" + 
                    "timeout=NDde&" + 
                    "types=evomaster_303_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/density/groupBy/boundary?" + 
                    "bboxes=evomaster_295_input&" + 
                    "bcircles=2&" + 
                    "keys=to6si6kW&" + 
                    "timeout=zee4&" + 
                    "types=zfWNbq&" + 
                    "values=evomaster_305_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/density/groupBy/boundary?" + 
                    "bboxes=evomaster_144_input&" + 
                    "bcircles=rk9yEQO_Jao2Omr7&" + 
                    "bpolys=nn36Tt&" + 
                    "keys=&" + 
                    "showMetadata=S9oKGmnaKZTCnw_&" + 
                    "types=evomaster_309_input&" + 
                    "values=ieVQRf")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/density/groupBy/boundary?" + 
                    "bboxes=sJ_BUeXglwR0&" + 
                    "bcircles=evomaster_87_input&" + 
                    "filter=evomaster_145_input&" + 
                    "keys=Y6TUHkCZHku7RV&" + 
                    "showMetadata=evomaster_310_input&" + 
                    "time=evomaster_311_input&" + 
                    "timeout=rU4PPkiOASwXE_&" + 
                    "types=zTpCE4qROKy6&" + 
                    "values=evomaster_89_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/density/groupBy/boundary?" + 
                    "bboxes=U&" + 
                    "bcircles=evomaster_296_input&" + 
                    "bpolys=evomaster_146_input&" + 
                    "filter=nV2GdplAaPt&" + 
                    "time=iIzZfj&" + 
                    "timeout=0.30908288852722754&" + 
                    "types=evomaster_312_input&" + 
                    "values=evomaster_147_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/density/groupBy/boundary?" + 
                    "bboxes=P4eZDwZB1kCYWXq&" + 
                    "bcircles=evomaster_313_input&" + 
                    "bpolys=6E3akJf&" + 
                    "filter=yQ0zbnnCtut9&" + 
                    "format=_9_CqbU&" + 
                    "keys=YGDVoqQpWw&" + 
                    "showMetadata=_P8hwdwDyzvmCs&" + 
                    "time=evomaster_314_input&" + 
                    "timeout=evomaster_148_input&" + 
                    "types=Xbfs2sSNlNe9&" + 
                    "values=evomaster_149_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_114() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/density/groupBy/boundary?" + 
                    "bcircles=4mXtKZG3Ox1nv7&" + 
                    "bpolys=hOftcLZ&" + 
                    "format=&" + 
                    "keys=WXZao&" + 
                    "showMetadata=KWw62IsJfU&" + 
                    "timeout=zB&" + 
                    "values=mA%2CA1w")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_115() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/density?" + 
                    "bcircles=Pu&" + 
                    "filter=xMnbwG9lmpEmu&" + 
                    "format=s&" + 
                    "showMetadata=CtjzketSSDk&" + 
                    "time=j3__0YWVGW&" + 
                    "types=YzhXJZJoLhPEKZ")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_116() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/groupBy/type?" + 
                    "bboxes=YF22t3K&" + 
                    "bpolys=qNYu6CMs&" + 
                    "filter=J40&" + 
                    "format=iTV99IQrtyZ&" + 
                    "keys=XcA1QsrGYPUKNyL&" + 
                    "timeout=mq_U0&" + 
                    "types=NX0")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_117() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/density?" + 
                    "bcircles=n1tmUYg7tA2k&" + 
                    "bpolys=jUlI2H&" + 
                    "showMetadata=cI04c&" + 
                    "timeout=jHAZbwLsX6j5a&" + 
                    "types=oBZtA62wO2")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_118() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/type?" + 
                    "bcircles=TJVZy&" + 
                    "showMetadata=JnA6EkMvxI9IAbf&" + 
                    "time=f9&" + 
                    "timeout=pAxQ_XAlpaz4T&" + 
                    "values=cTQ0nrjL")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_119() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/boundary?" + 
                    "bcircles=G&" + 
                    "bpolys=REX4PY&" + 
                    "filter=aX3q6&" + 
                    "format=&" + 
                    "keys=ljGrXLuT&" + 
                    "showMetadata=8uo7FYiWSVxLDq&" + 
                    "time=8P7Ty3_sZwQI&" + 
                    "timeout=0dR8Yjrin&" + 
                    "types=QU5R_PStvk&" + 
                    "values=_IQrPSdes")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_120() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/density/groupBy/tag?" + 
                    "bboxes=c%3A&" + 
                    "groupByKey=hdmkHXoUHxkhakUv&" + 
                    "groupByValues=1aPsvO&" + 
                    "keys=T0evvx&" + 
                    "types=evomaster_640_input&" + 
                    "values=cpKHVcu1")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_121() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/tag?" + 
                    "bboxes=mbrGUZWbNCU52LA&" + 
                    "bpolys=TaU_7yKR&" + 
                    "filter=J2HBmoOTu4TwHI&" + 
                    "format=205&" + 
                    "groupByKey=cGXtlndui&" + 
                    "groupByValues=8cwtpawqz4ZdLS&" + 
                    "time=3X4BWxW&" + 
                    "types=fkJQ")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_122() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/key?" + 
                    "bboxes=fp7dQq6GzQ&" + 
                    "bcircles=m4JdYn&" + 
                    "bpolys=mp&" + 
                    "groupByKeys=oZZZki6&" + 
                    "timeout=zgRTVAdSlta4Wb&" + 
                    "types=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_123() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/density/groupBy/boundary?" + 
                    "bcircles=tkfxdZO&" + 
                    "bpolys=cvyndoWss&" + 
                    "filter=uwp3b2KAzs0g9ERu&" + 
                    "format=fiRnwu&" + 
                    "keys=35yFWqg&" + 
                    "showMetadata=Pmhq6SLH2&" + 
                    "time=&" + 
                    "types=cKRC0&" + 
                    "values=r8j2ehWlz3dpw")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_124() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=4ec%3As&" + 
                    "filter=ADV&" + 
                    "groupByKey=6Fk&" + 
                    "groupByValues=T&" + 
                    "keys=D&" + 
                    "types=Xub&" + 
                    "values=bajEdsiERlhd4")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_125() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/boundary/groupBy/tag?" + 
                    "bboxes=83gZQiXpVbbxyv&" + 
                    "format=jtjI9DV7yhAdy8v&" + 
                    "groupByKey=xEaV&" + 
                    "keys=V9&" + 
                    "timeout=a62wlbjzWgnK0ju")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_126() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/key?" + 
                    "bboxes=cV459pB8wcZuVvh8&" + 
                    "bcircles=JUbEqr3OBVGf9&" + 
                    "groupByKeys=u0ZA&" + 
                    "showMetadata=eX&" + 
                    "values=M3SA0EiV7X3")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_127() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/ratio?" + 
                    "filter=OMGv2zz&" + 
                    "keys=Se4_uqDMmLrq4&" + 
                    "keys2=MCJ1aPs43El4Y6&" + 
                    "showMetadata=tvXQyi4Iay5j_&" + 
                    "timeout=9&" + 
                    "values2=R4v")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("You need to define one of the boundary parameters (bboxes, bcircles, bpolys)."));
    }
    
    
    @Test
    public void test_128() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/ratio?" + 
                    "bboxes=3d5wIIYZN2Q0u4&" + 
                    "bcircles=pcW&" + 
                    "filter2=v0ocho_7Dl4xU&" + 
                    "format=IWs7iulUa5JcQ3K&" + 
                    "keys=XcyS9HdVe7X&" + 
                    "time=vt6zKp1OS&" + 
                    "types2=46gKDiPN8q_3&" + 
                    "values2=BK9UG")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_129() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/ratio/groupBy/boundary?" + 
                    "bboxes=KJtjNQ&" + 
                    "bcircles=pI1QOnoQSjep&" + 
                    "bpolys=52bxj2hw5xNTI&" + 
                    "format=d2lWJDO_DAC&" + 
                    "keys=dp&" + 
                    "keys2=yYhgCoacH&" + 
                    "showMetadata=tQGyhLoL0&" + 
                    "timeout=6D9ghv&" + 
                    "types2=2rvi7AXugmB&" + 
                    "values2=bTdlPyoc57O7L9k")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_130() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/boundary?" + 
                    "bboxes=sUwLaMrTORct&" + 
                    "filter=OqG4uJoZUuv&" + 
                    "format=WMx&" + 
                    "keys=4dFtGeEO9TM&" + 
                    "showMetadata=vu&" + 
                    "time=11bV4Po8NqpuYN&" + 
                    "types=38F3xAK")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_131() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/type?" + 
                    "bboxes=evomas%7Cer_50_input&" + 
                    "format=a&" + 
                    "keys=evomaster_412_input&" + 
                    "time=evomaster_410_input&" + 
                    "types=0iDNEI4uvolBI")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Apart from the custom ids, the bboxeses array must contain double-parseable values in the following order: minLon, minLat, maxLon, maxLat."));
    }
    
    
    @Test
    public void test_132() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/density/groupBy/boundary?" + 
                    "bcircles=r4zKbhrG7M3K&" + 
                    "format=BdnEG&" + 
                    "keys=0nu_&" + 
                    "types=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_133() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/tag?" + 
                    "bboxes=AtwwokQ_8s1JO&" + 
                    "bcircles=gq4rJcWPprqFyT&" + 
                    "filter=l1oMerROu7GDoWg&" + 
                    "format=vWIYVaS&" + 
                    "groupByKey=ONxz&" + 
                    "groupByValues=e9&" + 
                    "keys=CBsa0qx4kh7&" + 
                    "values=2Fk6Mdhjr")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_134() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/ratio/groupBy/boundary?" + 
                    "bpolys=RvfOWBC&" + 
                    "filter=Qi&" + 
                    "filter2=&" + 
                    "format=MT4HTnDqGiH5&" + 
                    "keys2=se4kQRs&" + 
                    "showMetadata=UR2PupWQP&" + 
                    "time=lqB&" + 
                    "types=BTbH4&" + 
                    "values=tJDkeZlv9D2BhqTH")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_135() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/ratio/groupBy/boundary?" + 
                    "bcircles=H0geb_&" + 
                    "bpolys=OdeQ_uDSdnyJ0&" + 
                    "filter=tTfOhS942pQc8KQE&" + 
                    "filter2=&" + 
                    "format=_4ksvGyynv4nXGy&" + 
                    "keys=izej&" + 
                    "keys2=WhkcmXjb&" + 
                    "showMetadata=Z0i6SwWpg&" + 
                    "time=m76B9q8Y5sFMF&" + 
                    "timeout=v9B5Q_LiExkbH&" + 
                    "types=sCCwLlwYz0uLsN&" + 
                    "values=OsfnRgbsilf_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_136() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/type?" + 
                    "bboxes=vsz&" + 
                    "bcircles=&" + 
                    "filter=&" + 
                    "format=e&" + 
                    "keys=ZUZI6tO&" + 
                    "showMetadata=wQYBmkQ__&" + 
                    "time=jobngosCUiscD&" + 
                    "values=H1f8Q41h5w4LSF")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }


}
