package old;

import org.heigit.ohsome.ohsomeapi.EMDriver;
import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.controller.api.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import static org.evomaster.client.java.controller.db.dsl.SqlDsl.sql;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto;
import  java.util.List;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
 * This file was automatically generated by EvoMaster on 2020-11-23T04:45:22.480+01:00[Europe/Paris]
 * <br>
 * The generated test suite contains 295 tests
 * <br>
 * Covered targets: 2436
 * <br>
 * Used time: 24h 0m 0s
 * <br>
 * Needed budget for current results: 96%
 * <br>
 * 
 */
public class EvoMasterTest_24h {

    
    private static final SutHandler controller = new EMDriver();
    private static String baseUrlOfSut;
    
    
    @BeforeClass
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    @AfterClass
    public static void tearDown() {
        controller.stopSut();
    }
    
    
    @Before
    public void initTest() {
        controller.resetStateOfSUT();
    }
    
    
    
    
    @Test
    public void test_0_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/type?" + 
                    "bboxes=%2C&" + 
                    "filter=&" + 
                    "keys=399xK_MPDF&" + 
                    "showMetadata=1T2FBfs&" + 
                    "time=evomaster_1591499_input&" + 
                    "types=evqmaster_1593407_input&" + 
                    "values=cd47vWR8RJU6")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_63_createBboxes
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Index 0 out of bounds for length 0"))
                .body("'path'", containsString("/elements/perimeter/groupBy/type"));
    }
    
    
    @Test
    public void test_1_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter?" + 
                    "bboxes=%2C&" + 
                    "filter=wzUftRa4KrzaG&" + 
                    "keys=0&" + 
                    "types=hF7o7lIr&" + 
                    "values=3nEQYIp3TaY")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_63_createBboxes
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/elements/perimeter"));
    }
    
    
    @Test
    public void test_2_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/tag?" + 
                    "bboxes=%2C&" + 
                    "filter=evomaster_1988101_input&" + 
                    "format=W6omY&" + 
                    "groupByKey=y&" + 
                    "groupByValues=evomaster_1987888_input&" + 
                    "time=evomaster_14705_inlut&" + 
                    "timeout=1.0&" + 
                    "values=sJlEMoLmETJ7")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_63_createBboxes
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/elements/length/groupBy/tag"));
    }
    
    
    @Test
    public void test_3_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/boundary?" + 
                    "bpolys=%2C&" + 
                    "keys=%5D&" + 
                    "showMetadata=dpi%5B3BT%7EwKVxoA&" + 
                    "values=%3E_DAo")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_156_createBpolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/elements/area/groupBy/boundary"));
    }
    
    
    @Test
    public void test_4_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/tag?" + 
                    "bpolys=qjwP%3E%3A919.0.%2C268&" + 
                    "format=DWvoHhJh1MK0x1Dp&" + 
                    "groupByKey=evomaqter_693%2F44_jnpup&" + 
                    "groupByValues=Y8ExVr6_XjQh%7CHI_&" + 
                    "keys=evomasteq%60692901_ijpu&" + 
                    "showMetadata=euomasudr%5E692798_input&" + 
                    "time=aZNHmWB&" + 
                    "timeout=-2257702.0")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_161_createBpolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/area/groupBy/tag"));
    }
    
    
    @Test
    public void test_5_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/type?" + 
                    "bpolys=%2C&" + 
                    "filter=bZoirs3Of6v&" + 
                    "format=cSv&" + 
                    "showMetadata=evomaster_1599172_input&" + 
                    "timeout=0.5219433662803576&" + 
                    "types=evomaster_1593407_inpur&" + 
                    "values=MaS6smRXszC")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_156_createBpolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Index 0 out of bounds for length 0"))
                .body("'path'", containsString("/elements/perimeter/groupBy/type"));
    }
    
    
    @Test
    public void test_6_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/tag?" + 
                    "bcircles=ojvLC7%3A-9..%2C%2C2&" + 
                    "filter=&" + 
                    "format=GeojSOn&" + 
                    "groupByKey=evombster_2041066_iopst&" + 
                    "groupByValues=%5B8ExRr6_%5CgQj%7DJM&" + 
                    "time=Qs2%7D1%2F&" + 
                    "timeout=-2257228.0528844856")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_114_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/area/groupBy/tag"));
    }
    
    
    @Test
    public void test_7_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/tag?" + 
                    "bboxes=%2C&" + 
                    "filter=_uog%5D%7Dtes_6.5853%3Adfn&" + 
                    "format=AppliCaTiON&" + 
                    "groupByKey=cuoiawter_2043538cinput&" + 
                    "groupByValues=ernk%5Bzwcn%5C%2F%2C975M&" + 
                    "keys=ph%7Cifw%7BoapL%3C2%27wj&" + 
                    "showMetadata=FaLsE&" + 
                    "timeout=-2254683.3996799476")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_63_createBboxes
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/elements/area/groupBy/tag"));
    }
    
    
    @Test
    public void test_8_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/tag?" + 
                    "bpolys=mjwP%3E%3A919.02%2C268&" + 
                    "filter=gwomaster_692830_input&" + 
                    "format=csv&" + 
                    "groupByKey=evomaster_692987_input&" + 
                    "keys=evomaster_692901_input&" + 
                    "showMetadata=evomaster_692998_input&" + 
                    "time=qfo%40%7EBxvij&" + 
                    "timeout=-2257701.5422571283&" + 
                    "types=%40p&" + 
                    "values=ev%7Fmasder_692846cinput")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_166_createBpolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Invalid number of points in LineString (found 1 - must be 0 or >= 2)"))
                .body("'path'", containsString("/elements/area/groupBy/tag"));
    }
    
    
    @Test
    public void test_9_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/tag?" + 
                    "bboxes=78%7C0X2P9&" + 
                    "bpolys=&" + 
                    "filter=lh6&" + 
                    "format=cSV&" + 
                    "groupByKey=evomaster_1164210_input&" + 
                    "showMetadata=7kIEcUoBvF61dj&" + 
                    "time=_&" + 
                    "timeout=&" + 
                    "types=dv1Oqpcf6Kw4&" + 
                    "values=68%7C4%5B2%609")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_65_createBboxes
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Index 2 out of bounds for length 2"))
                .body("'path'", containsString("/elements/area/groupBy/tag"));
    }
    
    
    @Test
    public void test_10_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/tag?" + 
                    "bpolys=mjwP%3E%3A919.02%2C268&" + 
                    "filter=gwomaster_692830_input&" + 
                    "format=csv&" + 
                    "groupByKey=evomaster_692987_input&" + 
                    "showMetadata=evomaster_692F61_qnput&" + 
                    "time=qfo%40%7EBxvij&" + 
                    "types=Dp&" + 
                    "values=evomasder_692846cinput")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_166_createBpolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Invalid number of points in LineString (found 1 - must be 0 or >= 2)"))
                .body("'path'", containsString("/elements/area/groupBy/tag"));
    }
    
    
    @Test
    public void test_11() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/tag?" + 
                    "bcircles=mjsP%3F9%3A19.%2C0%2C26&" + 
                    "groupByKey=evomautet_793144ajn&" + 
                    "groupByValues=Y8ExVr6%5BXjQh%7CHI_&" + 
                    "keys=evoicssfq_692901%60ijpu&" + 
                    "values=Zp8%C2%8105")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_12() throws Exception {
        
        given().accept("text/csv")
                .get(baseUrlOfSut + "/elements/area/groupBy/tag?" + 
                    "bcircles=mdsP%3F9%3A09.%2C0%2C26&" + 
                    "format=cSv&" + 
                    "groupByKey=evomautet_793144ajn&" + 
                    "groupByValues=Y8ExRr6%5BXjQh%7CHI_&" + 
                    "keys=evoicssfq_692901%60ijpu&" + 
                    "values=Zp8%C2%8105")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_13() throws Exception {
        
        given().accept("text/csv")
                .get(baseUrlOfSut + "/elements/area/groupBy/tag?" + 
                    "bcircles=mhyOC9%3A15.%2C1%2C25&" + 
                    "format=cSv&" + 
                    "groupByKey=euomastet_2.26869_inpu&" + 
                    "groupByValues=V&" + 
                    "keys=mlwP%3E%3A919.00%2C268&" + 
                    "time=%2F&" + 
                    "values=Zt5%7B8")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_14() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/tag?" + 
                    "bcircles=mjsP%3F9%3A19.%2C0%2C26&" + 
                    "groupByKey=evomautet_793144ajn&" + 
                    "groupByValues=Y8ExVr6%5BXjQh%7CHI_&" + 
                    "keys=evoicssfq_692901%60ijpu&" + 
                    "values=Zp8%C2%8105")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_15() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/tag?" + 
                    "bcircles=mjuP%3FA%3A-9.%2C0%2C26F&" + 
                    "groupByKey=bulk_purchase&" + 
                    "groupByValues=W8FxWr6_%5ChQh%C2%80GKI&" + 
                    "keys=evomaoter_.%2C28585_input&" + 
                    "types=polyGON&" + 
                    "values=")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_16() throws Exception {
        
        given().accept("text/csv")
                .get(baseUrlOfSut + "/elements/area/groupBy/tag?" + 
                    "bcircles=mjyOC9%3A15.%2C1%2C25&" + 
                    "format=cSv&" + 
                    "groupByKey=evomaster_2027889_inpu&" + 
                    "keys=evpicssfq_692%3B01_jeq&" + 
                    "types=oTher")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_17() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/tag?" + 
                    "bcircles=mjuP%3FA%3A-9.%2C0%2C26F&" + 
                    "groupByKey=bulk_purchase&" + 
                    "groupByValues=W8FxWr6_%5ChQh%C2%80GKI&" + 
                    "keys=evomaoter_.%2C28585_input&" + 
                    "values=")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_18() throws Exception {
        
        given().accept("text/csv")
                .get(baseUrlOfSut + "/elements/area/groupBy/tag?" + 
                    "bcircles=ef%7BN%3E%3C%3A34.%2C4%2C4&" + 
                    "format=Csv&" + 
                    "groupByKey=FALSE&" + 
                    "groupByValues=evomaster_2040826_inlut&" + 
                    "keys=COLLATIONS&" + 
                    "showMetadata=&" + 
                    "time=&" + 
                    "types=poiNT&" + 
                    "values=")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_19() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/tag?" + 
                    "bcircles=mhyOE9%3A15.%2C1%2C25&" + 
                    "groupByKey=euomastet_2.26869_ilpu&" + 
                    "groupByValues=T&" + 
                    "keys=mlwP%3E%3A919.00%2C468&" + 
                    "time=&" + 
                    "types=nOdE&" + 
                    "values=Zt5%7B8")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_20() throws Exception {
        
        given().accept("text/csv")
                .get(baseUrlOfSut + "/elements/area/groupBy/tag?" + 
                    "bcircles=mjsP%3F9%3A19.%2C0%2C26&" + 
                    "format=cSv&" + 
                    "groupByKey=evomautet_793144ajn&" + 
                    "groupByValues=Y8ExRr6%5BXjQh%7CHI_&" + 
                    "keys=evoicssfq_692901%60ijpu&" + 
                    "values=Zp8%C2%8105")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_21() throws Exception {
        
        given().accept("text/csv")
                .get(baseUrlOfSut + "/elements/area/groupBy/tag?" + 
                    "bboxes=&" + 
                    "bcircles=mkzRD5%3A15.%2C8%2C46&" + 
                    "format=CSV&" + 
                    "groupByKey=evomaster_2026981_inrut&" + 
                    "keys=ezpicssfq_692901_gjp&" + 
                    "values=Yw6%C2%837-9n")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_22() throws Exception {
        
        given().accept("text/csv")
                .get(baseUrlOfSut + "/elements/area/groupBy/tag?" + 
                    "bcircles=mi%7BRD%3C%3A-5.%2C8%2C267&" + 
                    "format=csv&" + 
                    "groupByKey=trUe&" + 
                    "showMetadata=TRuE")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_23() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/tag?" + 
                    "bcircles=mjsP%3F9%3A19.%2C0%2C26&" + 
                    "groupByKey=evomautet_793144ajn&" + 
                    "groupByValues=Y8ExVr6%5BXjQh%7CHI_&" + 
                    "keys=evoicssfq_692901%60ijpu")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_24() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/tag?" + 
                    "bcircles=mi%7BRD%3D%3A150%2C8%2C26&" + 
                    "groupByKey=oRVctEZ_Rl_CVSlX&" + 
                    "keys=ezpibssfp_692%3B21_ih&" + 
                    "showMetadata=truE&" + 
                    "types=WAY&" + 
                    "values=Ws4%7F6.5")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(40.0))
                .body("'metadata'.'description'", containsString("Total area of items in square meters, aggregated on the tag."))
                .body("'groupByResult'", hasItems());
    }
    
    
    @Test
    public void test_25() throws Exception {
        
        given().accept("text/csv")
                .get(baseUrlOfSut + "/elements/area/groupBy/tag?" + 
                    "bcircles=mjsP%3F9%3A19.%2C0%2C26&" + 
                    "format=cSv&" + 
                    "groupByKey=evomautet_793144ajn&" + 
                    "groupByValues=Y8ExVr6%5BXjQh%7CHI_&" + 
                    "keys=evoicssfq_692901%60ijpu")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_26() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/groupBy/tag?" + 
                    "bcircles=fsUyXW2C&" + 
                    "filter=SY&" + 
                    "format=hRy7i&" + 
                    "groupByKey=&" + 
                    "keys=&" + 
                    "showMetadata=&" + 
                    "values=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_27() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/groupBy/boundary?" + 
                    "bcircles=evomaster_69473_input&" + 
                    "filter=PXnMWD0EpzL&" + 
                    "format=UGPreV&" + 
                    "keys=evomaster_8272_input&" + 
                    "showMetadata=evomaster_3448_input&" + 
                    "types=cMBJVHzusq5h3e_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_28() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/density/groupBy/type?" + 
                    "bcircles=evomastir_448%7Finput&" + 
                    "format=evomaster_61040_input&" + 
                    "keys=llyLhaQ&" + 
                    "showMetadata=Zb1hGGZKy4&" + 
                    "time=evomaster_11472_inpu&" + 
                    "timeout=0.5142999282343164&" + 
                    "types=637FnSu_k3vTB&" + 
                    "values=evomaster_11474_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_29() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/density/groupBy/tag?" + 
                    "bcircles=o5eC2aXVcIUl&" + 
                    "groupByKey=evomaster_30568_input&" + 
                    "groupByValues=iBTALR34DfTESte&" + 
                    "showMetadata=M9i0P&" + 
                    "time=7fwhlF1rrmS3bn&" + 
                    "timeout=8&" + 
                    "values=KCl987Wvvc")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_30() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/density/groupBy/boundary?" + 
                    "bcircles=pNCHnbZPzDX7SbKX&" + 
                    "filter=LI&" + 
                    "format=utU&" + 
                    "time=J9OeP8_C3fu4WF&" + 
                    "timeout=&" + 
                    "values=B9fvG5x0Gilcw")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_31() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/density/groupBy/boundary?" + 
                    "bcircles=evomaster_565_input&" + 
                    "format=evomaster_48023_input&" + 
                    "keys=kLVc1nC&" + 
                    "showMetadata=asR&" + 
                    "time=0BK_MctSYJD&" + 
                    "types=2wSn8W&" + 
                    "values=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_32() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/density?" + 
                    "bcircles=z1PwcBgsO1VGl7DM&" + 
                    "filter=wPAE9B%5Dx&" + 
                    "time=evomaster_103_input&" + 
                    "types=FZDp&" + 
                    "values=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_33() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count?" + 
                    "bcircles=KspCr97ZVwJLs&" + 
                    "keys=veyZY5Nf1o&" + 
                    "time=&" + 
                    "types=E")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_34() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count?" + 
                    "bcircles=j8mnwIzhg&" + 
                    "filter=Z6a6FbCZd&" + 
                    "format=9M9n6CwWhum8iDL&" + 
                    "showMetadata=GZ4To7Bt40wOjB&" + 
                    "time=WyM19VAC_cdjHh&" + 
                    "timeout=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_35() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/groupBy/type?" + 
                    "bcircles=nK&" + 
                    "filter=jSTBYvm45P&" + 
                    "keys=evomaster_1580_input&" + 
                    "showMetadata=wXzh585BrO&" + 
                    "time=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_36() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/groupBy/key?" + 
                    "bcircles=v27aXGlz0k1wQQ&" + 
                    "filter=6NIMiNYGa970AR1&" + 
                    "format=GMYun0Eq1&" + 
                    "groupByKeys=evomaster_56625_input&" + 
                    "keys=5qOEzNu1wx4YgK&" + 
                    "time=dBN5&" + 
                    "types=mjyIxOLjdHYa&" + 
                    "values=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_37() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=9VTLoMkRteG8&" + 
                    "groupByKey=MRO8Mg&" + 
                    "groupByValues=3ooAKX3f6&" + 
                    "keys=DK42Ei&" + 
                    "showMetadata=mS5O4nWcJ8C9KQf&" + 
                    "time=ChwjKgp&" + 
                    "types=K")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_38() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/groupBy/boundary?" + 
                    "bboxes=ecC915Q82D&" + 
                    "filter=q7P4SHJ_KnSw3&" + 
                    "format=evomaster_46567_input&" + 
                    "showMetadata=evomaster_1353_input&" + 
                    "time=evomaster_%2F354_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_39() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/density/groupBy/type?" + 
                    "bcircles=VEvl1&" + 
                    "filter=evomaster_6188_input&" + 
                    "keys=QHjY&" + 
                    "showMetadata=WVmwVKe_8vc1&" + 
                    "time=kyJWUX0nnhajk02&" + 
                    "values=vukY1kA41K7VfVBk")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_40() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/density/groupBy/type?" + 
                    "bcircles=evomaster_17121_input&" + 
                    "filter=g52pvmgbUGl&" + 
                    "format=evomaster_17122_input&" + 
                    "time=evomaster_17123_input&" + 
                    "values=Jf")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_41() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/density/groupBy/tag?" + 
                    "bcircles=IHVma&" + 
                    "filter=INBTVqoTS&" + 
                    "format=XDsA&" + 
                    "groupByKey=uPi2DhoHkGp&" + 
                    "time=BUMHu2kLXrS7&" + 
                    "types=bLd9XCL&" + 
                    "values=7")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_42() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/density/groupBy/tag?" + 
                    "bcircles=N7y7NDB22GKXos&" + 
                    "groupByKey=PtWOLdE&" + 
                    "groupByValues=YkWga&" + 
                    "showMetadata=j&" + 
                    "time=rpYTq_kBRegNy1g")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_43() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/density/groupBy/boundary/groupBy/tag?" + 
                    "bboxes=pN9BhbtM5&" + 
                    "bcircles=&" + 
                    "filter=1HYUqY&" + 
                    "format=&" + 
                    "groupByKey=rg8C&" + 
                    "keys=S9hRgZ&" + 
                    "time=rqzqfxCztfHt8tCm&" + 
                    "types=lyKQlNeMlQgBNY7J")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_44() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/density/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=C6q6dDhQnRuiZfq&" + 
                    "filter=fXWH9zf_Tc&" + 
                    "groupByKey=mMu&" + 
                    "keys=F3YAg7Z9&" + 
                    "showMetadata=is&" + 
                    "time=pr9QNw")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_45() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/density/groupBy/boundary?" + 
                    "bcircles=VX3cMczF2BJx&" + 
                    "format=270XoD0LV9Ky21Y&" + 
                    "keys=_9zF8x7v&" + 
                    "showMetadata=8XhSb&" + 
                    "time=J02jrU61v&" + 
                    "values=CbwW6Bbu87OrcoD")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_46() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/density?" + 
                    "bcircles=evomaster_78116_input&" + 
                    "format=5Lk7zMHl_&" + 
                    "keys=dewTN&" + 
                    "showMetadata=lBEiQDh&" + 
                    "time=2LHY2lPc6&" + 
                    "types=evomaster_78117_input&" + 
                    "values=Q_iTtoliVbGrWB")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_47() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter?" + 
                    "bcircles=iF&" + 
                    "format=W3YBDQvTr2Fk&" + 
                    "time=Xh&" + 
                    "timeout=0.3496867890221058&" + 
                    "types=evomaster_3264_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_48() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/ratio/groupBy/boundary?" + 
                    "bcircles=evomaster_5399_input&" + 
                    "format=evomaster_-400_input&" + 
                    "keys=evomaster_69098_input&" + 
                    "keys2=8G70&" + 
                    "showMetadata=jW5m_KTA&" + 
                    "time=evomaster_2005_input&" + 
                    "timeout=0.5514109823176274&" + 
                    "types=JkVZYtTWfMuNpCq&" + 
                    "types2=Ka0x625w8&" + 
                    "values=evomaster_69099_input&" + 
                    "values2=evomaster_69100_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_49() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/ratio?" + 
                    "bboxes=6SoofhET60L&" + 
                    "format=evomaster_80655_input&" + 
                    "keys=uF8Lr5bgZU&" + 
                    "showMetadata=Jf5ZQ&" + 
                    "time=atB6md&" + 
                    "types=BNGmvA844G4rDlt&" + 
                    "types2=G_L7rUWRV&" + 
                    "values=evomaster_16678_input&" + 
                    "values2=LaKBGD")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_50() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/ratio?" + 
                    "bcircles=evomaster_3697_input&" + 
                    "keys2=Z&" + 
                    "showMetadata=evomaster_1770_input&" + 
                    "time=DnILwL8wm60x2&" + 
                    "timeout=0.11918312708194334&" + 
                    "types=evomasteb_41614_input&" + 
                    "types2=evomaster_42061_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_51() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/type?" + 
                    "bcircles=8jlf_adqgEmq30JL&" + 
                    "filter=B8RT38sPX&" + 
                    "time=MWDeU4h&" + 
                    "values=8SnY_qTdV0427")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_52() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/groupBy/type?" + 
                    "bcircles=C6QwVYuSqHbS&" + 
                    "filter=evomaster_69038_input&" + 
                    "format=0HHTeaNSdmARH5d&" + 
                    "keys=YLrg1WWA&" + 
                    "showMetadata=evomaster_65189_input&" + 
                    "time=evomaster_65190_input&" + 
                    "types=zlFm9I_Tt74cu")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_53() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/tag?" + 
                    "bboxes=evomaster_26548_input&" + 
                    "filter=Bh2CL&" + 
                    "format=evomaster_26549_input&" + 
                    "groupByKey=X&" + 
                    "groupByValues=6eXFpk&" + 
                    "keys=kKfkMl&" + 
                    "showMetadata=evomaster_26550_input&" + 
                    "time=CDo_cNuXX")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_54() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/groupBy/tag?" + 
                    "bboxes=evomaster_58218_input&" + 
                    "groupByKey=UvpUQsUeU_18UUUioUut&" + 
                    "groupByValues=evomaster_1860_input&" + 
                    "keys=l&" + 
                    "showMetadata=7L&" + 
                    "time=SMfEBoUWl6&" + 
                    "timeout=0.038069649701218844&" + 
                    "types=evomaster_1857_input&" + 
                    "values=ATz")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_55() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/key?" + 
                    "bcircles=CRzy9c&" + 
                    "format=okLDDQIg2QojelGa&" + 
                    "groupByKeys=CwcgI6&" + 
                    "time=a9bcubWoFeIbX3&" + 
                    "values=cxSvC")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_56() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/groupBy/key?" + 
                    "bcircles=evomaster_58226_input&" + 
                    "filter=bjVi3N9o&" + 
                    "format=evomaster_58227_input&" + 
                    "groupByKeys=OX&" + 
                    "keys=&" + 
                    "showMetadata=R1i3KqXOwdSdA&" + 
                    "time=&" + 
                    "types=evomaster_58228_input&" + 
                    "values=IZizR")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_57() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=oyOB0kPBLD5vA&" + 
                    "filter=ZR2UZxRBTeCQe&" + 
                    "groupByKey=LFND&" + 
                    "keys=&" + 
                    "showMetadata=DUSGIWx0SFeE&" + 
                    "time=qEH7bm8")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_58() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/groupBy/boundary/groupBy/tag?" + 
                    "bboxes=evomaster_27734_input&" + 
                    "filter=Y60&" + 
                    "format=evomaster_2579_input&" + 
                    "groupByKey=evomaster_70196_input&" + 
                    "groupByValues=&" + 
                    "keys=Wr_daX0xqAcM1Rah&" + 
                    "time=evomaster_70197_input&" + 
                    "timeout=0.32397386732993416&" + 
                    "types=Rb1HcNlgeiNiVv3S&" + 
                    "values=gpMijBvzi")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_59() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/groupBy/boundary?" + 
                    "bboxes=fJcUChim3QLW&" + 
                    "keys=u&" + 
                    "showMetadata=evomaster_3852_input&" + 
                    "time=laHuK&" + 
                    "timeout=&" + 
                    "values=UPve47VsFtGFy")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_60() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/density/groupBy/type?" + 
                    "bboxes=evomaster_51790_input&" + 
                    "bcircles=&" + 
                    "format=LA29oM_eth%60&" + 
                    "time=iZS0w&" + 
                    "types=WYkBFVF&" + 
                    "values=evomaster_3876_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_61() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density/groupBy/tag?" + 
                    "bcircles=5&" + 
                    "groupByKey=qihRa50WvF&" + 
                    "groupByValues=ZrmpRg45&" + 
                    "time=IInHEQfHdktNu&" + 
                    "types=fktfFmBfGygE2i1K&" + 
                    "values=KZDGVlD2O7A")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_62() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/density/groupBy/tag?" + 
                    "bboxes=jw&" + 
                    "filter=m1rhMpKlhoLTbukt&" + 
                    "format=&" + 
                    "groupByKey=evomaster_21680_input&" + 
                    "showMetadata=srxEqL&" + 
                    "time=9od6arFsK0L&" + 
                    "types=evomaster_21681_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_63() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=c0dqqNmM2zxTj&" + 
                    "format=&" + 
                    "groupByKey=c&" + 
                    "keys=Jcp6e1f&" + 
                    "showMetadata=GuYVNnW8HygHzjB5&" + 
                    "time=VXUimzx_UWBE&" + 
                    "types=btuYREsJDzAXyP&" + 
                    "values=evomaster_37966_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_64() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/density/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=g9Gq58jsSREWSsu&" + 
                    "filter=vXam_9QYSA2ca&" + 
                    "groupByKey=3i1YPMQY&" + 
                    "groupByValues=iuR6EhFkt6EpzHiT&" + 
                    "keys=AJXe81nUndK4&" + 
                    "showMetadata=FSMA&" + 
                    "time=evomaster_75766_input&" + 
                    "timeout=0.2574601619278989&" + 
                    "values=wk")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_65() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/density/groupBy/boundary?" + 
                    "bcircles=L_3xA&" + 
                    "filter=evomaster_20699_input&" + 
                    "format=ajgBJHQClU&" + 
                    "keys=j2x&" + 
                    "showMetadata=B3WreFEsl0pAXq&" + 
                    "time=m1PNdFjO&" + 
                    "values=evomaster_20700_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_66() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/density?" + 
                    "bcircles=g1eeCa99K35d&" + 
                    "keys=YVq__7&" + 
                    "showMetadata=a7QCUayx&" + 
                    "time=v1OeebFnMbAs4u&" + 
                    "types=qg0JNAdUMYS&" + 
                    "values=y9WXs")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_67() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length?" + 
                    "bcircles=evomaster_45777_input&" + 
                    "filter=evomaster_45778_input&" + 
                    "format=3tmz&" + 
                    "keys=fJYbplk7zJkGVpSJ&" + 
                    "showMetadata=fZfDB3br8qH&" + 
                    "time=8K8&" + 
                    "types=wtrzwA2o")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_68() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/ratio/groupBy/boundary?" + 
                    "bcircles=evomaster_6816_input&" + 
                    "filter2=evomaster_35541_input&" + 
                    "keys2=evomaster_35542_input&" + 
                    "showMetadata=SSqTmQ8VXfWkmO&" + 
                    "types=evomaster_6818_input&" + 
                    "values=R1UfgvboUzvg&" + 
                    "values2=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_69() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/ratio/groupBy/boundary?" + 
                    "bcircles=3QBOjRGd8Jo7n&" + 
                    "filter2=B6mdJSvQLKa&" + 
                    "format=evomaster_24186_input&" + 
                    "keys=kMGrF6&" + 
                    "showMetadata=hiC9N&" + 
                    "types2=evomaster_2444_input&" + 
                    "values=hg&" + 
                    "values2=oLg8V9SrSwb")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_70() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/ratio?" + 
                    "bboxes=evomaster_39073_input&" + 
                    "format=6D&" + 
                    "keys=iRFhGIfcB48&" + 
                    "keys2=pvdw&" + 
                    "time=evomaster_11199_input&" + 
                    "types=LXsioNodoF6297_&" + 
                    "types2=&" + 
                    "values=ftekcEC&" + 
                    "values2=VYyoabRt0toh")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_71() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/ratio?" + 
                    "bcircles=xxfXNqHg2&" + 
                    "filter=mbqjp&" + 
                    "filter2=hAi0jvD&" + 
                    "format=jZoy82czB&" + 
                    "keys=2hSlGgekdh4D7_&" + 
                    "showMetadata=QWSm2791X&" + 
                    "time=R7Ti&" + 
                    "types=evomaster_4569_input&" + 
                    "types2=evomaster_61986_input&" + 
                    "values=_fNrQ8cMvi1Oy&" + 
                    "values2=evomaster_61987_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_72() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/type?" + 
                    "bboxes=9dvlkqDDV&" + 
                    "bcircles=&" + 
                    "filter=&" + 
                    "showMetadata=evomaster_36577_input&" + 
                    "time=evomaster_36578_input&" + 
                    "types=evomaster_5061_input&" + 
                    "values=jD9uUoM6LmqoK")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_73() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/tag?" + 
                    "bcircles=QrNtvZ9NY&" + 
                    "filter=vSUy&" + 
                    "format=fEyEqtRuIjiX&" + 
                    "groupByKey=C&" + 
                    "time=kGiPRHfETM&" + 
                    "types=&" + 
                    "values=a")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_74() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/groupBy/tag?" + 
                    "bcircles=DVr&" + 
                    "filter=evomaster_37585_input&" + 
                    "format=&" + 
                    "groupByKey=evomaster_37586_input&" + 
                    "groupByValues=nF4YXnr4sf3DhVJ&" + 
                    "keys=iiwhC8kecnFog&" + 
                    "time=evomaster_37587_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_75() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/key?" + 
                    "bcircles=evomaster_10573_input&" + 
                    "format=u1ltXEvvvUgw&" + 
                    "groupByKeys=evomaster_10574_input&" + 
                    "showMetadata=gD&" + 
                    "time=dJgsIW2FKmz7rtr2&" + 
                    "types=qgT4o6ZFhNtWgnlL&" + 
                    "values=YcKJyRtvQMQE")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_76() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/groupBy/key?" + 
                    "bboxes=evomaster_69787_input&" + 
                    "filter=Cqj2x&" + 
                    "format=Of9c4Knk&" + 
                    "groupByKeys=evomaster_19260_input&" + 
                    "keys=evomaster_69788_input&" + 
                    "showMetadata=evomaster_19261_input&" + 
                    "time=ff9Os5&" + 
                    "timeout=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_77() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=evomaster_3976_input&" + 
                    "groupByKey=evomaster_21273_input&" + 
                    "groupByValues=evomaster_13821_input&" + 
                    "showMetadata=evomaster_3979_input&" + 
                    "types=evomaster_21274_input&" + 
                    "values=evomaster_96_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_78() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/groupBy/boundary?" + 
                    "bboxes=evomaster_29787_input&" + 
                    "format=9YWh9Mkdd&" + 
                    "keys=recoG&" + 
                    "showMetadata=25hyO3_bbarYBFKT&" + 
                    "time=yXlo&" + 
                    "types=evomaster_64791_input&" + 
                    "values=nUw2p0gyxdX_IG")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_79() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/density/groupBy/type?" + 
                    "bcircles=OVO8TkZiRWXdG&" + 
                    "keys=s7WD&" + 
                    "time=fqca0k")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_80() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/density/groupBy/tag?" + 
                    "bpolys=AUoA_E%3AGt2O&" + 
                    "filter=Ruc95m&" + 
                    "format=evomaster_150312_input&" + 
                    "groupByKey=evomaster_149759_inlut&" + 
                    "groupByValues=evomaster_149608_input&" + 
                    "keys=evomaster_149760_input&" + 
                    "showMetadata=7Gq5RZksI2x&" + 
                    "time=evomaster_149609_input&" + 
                    "types=g_uo&" + 
                    "values=ooFHtHA")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_81() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/density/groupBy/tag?" + 
                    "bboxes=OqAyV9Vqf&" + 
                    "filter=u_F3wvZqm5&" + 
                    "format=m9xBQ_NJs8xCFFB&" + 
                    "groupByKey=evomaster_7444_input&" + 
                    "keys=evomaster_7445_input&" + 
                    "showMetadata=evomaster_6927_input&" + 
                    "time=evomaster_6928_input&" + 
                    "types=XFqAEbsmF3bg&" + 
                    "values=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_82() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/density/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=zG1op1jHO&" + 
                    "filter=fBag6HAokglov7Q&" + 
                    "format=JmdV5puN8uueGt_&" + 
                    "groupByKey=evomaster_58333_input&" + 
                    "groupByValues=Xj&" + 
                    "keys=B5IraTB&" + 
                    "showMetadata=N&" + 
                    "time=ajnD9R&" + 
                    "types=yfWr6IMpIEAT1Q&" + 
                    "values=W6rH_koNRx")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_83() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/density/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=VKb2wtqt8CB6B&" + 
                    "format=ije&" + 
                    "groupByKey=&" + 
                    "groupByValues=AIr2egNSzuB2&" + 
                    "keys=AeT&" + 
                    "showMetadata=fkm8ZV6ZcKv0eKoM&" + 
                    "time=BiQ4Bi4jHeyTk&" + 
                    "values=ZwYLTaBZg3seYT")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_84() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/density/groupBy/boundary?" + 
                    "bboxes=d8GJmUCrUtR&" + 
                    "filter=evomaster_28377_input&" + 
                    "format=evomaster_16324_input&" + 
                    "keys=&" + 
                    "showMetadata=evomaster_28378_input&" + 
                    "time=5i0g06f3&" + 
                    "types=evomaster_28379_input&" + 
                    "values=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_85() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/density?" + 
                    "bcircles=T3oL_hGK&" + 
                    "filter=P6gT1COJ0ZB3&" + 
                    "format=2IXcDlPIdUv&" + 
                    "keys=g2jPuW9aPBIKjp&" + 
                    "showMetadata=rPG4djvxGT&" + 
                    "time=IMwEov1UiEr&" + 
                    "types=ZB6L9iM%3F8OPZ7&" + 
                    "values=q8PDRY")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_86() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/density?" + 
                    "bcircles=XwAJa&" + 
                    "keys=&" + 
                    "showMetadata=cbO4_ZfcdH2H&" + 
                    "time=4EoK&" + 
                    "timeout=&" + 
                    "types=evomaster_77332_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_87() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count?" + 
                    "bcircles=evomaster_3836_input&" + 
                    "filter=evomaster_2917_input&" + 
                    "keys=mivmVG&" + 
                    "showMetadata=MC4auO9c&" + 
                    "time=wjHCYt8Qpt___j&" + 
                    "types=encId_LdCR")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_88() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/ratio/groupBy/boundary?" + 
                    "bcircles=evomaster_60843_input&" + 
                    "filter2=evomaster_4153_input&" + 
                    "keys=evomaster_11850_input&" + 
                    "showMetadata=GvQadzPJTAdr81Z&" + 
                    "values=HhgNHWV&" + 
                    "values2=evomaster_4156_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_89() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/ratio?" + 
                    "bcircles=4MfaL6dJwC21O&" + 
                    "format=_GYr7_OyAkakw&" + 
                    "keys=3mLx0Zdpy&" + 
                    "showMetadata=&" + 
                    "time=haMdAg5V&" + 
                    "types=rnC3h1IlE9P1s99n&" + 
                    "types2=&" + 
                    "values2=tCSj")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_90() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/type?" + 
                    "bcircles=rOuImOUNK10T&" + 
                    "filter=ieu&" + 
                    "format=pa8xJ&" + 
                    "keys=Tjju&" + 
                    "showMetadata=celqseX&" + 
                    "time=xSu1&" + 
                    "types=L__AR3zKK")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_91() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/type?" + 
                    "bcircles=D2C6jM4&" + 
                    "format=lr76H&" + 
                    "keys=dP7yk7gSn&" + 
                    "showMetadata=ksPHfDC&" + 
                    "time=w1Sb2X7bviEA3k5E&" + 
                    "types=evomaster_4135_input&" + 
                    "values=evomaster_12373_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_92() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/key?" + 
                    "bcircles=evomaster_33636_input&" + 
                    "groupByKeys=R0TBchDG4Q&" + 
                    "keys=_D3Pn3iptSWzFIvf&" + 
                    "showMetadata=evomaster_13392_input&" + 
                    "time=C20MH4XVTxjpy2")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_93() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/key?" + 
                    "bboxes=evomaster_3050_input&" + 
                    "groupByKeys=evomaster_14_input&" + 
                    "showMetadata=SA&" + 
                    "time=ezomaster_15_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_94() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=9uQ&" + 
                    "filter=0_y3rzl_aVpntDdM&" + 
                    "format=22o&" + 
                    "groupByKey=6CNnNrrvFLFKV&" + 
                    "groupByValues=3q&" + 
                    "showMetadata=&" + 
                    "time=r2h3wiv9ady_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_95() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=evomaster_24310_input&" + 
                    "filter=zQuA5&" + 
                    "format=xherxJaU&" + 
                    "groupByKey=evomaster_4183_input&" + 
                    "groupByValues=TUPLROYuek4PD6&" + 
                    "showMetadata=evomaster_36679_input&" + 
                    "time=evomaster_36680_input&" + 
                    "values=evomaster_4185_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_96() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/boundary?" + 
                    "bcircles=wmUPvXln2we65srw&" + 
                    "filter=evomaster_30403_input&" + 
                    "format=fMY&" + 
                    "keys=evomaster_30404_input&" + 
                    "showMetadata=&" + 
                    "time=evomaster_30405_input&" + 
                    "types=TNArytUFAHrWT&" + 
                    "values=evomaster_30406_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_97() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density/groupBy/type?" + 
                    "bcircles=9LXC6YyYFR8usAg&" + 
                    "keys=V&" + 
                    "showMetadata=j2pAFCWmy602F9F&" + 
                    "types=cVneLRy_w")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_98() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/density/groupBy/type?" + 
                    "bcircles=gfwGvM&" + 
                    "time=Q54Dik7jqf&" + 
                    "types=OOV")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_99() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/density/groupBy/tag?" + 
                    "bcircles=evomaster_24325_input&" + 
                    "filter=eQmJMZ2ckz2c&" + 
                    "format=Bq1mK&" + 
                    "groupByKey=evomaster_62207_input&" + 
                    "groupByValues=FIk51f4Ba&" + 
                    "keys=pAJVoXR&" + 
                    "showMetadata=evomaster_62208_input&" + 
                    "time=evomaster_62209_input&" + 
                    "timeout=0.04720217087410472&" + 
                    "values=evomawter_19397_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_100() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=IMCSupI9whBwEc&" + 
                    "filter=pEfDCNg&" + 
                    "groupByKey=k0uDAVd06BB&" + 
                    "groupByValues=izXnsRlvDHFjB2qe&" + 
                    "keys=15cP&" + 
                    "time=Q7&" + 
                    "values=CtNW4i47sVpAMn8")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_101() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/density/groupBy/boundary/groupBy/tag?" + 
                    "bboxes=1gGLyBCY3&" + 
                    "filter=vpI_nL&" + 
                    "groupByKey=evomaster_908_input&" + 
                    "groupByValues=evomaster_3230_input&" + 
                    "keys=&" + 
                    "time=KTWr&" + 
                    "types=evomaster_911_input&" + 
                    "values=oZ")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_102() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/density/groupBy/boundary?" + 
                    "bcircles=Sz7ivaQh&" + 
                    "format=Qm6__SOMkxF&" + 
                    "keys=&" + 
                    "time=X8e_ixTtW7gz&" + 
                    "values=kMJ4G1GJMR")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_103() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/density?" + 
                    "bboxes=&" + 
                    "bcircles=yMgIAPPZ&" + 
                    "format=Qf0KiJ96y&" + 
                    "showMetadata=Pc43cVmaHSd330&" + 
                    "time=evomaster_23411_input&" + 
                    "types=e3QtEo8t4STAoHF1")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_104() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area?" + 
                    "bcircles=BYXRXbCtAIA9j&" + 
                    "format=evomaster_133306_input&" + 
                    "keys=X&" + 
                    "showMetadata=iW&" + 
                    "time=VFzKOOY2oal&" + 
                    "types=KKz&" + 
                    "values=eBG8")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_105() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/tag?" + 
                    "bpolys=evomaster_731567_input&" + 
                    "filter=evomaster_731566_input&" + 
                    "groupByKey=evomYster_693042_inpup&" + 
                    "groupByValues=Y8FxVr6_XjQhxHM_&" + 
                    "time=evomaster_69%2F%2F49_input&" + 
                    "timeout=-2257702.4530365&" + 
                    "values=evomaster_693131_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_106() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area?" + 
                    "bboxes=evomas%7Cer_9276_input&" + 
                    "filter=%C2%8F&" + 
                    "format=m0&" + 
                    "keys=CKw&" + 
                    "showMetadata=kFbu&" + 
                    "time=%C2%8D%2F&" + 
                    "timeout=C7FKb&" + 
                    "values=evomaster_83874_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_107() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/groupBy/type?" + 
                    "bboxes=FU0a&" + 
                    "bcircles=UHP&" + 
                    "bpolys=smmjsWK2f&" + 
                    "keys=PBpnl&" + 
                    "showMetadata=Y&" + 
                    "values=x_x")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_108() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/density/groupBy/type?" + 
                    "bboxes=&" + 
                    "bpolys=xu0nyPGHn&" + 
                    "keys=4N&" + 
                    "timeout=g")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_109() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/density/groupBy/tag?" + 
                    "bboxes=2KPq&" + 
                    "bpolys=WIDIoO&" + 
                    "groupByKey=xOU0dkVBKeBqSjQn&" + 
                    "groupByValues=rSEi8M&" + 
                    "keys=gbc3hh3YWMCABkR9&" + 
                    "showMetadata=IP2osIUh&" + 
                    "time=01GPJkXwX&" + 
                    "values=kORG66Trr")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_110() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/density/groupBy/boundary?" + 
                    "bboxes=hP8UHsH2uL92TF&" + 
                    "bpolys=CXZ&" + 
                    "format=vCp&" + 
                    "keys=j&" + 
                    "showMetadata=k4kPTPoCWuu")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_111() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count?" + 
                    "bcircles=03f_xl5kNsZ&" + 
                    "filter=DOt&" + 
                    "timeout=qgE7Wm__5eQ&" + 
                    "types=T3TWLzm6s7Kntf")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_112() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area?" + 
                    "bboxes=evomas%7Cer_9276_input&" + 
                    "filter=g&" + 
                    "keys=evomaster_83760_input&" + 
                    "showMetadata=dVyr33rki_L97&" + 
                    "time=7cBelwxfMZwIL2s&" + 
                    "values=evomaster_83761_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Apart from the custom ids, the bboxeses array must contain double-parseable values in the following order: minLon, minLat, maxLon, maxLat."));
    }
    
    
    @Test
    public void test_113() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/density/groupBy/type?" + 
                    "bboxes=j09w&" + 
                    "bcircles=KvEzZD2MriTq&" + 
                    "bpolys=JRDs&" + 
                    "format=w1SpJahDb7r&" + 
                    "timeout=FHBtAEa")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_114() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/density/groupBy/tag?" + 
                    "bboxes=jORC&" + 
                    "bpolys=8MPLLY&" + 
                    "filter=79VjTd4GMmV8&" + 
                    "format=9vGjRVY9&" + 
                    "groupByKey=FSh_QTWS&" + 
                    "groupByValues=W1xsnFBkJ1R9hP&" + 
                    "keys=pL&" + 
                    "time=Oaoq2BGwGYIseSSC&" + 
                    "types=Cq9Izfq2Qnhut")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_115() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/density/groupBy/boundary/groupBy/tag?" + 
                    "bboxes=Q&" + 
                    "bcircles=gI&" + 
                    "format=ppvItozcP&" + 
                    "groupByKey=nZ4MEBXq4dkOV_&" + 
                    "keys=cUWiJJ&" + 
                    "showMetadata=1kZclHAWR7g3Q&" + 
                    "timeout=a5OWJSLWs0BsW&" + 
                    "types=gM1m9LtL5MjsR")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_116() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/ratio?" + 
                    "bcircles=sTx&" + 
                    "bpolys=u95XQswmLODm&" + 
                    "filter=76xgggTJcHEC&" + 
                    "format=hJ8KX9u&" + 
                    "keys2=tmN&" + 
                    "showMetadata=c83AWFQP3Yj&" + 
                    "types=e5&" + 
                    "types2=rBNZuc&" + 
                    "values=&" + 
                    "values2=Hb1hmxUoK9")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_117() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/type?" + 
                    "bcircles=O1SivSY&" + 
                    "bpolys=ORx2PZ7PxbA&" + 
                    "filter=_BEE&" + 
                    "format=NE28JPbLby0xbPr&" + 
                    "showMetadata=Pwmh7nTkGy&" + 
                    "values=AgEjZ1WHKMJYbwKD")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_118() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/tag?" + 
                    "bpolys=ygkwk&" + 
                    "groupByKey=ayhJI58QgjoNCHH&" + 
                    "groupByValues=PtllTf_Twx&" + 
                    "time=j2KlZ2B3OPOCyRD&" + 
                    "timeout=o_ml_Da_APvck&" + 
                    "values=32ogdYgHifDuO4O")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_119() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/key?" + 
                    "bboxes=5&" + 
                    "bpolys=Q&" + 
                    "filter=7r3pd31LYqMFyHd&" + 
                    "format=hdS06RpicKIM&" + 
                    "groupByKeys=CnTFZnVvwDB4pY&" + 
                    "time=2w&" + 
                    "timeout=iMgxoGHlqLANeS")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_120() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=Fn5x&" + 
                    "bpolys=w3J37Ms79e4e_36C&" + 
                    "format=Mc23&" + 
                    "groupByKey=5xCLJvnFLHPIh&" + 
                    "groupByValues=hRSKBiW2iotHbUNe&" + 
                    "keys=i&" + 
                    "showMetadata=EOM5poBK&" + 
                    "values=4J")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_121() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/density/groupBy/type?" + 
                    "bboxes=1TZH6dr%3AyB9xY4&" + 
                    "filter=evomaster_357116_input&" + 
                    "format=e%C2%96omaster_353641_input&" + 
                    "keys=Nve8xPpMYDoNrqt&" + 
                    "showMetadata=evomaster_3U3644_inPut&" + 
                    "types=evomaster_4298_inpu&" + 
                    "values=evomaster_357115_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_122() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area?" + 
                    "bboxes=evomas%7Cer_9276_input&" + 
                    "filter=g&" + 
                    "format=m0&" + 
                    "time=7cBelwxfMZwIL2s&" + 
                    "types=j1eLJvy_&" + 
                    "values=evomaster_83766_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Apart from the custom ids, the bboxeses array must contain double-parseable values in the following order: minLon, minLat, maxLon, maxLat."));
    }
    
    
    @Test
    public void test_123() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density/groupBy/type?" + 
                    "bboxes=891uD&" + 
                    "time=&" + 
                    "values=hs")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_124() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density/groupBy/tag?" + 
                    "bboxes=faZXqvQxCJgS&" + 
                    "bcircles=qHts&" + 
                    "groupByKey=LTqRZnf&" + 
                    "groupByValues=zsmJ&" + 
                    "showMetadata=ssaj&" + 
                    "values=lDqn")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_125() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=5nUBdwTh1woOb7Z&" + 
                    "bpolys=Ck9rXnv0&" + 
                    "groupByKey=RXyuvChe0iU&" + 
                    "groupByValues=M6_KvlHaFOOws&" + 
                    "keys=uP&" + 
                    "showMetadata=i_Msxli&" + 
                    "timeout=Y5K6X&" + 
                    "types=ItQt6Vakly1Wc87&" + 
                    "values=WqHETaR9XTRJ8tJw")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_126() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/ratio?" + 
                    "showMetadata=4F5rF&" + 
                    "time=Y_NgF6RMSbs&" + 
                    "timeout=NjT31f&" + 
                    "values2=VYyoabRt0toh")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_127() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/type?" + 
                    "bboxes=woW&" + 
                    "bpolys=ttT&" + 
                    "filter=X4EvRQ6K3G_TRX&" + 
                    "format=jN&" + 
                    "showMetadata=GNtn5tIgU&" + 
                    "timeout=zCQdH&" + 
                    "values=wGqW4wJNVnLWXlJ")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_128() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/tag?" + 
                    "bpolys=CC9YZR6u&" + 
                    "filter=kfXSZb&" + 
                    "groupByKey=TopjV80LBN&" + 
                    "groupByValues=S9di4ojPnOUnKy2&" + 
                    "keys=Cc&" + 
                    "timeout=f7fGeG6SB4JC")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_129() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/key?" + 
                    "bpolys=mR88tkz&" + 
                    "filter=VBE&" + 
                    "groupByKeys=UwogtesR69N&" + 
                    "showMetadata=AyIs&" + 
                    "time=IhcTauERifqo6S")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_130() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=AoLXGeyzV&" + 
                    "groupByKey=METa6Og&" + 
                    "showMetadata=NNleQeQR2&" + 
                    "time=SO7iaDbXK4tDMfE&" + 
                    "timeout=i1yE1&" + 
                    "types=JPVWPhRx&" + 
                    "values=aAz")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_131() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/density/groupBy/type?" + 
                    "bcircles=YZnuxDxkPBq&" + 
                    "filter=JYcHA&" + 
                    "format=YCWLvjXg&" + 
                    "showMetadata=ntSy&" + 
                    "values=FKVe_z")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_132() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/density/groupBy/tag?" + 
                    "bboxes=iH&" + 
                    "bcircles=cla3d&" + 
                    "format=gSIxMw9&" + 
                    "groupByKey=QcUwSojG&" + 
                    "groupByValues=fyub92KRff5o77re&" + 
                    "keys=2qamGAXs&" + 
                    "time=My3ZhSZrmmcm87&" + 
                    "timeout=Z0NYeNo6C68XVit&" + 
                    "types=Lz")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_133() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/density/groupBy/boundary/groupBy/tag?" + 
                    "filter=PuM6bnDHX&" + 
                    "format=ugwG&" + 
                    "groupByKey=WM9TcKcrVydUb&" + 
                    "keys=R6olQajnTyBV5Nv&" + 
                    "types=sFoYg3ab")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("You need to define one of the boundary parameters (bboxes, bcircles, bpolys)."));
    }
    
    
    @Test
    public void test_134() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/ratio?" + 
                    "bboxes=qeJctKVk0cZktAqs&" + 
                    "filter=gBiHw59b&" + 
                    "format=KlY8&" + 
                    "keys=ZeLT&" + 
                    "showMetadata=QQuD49p&" + 
                    "time=CybAJWnZUqBg&" + 
                    "types=5gJlgs0yA8I")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_135() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/type?" + 
                    "format=QX7On&" + 
                    "showMetadata=OIssW9i&" + 
                    "timeout=zufLmMtZun&" + 
                    "types=l5U6UVHol")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_136() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/tag?" + 
                    "bcircles=FZ&" + 
                    "bpolys=&" + 
                    "filter=qFUCE8Z&" + 
                    "groupByKey=cumGJw_oIL&" + 
                    "groupByValues=4mNbhJ4wQxy&" + 
                    "keys=8O4ru&" + 
                    "showMetadata=bg2YfA7U6&" + 
                    "time=zpQULTeUb&" + 
                    "timeout=tULaQMwOw0NSieFe&" + 
                    "types=pttZEv828lF0FZ&" + 
                    "values=1a5K")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_137() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/key?" + 
                    "bboxes=97ewD3JB3X&" + 
                    "format=LfaflOzuAaiDlbOQ&" + 
                    "groupByKeys=sZOXt6FsGTs&" + 
                    "showMetadata=f&" + 
                    "time=BxBJioL&" + 
                    "values=yGsbSVm")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_138() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/boundary/groupBy/tag?" + 
                    "bboxes=jSTIGhdDNt&" + 
                    "bcircles=N&" + 
                    "bpolys=wZ2Lvo&" + 
                    "format=THMTV&" + 
                    "groupByKey=QOPxy7uhXk1&" + 
                    "groupByValues=sqW5Zup&" + 
                    "time=xdjb&" + 
                    "types=t7Q_plGIE")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_139() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density/groupBy/type?" + 
                    "bboxes=&" + 
                    "keys=9zVWxXI")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("You need to define one of the boundary parameters (bboxes, bcircles, bpolys)."));
    }
    
    
    @Test
    public void test_140() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density/groupBy/tag?" + 
                    "bcircles=a&" + 
                    "groupByKey=UjOtm14QoTl9E5Q&" + 
                    "showMetadata=BnXoeTMu5y1n&" + 
                    "time=xSp73rrwJL79dg&" + 
                    "values=nN")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_141() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=9BhH1H&" + 
                    "bpolys=K&" + 
                    "filter=z9frN1ZewWi2Axb&" + 
                    "groupByKey=7O_E&" + 
                    "showMetadata=3Yplstz1&" + 
                    "time=K&" + 
                    "timeout=J53bjEnic")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_142() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/tag?" + 
                    "bboxes=evomaster_429194_input&" + 
                    "bcircles=evomaster_1H014_input&" + 
                    "filter=aIPUwHhS2nv&" + 
                    "groupByKey=z8oyToDvieJ&" + 
                    "groupByValues=evomaster_429195_input&" + 
                    "showMetadata=tEXVBFy0_qaY&" + 
                    "timeout=100.0&" + 
                    "types=evomaster_429234_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_143() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/tag?" + 
                    "bpolys=efgL%3E%3ADAQO42%2C268gYr%C2%90u&" + 
                    "filter=evomaster_428354_input&" + 
                    "groupByKey=Yh2su93a5pnymVXp&" + 
                    "groupByValues=evomaster_428615_input&" + 
                    "showMetadata=tEXVBFy0_qaY&" + 
                    "time=evomaster_427529_inpu&" + 
                    "types=evomaster_427529_inpu&" + 
                    "values=fQGx6ANt2vA4euF")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The bpolys parameter must contain double-parseable values in form of lon/lat coordinate pairs."));
    }
    
    
    @Test
    public void test_144() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/tag?" + 
                    "bpolys=efgL%3E%3ADAQO42%2C26%3AgYr%C2%90u&" + 
                    "filter=evomaster_428354_input&" + 
                    "format=csV&" + 
                    "groupByKey=Yh2su93a5pnymVXp&" + 
                    "groupByValues=evomaster_428692_input&" + 
                    "keys=evomastmr_3238%166_inp%C2%85t&" + 
                    "time=evomastero427529_inpu&" + 
                    "types=evomaster_427529ginpu&" + 
                    "values=evomaster_428693_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_145() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/tag?" + 
                    "bcircles=mjwP%40%3A919.%2C0%2C26&" + 
                    "format=DWvoHhJh1ML0x1Dp&" + 
                    "groupByKey=evomaster_693%2F44_jnpup&" + 
                    "keys=evomcstfq_692901_ijpu&" + 
                    "showMetadata=euomasudr%5E672798_input&" + 
                    "timeout=-2257702.0&" + 
                    "types=evomaster_593050_ioput&" + 
                    "values=Yq4%7F01")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Each bcircle must consist of a lon/lat coordinate pair plus a buffer in meters."));
    }
    
    
    @Test
    public void test_146() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/tag?" + 
                    "bcircles=mjwT%3F%3D%3A%2B70%2C84%2C*&" + 
                    "filter=fvomauter%5E2025987_mnpu&" + 
                    "format=csV&" + 
                    "groupByKey=5ADu.QJ&" + 
                    "keys=evomaster_2030278_input&" + 
                    "timeout=-2257207.741704412&" + 
                    "types=line")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Each bcircle must consist of a lon/lat coordinate pair plus a buffer in meters."));
    }
    
    
    @Test
    public void test_147() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/tag?" + 
                    "bcircles=mjwT%3F9%3A19.%2C56%2C.&" + 
                    "filter=evomaster%5E2025987_mnput&" + 
                    "format=GeOJsOn&" + 
                    "groupByKey=evomaster_20297%3A8_input&" + 
                    "groupByValues=Y8ExVr6_ZjQh%7CLI&" + 
                    "keys=evpictsfp_692901_ijpu&" + 
                    "showMetadata=eupmasudr%5E472798_gmput&" + 
                    "timeout=-2257217.568374118&" + 
                    "types=rElatIoN")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Each bcircle must consist of a lon/lat coordinate pair plus a buffer in meters."));
    }
    
    
    @Test
    public void test_148() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/tag?" + 
                    "bcircles=mjwT%3F%3D%3A19.%2C72%2C.&" + 
                    "filter=evomaster%5E2025987_mnput&" + 
                    "format=GeoJsOn&" + 
                    "groupByKey=evomaster_2019831_knput&" + 
                    "groupByValues=Y8ExVr6_ZjQh%7CLI&" + 
                    "keys=evpictsfo_692901_ijpu&" + 
                    "time=evomaster%602029613_input&" + 
                    "timeout=-2257217.568374118&" + 
                    "types=rElatIoN&" + 
                    "values=euomasudr%5E272798_gmput")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Each bcircle must consist of a lon/lat coordinate pair plus a buffer in meters."));
    }
    
    
    @Test
    public void test_149() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/tag?" + 
                    "bcircles=mjwT%3F9%3A19.%2C74%2C.&" + 
                    "filter=evomaster%5E2025787_mnput&" + 
                    "format=GeOJsOn&" + 
                    "groupByKey=evomaster_20297%3A8_input&" + 
                    "keys=evpictsfo_692901_ijpu&" + 
                    "timeout=-2257217.568374118&" + 
                    "values=euomasudr%5E472798_gmput")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Each bcircle must consist of a lon/lat coordinate pair plus a buffer in meters."));
    }
    
    
    @Test
    public void test_150() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/tag?" + 
                    "bcircles=mjwPC9%3A15.%2C2%2C26F&" + 
                    "filter=gvomaster%5E2025987_input&" + 
                    "format=GeOjSoN&" + 
                    "groupByKey=evooaster_2026000%60input&" + 
                    "keys=evpicssfq_692901_ijpu&" + 
                    "time=Ym4%7F01&" + 
                    "values=Xt4%C2%81705")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_151() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/tag?" + 
                    "bcircles=mjwPC9%3A15.%2C2%2C26F&" + 
                    "filter=gvomaster%5E2025987_input&" + 
                    "format=GeOjSoN&" + 
                    "groupByKey=evooaster_2026000_input&" + 
                    "keys=evpicssfq_692901_ijpu&" + 
                    "time=Ym4%7F01&" + 
                    "values=Xt4%C2%81705")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_152() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/tag?" + 
                    "bcircles=t%5C%C2%84R%40%3F%3A-988%2C3%2C1&" + 
                    "filter=ij7ugeQ&" + 
                    "format=cSv&" + 
                    "groupByKey=1P2rHF3n&" + 
                    "groupByValues=dvomaster_.&" + 
                    "showMetadata=No&" + 
                    "time=Uh%28%C2%89-&" + 
                    "types=Qw6BpxEEiY5oxU&" + 
                    "values=truE")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Each bcircle must consist of a lon/lat coordinate pair plus a buffer in meters."));
    }
    
    
    @Test
    public void test_153() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/tag?" + 
                    "bcircles=mi%7BRD9%3A15.%2C8%2C26F&" + 
                    "format=GeOjSoN&" + 
                    "groupByKey=dSnoBEl%7Bnr7&" + 
                    "groupByValues=evomaster_2026112_input&" + 
                    "showMetadata=trUE&" + 
                    "values=Ws4%C2%816.5")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("There cannot be more input values in the values|values2 than in the keys|keys2 parameter, as values_n must fit to keys_n."));
    }
    
    
    @Test
    public void test_154() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/tag?" + 
                    "bcircles=mi%7BRD%3D%3A150%2C8%2C26&" + 
                    "format=%40WvoHhJh1ML0x1Dp&" + 
                    "groupByKey=oRVbtEZ_Rl_CVS&" + 
                    "keys=ezpibssfp_896%3B21_jh&" + 
                    "showMetadata=Yes&" + 
                    "types=wAY&" + 
                    "values=Ws4%7F6.")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given 'format' parameter is invalid. Please choose between 'geojson'(only available for /groupBy/boundary and data extraction requests), 'json', or 'csv'."));
    }
    
    
    @Test
    public void test_155() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/tag?" + 
                    "bcircles=mjwPC%3D%3A-9.%2C0%2C26F&" + 
                    "filter=%60QHKKoOWei&" + 
                    "format=CsV&" + 
                    "groupByKey=0kccPXkHzRpp0z&" + 
                    "groupByValues=Y9ExWr6_%5ChQh%C2%80HI_&" + 
                    "keys=evoicsseq_692901_ihp&" + 
                    "showMetadata=fALSe&" + 
                    "time=Xq0%7F0%2FS&" + 
                    "types=pOlygon&" + 
                    "values=IU4EfhN0ofWUi4o")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_156() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/tag?" + 
                    "bcircles=mi%7BRD9%3A15.%2C8%2C26F&" + 
                    "filter=gvomaster%5E2025987_input&" + 
                    "groupByKey=dSmpBE%7Bpr7&" + 
                    "groupByValues=_RRdmMs0srGK&" + 
                    "keys=ezpibssfq_692921_ij&" + 
                    "showMetadata=nO&" + 
                    "time=Yo4%7F%2C1&" + 
                    "types=qH&" + 
                    "values=Ws4%C2%816.5")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Parameter 'types' (and 'types2') can only have 'node' and/or 'way' and/or 'relation' OR 'point' and/or 'line' and/or 'polygon' and/or 'other'"));
    }
    
    
    @Test
    public void test_157() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/tag?" + 
                    "bcircles=mjwP%3F9%3A19.%2C0%2C26&" + 
                    "filter=%60QHKKoOWem&" + 
                    "format=%40WvoHhJh1ML0x1Dp&" + 
                    "groupByKey=evomaster_2025922_input&" + 
                    "groupByValues=Y8ExVr6_XjQh%7CHI_&" + 
                    "time=Yq4%7F01&" + 
                    "timeout=-2257201.3&" + 
                    "values=Zp4%C2%8105")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given 'format' parameter is invalid. Please choose between 'geojson'(only available for /groupBy/boundary and data extraction requests), 'json', or 'csv'."));
    }
    
    
    @Test
    public void test_158() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/tag?" + 
                    "bcircles=mj%7BRE9%3A15.%2C9%2C66&" + 
                    "filter=gvomaster%602025987_inlut&" + 
                    "groupByKey=OM&" + 
                    "groupByValues=Y8EwVn9_XjQh%7CHIQ&" + 
                    "keys=ezpicssfq_692901_ijp&" + 
                    "time=&" + 
                    "timeout=-2257576.322551661&" + 
                    "values=Xt4%C2%81700")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The keys, values and types parameters must be empty, when you set the filter parameter."));
    }
    
    
    @Test
    public void test_159() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/tag?" + 
                    "bcircles=mjwPC9%3A-9.%2C0%2C26F&" + 
                    "filter=%60QHKKoOWei&" + 
                    "format=cSv&" + 
                    "groupByKey=0kccTXkVzRpp0z&" + 
                    "keys=evoicsseq_692901_ihp&" + 
                    "time=Yq4%7F0%2F&" + 
                    "timeout=-2257201.5815913905&" + 
                    "values=Zp4%C2%810")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_160() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/tag?" + 
                    "bcircles=mj%7BOC9%3A15.%2C1%2C65&" + 
                    "groupByKey=4kFF&" + 
                    "groupByValues=&" + 
                    "keys=evpicssfq_692901_jequ&" + 
                    "time=%5DSm4%C2%81&" + 
                    "types=nOde")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_161() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/tag?" + 
                    "bcircles=mi%7BRD%3D%3A150%2C8%2C26&" + 
                    "groupByKey=oRVctEZ_Rl_CVSlX&" + 
                    "keys=ezpibssfp_692%3B21_ih&" + 
                    "time=Wk4%7E%2C1&" + 
                    "timeout=-2257204.574350913&" + 
                    "types=WAY&" + 
                    "values=Ws4%7F5.5")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_162() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/tag?" + 
                    "bcircles=ijwT%3F9%3A19.%2C54%2C0&" + 
                    "filter=evomaster%5E2025987_mnpu&" + 
                    "format=GeOJsoN&" + 
                    "groupByKey=&" + 
                    "groupByValues=Y8ExVr6_ZjQh%7CLI&" + 
                    "timeout=-2257220.13722716&" + 
                    "types=RElaTIoN&" + 
                    "values=euomastdr%5E472798_gmput")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The keys, values and types parameters must be empty, when you set the filter parameter."));
    }
    
    
    @Test
    public void test_163() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/tag?" + 
                    "bcircles=mjwOC9%3A15.%2C1%2C65&" + 
                    "groupByKey=evomaster_2026313_input&" + 
                    "groupByValues=&" + 
                    "keys=evpicssfq_692901_jequ&" + 
                    "time=YSm4%C2%81&" + 
                    "timeout=-2257672.148010553&" + 
                    "types=poLYGon&" + 
                    "values=Zt4%7B705")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_164() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/tag?" + 
                    "bcircles=mjwOC9%3A15.%2C1%2C65&" + 
                    "filter=-0257607.04794147&" + 
                    "groupByKey=evomaster_2026313_input&" + 
                    "groupByValues=d&" + 
                    "time=%5DSm4&" + 
                    "timeout=-2257672.148010553&" + 
                    "types=OTheR&" + 
                    "values=Zt4%7B705")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_165() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/tag?" + 
                    "bcircles=mjwP%3F9%3A19.%2C0%2C26&" + 
                    "filter=%60QHKKoOWem&" + 
                    "groupByKey=evomaster_2025922_input&" + 
                    "groupByValues=Y8ExVr6_XjQh%7CHI_&" + 
                    "timeout=-2257201.3")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Invalid filter syntax. Please look at the additional info and examples about the filter parameter at https://docs.ohsome.org/ohsome-api. Detailed error message: line 1, column 1: EOF, not, (, KEY_STRING (a-z, 0-9, : or -), \", id, type, geometry, area or length expected, ` encountered."));
    }
    
    
    @Test
    public void test_166() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/tag?" + 
                    "bcircles=mj%7BRE9%3A15.%2C8%2C26F&" + 
                    "filter=gvomewter%5E2025987_input&" + 
                    "format=JSon&" + 
                    "groupByKey=dSlpBA%7Bpr&" + 
                    "groupByValues=Y8EwVr9_XjQh%7CHI&" + 
                    "keys=ezpicssfq_692901_ijp&" + 
                    "timeout=-2255744.6765826032&" + 
                    "values=Yt4%C2%817%2C5")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The keys, values and types parameters must be empty, when you set the filter parameter."));
    }
    
    
    @Test
    public void test_167() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/tag?" + 
                    "bcircles=mjsP%3F9%3A19.%2C0%2C26&" + 
                    "format=cSv&" + 
                    "groupByKey=evomautet_793144ajn&" + 
                    "groupByValues=Y8ExVr6%5BXjQh%7CHI_&" + 
                    "keys=evoicssfq_692901%60ijpu&" + 
                    "time=Yq4%7F4-&" + 
                    "timeout=-2257201.3&" + 
                    "types=f")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Parameter 'types' (and 'types2') can only have 'node' and/or 'way' and/or 'relation' OR 'point' and/or 'line' and/or 'polygon' and/or 'other'"));
    }
    
    
    @Test
    public void test_168() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/tag?" + 
                    "bcircles=mj%7BRD9%3A15.%2C8%2C26F&" + 
                    "format=GeOjSoN&" + 
                    "groupByKey=dSlpBE%7Bpr&" + 
                    "groupByValues=Y8EwVr9_XjQh%7EHI&" + 
                    "time=Yo4%7F%2C1&" + 
                    "values=Xs4%C2%817.5")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_169() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/tag?" + 
                    "bcircles=mjwOC9%3A15.%2C1%2C65&" + 
                    "filter=-0257607.04794147&" + 
                    "groupByKey=evomaster_2026313_input&" + 
                    "groupByValues=&" + 
                    "time=YSm4%C2%81&" + 
                    "timeout=-2257672.148010553&" + 
                    "types=poLYGon&" + 
                    "values=Zt4%7B705")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_170() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/tag?" + 
                    "bcircles=mi%7BRD9%3A15.%2C8%2C26F&" + 
                    "groupByKey=dSnpBE%7Bpr7&" + 
                    "showMetadata=trUE&" + 
                    "time=Yo4%7F%2C1&" + 
                    "values=Ws4%C2%816.5")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_171() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/tag?" + 
                    "bcircles=mi%7BRD%3D%3A150%2C8%2C26&" + 
                    "groupByKey=oRVctEZ_Rl_CVSlX&" + 
                    "keys=ezpibssfp_692%3B21_ih&" + 
                    "time=Wk4%7E%2C1&" + 
                    "types=WAY&" + 
                    "values=Ws4%7F6.5")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_172() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/tag?" + 
                    "bcircles=mj%7BTA9%3A39.%2C78%2C.1&" + 
                    "filter=ivomaster_2038531_input&" + 
                    "format=CsV&" + 
                    "groupByKey=HXOdHCW3wGX9dz&" + 
                    "types=Point&" + 
                    "values=euomasudr%5E472798_gmpu")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The keys, values and types parameters must be empty, when you set the filter parameter."));
    }
    
    
    @Test
    public void test_173() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/tag?" + 
                    "bcircles=mjyOC9%3A15.%2C1%2C65&" + 
                    "filter=-0257607.04794147&" + 
                    "groupByKey=evomaster_2026313_input&" + 
                    "groupByValues=&" + 
                    "time=%5DSm4%C2%81&" + 
                    "timeout=-2257672.148010553&" + 
                    "types=OTheR&" + 
                    "values=Zt4%7B705")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_174() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/tag?" + 
                    "bcircles=mi%7BRD%3D%3A150%2C8%2C26&" + 
                    "filter=gvomaqter%5D2025987_input&" + 
                    "groupByKey=oRVctEZ_Rl_CVSlX&" + 
                    "groupByValues=evomaster_20272%3B3_input&" + 
                    "time=Wk4%7E%2C1&" + 
                    "types=relatION&" + 
                    "values=Ws4%7F6.5")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_175() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/tag?" + 
                    "bcircles=mj%7BRE9%3A15.%2C9%2C66&" + 
                    "groupByKey=OM&" + 
                    "groupByValues=Y8EwVn9_XjQh%7CHIQ&" + 
                    "time=&" + 
                    "values=Xt4%C2%81700")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("There cannot be more input values in the values|values2 than in the keys|keys2 parameter, as values_n must fit to keys_n."));
    }
    
    
    @Test
    public void test_176() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/tag?" + 
                    "bcircles=mjwT%3F9%3A19.%2C92%2C.&" + 
                    "filter=evomaster%5E2025987_qnput&" + 
                    "format=GeOJsOn&" + 
                    "groupByKey=mS&" + 
                    "groupByValues=Y8ExVr6_ZjQh%7CLI&" + 
                    "keys=evomaster_2029688_input&" + 
                    "showMetadata=euomasudr%5E472798_gmput&" + 
                    "time=evomaster%602029613_inpus&" + 
                    "timeout=-2256683.733361903&" + 
                    "types=rElatIoN&" + 
                    "values=euomasudr%5E472798_gmput")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Each bcircle must consist of a lon/lat coordinate pair plus a buffer in meters."));
    }
    
    
    @Test
    public void test_177() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/tag?" + 
                    "bcircles=ijtT%3F%3D%3A%2B10%2C64%2C*&" + 
                    "filter=evomaster_2030819%5Dknput&" + 
                    "groupByKey=exomaotgva2030754_ilpu&" + 
                    "groupByValues=iK&" + 
                    "keys=ed&" + 
                    "showMetadata=aypq_sudr_472759_gmtu&" + 
                    "timeout=-2257210.839494464&" + 
                    "types=otHER&" + 
                    "values=PtahKlX3oFqt")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Each bcircle must consist of a lon/lat coordinate pair plus a buffer in meters."));
    }
    
    
    @Test
    public void test_178() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/tag?" + 
                    "bcircles=mjwT%3F%3D%3A%2B71%2C60%2C.&" + 
                    "format=geOJsOn&" + 
                    "groupByKey=uAI&" + 
                    "groupByValues=evomaster%602027713_iol&" + 
                    "keys=evpictsfp_692%3B41_ijpu&" + 
                    "time=evomaoxera202%3A614_ioout&" + 
                    "types=LiNe&" + 
                    "values=PciOjX3sFyt")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Each bcircle must consist of a lon/lat coordinate pair plus a buffer in meters."));
    }
    
    
    @Test
    public void test_179() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/tag?" + 
                    "bcircles=mjwT%3F9%3A0%3A.%2C78%2C.&" + 
                    "filter=evomaster%5E2025987_mnpu&" + 
                    "format=GeOJsOn&" + 
                    "groupByKey=evpnaster_2.29831_inpu&" + 
                    "time=evomaster%602029613_inpus&" + 
                    "types=RElaTION&" + 
                    "values=euomasudr%5E472798_gmpu")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Each bcircle must consist of a lon/lat coordinate pair plus a buffer in meters."));
    }
    
    
    @Test
    public void test_180() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/tag?" + 
                    "bcircles=mjwT%3F9%3A1%3A.%2C78%2C.&" + 
                    "filter=evomaster%5E2025987_mnpu&" + 
                    "format=GeOJsOn&" + 
                    "groupByKey=evpmaster_2.29831_inpu&" + 
                    "keys=evpjctsfo_692901_inpu&" + 
                    "showMetadata=eupmasudr%5E472798_gmput&" + 
                    "types=RElatION")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Each bcircle must consist of a lon/lat coordinate pair plus a buffer in meters."));
    }
    
    
    @Test
    public void test_181() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/tag?" + 
                    "bcircles=mjwT%3F9%3A21.%2C78%2C.&" + 
                    "filter=evomautev%5E2025987_mnpu&" + 
                    "format=CsV&" + 
                    "groupByKey=HXOdHDY2wGZ9dU&" + 
                    "groupByValues=Y8FxVr6_VjQhxLI&" + 
                    "keys=evomastir_2031052_input&" + 
                    "showMetadata=eutmasudr%5E%2F72798%5Bgmoup&" + 
                    "time=evomaster_2031053cinput&" + 
                    "types=POINt")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Each bcircle must consist of a lon/lat coordinate pair plus a buffer in meters."));
    }
    
    
    @Test
    public void test_182() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/tag?" + 
                    "bcircles=mjwT%3F9%3A21.%2C78%2C.&" + 
                    "filter=evomautev%5E2025987_mnpu&" + 
                    "format=CsV&" + 
                    "groupByKey=HXOdHDY2wGZ9dZ&" + 
                    "groupByValues=Y8FxVr6_VjQhxLI&" + 
                    "keys=evomastir_2031052_input&" + 
                    "showMetadata=eutmasudr%5E%2F72798%5Bgmoup&" + 
                    "time=evomaster_2031053cinput&" + 
                    "types=POINt")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Each bcircle must consist of a lon/lat coordinate pair plus a buffer in meters."));
    }
    
    
    @Test
    public void test_183() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/tag?" + 
                    "bcircles=mjwT%3F%3D%3A%2B31%2C80%2C.&" + 
                    "groupByKey=evomaster_2030276_input&" + 
                    "keys=evpictsfp_692%3B41_ijpu&" + 
                    "time=evomaoxera202%3A614_ioput&" + 
                    "types=linE")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Each bcircle must consist of a lon/lat coordinate pair plus a buffer in meters."));
    }
    
    
    @Test
    public void test_184() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/tag?" + 
                    "bcircles=mjwT%3F%3D%3A%2B31%2C80%2C.&" + 
                    "filter=fvomauter%5E2025987_mnpu&" + 
                    "groupByKey=evomaster_2030276_input&" + 
                    "groupByValues=evomaster%602027713_iol&" + 
                    "keys=evpictsfp_692%3B41_ijpu&" + 
                    "time=evomaoxera202%3A614_ioput&" + 
                    "types=linE")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Each bcircle must consist of a lon/lat coordinate pair plus a buffer in meters."));
    }
    
    
    @Test
    public void test_185() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/tag?" + 
                    "bcircles=mjtT%3F%3D%3A%2B03%2C61%2C*&" + 
                    "filter=evomastar%5E2030819_inpu&" + 
                    "format=csv&" + 
                    "groupByKey=evomasteq_2032982_input&" + 
                    "groupByValues=T1ZO%5DGsdM98kIf&" + 
                    "showMetadata=aynq_sudr%5E472759_gmtu&" + 
                    "timeout=-2257212.823914922&" + 
                    "types=PolYGOn&" + 
                    "values=Pt%5EiKpX3oFut")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Each bcircle must consist of a lon/lat coordinate pair plus a buffer in meters."));
    }
    
    
    @Test
    public void test_186() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/tag?" + 
                    "bcircles=mjtT%3F%3D%3A%2B10%2C61%2C*&" + 
                    "filter=evomaster_2030819_input&" + 
                    "groupByKey=evomastgra2030758_ilpu&" + 
                    "groupByValues=kK&" + 
                    "keys=e&" + 
                    "showMetadata=aypq_sudr%5E472759_gmtu&" + 
                    "time=mjsT%3F%3D%3A%2B30%2C61%2C*&" + 
                    "timeout=-2257210.839494464&" + 
                    "values=Pt_iKlX3oFut")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Each bcircle must consist of a lon/lat coordinate pair plus a buffer in meters."));
    }
    
    
    @Test
    public void test_187() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/tag?" + 
                    "bcircles=njtT%3F%3D%3A%2B12%2C61%2C*&" + 
                    "filter=evomaster%5E2030819_input&" + 
                    "format=csv&" + 
                    "groupByKey=evomastgpa2030754_ilp&" + 
                    "groupByValues=mJ7&" + 
                    "time=mjsT%3F%3D%3A%2B30%2C61%2C*&" + 
                    "timeout=-2257210.839494464")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Each bcircle must consist of a lon/lat coordinate pair plus a buffer in meters."));
    }
    
    
    @Test
    public void test_188() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/tag?" + 
                    "bcircles=mjwT%3F%3D%3A%2B31%2C80%2C.&" + 
                    "format=geOJsOn&" + 
                    "groupByKey=evomaster_2030276_input&" + 
                    "groupByValues=evomaster%602027713_iol&" + 
                    "keys=evpictsfp_692%3B41_ijpu&" + 
                    "time=evomaoxera202%3A614_ioput&" + 
                    "types=linE")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Each bcircle must consist of a lon/lat coordinate pair plus a buffer in meters."));
    }
    
    
    @Test
    public void test_189() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/tag?" + 
                    "bcircles=mjvP%3FA%3A-9.%2C0%2C26F&" + 
                    "filter=evomaster_2039481_input&" + 
                    "format=gEOJsOn&" + 
                    "groupByKey=fALWb&" + 
                    "groupByValues=Y8FxWr7_%5ChQh%C2%80HII&" + 
                    "keys=evomaster_.028585_input&" + 
                    "showMetadata=&" + 
                    "time=Yq-%7B%2Fb%2FS&" + 
                    "timeout=-2257200.16")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_190() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/tag?" + 
                    "bcircles=%2C&" + 
                    "filter=1mVDYN_AkZoDQh&" + 
                    "groupByKey=&" + 
                    "groupByValues=zqW_&" + 
                    "keys=JlkKyuSwtoECT5&" + 
                    "showMetadata=&" + 
                    "types=uqCuLucs")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/boundary?" + 
                    "bcircles=ZmhP7T0a&" + 
                    "bpolys=%2CL&" + 
                    "filter=%7BYUO%7C&" + 
                    "format=69&" + 
                    "keys=LE&" + 
                    "time=U&" + 
                    "types=%3Ap&" + 
                    "values=%3C_M%3Bk")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_191() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/ratio/groupBy/boundary?" + 
                    "bcircles=41UnP5Eq9&" + 
                    "filter=Lb51BJ3E4&" + 
                    "keys=zM7th&" + 
                    "keys2=1XuUqzV&" + 
                    "showMetadata=G2OguGkU2vXF9vkK&" + 
                    "timeout=xjWI4D&" + 
                    "types=&" + 
                    "types2=qxoLPskFMgyY&" + 
                    "values2=SwN_7XWA_7Qntncd")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_192() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/tag?" + 
                    "bboxes=lRIu4Kcd7jXuh7&" + 
                    "bcircles=evomaster_2645_input&" + 
                    "bpolys=evomaster_9380_input&" + 
                    "filter=dsnbG&" + 
                    "groupByKey=evomastes_25%2C9_input&" + 
                    "groupByValues=evomaster_2646_input&" + 
                    "keys=evomaster_20535_input&" + 
                    "showMetadata=AwQyMCF31U0&" + 
                    "timeout=evomaster_20536_input&" + 
                    "types=5hQ6f&" + 
                    "values=wfdOY")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("You need to give one groupByKey parameter, if you want to use groupBy/tag."));
    }
    
    
    @Test
    public void test_193() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/density/groupBy/tag?" + 
                    "bcircles=&" + 
                    "bpolys=hz5rruy&" + 
                    "filter=JTzSS_Xx1e2&" + 
                    "format=zePHFYU1dr&" + 
                    "groupByKey=%2CfcekK&" + 
                    "groupByValues=XWBP1yrBtBpb&" + 
                    "keys=IhGGZlSE&" + 
                    "showMetadata=evomaster_54572_input&" + 
                    "time=s5kD4V1uaQ&" + 
                    "timeout=m2vrt&" + 
                    "types=70")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("You need to give one groupByKey parameter, if you want to use groupBy/tag."));
    }
    
    
    @Test
    public void test_194() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/density/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=evomastev_123_input&" + 
                    "bpolys=LC&" + 
                    "filter=S&" + 
                    "format=yje&" + 
                    "groupByKey=Uvomaster_8%2C_in%C2%80ut&" + 
                    "groupByValues=AIr2egNSzuB2&" + 
                    "showMetadata=evomaster_10773_input&" + 
                    "time=BiQ4Bi4jHeyTk&" + 
                    "timeout=evomaster_95291_input&" + 
                    "types=ikrXe&" + 
                    "values=evomaster_126_inpvt")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("You need to give one groupByKey parameter, if you want to use groupBy/tag."));
    }
    
    
    @Test
    public void test_195() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/tag?" + 
                    "bpolys=evomast%5Dr_42%2C%3A68_input&" + 
                    "groupByKey=evomaster_4%120291_input&" + 
                    "groupByValues=W14FUI&" + 
                    "keys=evomaster_420932_input&" + 
                    "showMetadata=evomaster_420385_input&" + 
                    "time=evomaster_420386_input&" + 
                    "timeout=0.977531&" + 
                    "types=evomaster_420272_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_196() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/tag?" + 
                    "bpolys=efgL%3E%3ADAQO42%2C26%3AgYr%C2%90u&" + 
                    "filter=evomaster_428354_input&" + 
                    "format=CsV&" + 
                    "groupByKey=Yh2su93a5pnymVXp&" + 
                    "groupByValues=opF0g&" + 
                    "keys=evomastmr_3238%166_inp%C2%85t&" + 
                    "time=evomaster_427529_inpu&" + 
                    "timeout=-64827.133&" + 
                    "values=fQGx6ANt2tA4eum")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_197() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/tag?" + 
                    "bcircles=%7C&" + 
                    "filter=evomaster_89803_in%60ut&" + 
                    "format=W6omY&" + 
                    "groupByKey=U&" + 
                    "groupByValues=evomaster_14704_input&" + 
                    "keys=J0nu&" + 
                    "showMetadata=THPq0I&" + 
                    "timeout=0.18160130354450466&" + 
                    "types=D&" + 
                    "values=sJlEMoLmEUJ7")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_198() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length?" + 
                    "bboxes=%7C&" + 
                    "filter=9SeJlmmwxt&" + 
                    "showMetadata=52gyUjRnuKT_&" + 
                    "types=evomaster_1639926_input&" + 
                    "values=9SeJlmmwxt")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_199() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/tag?" + 
                    "bcircles=mjwT%3F9%3A19.%2C92%2C.&" + 
                    "filter=evomaster%5E2025987_mnput&" + 
                    "format=CsV&" + 
                    "groupByKey=euomaster_2029706_input&" + 
                    "keys=oGJ1RZT50r&" + 
                    "time=evomaster%602029613_inpu&" + 
                    "timeout=-2257217.568374118&" + 
                    "types=rElatIoN&" + 
                    "values=euomasudr%5E472798%5Dgmput")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Each bcircle must consist of a lon/lat coordinate pair plus a buffer in meters."));
    }
    
    
    @Test
    public void test_200() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/tag?" + 
                    "bcircles=mjwT%3F9%3A19.%2C0%2C26&" + 
                    "filter=evomaster%5E2025987_input&" + 
                    "groupByKey=evomaster_2025994_input&" + 
                    "groupByValues=Y8ExVr6_XjQh%7CHI&" + 
                    "time=Yq4%7F%2F3&" + 
                    "timeout=-2257203.505497482")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_201() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/tag?" + 
                    "bboxes=&" + 
                    "bcircles=ijzR%40%3D%3A13.%2C6%2C48&" + 
                    "filter=gvomester%5E2025947_inxut&" + 
                    "groupByKey=bRUrDEtpv&" + 
                    "groupByValues=vLTKk6q1fjzGFW6&" + 
                    "time=%5Dn4%7F%2C%2F&" + 
                    "timeout=-2259684.285232539&" + 
                    "types=LiNE&" + 
                    "values=Ws4%C2%817.5")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_202() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/tag?" + 
                    "bcircles=mjwT%3F%3D%3A%2B9.%2C82%2C.&" + 
                    "filter=fvomauter%5E2025987_mnpu&" + 
                    "format=CsV&" + 
                    "groupByKey=fzomasvara1009891_knpwt&" + 
                    "groupByValues=evomaster%602029713_iopw&" + 
                    "showMetadata=aypqasudr%5E472759_gmtu&" + 
                    "timeout=-2257208.1538965167&" + 
                    "types=line&" + 
                    "values=evomaster_2030059_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Each bcircle must consist of a lon/lat coordinate pair plus a buffer in meters."));
    }
    
    
    @Test
    public void test_203() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/tag?" + 
                    "bcircles=mjwT%3F9%3A1%3A.%2C78%2C.&" + 
                    "filter=evomaster%5E2025987_mnpu&" + 
                    "format=GeOJsOn&" + 
                    "groupByKey=evpmaster_2.29831_inpu&" + 
                    "groupByValues=Y8ExVr6_ZjQh%7CLI&" + 
                    "keys=evpjctsfo_692901_inpu&" + 
                    "showMetadata=eupmasudr%5E472798_gmput&" + 
                    "time=evomaster%602029613_input&" + 
                    "types=RElatION")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Each bcircle must consist of a lon/lat coordinate pair plus a buffer in meters."));
    }
    
    
    @Test
    public void test_204() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/tag?" + 
                    "bcircles=mjwT%3F%3D%3A%2B92%2C80%2C.&" + 
                    "groupByKey=fvomasvar_1009891_knpwt&" + 
                    "showMetadata=aypqasudr%5E472779_gmtu&" + 
                    "timeout=-2257218.6638412364&" + 
                    "types=line")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Each bcircle must consist of a lon/lat coordinate pair plus a buffer in meters."));
    }
    
    
    @Test
    public void test_205() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/tag?" + 
                    "bcircles=mjtT%3F%3D%3A-10%2C61%2C*&" + 
                    "filter=evomaster_2030819_input&" + 
                    "format=CsV&" + 
                    "groupByKey=avomastgra2030758_ilpu&" + 
                    "showMetadata=aypq_sudr%5E472759_gmtu&" + 
                    "timeout=-2257210.839494464&" + 
                    "types=polYGOn")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Each bcircle must consist of a lon/lat coordinate pair plus a buffer in meters."));
    }
    
    
    @Test
    public void test_206() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/tag?" + 
                    "bcircles=mjsT%3F%3D%3A%2B10%2C61%2C*&" + 
                    "filter=evomaster_2030819_input&" + 
                    "groupByKey=evomastgra2030758_ilpu&" + 
                    "groupByValues=kK&" + 
                    "keys=e&" + 
                    "showMetadata=aypq_sudr%5E472759_gmtu&" + 
                    "time=mjsT%3F%3D%3A%2B30%2C61%2C*&" + 
                    "timeout=-2257210.839494464&" + 
                    "values=Pt_iKlX3oFut")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Each bcircle must consist of a lon/lat coordinate pair plus a buffer in meters."));
    }
    
    
    @Test
    public void test_207() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/tag?" + 
                    "bcircles=mjuP%3FA%3A-9.%2C0%2C26F&" + 
                    "format=gEOJsOn&" + 
                    "groupByKey=fALWb&" + 
                    "groupByValues=Y8FxWr6_%5ChQh%C2%80HII&" + 
                    "keys=evomaster_.028585_input&" + 
                    "showMetadata=&" + 
                    "time=Yq%2F%7D%2F%2FSk&" + 
                    "timeout=-2257200.157977825&" + 
                    "types=pOlYGoN&" + 
                    "values=TYPE_SCHEM")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_208() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/tag?" + 
                    "bcircles=mkvP%3FA%3A-9.%2C0%2C26F&" + 
                    "format=gEOJsOn&" + 
                    "groupByKey=fALWb&" + 
                    "groupByValues=Y8FxWr7_%5ChQh%C2%80HII&" + 
                    "time=Yq-%7B%2Fb%2F&" + 
                    "timeout=-2257200.16&" + 
                    "values=FAlse")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_209() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/ratio?" + 
                    "bboxes=1tsrdsFkvv2A&" + 
                    "bcircles=Wbb&" + 
                    "filter=YSWH8FToV&" + 
                    "filter2=YdtIE&" + 
                    "format=csv&" + 
                    "keys=pPotk&" + 
                    "keys2=kG&" + 
                    "time=evomaster_1034_input&" + 
                    "types=7xP&" + 
                    "types2=evomaster_1020_input&" + 
                    "values2=E8fBcVg3N")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_210() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/ratio/groupBy/boundary?" + 
                    "bcircles=GtiVFqMZ8E&" + 
                    "bpolys=1Dc&" + 
                    "format=AbZ&" + 
                    "keys2=50cekmFQ_8&" + 
                    "showMetadata=d1y0Fe3gSSIbnJ&" + 
                    "timeout=fpM1zz38&" + 
                    "types=zKWV&" + 
                    "types2=HSaDy&" + 
                    "values=2n2xv1JeOC")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_211() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/groupBy/tag?" + 
                    "format=U7&" + 
                    "groupByKey=ql7spu657qhy&" + 
                    "groupByValues=ht3Gk1Snp&" + 
                    "time=3xvnc7&" + 
                    "types=ADuJRxIkF8&" + 
                    "values=48YLgh41WgmT")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("You need to define one of the boundary parameters (bboxes, bcircles, bpolys)."));
    }
    
    
    @Test
    public void test_212() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/groupBy/type?" + 
                    "bcircles=v%7CnNt&" + 
                    "format=evomaster_2614_input&" + 
                    "keys=evomaster_5494_input&" + 
                    "showMetadata=0ZzgRoEiAC9&" + 
                    "time=evomaster_5495_input&" + 
                    "types=evomaster_2615_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_213() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/density/groupBy/boundary?" + 
                    "bcircles=bVk&" + 
                    "filter=K4Y9zM_T1qowWyt0&" + 
                    "keys=AfFEVx&" + 
                    "showMetadata=3pzE2n&" + 
                    "time=pf_uf17a5&" + 
                    "timeout=uX5UISWe&" + 
                    "types=GmiJdeDrc10")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_214() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter?" + 
                    "bcircles=kr&" + 
                    "format=VuCUy5TCQ5H0NgS&" + 
                    "timeout=IGsdXt&" + 
                    "types=Ok4SaqV")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_215() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density/groupBy/boundary?" + 
                    "bcircles=z&" + 
                    "filter=Y4QW3S9v84K&" + 
                    "showMetadata=WXSYUCtBFKza34C&" + 
                    "time=y453Jxw&" + 
                    "timeout=HTc&" + 
                    "types=X2")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_216() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density?" + 
                    "bboxes=2L6XQFggfumT&" + 
                    "bpolys=PQnT74WdfIzV&" + 
                    "filter=bDCypbxare&" + 
                    "keys=nFOO&" + 
                    "showMetadata=EFlqv7YCfD6HIC&" + 
                    "time=SZ0fAcfdfWkf&" + 
                    "types=WYj1C1EHnV0s7Es")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_217() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length?" + 
                    "bboxes=H&" + 
                    "showMetadata=uAA9bY7_tO&" + 
                    "time=6zuQs8xmmvihnk4A&" + 
                    "types=472YVSMOY3DZSz1d")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_218() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/boundary?" + 
                    "bcircles=yh_5h8i3fA&" + 
                    "filter=3va0SM53fRlqkh7&" + 
                    "format=b2_tZbDWSINYva0g&" + 
                    "showMetadata=XaREgwjjqIt&" + 
                    "timeout=PdaIqGI&" + 
                    "values=Rrhc")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_219() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/density/groupBy/boundary?" + 
                    "bpolys=h0rDi5ahplS&" + 
                    "time=afZ8LUoco2yjfg3&" + 
                    "timeout=_rVsRz36fA8&" + 
                    "types=cIDJOSNxhsHf9yuf")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_220() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/density?" + 
                    "bboxes=8IkHYe2tn&" + 
                    "format=FixV7hNSi&" + 
                    "keys=ZgWsHM&" + 
                    "showMetadata=EdSc9CdYp6H5&" + 
                    "timeout=rBoQ7HD54oFx&" + 
                    "types=8Zq")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_221() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count?" + 
                    "bboxes=QSgEnph&" + 
                    "format=tZzw&" + 
                    "keys=6PftegTB8FJ&" + 
                    "time=IU_BdptBI")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_222() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/boundary?" + 
                    "bboxes=JY3JCX&" + 
                    "format=i2SZx367W&" + 
                    "keys=U514scbOidVHu&" + 
                    "showMetadata=pYYpdg8kTJ&" + 
                    "types=vLt2ofWLT")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_223() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density/groupBy/boundary?" + 
                    "bcircles=MEe12688AO0p0kfD&" + 
                    "filter=uOIUn0aUPelX7rL&" + 
                    "format=tQ55SQN5iTfHSu8B&" + 
                    "keys=pxPWIvJhco&" + 
                    "showMetadata=VO&" + 
                    "time=iMI6TaRmH&" + 
                    "timeout=dVBl4FQBd3")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_224() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density?" + 
                    "bcircles=KTa08xDgWLOEyEK&" + 
                    "time=5h&" + 
                    "timeout=U")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_225() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area?" + 
                    "bboxes=Ne2vTrsf1zP0f&" + 
                    "bpolys=ZgBjiwXU&" + 
                    "showMetadata=YcwMmsaJm_b&" + 
                    "time=SI3UPE7")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_226() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/tag?" + 
                    "bpolys=efwL%3E%3A919.42%2C268gY%C2%82%C2%8Cu&" + 
                    "format=csV&" + 
                    "groupByKey=evnmaster_589277_ippu&" + 
                    "groupByValues=evomaster_689881_input&" + 
                    "showMetadata=PnuRyRCqf&" + 
                    "timeout=-26414.175371755176")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The bpolys parameter must contain double-parseable values in form of lon/lat coordinate pairs."));
    }
    
    
    @Test
    public void test_227() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/tag?" + 
                    "bcircles=thwNE7%3F%3A-9.%2C0%2C44&" + 
                    "format=JsoN&" + 
                    "groupByKey=Y8ExVr6_%5ChQh%7CHI_&" + 
                    "groupByValues=information+board+8&" + 
                    "keys=evmmaster_204%2F377_enp&" + 
                    "time=evomaster_2040420_input&" + 
                    "types=mnwNF9%3C%2C9-w%2C%2C%2C%2F5")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Parameter 'types' (and 'types2') cannot have more than 4 entries."));
    }
    
    
    @Test
    public void test_228() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/tag?" + 
                    "bcircles=mj%7BRD9%3A15.%2C8%2C26F&" + 
                    "groupByKey=dSlpBE%7Bpr7&" + 
                    "groupByValues=evomaster_2026112_input&" + 
                    "timeout=-2257575.0&" + 
                    "values=Ws4%C2%817.5")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("There cannot be more input values in the values|values2 than in the keys|keys2 parameter, as values_n must fit to keys_n."));
    }
    
    
    @Test
    public void test_229() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/tag?" + 
                    "bcircles=mjwPC9%3A-9.%2C0%2C26F&" + 
                    "format=cSv&" + 
                    "groupByKey=0kccTXkVzRpp0z&" + 
                    "keys=evoicsseq_692901_ihp&" + 
                    "time=Yq4%7F0%2F&" + 
                    "timeout=-2257201.5815913905&" + 
                    "values=Zp4%C2%810")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_230() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/tag?" + 
                    "bcircles=mi%7BRD%3D%3A150%2C8%2C26&" + 
                    "filter=gvomaqter%5D2025987_input&" + 
                    "format=cSv&" + 
                    "groupByKey=oRVctEZ_Rl_CVSlX&" + 
                    "groupByValues=evomaster_20272%3B3_input&" + 
                    "showMetadata=truE&" + 
                    "time=Wk4%7E%2C1&" + 
                    "types=relatION&" + 
                    "values=Ws4%7F6.5")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_231() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/tag?" + 
                    "bcircles=mjwT%3F9%3A-9.%2C76%2C.5&" + 
                    "filter=evomaster_2029866_input&" + 
                    "format=gEoJsoN&" + 
                    "groupByKey=ur_T&" + 
                    "groupByValues=OIe_U2GBZtV&" + 
                    "keys=evomctsfo_692901%5Bijpu&" + 
                    "time=evomaster%602049613_input&" + 
                    "timeout=-2257217.95153722&" + 
                    "types=rELAtIoN&" + 
                    "values=evomaster_2029861cinput")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_232() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/tag?" + 
                    "bboxes=qjYwNG96%2C21%2C3%2C%3AF&" + 
                    "filter=IXecEASRftE&" + 
                    "format=csv&" + 
                    "groupByKey=lift_gate&" + 
                    "groupByValues=IOgQDOMq5RLr&" + 
                    "keys=evomaster_2043023_input&" + 
                    "time=qQp14uju9Wh2&" + 
                    "types=rElAtIOn")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("One or more boundary object(s) have a custom id (or at least a colon), whereas other(s) don't. You can either set custom ids for all your boundary objects, or for none."));
    }
    
    
    @Test
    public void test_233() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/density/groupBy/boundary?" + 
                    "bpolys=dRQssjJFuBGf&" + 
                    "filter=KPR_7UpFjxbTW_&" + 
                    "format=rSD5a5B&" + 
                    "keys=9F&" + 
                    "time=YmVxCUhMtEZn&" + 
                    "values=A1F4gkBVkETWsA")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/key?" + 
                    "filter=6d&" + 
                    "format=Yja1LkbQm95bw&" + 
                    "groupByKeys=%2C&" + 
                    "time=jPn_Ib&" + 
                    "values=MRuWZm")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("You need to give one groupByKeys parameter, if you want to use groupBy/key."));
    }
    
    
    @Test
    public void test_234() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/tag?" + 
                    "bboxes=70%7CXgBj9t6&" + 
                    "bpolys=&" + 
                    "filter=CV_03k3wJdKMesR&" + 
                    "format=tWpAqSmxNCa2Ha7&" + 
                    "groupByKey=evomaster_607480_input&" + 
                    "groupByValues=DtY7KCJ_G&" + 
                    "keys=s81XxgL0jhr1AF&" + 
                    "types=d4Rg&" + 
                    "values=evomaster_607479_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Apart from the custom ids, the bboxeses array must contain double-parseable values in the following order: minLon, minLat, maxLon, maxLat."));
    }
    
    
    @Test
    public void test_235() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/tag?" + 
                    "bcircles=mjyOC9%3A15.%2C1%2C65&" + 
                    "filter=-%2C257607%2F04994147&" + 
                    "format=GeoJSOn&" + 
                    "groupByKey=evomaster_2027865_enput&" + 
                    "keys=evpicssfq_692901_jeqv&" + 
                    "timeout=-2257672.15&" + 
                    "types=nOde&" + 
                    "values=Zu4%7B70")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The keys, values and types parameters must be empty, when you set the filter parameter."));
    }
    
    
    @Test
    public void test_236() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/density?" + 
                    "bboxes=&" + 
                    "bpolys=O&" + 
                    "showMetadata=VZ")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_237() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/tag?" + 
                    "bcircles=mjuP%3FA%3A-9.%2C0%2C26F&" + 
                    "groupByKey=fALWf&" + 
                    "keys=evomaster_.028585_input&" + 
                    "showMetadata=fAlSe&" + 
                    "time=Yq-%7D%2F%2FS&" + 
                    "timeout=-2257199.76&" + 
                    "types=pOlYgON&" + 
                    "values=TYPE_SCHEM")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_238() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/tag?" + 
                    "bcircles=mjwP%3F9%3A19.%2C0%2C26&" + 
                    "filter=%60QHKJoOWem&" + 
                    "groupByKey=evomautetc693144_j&" + 
                    "groupByValues=Y8ExVr6_XjQh%7CHI&" + 
                    "time=Yq4%7F01&" + 
                    "types=&" + 
                    "values=Zp4%C2%8105")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_239() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/tag?" + 
                    "bboxes=&" + 
                    "bcircles=ijzR%40%3D%3A13.%2C6%2C48&" + 
                    "filter=gvomester%5E2025947_inxut&" + 
                    "groupByKey=bRUrDEtpv&" + 
                    "groupByValues=vLTKk6q1fjzGFW6&" + 
                    "time=%5Dn4%7F%2C%2F&" + 
                    "timeout=-2259684.285232539&" + 
                    "types=LiNE")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_240() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/tag?" + 
                    "bcircles=mjwT%3F%3D%3A%2B33%2C80%2C.&" + 
                    "filter=fvomauter%5E2025987_mnpu&" + 
                    "format=%40WvoHhJh1ML0x1Dp&" + 
                    "groupByKey=evomaster_2030738_input&" + 
                    "showMetadata=aypq_tudr%5E472759_gmtu&" + 
                    "types=lInE&" + 
                    "values=PciOjX3sFy")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Each bcircle must consist of a lon/lat coordinate pair plus a buffer in meters."));
    }
    
    
    @Test
    public void test_241() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/ratio/groupBy/boundary?" + 
                    "bcircles=4AJ4Ug7ckNAZw&" + 
                    "bpolys=NP7nFxXYERdh&" + 
                    "keys=uvuEwxzsYJ&" + 
                    "showMetadata=RSiZVxYdQdIc&" + 
                    "time=Xg&" + 
                    "timeout=&" + 
                    "types2=SXyLArvV&" + 
                    "values=dLiVxHyeUMDtvC&" + 
                    "values2=6ZAEpPuLmAzAZq")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_242() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/density?" + 
                    "bboxes=edcJFb1_QtsjgoC&" + 
                    "filter=PYor7i&" + 
                    "format=kqXzt2fvChsC5iam&" + 
                    "keys=qFQGJlAimHPujaK&" + 
                    "showMetadata=CIV6SZXE2pqPTr&" + 
                    "timeout=1brhFrdi69s1&" + 
                    "types=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_243() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/type?" + 
                    "bcircles=cIV8cZU&" + 
                    "showMetadata=udOjas&" + 
                    "timeout=6hfPW6n&" + 
                    "types=QOZfAq")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_244() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/tag?" + 
                    "bcircles=mjwT%3F9%3A23.%2C78%2C.8&" + 
                    "filter=evomaster_2031377_input&" + 
                    "groupByKey=evomaster_2031387_input&" + 
                    "time=evomastdq_2031053cinput&" + 
                    "timeout=-2256874.6409012103&" + 
                    "types=PoINt")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_245() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/tag?" + 
                    "bcircles=mjwT%3F%3D%3A%2B71%2C60%2C.&" + 
                    "format=geOJsOn&" + 
                    "groupByKey=uAI&" + 
                    "groupByValues=evomaster%602027713_iol&" + 
                    "keys=evpictsfp_692%3B41_ijpu&" + 
                    "types=LiNe&" + 
                    "values=PciOjX3sFyt")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Each bcircle must consist of a lon/lat coordinate pair plus a buffer in meters."));
    }
    
    
    @Test
    public void test_246() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/density/groupBy/boundary?" + 
                    "bboxes=PMEZba3YLCzAvyZC&" + 
                    "bcircles=8&" + 
                    "filter=T_kwv&" + 
                    "format=aeY125&" + 
                    "showMetadata=fRacB2tSbvUXVCj")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=ZYjll3a&" + 
                    "format=V&" + 
                    "groupByKey=XDm1_o&" + 
                    "groupByValues=bk9FZahw&" + 
                    "time=6BezZUROzVpWn&" + 
                    "timeout=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density/groupBy/boundary?" + 
                    "bpolys=6ZrKbnB&" + 
                    "showMetadata=XZtCOvOt3np&" + 
                    "time=VEkErXW4CslIV&" + 
                    "timeout=AX9zIyCQ")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/density/groupBy/type")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("You need to define one of the boundary parameters (bboxes, bcircles, bpolys)."));
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/boundary?" + 
                    "bboxes=Gd2VO0dC&" + 
                    "format=W7nxhJ7&" + 
                    "keys=drCgMc3Z&" + 
                    "time=RJoe0Xu2y9ft&" + 
                    "types=tGtvR&" + 
                    "values=V4zQE")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count?" + 
                    "bboxes=Oafhx&" + 
                    "bcircles=jWdnMIl3eMrwS&" + 
                    "bpolys=YCFGt19kZRmnvZB&" + 
                    "filter=FmrP&" + 
                    "keys=4&" + 
                    "types=IS")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_247() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=3GOwi8RQfUjPN&" + 
                    "filter=k&" + 
                    "format=1ZOkCqzfYW61HLI&" + 
                    "groupByKey=inOIKBk&" + 
                    "groupByValues=BDP5G&" + 
                    "timeout=CeP4vJd6ELT1e")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/boundary/groupBy/tag?" + 
                    "bboxes=Og3Q4ispmgWv19Y&" + 
                    "bpolys=6y&" + 
                    "groupByKey=inOIKBk&" + 
                    "showMetadata=9sIr&" + 
                    "time=QWh1XDS8tYCBt&" + 
                    "types=nXVCOHghOk&" + 
                    "values=pcmHzCT3")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=jyE2dRzZWt&" + 
                    "groupByKey=inOIKBk&" + 
                    "showMetadata=3&" + 
                    "time=gBvqD8TP91HiruV&" + 
                    "timeout=4Jm_H73ZV&" + 
                    "values=AGFDaWhjHYblq2E")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/boundary/groupBy/tag?" + 
                    "bboxes=OmZVz&" + 
                    "groupByKey=inOIKBk&" + 
                    "keys=g_&" + 
                    "timeout=EBLrtjalejcca9B&" + 
                    "values=BjrqKNVGPV6_3E")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/boundary/groupBy/tag?" + 
                    "bboxes=qv61Wrig&" + 
                    "bcircles=_B4K0jI&" + 
                    "bpolys=iUIJOuh4jYjQ&" + 
                    "format=LFeiz2ZGpiq&" + 
                    "groupByKey=inOIKBk&" + 
                    "groupByValues=c&" + 
                    "keys=91&" + 
                    "time=uThuF3lM6hbHq3C&" + 
                    "timeout=11&" + 
                    "values=n")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=ZsnT6o96Nuy&" + 
                    "format=nZoucvr4LKiX&" + 
                    "groupByKey=inOIKBk&" + 
                    "groupByValues=WCNW26aGbkrKAU&" + 
                    "timeout=L&" + 
                    "types=iHCwl5C9pZnZm&" + 
                    "values=7zoPpB4pWcKUHL")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/groupBy/boundary/groupBy/tag?" + 
                    "filter=bBGUq42ln291&" + 
                    "groupByKey=inOIKBk&" + 
                    "keys=7tGZGwh7s&" + 
                    "showMetadata=4FrWQyJl&" + 
                    "values=5H2cbm6ALMW3ye")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("You need to define one of the boundary parameters (bboxes, bcircles, bpolys)."));
    }
    
    
    @Test
    public void test_248() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/density/groupBy/tag?" + 
                    "bboxes=44I9yrsx&" + 
                    "bcircles=CiT6TdmsYqH&" + 
                    "filter=9jCF&" + 
                    "groupByKey=&" + 
                    "groupByValues=2L6Z&" + 
                    "keys=bbFN&" + 
                    "time=Ctsd3DpRcsCrHhHh&" + 
                    "timeout=MXjNcyjXgyrYmnr&" + 
                    "values=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/key?" + 
                    "bboxes=CFzsXNEp&" + 
                    "bpolys=33wl&" + 
                    "filter=Yix1z46DeA63A&" + 
                    "groupByKeys=LCfjSyd&" + 
                    "keys=aI4N4Y&" + 
                    "showMetadata=6VrxO2RHP&" + 
                    "timeout=tR6hk")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/density/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=6XYriRW&" + 
                    "filter=k5&" + 
                    "format=n4HWlKQX5yF&" + 
                    "groupByKey=ECXr2Mo6o&" + 
                    "groupByValues=5aMmGr&" + 
                    "showMetadata=vYAyWgjvUjYFH&" + 
                    "time=Djb2JfJ&" + 
                    "timeout=3aJM1C77p9CA&" + 
                    "types=gWgVeCT&" + 
                    "values=O8OBae")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/density/groupBy/tag?" + 
                    "bpolys=CsAHS&" + 
                    "groupByKey=YkFFG_kIjkE&" + 
                    "keys=S&" + 
                    "showMetadata=4E4RvT&" + 
                    "timeout=254&" + 
                    "types=&" + 
                    "values=TOM")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout is too long. It has to be shorter than 100.0 seconds"));
    }
    
    
    @Test
    public void test_249() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/tag?" + 
                    "bpolys=efgL%3E%3ADCQO42%2C268gYr%C2%90u&" + 
                    "filter=evomaster_428354_input&" + 
                    "groupByKey=evomaster_428607_input&" + 
                    "groupByValues=ev%7Fmaster_426988_input&" + 
                    "showMetadata=tEXVBFy0_qaY&" + 
                    "types=evomaster_427875_input&" + 
                    "values=fQGx6ANt2vA4euF")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The bpolys parameter must contain double-parseable values in form of lon/lat coordinate pairs."));
    }
    
    
    @Test
    public void test_250() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/tag?" + 
                    "bcircles=mjyOC9%3A15.%2C1%2C25&" + 
                    "filter=-0257607%2F04994147&" + 
                    "format=cSv&" + 
                    "groupByKey=evomaster_2027869_inpu&" + 
                    "groupByValues=V&" + 
                    "keys=evpicssfq_692%3B01_jeq&" + 
                    "time=%2FRi&" + 
                    "values=Zt4%7B7")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_251() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/tag?" + 
                    "bcircles=mjwT%3F9%3A-9.%2C76%2C.5&" + 
                    "filter=evomaster_2029866_input&" + 
                    "format=gEoJsoN&" + 
                    "groupByKey=ur_T&" + 
                    "groupByValues=OIe_U2GBZtV&" + 
                    "keys=evomctsfo_692901%5Bijpu&" + 
                    "time=evomaster%602049613_input&" + 
                    "timeout=-2257217.95153722&" + 
                    "types=rELAtIoN")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_252() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density/groupBy/tag?" + 
                    "bboxes=evomaster_214_input&" + 
                    "bpolys=evomaster_215_input&" + 
                    "groupByKey=evomaster_216_input&" + 
                    "time=3xwFz1FyT&" + 
                    "timeout=evomaster_217_input&" + 
                    "types=tPj&" + 
                    "values=rL4")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/density/groupBy/boundary?" + 
                    "filter=cN2Jb&" + 
                    "showMetadata=kXhf3oKlfiYY7W8T&" + 
                    "time=evomaster_218_input&" + 
                    "types=VeH5yNK&" + 
                    "values=evomaster_219_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("You need to define one of the boundary parameters (bboxes, bcircles, bpolys)."));
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/type?" + 
                    "bboxes=_gz0IHjExtOx5z&" + 
                    "bpolys=3bdHbhxg4&" + 
                    "filter=BLCzfNF4Roo123xO&" + 
                    "keys=&" + 
                    "showMetadata=aRW&" + 
                    "time=L9AbMzrStE0OMN3&" + 
                    "timeout=WuWaZ4FBg7")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/density/groupBy/tag?" + 
                    "bcircles=mHr&" + 
                    "bpolys=evomaster_220_input&" + 
                    "filter=NFwrRV&" + 
                    "groupByKey=dtTQAf&" + 
                    "groupByValues=NKmSJ5uo&" + 
                    "timeout=n0thlN6in&" + 
                    "types=7BCBjTCtZLS1&" + 
                    "values=d1icZDSSgEjfD")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count?" + 
                    "bboxes=WHTXHRa7teQ&" + 
                    "bpolys=vuHv3Uq09cdD&" + 
                    "filter=evomaster_221_input&" + 
                    "keys=n5xWF&" + 
                    "showMetadata=tHIKiz3mJED&" + 
                    "time=1y41%2C496&" + 
                    "timeout=XqP9F_bO3Nhv&" + 
                    "types=_sR34e")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count?" + 
                    "bboxes=eEN&" + 
                    "keys=K&" + 
                    "time=evomaster_222_input&" + 
                    "timeout=7vNaKV5Hgl&" + 
                    "types=evomaster_223_input&" + 
                    "values=RUJF_qPl1sRqJ")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/groupBy/key?" + 
                    "bboxes=ayiu1F2&" + 
                    "bcircles=EfYGl&" + 
                    "bpolys=oGQMfVlozZm4hK&" + 
                    "format=evomaster_224_input&" + 
                    "groupByKeys=5zA_9Lcdc")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/ratio?" + 
                    "bboxes=7u&" + 
                    "bcircles=mbfM&" + 
                    "bpolys=aKrKOsQCqo6SyWo1&" + 
                    "keys=a&" + 
                    "showMetadata=evomaster_225_input&" + 
                    "types2=evomaster_226_input&" + 
                    "values2=6zwJHxKpRwz624")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_253() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/groupBy/key?" + 
                    "bboxes=x2YW4flyPjMR5dew&" + 
                    "bpolys=UctDSauaW6Vt9&" + 
                    "groupByKeys=MlDxyx&" + 
                    "types=OJ5GQaoOyt")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_254() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/tag?" + 
                    "bcircles=mjwT%3F%3D%3A%2B92%2C80%2C.&" + 
                    "groupByKey=fvomasvar_1009891_knpwt&" + 
                    "showMetadata=aypqasudr%5E472779_gmtu&" + 
                    "time=evomasxera2029613_iopwt&" + 
                    "timeout=-2257218.6638412364&" + 
                    "types=poinT&" + 
                    "values=evom_ster_2030022_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Each bcircle must consist of a lon/lat coordinate pair plus a buffer in meters."));
    }
    
    
    @Test
    public void test_255() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/boundary?" + 
                    "bboxes=UAPc7lyrHDeCQm6T&" + 
                    "timeout=neQwc1eE9cX3kkR&" + 
                    "values=QLwyqeyvAb")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_256() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/density/groupBy/type?" + 
                    "bboxes=1TZH6dr%3AyB9xY4&" + 
                    "filter=iRGnkKsQzubu&" + 
                    "keys=evomaster_353643_input&" + 
                    "showMetadata=evomaster_3U3644_inPut&" + 
                    "time=0X0Rov3iaXSQ&" + 
                    "types=evomaster_4298_inpu&" + 
                    "values=evomaster_357115_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_257() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/boundary?" + 
                    "bcircles=evomaster_%3A29719_input&" + 
                    "filter=evomaster_229716_input&" + 
                    "format=evomaster_271475_input&" + 
                    "time=evomaster_271476_input&" + 
                    "types=evomaster_229717_input&" + 
                    "values=96")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_258() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/tag?" + 
                    "bcircles=mjwP%3F9%3A19.%2C0%2C26&" + 
                    "filter=%60QHKKoOWem&" + 
                    "format=%40WvoHhJh1ML0x1Dp&" + 
                    "groupByKey=evomaster_2025922_input&" + 
                    "groupByValues=Y8ExVr6_XjQh%7CHI_&" + 
                    "timeout=-2257201.3")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given 'format' parameter is invalid. Please choose between 'geojson'(only available for /groupBy/boundary and data extraction requests), 'json', or 'csv'."));
    }
    
    
    @Test
    public void test_259() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/ratio/groupBy/boundary?" + 
                    "bpolys=hP&" + 
                    "filter=3JrtURmRf&" + 
                    "filter2=jsyL9y0&" + 
                    "format=DLEACMZ4lfml6&" + 
                    "keys=8UNDS5W&" + 
                    "showMetadata=xUXqEfv&" + 
                    "time=JnCbV0unY&" + 
                    "timeout=QKiljNVn7Ik&" + 
                    "types=&" + 
                    "values=LxzZ&" + 
                    "values2=etrmnFsAdf1")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_260() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=%7Br7xExxu&" + 
                    "format=9WZ31yo&" + 
                    "groupByKey=ZQSz7Vm2&" + 
                    "groupByValues=evomaster_833282_input&" + 
                    "keys=&" + 
                    "showMetadata=OovYDVE5E1rB&" + 
                    "time=tQJMzgUkfNeM&" + 
                    "types=evomaster_833283_input&" + 
                    "values=20tngqrIrwP")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in reading of the given GeoJSON."));
    }
    
    
    @Test
    public void test_261() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/tag?" + 
                    "bcircles=mjwP%3F9%3A19.%2C0%2C26&" + 
                    "filter=%60QHKKoOWem&" + 
                    "groupByKey=evomaster_2025922_input&" + 
                    "groupByValues=Y8ExVr6_XjQh%7CHI_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Invalid filter syntax. Please look at the additional info and examples about the filter parameter at https://docs.ohsome.org/ohsome-api. Detailed error message: line 1, column 1: EOF, not, (, KEY_STRING (a-z, 0-9, : or -), \", id, type, geometry, area or length expected, ` encountered."));
    }
    
    
    @Test
    public void test_262() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/ratio?" + 
                    "bboxes=1fC9rob2LNT3WGEe&" + 
                    "bpolys=1ARnTQHQoC6jEj&" + 
                    "filter=jK3gRDR7ai&" + 
                    "keys=QCC0&" + 
                    "time=40r7Sts2ExFK&" + 
                    "values2=dw1l0m")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_263() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/tag?" + 
                    "bboxes=fK663ME&" + 
                    "bpolys=aCooEX4&" + 
                    "format=KujKp8a0BNl&" + 
                    "groupByKey=NtKsI0hvMjeZhlmc&" + 
                    "groupByValues=2MJcJFVjz4T34&" + 
                    "showMetadata=sVuf66huRqXwy&" + 
                    "timeout=eK5A0w5EdqNONH&" + 
                    "values=_pWc8XHv1IFoY")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_264() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/key?" + 
                    "filter=StKW&" + 
                    "format=OD3CNVTu_zL&" + 
                    "groupByKeys=Gt0XsbL8yvSE&" + 
                    "keys=_npDaWzZ_EaG&" + 
                    "showMetadata=c9lSnY0k&" + 
                    "timeout=DILbVMIWoz5ck")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_265() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/tag?" + 
                    "bcircles=mi%7BRD%3D%3A150%2C8%2C26&" + 
                    "filter=gvomaqter%5D2025987_input&" + 
                    "groupByKey=oRVctEZ_Rl_CVSlX&" + 
                    "keys=ezpibssfp_692%3B21_ih&" + 
                    "time=Wk4%7E%2C1&" + 
                    "types=WAY&" + 
                    "values=Ws4%7F6.5")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_266() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/tag?" + 
                    "bcircles=mjwOC9%3A15.%2C1%2C65&" + 
                    "filter=-0257607.04794147&" + 
                    "groupByKey=evomaster_2026313_input&" + 
                    "groupByValues=&" + 
                    "time=%5DSm4%C2%81&" + 
                    "timeout=-2257672.148010553&" + 
                    "types=OTheR&" + 
                    "values=Zt4%7B705")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_267() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/tag?" + 
                    "bcircles=mhyOC9%3A15.%2C1%2C25&" + 
                    "filter=mhyOC9%3A15.%2C1%2C25&" + 
                    "format=cSv&" + 
                    "groupByKey=euomastet_2.26869_inpu&" + 
                    "groupByValues=V&" + 
                    "keys=mlwP%3E%3A919.00%2C268&" + 
                    "time=%2F&" + 
                    "values=Zt5%7B8")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The keys, values and types parameters must be empty, when you set the filter parameter."));
    }
    
    
    @Test
    public void test_268() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/density/groupBy/boundary/groupBy/tag?" + 
                    "bboxes=evomaster_149570_input&" + 
                    "bcircles=evomaster_149571_input&" + 
                    "groupByKey=3i1YPMQY&" + 
                    "keys=AJXe81nUndK4&" + 
                    "types=Q4uMoLa3&" + 
                    "values=wk")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/density/groupBy/tag?" + 
                    "bcircles=&" + 
                    "bpolys=AUoA_E%3AGt2O&" + 
                    "filter=Ruc95m&" + 
                    "groupByKey=evomaster_149572_input&" + 
                    "groupByValues=8ZA&" + 
                    "keys=hsXxTNN0BAMy&" + 
                    "showMetadata=7Gq5RZksI2x&" + 
                    "time=aV0F")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_269() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/tag?" + 
                    "bcircles=mjwP%3F9%3A19.%2C0%2C26&" + 
                    "filter=%60QHKKoOWem&" + 
                    "groupByKey=evomaster_2025922_input&" + 
                    "groupByValues=Y8ExVr6_XjQh%7CHI_&" + 
                    "keys=evoicssfq_692901_ijpu")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The keys, values and types parameters must be empty, when you set the filter parameter."));
    }
    
    
    @Test
    public void test_270() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/key?" + 
                    "bboxes=Jr2zG57pJYPJi&" + 
                    "bcircles=p&" + 
                    "format=wBWmff6EGRnnuYSG&" + 
                    "groupByKeys=cs&" + 
                    "showMetadata=b06lBq&" + 
                    "timeout=Y4TDlKZ12e")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_271() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/groupBy/type?" + 
                    "bcircles=jTEei8pn&" + 
                    "format=x0v&" + 
                    "keys=45JQQ&" + 
                    "showMetadata=mUkU6UYP&" + 
                    "time=qlcJt&" + 
                    "timeout=oymSc0yijwEBLK4&" + 
                    "types=5t1JdN&" + 
                    "values=KglV")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_272() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/tag?" + 
                    "bcircles=m&" + 
                    "filter=M&" + 
                    "format=Ktj6wC1ACmuFygb&" + 
                    "groupByKey=BrY7SOgVizZiv&" + 
                    "keys=i22O1DfAB&" + 
                    "showMetadata=MVC7ch&" + 
                    "timeout=zIf5gvLxtouxv")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_273() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/tag?" + 
                    "bcircles=mjwPC9%3A15.%2C0%2C26&" + 
                    "filter=evomaster%5E2025987_input&" + 
                    "format=GeOjSoN&" + 
                    "groupByKey=evooaster_2026000_input&" + 
                    "values=Xt4%C2%81705")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The keys, values and types parameters must be empty, when you set the filter parameter."));
    }
    
    
    @Test
    public void test_274() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area?" + 
                    "bboxes=evomas%7Cer_9276_input&" + 
                    "filter=g&" + 
                    "keys=evomaster_83758_input&" + 
                    "values=lBkARIa")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Apart from the custom ids, the bboxeses array must contain double-parseable values in the following order: minLon, minLat, maxLon, maxLat."));
    }
    
    
    @Test
    public void test_275() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/tag?" + 
                    "bboxes=qlyOC9%3A01%2C%2C4%2C6&" + 
                    "filter=%2F1557627.04754148&" + 
                    "groupByKey=lift_gate&" + 
                    "keys=dviibssfq_8%3E0%3F05_neuu&" + 
                    "showMetadata=mlwP%3E%3A919.00%2C266&" + 
                    "timeout=-2257672.148010553&" + 
                    "types=nOdE&" + 
                    "values=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Apart from the custom ids, the bboxeses array must contain double-parseable values in the following order: minLon, minLat, maxLon, maxLat."));
    }
    
    
    @Test
    public void test_276() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/tag?" + 
                    "bcircles=mjwT%3F9%3A19.%2C74%2C.&" + 
                    "filter=evomaster%5E2025987_mnput&" + 
                    "format=GeOJsOn&" + 
                    "groupByKey=evomaster_20297%3A8_input&" + 
                    "keys=evpictsfo_692901_ijpu&" + 
                    "showMetadata=eupmasudr%5E472798_gmput&" + 
                    "types=rElatIoN&" + 
                    "values=euomasudr%5E472798_gmput")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Each bcircle must consist of a lon/lat coordinate pair plus a buffer in meters."));
    }
    
    
    @Test
    public void test_277() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/boundary?" + 
                    "bboxes=dlcMYI7k_&" + 
                    "bpolys=85Qk&" + 
                    "filter=fQmLcfLkhspEXF&" + 
                    "showMetadata=GVe0k3MkLbga234&" + 
                    "timeout=iCxT6jXNm&" + 
                    "types=csDH8wfHd0G&" + 
                    "values=XoFSQGLWHgH")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_278() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/boundary?" + 
                    "bboxes=QnyVxe9yjtvqUHn&" + 
                    "format=Fs&" + 
                    "keys=gV6HZi958dvR&" + 
                    "showMetadata=pXNCjyvXSD&" + 
                    "types=&" + 
                    "values=OQN5VElHPz")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_279() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/tag?" + 
                    "bpolys=evomaster_42%2C268_input&" + 
                    "filter=T8&" + 
                    "groupByKey=eW4Nb%5DwJ5Npg9B&" + 
                    "groupByValues=W14FUI&" + 
                    "keys=6ov&" + 
                    "timeout=0.977531&" + 
                    "types=evomaster_420272_input&" + 
                    "values=0_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The bpolys parameter must contain double-parseable values in form of lon/lat coordinate pairs."));
    }
    
    
    @Test
    public void test_280() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/tag?" + 
                    "bcircles=mjwP%3F9%3A19.%2C0%2C26&" + 
                    "filter=%60QHKKoOWem&" + 
                    "groupByKey=evomautet_693144_jn&" + 
                    "groupByValues=Y8ExVr6_XjQh%7CHI_&" + 
                    "keys=evoicssfq_692901_ijpu&" + 
                    "timeout=-2257201.3&" + 
                    "types=j&" + 
                    "values=Zp4%C2%8105")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Parameter 'types' (and 'types2') can only have 'node' and/or 'way' and/or 'relation' OR 'point' and/or 'line' and/or 'polygon' and/or 'other'"));
    }
    
    
    @Test
    public void test_281() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/ratio/groupBy/boundary?" + 
                    "bcircles=AFPJN2K&" + 
                    "bpolys=uhmbBmdfQ9&" + 
                    "filter2=VIXAW&" + 
                    "format=VBKdGfPXNOMU00K6&" + 
                    "time=IxC4&" + 
                    "types=v&" + 
                    "types2=VGRadXh&" + 
                    "values2=UNdf2j5RREqH")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_282() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/tag?" + 
                    "bcircles=mjwP%40%3A919.%2C0%2C26&" + 
                    "format=DWvoHhJh1ML0x1Dp&" + 
                    "groupByKey=evomaster_693%2F44_jnpup&" + 
                    "keys=evomcstfq_692901_ijpu&" + 
                    "showMetadata=euomasudr%5E672798_input&" + 
                    "time=aZNHnXB&" + 
                    "timeout=-2257702.0&" + 
                    "types=evomaster_593050_ioput&" + 
                    "values=Yq4%7F01")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Each bcircle must consist of a lon/lat coordinate pair plus a buffer in meters."));
    }
    
    
    @Test
    public void test_283() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=6iISWIU39&" + 
                    "filter=MfAJDYQGX&" + 
                    "format=N9QhK_Dw8w&" + 
                    "groupByKey=yoCAqK")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_284() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/tag?" + 
                    "bcircles=mjwOC9%3A15.%2C1%2C65&" + 
                    "filter=-0257607.04794147&" + 
                    "groupByKey=evomaster_2026313_input&" + 
                    "groupByValues=&" + 
                    "keys=evpicssfq_692901_jequ&" + 
                    "time=YSm4%C2%81&" + 
                    "timeout=-2257672.148010553&" + 
                    "types=poLYGon&" + 
                    "values=Zt4%7B705")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_285() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/ratio?" + 
                    "bpolys=qCdFW6z&" + 
                    "keys=pPotk&" + 
                    "keys2=jigEHJ8pvd4&" + 
                    "showMetadata=hLymlzM&" + 
                    "time=fChrf&" + 
                    "types2=IsT9CXydX83B")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_286() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/tag?" + 
                    "bcircles=ljwP%3F9%3A19.%2C0%2C26&" + 
                    "filter=%60QHKKoMWem&" + 
                    "format=%40WvoHhJh1ML0x1Dp&" + 
                    "groupByKey=evomautet_693144_jn&" + 
                    "groupByValues=Y8ExVr6_XjQh%7CHI_&" + 
                    "keys=evoicssfq_692901_ijpu&" + 
                    "showMetadata=euomasudr%5E472798_imput&" + 
                    "time=Yq4%7F01&" + 
                    "timeout=-2257201.2901102393&" + 
                    "types=evomasteq_593050_iopu&" + 
                    "values=Zp4%C2%8105")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given parameter showMetadata can only contain the values 'true', 'yes', 'false', or 'no'."));
    }
    
    
    @Test
    public void test_287() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/tag?" + 
                    "bcircles=mjwP%3F9%3A19.%2C0%2C26&" + 
                    "filter=%60QHKKoOWem&" + 
                    "groupByKey=evomautet_693144_jn&" + 
                    "groupByValues=Y8ExVr6_XjQh%7CHI_&" + 
                    "time=Yq4%7F01&" + 
                    "timeout=-2257201.2901102393")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_288() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/type?" + 
                    "bcircles=LOsgYS_tUcuQizg&" + 
                    "bpolys=p71ARmk0&" + 
                    "format=MWp5llNHV3&" + 
                    "types=7I_KL9obCVIjhYqF&" + 
                    "values=dEayYEuM8p2p")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_289() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/groupBy/key?" + 
                    "bcircles=%2C&" + 
                    "filter=F&" + 
                    "groupByKeys=0cTyH&" + 
                    "showMetadata=8Q&" + 
                    "types=vxIxvE7")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_290() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/density/groupBy/boundary?" + 
                    "bcircles=%2C&" + 
                    "filter=SauCx_OEhTjDbEN&" + 
                    "showMetadata=ghyI3dasc3NzQr&" + 
                    "time=aW0SRce5Yf4j")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_291() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/type?" + 
                    "bcircles=%2C&" + 
                    "filter=evomaster_1591456_input&" + 
                    "format=evomaster_1591057_input&" + 
                    "keys=399xK_MPDF&" + 
                    "showMetadata=1T2FBfs&" + 
                    "time=oO&" + 
                    "types=wRtdNTP&" + 
                    "values=cb47vWR8RNV6a")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_292() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/type?" + 
                    "bcircles=%2C&" + 
                    "filter=evomaster_1591456_input&" + 
                    "format=evomaster_1591457_input&" + 
                    "keys=399xK_MPDF&" + 
                    "types=wRtdNTP&" + 
                    "values=cb47vWR8RNV6a")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_293() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/tag?" + 
                    "bcircles=mjwQE9%3A15.%2C2%2C66F&" + 
                    "groupByKey=ivooastes_2036000%60inpu&" + 
                    "keys=evpicssfq_692901_iipu&" + 
                    "timeout=-2257607.047941479&" + 
                    "values=Xv4%C2%8190")
                .then()
                .statusCode(413)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(413.0))
                .body("'message'", containsString("The given query is too large in respect to the given timeout. Please use a smaller region and/or coarser time period."));
    }
    
    
    @Test
    public void test_294() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/tag?" + 
                    "bcircles=mjsP%3F9%3A19.%2C0%2C26&" + 
                    "groupByKey=evomautet_793144ajn&" + 
                    "groupByValues=Y8ExVr6%5BXjQh%7CHI_&" + 
                    "keys=evoicssfq_692901%60ijpu&" + 
                    "timeout=-2257201.3&" + 
                    "values=Zp8%C2%8105")
                .then()
                .statusCode(413)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(413.0))
                .body("'message'", containsString("The given query is too large in respect to the given timeout. Please use a smaller region and/or coarser time period."));
    }


}
