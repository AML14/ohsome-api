package old;

import org.heigit.ohsome.ohsomeapi.EMDriver;
import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.controller.api.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import static org.evomaster.client.java.controller.db.dsl.SqlDsl.sql;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto;
import  java.util.List;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
 * This file was automatically generated by EvoMaster on 2020-11-22T01:36:36.896+01:00[Europe/Paris]
 * <br>
 * The generated test suite contains 699 tests
 * <br>
 * Covered targets: 6516
 * <br>
 * Used time: 24h 0m 6s
 * <br>
 * Needed budget for current results: 96%
 * <br>
 * 
 */
public class EvoMasterTest_24h_seed_10_per_op {

    
    private static final SutHandler controller = new EMDriver();
    private static String baseUrlOfSut;
    
    
    @BeforeClass
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    @AfterClass
    public static void tearDown() {
        controller.stopSut();
    }
    
    
    @Before
    public void initTest() {
        controller.resetStateOfSUT();
    }
    
    
    
    
    @Test
    public void test_0() throws Exception {
        
        try{
            given().accept("*/*")
                    .get(baseUrlOfSut + "/users/count/groupBy/key?" + 
                        "bcircles=oI%3A8.7410%2C49.4293%2C7%7CDew%3A8.720%2C49.409%2C3&" + 
                        "filter=ref%3D*+or+not+area%3A%281.0+..+1E6%29&" + 
                        "format=csv&" + 
                        "groupByKeys=addr%3Acountry%2Caddr%3Ahousenumber&" + 
                        "time=%2F%2FP1Y2M1D")
                    .then();
        } catch(Exception e){
        }
    }
    
    
    @Test
    public void test_1() throws Exception {
        
        try{
            given().accept("*/*")
                    .get(baseUrlOfSut + "/users/count/groupBy/boundary?" + 
                        "bcircles=dQ%3A8.746%2C49.4398%2C65%7CIZEFP%3A8.712%2C49.428313%2C67%7CFn%3A8.707%2C49.4312%2C1&" + 
                        "format=json&" + 
                        "showMetadata=false")
                    .then();
        } catch(Exception e){
        }
    }
    
    
    @Test
    public void test_2() throws Exception {
        
        try{
            given().accept("*/*")
                    .post(baseUrlOfSut + "/users/count/density/groupBy/type?" + 
                        "bboxes=V%3A8.675369%2C49.420053%2C8.7051%2C49.387&" + 
                        "format=geojson&" + 
                        "showMetadata=true&" + 
                        "time=%2F%2FP7M11D")
                    .then();
        } catch(Exception e){
        }
    }
    
    
    @Test
    public void test_3() throws Exception {
        
        try{
            given().accept("*/*")
                    .get(baseUrlOfSut + "/users/count/density/groupBy/type?" + 
                        "bpolys=8.704561%2C49.403252%2C8.700%2C49.4302%2C8.727%2C49.43243%2C8.72629%2C49.42162%2C8.704561%2C49.403252&" + 
                        "filter=destination%3D*+or+area%3A%281.0+..+1E6%29&" + 
                        "time=%2F%2FP3Y1M8D&" + 
                        "timeout=61")
                    .then();
        } catch(Exception e){
        }
    }
    
    
    @Test
    public void test_4() throws Exception {
        
        try{
            given().accept("*/*")
                    .post(baseUrlOfSut + "/users/count/density/groupBy/tag?" + 
                        "bboxes=8.689%2C49.41872%2C8.7258%2C49.380%7C8.679%2C49.419%2C8.749%2C49.392%7C8.6935%2C49.402%2C8.7055%2C49.3914%7C8.654%2C49.412278%2C8.714%2C49.396209&" + 
                        "groupByKey=building&" + 
                        "groupByValues=stop_line%2Ctrack%2Cpedestrian&" + 
                        "time=%2F%2FP2M11D&" + 
                        "timeout=58")
                    .then();
        } catch(Exception e){
        }
    }
    
    
    @Test
    public void test_5() throws Exception {
        
        try{
            given().accept("*/*")
                    .get(baseUrlOfSut + "/users/count/density/groupBy/tag?" + 
                        "bcircles=8.711457%2C49.424%2C1&" + 
                        "groupByKey=highway&" + 
                        "time=%2F%2FP4M5D")
                    .then();
        } catch(Exception e){
        }
    }
    
    
    @Test
    public void test_6() throws Exception {
        
        try{
            given().accept("*/*")
                    .post(baseUrlOfSut + "/users/count/density/groupBy/boundary?" + 
                        "bcircles=8.7230%2C49.411%2C64&" + 
                        "showMetadata=false&" + 
                        "timeout=75")
                    .then();
        } catch(Exception e){
        }
    }
    
    
    @Test
    public void test_7() throws Exception {
        
        try{
            given().accept("*/*")
                    .get(baseUrlOfSut + "/users/count/density/groupBy/boundary?" + 
                        "bcircles=m%3A8.713%2C49.41925%2C40&" + 
                        "format=csv&" + 
                        "showMetadata=false&" + 
                        "timeout=20")
                    .then();
        } catch(Exception e){
        }
    }
    
    
    @Test
    public void test_8() throws Exception {
        
        try{
            given().accept("*/*")
                    .post(baseUrlOfSut + "/users/count/density?" + 
                        "bboxes=mu%3A8.6953%2C49.4220%2C8.729%2C49.399&" + 
                        "format=json&" + 
                        "time=%2F%2FP11D")
                    .then();
        } catch(Exception e){
        }
    }
    
    
    @Test
    public void test_9() throws Exception {
        
        try{
            given().accept("*/*")
                    .get(baseUrlOfSut + "/users/count/density?" + 
                        "bboxes=Ft%3A8.665722%2C49.4036%2C8.706%2C49.396%7CF%3A8.689885%2C49.420%2C8.7545%2C49.382%7CkG%3A8.67605%2C49.417%2C8.705%2C49.3905&" + 
                        "showMetadata=no")
                    .then();
        } catch(Exception e){
        }
    }
    
    
    @Test
    public void test_10() throws Exception {
        
        try{
            given().accept("*/*")
                    .post(baseUrlOfSut + "/users/count?" + 
                        "bboxes=sQ%3A8.674%2C49.41778%2C8.727%2C49.390%7Cq%3A8.687%2C49.40297%2C8.705%2C49.391&" + 
                        "time=%2F%2FP3M13D")
                    .then();
        } catch(Exception e){
        }
    }
    
    
    @Test
    public void test_11() throws Exception {
        
        try{
            given().accept("*/*")
                    .get(baseUrlOfSut + "/users/count?" + 
                        "bboxes=MiRIv%3A8.6699%2C49.429%2C8.72556%2C49.396&" + 
                        "format=geojson&" + 
                        "time=%2F%2FP3Y11M13D&" + 
                        "timeout=42")
                    .then();
        } catch(Exception e){
        }
    }
    
    
    @Test
    public void test_12() throws Exception {
        
        try{
            given().accept("*/*")
                    .get(baseUrlOfSut + "/elements/area?" + 
                        "bcircles=8.713%2C49.904%2C9&" + 
                        "format=CsV&" + 
                        "keys=evomaster_153770_inxut&" + 
                        "showMetadata=true&" + 
                        "timeout=80")
                    .then();
        } catch(Exception e){
        }
    }
    
    
    @Test
    public void test_13() throws Exception {
        
        try{
            given().accept("*/*")
                    .post(baseUrlOfSut + "/elements/length/ratio?" + 
                        "bboxes=8.697%2C49.4054%2C8.71975%2C49.394%7C8.6631%2C49.411%2C8.74615%2C49.393%7C8.670%2C49.423%2C8.749743%2C49.398&" + 
                        "filter2=foo&" + 
                        "format=json&" + 
                        "keys=foo&" + 
                        "keys2=evomaster_1545275_input&" + 
                        "showMetadata=true")
                    .then();
        } catch(Exception e){
        }
    }
    
    
    @Test
    public void test_14() throws Exception {
        
        try{
            given().accept("*/*")
                    .get(baseUrlOfSut + "/elements/area/density/groupBy/boundary/groupBy/tag?" + 
                        "bpolys=O%3A8.704561%2C49.403252%2C8.705%2C49.4092%2C8.732%2C49.429%2C8.702%2C49.417%2C8.704561%2C49.403252&" + 
                        "groupByKey=highway&" + 
                        "keys=highway&" + 
                        "values=foo")
                    .then();
        } catch(Exception e){
        }
    }
    
    
    @Test
    public void test_15() throws Exception {
        
        try{
            given().accept("*/*")
                    .post(baseUrlOfSut + "/elements/count/ratio?" + 
                        "bboxes=J%3A8.6550%2C49.4037%2C8.737935%2C49.384&" + 
                        "format=csv&" + 
                        "keys=higgwa%7BPa%5B&" + 
                        "keys2=AQST&" + 
                        "values=fom&" + 
                        "values2=Lfuj5A")
                    .then();
        } catch(Exception e){
        }
    }
    
    
    @Test
    public void test_16() throws Exception {
        
        try{
            given().accept("*/*")
                    .get(baseUrlOfSut + "/elements/length/ratio/groupBy/boundary?" + 
                        "bcircles=8.719%2C49.449998%2C2%7C8.766%2C49.424%2C7&" + 
                        "filter2=ref%21%3D*+and+id%3A%281+%2C.+9999&" + 
                        "format=json&" + 
                        "keys=fkov&" + 
                        "time=2013-12-11&" + 
                        "timeout=")
                    .then();
        } catch(Exception e){
        }
    }
    
    
    @Test
    public void test_17_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/groupBy/type?" + 
                    "bpolys=8.704561%2C49.403252%2C8.7288%2C49.421%2C8.7037%2C49.4250%2C8.7383%2C49.429%2C8.704561%2C49.403252&" + 
                    "keys=highway&" + 
                    "time=%2F%2FP5M9D&" + 
                    "timeout=74&" + 
                    "values=street_lamp")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.7288 49.421, 8.7037 49.425 ) and LINESTRING ( 8.7383 49.429, 8.704561 49.403252 ) [ (8.727986948850452, 49.42112956990431, NaN) ]"))
                .body("'path'", containsString("/users/count/groupBy/type"));
    }
    
    
    @Test
    public void test_18_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/tag?" + 
                    "bpolys=W%3A8.704561%2C49.403252%2C8.719513%2C49.437%2C8.7042%2C49.430040%2C8.7401%2C49.4082%2C8.704561%2C49.403252%7CC%3A8.704561%2C49.403252%2C8.72736%2C49.439%2C8.718%2C49.424%2C8.704%2C49.41523%2C8.704561%2C49.403252%7CI%3A8.704561%2C49.403252%2C8.720%2C49.408%2C8.71735%2C49.434%2C8.7380%2C49.419%2C8.704561%2C49.403252&" + 
                    "groupByKey=building&" + 
                    "groupByValues=secondary_link%2Cstop_line")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.719513 49.437 ) and LINESTRING ( 8.704561 49.403252, 8.72 49.408 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/users/count/groupBy/tag"));
    }
    
    
    @Test
    public void test_19_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/tag?" + 
                    "bpolys=8.704561%2C49.403252%2C8.719%2C49.41011%2C8.709614%2C49.4234%2C8.720%2C49.4067%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.708584%2C49.407721%2C8.70458%2C49.43995%2C8.719%2C49.4159%2C8.704561%2C49.403252&" + 
                    "format=json&" + 
                    "groupByKey=building&" + 
                    "time=%2F%2FP7M23D")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/executor/ExecutionUtils_565_extractContributionTags
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.719 49.41011 ) and LINESTRING ( 8.704561 49.403252, 8.708584 49.407721 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/users/count/groupBy/tag"));
    }
    
    
    @Test
    public void test_20_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/tag?" + 
                    "bpolys=zLVMw%3A8.704561%2C49.403252%2C8.720%2C49.413%2C8.70390%2C49.436%2C8.738%2C49.4011%2C8.704561%2C49.403252%7Cz%3A8.704561%2C49.403252%2C8.70610%2C49.423809%2C8.704%2C49.4297%2C8.704%2C49.408%2C8.704561%2C49.403252&" + 
                    "filter=lit%3D*+or+geometry%3Apoint+or+length%3A%28+..+100%29&" + 
                    "format=csv&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=turning_circle%2Chotel%2Cservice&" + 
                    "time=%2F%2FP1Y2M9D")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/executor/ExecutionUtils_554_extractContributionTags
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.72 49.413 ) and LINESTRING ( 8.738 49.4011, 8.704561 49.403252 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/users/count/groupBy/tag"));
    }
    
    
    @Test
    public void test_21_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/tag?" + 
                    "bpolys=XqE%3A8.704561%2C49.403252%2C8.732%2C49.403%2C8.70471%2C49.432%2C8.743760%2C49.417%2C8.704561%2C49.403252%7CY%3A8.704561%2C49.403252%2C8.714%2C49.421%2C8.740%2C49.4148%2C8.7420%2C49.413676%2C8.704561%2C49.403252%7Cw%3A8.704561%2C49.403252%2C8.735848%2C49.405125%2C8.7024%2C49.401%2C8.734%2C49.405%2C8.704561%2C49.403252&" + 
                    "format=json&" + 
                    "groupByKey=foo&" + 
                    "groupByValues=street_lamp&" + 
                    "keys=highway&" + 
                    "timeout=92&" + 
                    "values=traffic_signals")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/executor/ExecutionUtils_557_extractContributionTags
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.732 49.403 ) and LINESTRING ( 8.7024 49.401, 8.734 49.405 ) [ (8.719133510931083, 49.40311816594065, NaN) ]"))
                .body("'path'", containsString("/users/count/groupBy/tag"));
    }
    
    
    @Test
    public void test_22_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/groupBy/tag?" + 
                    "bcircles=iF%3A8.71958%2C49.409%2C3%7CC%3A8.73015%2C49.433%2C26%7Cl%3A8.7062%2C49.402%2C6%7CZv%3A8.7354%2C49.432%2C433228750&" + 
                    "format=geojson&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=residential%2Csecondary&" + 
                    "keys=highway&" + 
                    "showMetadata=yes&" + 
                    "timeout=65")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/executor/ExecutionUtils_565_extractContributionTags
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El ángulo 13.376.112.964.686.326 es demasiado grande."))
                .body("'path'", containsString("/users/count/groupBy/tag"));
    }
    
    
    @Test
    public void test_23_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/groupBy/tag?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22sS%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.723%2C49.4071%5D%2C%5B8.708%2C49.417%5D%2C%5B8.701%2C49.411%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22WcpSD%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.706111%2C49.403152%5D%2C%5B8.709%2C49.4247%5D%2C%5B8.724%2C49.4105%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22oPGlq%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.71125%2C49.426%5D%2C%5B8.71964%2C49.41291%5D%2C%5B8.7005%2C49.423%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "groupByKey=building&" + 
                    "keys=highway&" + 
                    "timeout=33&" + 
                    "values=residential")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.706111 49.403152, 8.707434676139696 49.41302481878096 ) and LINESTRING ( 8.724 49.4105, 8.704561 49.403252 ) [ (8.706206674886998, 49.40386560417619, NaN) ]"))
                .body("'path'", containsString("/users/count/groupBy/tag"));
    }
    
    
    @Test
    public void test_24_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/key?" + 
                    "bpolys=Nc%3A8.704561%2C49.403252%2C8.705636%2C49.430800%2C8.704560%2C49.416%2C8.7022%2C49.426%2C8.704561%2C49.403252%7Cl%3A8.704561%2C49.403252%2C8.701%2C49.425%2C8.700%2C49.421%2C8.712%2C49.439%2C8.704561%2C49.403252%7CmA%3A8.704561%2C49.403252%2C8.727%2C49.432065%2C8.708799%2C49.41491%2C8.70142%2C49.417%2C8.704561%2C49.403252&" + 
                    "filter=tracktype%3D*+and+geometry%3Apolygon+and+id%3A%281+..+9999%29&" + 
                    "groupByKeys=turn%3Alanes%2Clanes%2Cname&" + 
                    "showMetadata=yes")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/executor/ExecutionUtils_565_extractContributionTags
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.705636 49.4308 ) and LINESTRING ( 8.704561 49.403252, 8.701 49.425 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/users/count/groupBy/key"));
    }
    
    
    @Test
    public void test_25_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/key?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22zeA%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.713%2C49.410%5D%2C%5B8.716%2C49.438%5D%2C%5B8.735%2C49.4007%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22R%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.737%2C49.420%5D%2C%5B8.709960%2C49.42343%5D%2C%5B8.70488%2C49.437%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22Wk%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.722%2C49.42021%5D%2C%5B8.703%2C49.4056%5D%2C%5B8.700%2C49.417%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "groupByKeys=highway%2Cbuilding%2Cturn&" + 
                    "keys=highway&" + 
                    "showMetadata=no&" + 
                    "time=%2F%2FP12D&" + 
                    "timeout=22&" + 
                    "values=crossing")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/executor/ExecutionUtils_563_extractContributionTags
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704594785816278 49.40682630635662, 8.703 49.4056 ) and LINESTRING ( 8.7 49.417, 8.704561 49.403252 ) [ (8.703623082858986, 49.406079117924726, NaN) ]"))
                .body("'path'", containsString("/users/count/groupBy/key"));
    }
    
    
    @Test
    public void test_26_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/groupBy/key?" + 
                    "bpolys=hv%3A8.704561%2C49.403252%2C8.707%2C49.41300%2C8.724%2C49.421%2C8.7094%2C49.4158%2C8.704561%2C49.403252&" + 
                    "format=csv&" + 
                    "groupByKeys=lit%2Csurface%2Cbarrier&" + 
                    "showMetadata=true")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.707 49.413, 8.724 49.421 ) and LINESTRING ( 8.7094 49.4158, 8.704561 49.403252 ) [ (8.708612918375294, 49.4137590204119, NaN) ]"))
                .body("'path'", containsString("/users/count/groupBy/key"));
    }
    
    
    @Test
    public void test_27_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/boundary?" + 
                    "bpolys=S%3A8.704561%2C49.403252%2C8.734%2C49.412%2C8.747%2C49.437647%2C8.720%2C49.4184%2C8.704561%2C49.403252%7Cen%3A8.704561%2C49.403252%2C8.718%2C49.4032%2C8.710%2C49.427%2C8.710%2C49.438%2C8.704561%2C49.403252&" + 
                    "filter=addr%3Astreet%3D*&" + 
                    "format=csv&" + 
                    "showMetadata=yes&" + 
                    "time=%2F%2FP1M3D&" + 
                    "timeout=75")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.734 49.412 ) and LINESTRING ( 8.704561 49.403252, 8.718 49.4032 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/users/count/groupBy/boundary"));
    }
    
    
    @Test
    public void test_28_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/boundary?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22DEeE%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7354%2C49.4353%5D%2C%5B8.704%2C49.4051%5D%2C%5B8.70396%2C49.435%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22Epu%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.740107%2C49.4111%5D%2C%5B8.7242%2C49.413%5D%2C%5B8.706%2C49.414%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "showMetadata=no&" + 
                    "time=%2F%2FP6M12D&" + 
                    "timeout=74")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704927905372728 49.4059924440209, 8.704 49.4051 ) and LINESTRING ( 8.70396 49.435, 8.704561 49.403252 ) [ (8.704516610887442, 49.4055968677962, NaN) ]"))
                .body("'path'", containsString("/users/count/groupBy/boundary"));
    }
    
    
    @Test
    public void test_29_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/groupBy/boundary?" + 
                    "bpolys=8.704561%2C49.403252%2C8.715%2C49.4006%2C8.700%2C49.408%2C8.748%2C49.433%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.74400%2C49.434%2C8.70447%2C49.41488%2C8.7043%2C49.4255%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.732%2C49.413%2C8.741%2C49.401%2C8.7458%2C49.410%2C8.704561%2C49.403252&" + 
                    "keys=highway&" + 
                    "showMetadata=false&" + 
                    "time=%2F%2FP3Y3M2D&" + 
                    "timeout=66")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.715 49.4006 ) and LINESTRING ( 8.704561 49.403252, 8.732 49.413 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/users/count/groupBy/boundary"));
    }
    
    
    @Test
    public void test_30_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/density/groupBy/type?" + 
                    "bpolys=mXE%3A8.704561%2C49.403252%2C8.74057%2C49.407674%2C8.7348%2C49.425%2C8.700%2C49.414%2C8.704561%2C49.403252%7CNNw%3A8.704561%2C49.403252%2C8.746%2C49.401%2C8.713%2C49.425%2C8.749%2C49.4091%2C8.704561%2C49.403252%7CLI%3A8.704561%2C49.403252%2C8.7005%2C49.41857%2C8.703%2C49.402%2C8.733%2C49.4323%2C8.704561%2C49.403252&" + 
                    "filter=barrier%3D*&" + 
                    "format=geojson&" + 
                    "timeout=68")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.74057 49.407674 ) and LINESTRING ( 8.704561 49.403252, 8.7005 49.41857 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/users/count/density/groupBy/type"));
    }
    
    
    @Test
    public void test_31_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/density/groupBy/type?" + 
                    "bcircles=PN%3A8.722%2C49.422111%2C843075561&" + 
                    "keys=highway&" + 
                    "timeout=72")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El ángulo 2.747.650.065.339.055.600 es demasiado grande."))
                .body("'path'", containsString("/users/count/density/groupBy/type"));
    }
    
    
    @Test
    public void test_32_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/density/groupBy/type?" + 
                    "bpolys=qPPSa%3A8.704561%2C49.403252%2C8.7209%2C49.424%2C8.735869%2C49.439%2C8.7321%2C49.415%2C8.704561%2C49.403252%7Ckayzk%3A8.704561%2C49.403252%2C8.703%2C49.429%2C8.704%2C49.420%2C8.744%2C49.4337%2C8.704561%2C49.403252%7CI%3A8.704561%2C49.403252%2C8.708%2C49.407919%2C8.70191%2C49.417%2C8.7163%2C49.425%2C8.704561%2C49.403252&" + 
                    "format=geojson&" + 
                    "keys=highway&" + 
                    "time=%2F%2FP1M9D&" + 
                    "timeout=65&" + 
                    "values=elevator")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.7209 49.424 ) and LINESTRING ( 8.704561 49.403252, 8.708 49.407919 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/users/count/density/groupBy/type"));
    }
    
    
    @Test
    public void test_33_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/density/groupBy/tag?" + 
                    "bpolys=8.704561%2C49.403252%2C8.740%2C49.42459%2C8.706%2C49.4166%2C8.7388%2C49.42778%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.7211%2C49.412664%2C8.7052%2C49.438%2C8.7473%2C49.4297%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.736%2C49.4132%2C8.728%2C49.412%2C8.708%2C49.427%2C8.704561%2C49.403252&" + 
                    "filter=network%3D*+or+type%3Arelation&" + 
                    "format=csv&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=residential%2Cchapel&" + 
                    "values=pedestrian")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/executor/ExecutionUtils_565_extractContributionTags
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.74 49.42459 ) and LINESTRING ( 8.704561 49.403252, 8.7211 49.412664 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/users/count/density/groupBy/tag"));
    }
    
    
    @Test
    public void test_34_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/density/groupBy/tag?" + 
                    "bpolys=Ao%3A8.704561%2C49.403252%2C8.721%2C49.418%2C8.7027%2C49.431%2C8.7052%2C49.416%2C8.704561%2C49.403252%7Cs%3A8.704561%2C49.403252%2C8.709%2C49.436%2C8.7046%2C49.4389%2C8.706%2C49.42670%2C8.704561%2C49.403252&" + 
                    "groupByKey=building&" + 
                    "groupByValues=speed_camera%2Csteps&" + 
                    "keys=highway&" + 
                    "showMetadata=false&" + 
                    "time=%2F%2FP5M6D&" + 
                    "timeout=73&" + 
                    "values=steps")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/executor/ExecutionUtils_565_extractContributionTags
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.721 49.418 ) and LINESTRING ( 8.7052 49.416, 8.704561 49.403252 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/users/count/density/groupBy/tag"));
    }
    
    
    @Test
    public void test_35_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/density/groupBy/tag?" + 
                    "bpolys=TKVl%3A8.704561%2C49.403252%2C8.710%2C49.421%2C8.748%2C49.414%2C8.730%2C49.414%2C8.704561%2C49.403252%7CbeYqB%3A8.704561%2C49.403252%2C8.741%2C49.420%2C8.7002%2C49.410%2C8.701463%2C49.403%2C8.704561%2C49.403252%7CEyExR%3A8.704561%2C49.403252%2C8.726058%2C49.434%2C8.70899%2C49.427%2C8.732%2C49.422395%2C8.704561%2C49.403252&" + 
                    "groupByKey=foo&" + 
                    "keys=highway&" + 
                    "timeout=20&" + 
                    "values=traffic_mirror")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.71 49.421 ) and LINESTRING ( 8.73 49.414, 8.704561 49.403252 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/users/count/density/groupBy/tag"));
    }
    
    
    @Test
    public void test_36_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/density/groupBy/boundary?" + 
                    "bpolys=8.704561%2C49.403252%2C8.74658%2C49.401805%2C8.710%2C49.4166%2C8.7000%2C49.434%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.709985%2C49.4195%2C8.722%2C49.409%2C8.702%2C49.402861%2C8.704561%2C49.403252&" + 
                    "filter=landuse%3D*&" + 
                    "showMetadata=false&" + 
                    "time=%2F%2FP9M2D&" + 
                    "timeout=46")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/executor/ExecutionUtils_554_extractContributionTags
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.74658 49.401805 ) and LINESTRING ( 8.704561 49.403252, 8.709985 49.4195 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/users/count/density/groupBy/boundary"));
    }
    
    
    @Test
    public void test_37_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/density/groupBy/boundary?" + 
                    "bpolys=qh%3A8.704561%2C49.403252%2C8.743%2C49.426%2C8.72159%2C49.433%2C8.701%2C49.2097%2C8.704561%2C49.403252&" + 
                    "filter=smoothness%3D*+and+type%3Away&" + 
                    "format=csv&" + 
                    "timeout=92&" + 
                    "values=foo")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.743 49.426 ) and LINESTRING ( 8.72159 49.433, 8.701 49.2097 ) [ (8.719671556840991, 49.41219434883891, NaN) ]"))
                .body("'path'", containsString("/users/count/density/groupBy/boundary"));
    }
    
    
    @Test
    public void test_38_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/density?" + 
                    "bcircles=arEwf%3A8.7.5%2C49.406%2C6&" + 
                    "filter=foq&" + 
                    "keys=highway&" + 
                    "time=evomaster_318290_input&" + 
                    "timeout=28&" + 
                    "values=evomaster_67169_input")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_114_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/users/count/density"));
    }
    
    
    @Test
    public void test_39_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/density?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22nwQJw%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7048%2C49.417814%5D%2C%5B8.730%2C49.427%5D%2C%5B8.727%2C49.426%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22dzpR%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.73653%2C49.4035%5D%2C%5B8.700%2C49.411%5D%2C%5B8.727%2C49.422%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22M%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.729%2C49.411%5D%2C%5B8.743772%2C49.411%5D%2C%5B8.7121%2C49.43354%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=maxspeed%21%3D*+or+not+id%3A%281+..+9999%29&" + 
                    "format=geojson&" + 
                    "time=%2F%2FP3Y2M28D&" + 
                    "timeout=72")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.724239988881644 49.424900338804235, 8.73 49.427 ) and LINESTRING ( 8.727 49.426, 8.725224292503174 49.424199839826294 ) [ (8.726855876963475, 49.42585389229311, NaN) ]"))
                .body("'path'", containsString("/users/count/density"));
    }
    
    
    @Test
    public void test_40_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/density?" + 
                    "bpolys=zGJv%3A8.704561%2C49.403252%2C8.730%2C49.4347%2C8.714%2C49.432%2C8.744%2C49.43397%2C8.704561%2C49.403252%7CGXDVx%3A8.704561%2C49.403252%2C8.721958%2C49.411168%2C8.730%2C49.40842%2C8.728724%2C49.4326%2C8.704561%2C49.403252%7CZOD%3A8.704561%2C49.403252%2C8.703509%2C49.417%2C8.7134%2C49.4224%2C8.7049%2C49.426%2C8.704561%2C49.403252&" + 
                    "format=csv&" + 
                    "keys=highway&" + 
                    "showMetadata=no&" + 
                    "time=%2F%2FP24D&" + 
                    "timeout=70&" + 
                    "values=traffic_mirror")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.73 49.4347 ) and LINESTRING ( 8.704561 49.403252, 8.721958 49.411168 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/users/count/density"));
    }
    
    
    @Test
    public void test_41_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22bYyB%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.743877%2C49.425%5D%2C%5B8.721%2C49.4154%5D%2C%5B8.707%2C49.408%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22GR%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.718%2C49.420%5D%2C%5B8.70425%2C49.41160%5D%2C%5B8.701%2C49.406549%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22Q%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.73425%2C49.406714%5D%2C%5B8.72046%2C49.403275%5D%2C%5B8.7109%2C49.425%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "format=json&" + 
                    "timeout=85")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.73425 49.406714 ) and LINESTRING ( 8.72046 49.403275, 8.717355694894946 49.41032950087942 ) [ (8.719693617150826, 49.40501659700819, NaN) ]"))
                .body("'path'", containsString("/users/count"));
    }
    
    
    @Test
    public void test_42_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count?" + 
                    "bpolys=8.704561%2C49.403252%2C8.7190%2C49.408%2C8.72221%2C49.409951%2C8.7461%2C49.4342%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.736%2C49.404%2C8.735%2C49.428%2C8.700%2C49.422%2C8.704561%2C49.403252&" + 
                    "filter=name%21%3D*+or+not+length%3A%28+..+100%29&" + 
                    "showMetadata=yes&" + 
                    "time=%2F%2FP11M4D")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.719 49.408 ) and LINESTRING ( 8.704561 49.403252, 8.736 49.404 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/users/count"));
    }
    
    
    @Test
    public void test_43_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/ratio/groupBy/boundary?" + 
                    "bpolys=mYpNi%3A8.704561%2C49.403252%2C8.736%2C49.4160%2C8.720%2C49.438%2C8.7376%2C49.439153%2C8.704561%2C49.403252%7CDJ%3A8.704561%2C49.403252%2C8.7124%2C49.404%2C8.730%2C49.405%2C8.7047%2C49.426946%2C8.704561%2C49.403252%7CSbz%3A8.704561%2C49.403252%2C8.7079%2C49.428%2C8.706%2C49.4259%2C8.70656%2C49.436%2C8.704561%2C49.403252&" + 
                    "format=geojson&" + 
                    "keys=highway&" + 
                    "showMetadata=true&" + 
                    "time=2013-07-27&" + 
                    "timeout=90")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.736 49.416 ) and LINESTRING ( 8.7047 49.426946, 8.704561 49.403252 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/perimeter/ratio/groupBy/boundary"));
    }
    
    
    @Test
    public void test_44_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/ratio/groupBy/boundary?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22fz%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.716%2C49.400866%5D%2C%5B8.700%2C49.42085%5D%2C%5B8.72621%2C49.434%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22Re%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.703%2C49.407772%5D%2C%5B8.706%2C49.4194%5D%2C%5B8.707%2C49.439%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter2=foot%21%3D*+or+geometry%3Apoint+or+area%3A%281.0+..+1E6%29&" + 
                    "format=geojson&" + 
                    "keys=highway&" + 
                    "keys2=highway&" + 
                    "showMetadata=no&" + 
                    "time=2011-12-28&" + 
                    "timeout=21&" + 
                    "values=platform&" + 
                    "values2=footway")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.716 49.400866, 8.705309235934104 49.414218764318306 ) and LINESTRING ( 8.72621 49.434, 8.704561 49.403252 ) [ (8.709019594532052, 49.40958452642947, NaN) ]"))
                .body("'path'", containsString("/elements/perimeter/ratio/groupBy/boundary"));
    }
    
    
    @Test
    public void test_45_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/ratio?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22GR%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.707%2C49.432%5D%2C%5B8.726%2C49.4194%5D%2C%5B8.713%2C49.429379%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22vHTmd%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.70189%2C49.407043%5D%2C%5B8.704%2C49.432586%5D%2C%5B8.730702%2C49.409%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22WWPvj%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.711%2C49.409397%5D%2C%5B8.713179%2C49.4297%5D%2C%5B8.7043%2C49.416%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "format=geojson&" + 
                    "keys=highway&" + 
                    "time=2018-02-25&" + 
                    "types2=point%2Cpolygon%2Cother")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.707 49.432, 8.726 49.4194 ) and LINESTRING ( 8.713 49.429379, 8.71180814303476 49.42568903117303 ) [ (8.712638761241084, 49.42826061096644, NaN) ]"))
                .body("'path'", containsString("/elements/perimeter/ratio"));
    }
    
    
    @Test
    public void test_46_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/ratio?" + 
                    "bcircles=Fcq%3A8.713%2C49.425%2C7%7CpV%3A8.745%2C49.43589%2C2%7CJMf%3A8.7257%2C49.401%2C5%7CBlH%3A8.7373%2C49.41762%2C4409406310&" + 
                    "keys=highway&" + 
                    "showMetadata=true")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El ángulo 1.537.592.407.615.473.400.000.000 es demasiado grande."))
                .body("'path'", containsString("/elements/perimeter/ratio"));
    }
    
    
    @Test
    public void test_47_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/ratio?" + 
                    "bpolys=wx%3A8.704561%2C49.403252%2C8.732902%2C49.4340%2C8.701%2C49.43465%2C8.700376%2C49.408%2C8.704561%2C49.403252%7CFt%3A8.704561%2C49.403252%2C8.714%2C49.432%2C8.7045%2C49.433241%2C8.72136%2C49.4389%2C8.704561%2C49.403252&" + 
                    "keys=highway&" + 
                    "keys2=highway&" + 
                    "time=2007-12-06&" + 
                    "timeout=28&" + 
                    "values=secondary_link&" + 
                    "values2=give_way")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.732902 49.434 ) and LINESTRING ( 8.700376 49.408, 8.704561 49.403252 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/perimeter/ratio"));
    }
    
    
    @Test
    public void test_48_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/type?" + 
                    "bpolys=LOA%3A8.704561%2C49.403252%2C8.707%2C49.408%2C8.704%2C49.418%2C8.704%2C49.4388%2C8.704561%2C49.403252%7Cyx%3A8.704561%2C49.403252%2C8.741788%2C49.405%2C8.734%2C49.421%2C8.73711%2C49.433%2C8.704561%2C49.403252&" + 
                    "filter=maxspeed%21%3D*+or+type%3Arelation+or+id%3A%281+..+9999%29&" + 
                    "format=json&" + 
                    "time=2015-02-20")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.707 49.408 ) and LINESTRING ( 8.704 49.4388, 8.704561 49.403252 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/perimeter/groupBy/type"));
    }
    
    
    @Test
    public void test_49_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/groupBy/type?" + 
                    "bpolys=aq%3A8.704561%2C49.403252%2C8.733%2C49.42E35%2C8.713%2C49.425%2C8.70450%2C49.414%2C8.704561%2C49.403252&" + 
                    "format=csv&" + 
                    "keys=evomaster_145156_input&" + 
                    "showMetadata=foo&" + 
                    "time=foo&" + 
                    "types=foo&" + 
                    "values=evomaster_145157_input")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.704561 90.0 ) and LINESTRING ( 8.713 49.425, 8.7045 49.414 ) [ (8.704561, 49.41407894117647, NaN) ]"))
                .body("'path'", containsString("/elements/perimeter/groupBy/type"));
    }
    
    
    @Test
    public void test_50_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/tag?" + 
                    "bpolys=8.704561%2C49.403252%2C8.735333%2C49.4374%2C8.704%2C49.41974%2C8.7435%2C49.413183%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.739%2C49.4345%2C8.703%2C49.40390%2C8.704%2C49.415%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.715%2C49.417%2C8.710%2C49.436%2C8.712%2C49.41798%2C8.704561%2C49.403252&" + 
                    "format=json&" + 
                    "groupByKey=foo&" + 
                    "groupByValues=tertiary&" + 
                    "keys=highway&" + 
                    "timeout=58")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.735333 49.4374 ) and LINESTRING ( 8.704 49.415, 8.704561 49.403252 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/perimeter/groupBy/tag"));
    }
    
    
    @Test
    public void test_51_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/groupBy/tag?" + 
                    "bcircles=sJvD%3A8.7059%2C49.429%2C9%7CpMV%3A8.708%2C49.42256%2C159664957&" + 
                    "format=json&" + 
                    "groupByKey=building&" + 
                    "keys=highway&" + 
                    "showMetadata=yes&" + 
                    "values=primary_link")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El ángulo 4.537.381.885.242,889 es demasiado grande."))
                .body("'path'", containsString("/elements/perimeter/groupBy/tag"));
    }
    
    
    @Test
    public void test_52_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/key?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22NYNhx%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7404%2C49.4176%5D%2C%5B8.70602%2C49.415%5D%2C%5B8.7032%2C49.432146%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22l%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.727%2C49.4385%5D%2C%5B8.71865%2C49.402042%5D%2C%5B8.748%2C49.422%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=foot%3D*+or+area%3A%281.0+..+1E6%29&" + 
                    "groupByKeys=addr%3Acountry%2Coneway%2Ctracktype&" + 
                    "time=2013-09-01&" + 
                    "timeout=88")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.721892702947995 49.41620037893149, 8.720377352314152 49.40958401325381 ) and LINESTRING ( 8.73725396859125 49.417362080230866, 8.704561 49.403252 ) [ (8.720502961264296, 49.410132450511824, NaN) ]"))
                .body("'path'", containsString("/elements/perimeter/groupBy/key"));
    }
    
    
    @Test
    public void test_53_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/key?" + 
                    "bpolys=of%3A8.704561%2C49.403252%2C8.71850%2C49.4201%2C8.737%2C49.41225%2C8.7272%2C49.426%2C8.704561%2C49.403252&" + 
                    "format=csv&" + 
                    "groupByKeys=building%2Cbarrier%2Caddr%3Acountry&" + 
                    "keys=highway&" + 
                    "time=2013-11-23&" + 
                    "values=living_street")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.7185 49.4201, 8.737 49.41225 ) and LINESTRING ( 8.7272 49.426, 8.704561 49.403252 ) [ (8.720488531446986, 49.419256217737356, NaN) ]"))
                .body("'path'", containsString("/elements/perimeter/groupBy/key"));
    }
    
    
    @Test
    public void test_54_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/groupBy/key?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22wQ%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7476%2C49.41294%5D%2C%5B8.7025%2C49.4084%5D%2C%5B8.721%2C49.40206%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=landuse%21%3D*+or+geometry%3Aline+and+length%3A%28+..+100%29&" + 
                    "format=geojson&" + 
                    "groupByKeys=ref%2Clanes%2Caddr%3Acountry&" + 
                    "showMetadata=no&" + 
                    "timeout=75")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.7476 49.41294 ) and LINESTRING ( 8.7025 49.4084, 8.721 49.40206 ) [ (8.712383618753266, 49.405012857140775, NaN) ]"))
                .body("'path'", containsString("/elements/perimeter/groupBy/key"));
    }
    
    
    @Test
    public void test_55_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=8.704561%2C49.403252%2C8.715%2C49.408%2C8.736%2C49.426%2C8.7044%2C49.4110%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.707%2C49.401%2C8.728819%2C49.4307%2C8.734%2C49.412%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.7251%2C49.432396%2C8.706%2C49.421480%2C8.7017%2C49.4090%2C8.704561%2C49.403252&" + 
                    "format=geojson&" + 
                    "groupByKey=building&" + 
                    "keys=highway&" + 
                    "showMetadata=no&" + 
                    "time=2009-06-27&" + 
                    "timeout=59&" + 
                    "values=footway")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.715 49.408 ) and LINESTRING ( 8.7044 49.411, 8.704561 49.403252 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/perimeter/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_56_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22Cxl%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.700081%2C49.426%5D%2C%5B8.7048%2C49.403%5D%2C%5B8.704%2C49.4191%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22GIqmY%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.72156%2C49.414%5D%2C%5B8.7018%2C49.419%5D%2C%5B8.7202%2C49.409%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22yHdl%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7039%2C49.4048%5D%2C%5B8.701395%2C49.42181%5D%2C%5B8.7009%2C49.433%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "format=geojson&" + 
                    "groupByKey=building&" + 
                    "groupByValues=apartments%2Cstop_line&" + 
                    "timeout=48")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704280268174204 49.405533128203714, 8.7048 49.403 ) and LINESTRING ( 8.704 49.4191, 8.704561 49.403252 ) [ (8.704521948003055, 49.40435520151086, NaN) ]"))
                .body("'path'", containsString("/elements/perimeter/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_57_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/boundary?" + 
                    "bpolys=8.704561%2C49.403252%2C8.749%2C49.413346%2C8.719279%2C49.430%2C8.704568%2C49.420%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.745005%2C49.434%2C8.740755%2C49.41858%2C8.7493%2C49.4377%2C8.704561%2C49.403252&" + 
                    "keys=highway&" + 
                    "time=2013-09-24&" + 
                    "timeout=85&" + 
                    "values=speed_camera")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.749 49.413346 ) and LINESTRING ( 8.704568 49.42, 8.704561 49.403252 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/perimeter/groupBy/boundary"));
    }
    
    
    @Test
    public void test_58_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/groupBy/boundary?" + 
                    "bpolys=B%3A8.704561%2C49.403252%2C8.722953%2C49.4173%2C8.704356%2C49.425%2C8.708%2C49.4065%2C8.704561%2C49.403252%7Crl%3A8.704561%2C49.403252%2C8.743%2C49.403%2C8.7007%2C49.42355%2C8.712%2C49.4350%2C8.704561%2C49.403252&" + 
                    "keys=highway&" + 
                    "timeout=52&" + 
                    "values=secondary_link")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.722953 49.4173 ) and LINESTRING ( 8.708 49.4065, 8.704561 49.403252 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/perimeter/groupBy/boundary"));
    }
    
    
    @Test
    public void test_59_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/density/groupBy/type?" + 
                    "bcircles=vty%3A8.717%2C49.414%2C132409052&" + 
                    "filter=foot%3D*+and+not+id%3A%281+..+9999%29&" + 
                    "time=2018-05-08")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El ángulo 1.012.810.697.114,349 es demasiado grande."))
                .body("'path'", containsString("/elements/perimeter/density/groupBy/type"));
    }
    
    
    @Test
    public void test_60_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/density/groupBy/type?" + 
                    "bcircles=xe%3A8.707%2C49.43086%2C6%7Cl%3A8.733%2C49.43043%2C2%7Cz%3A8.727%2C49.430%2C4%7CM%3A8.7451%2C49.434%2C761184391&" + 
                    "filter=ref%21%3D*+and+type%3Arelation+or+area%3A%281.0+..+1E6%29&" + 
                    "time=2014-07-01")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El ángulo 1.215.547.721.887.745.790 es demasiado grande."))
                .body("'path'", containsString("/elements/perimeter/density/groupBy/type"));
    }
    
    
    @Test
    public void test_61_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/density/groupBy/type?" + 
                    "bpolys=MFo%3A8.704561%2C49.403252%2C8.729%2C49.428%2C8.701%2C49.4103%2C8.7040%2C49.413%2C8.704561%2C49.403252%7CqhcKO%3A8.704561%2C49.403252%2C8.743996%2C49.40080%2C8.716%2C49.4309%2C8.7047%2C49.431%2C8.704561%2C49.403252&" + 
                    "format=geojson&" + 
                    "keys=highway&" + 
                    "showMetadata=no&" + 
                    "time=2007-11-05&" + 
                    "timeout=89&" + 
                    "values=track")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.729 49.428 ) and LINESTRING ( 8.704 49.413, 8.704561 49.403252 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/perimeter/density/groupBy/type"));
    }
    
    
    @Test
    public void test_62_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/density/groupBy/type?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22unCfS%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.741%2C49.4225%5D%2C%5B8.714%2C49.409%5D%2C%5B8.712%2C49.418153%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22Q%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.746%2C49.429%5D%2C%5B8.700160%2C49.40912%5D%2C%5B8.747%2C49.4393%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22R%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.720912%2C49.4208%5D%2C%5B8.7419%2C49.406%5D%2C%5B8.7028%2C49.420%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "format=json&" + 
                    "keys=highway&" + 
                    "timeout=22")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.746 49.429, 8.712778055648975 49.41459222832246 ) and LINESTRING ( 8.747 49.4393, 8.713581718569186 49.41091426496812 ) [ (8.723267202213778, 49.41914118630039, NaN) ]"))
                .body("'path'", containsString("/elements/perimeter/density/groupBy/type"));
    }
    
    
    @Test
    public void test_63_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/density/groupBy/tag?" + 
                    "bcircles=8.745%2C49.4272%2C943742458&" + 
                    "groupByKey=highway&" + 
                    "time=2010-04-27&" + 
                    "timeout=60")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El ángulo 6.779.997.115.611.465.700 es demasiado grande."))
                .body("'path'", containsString("/elements/perimeter/density/groupBy/tag"));
    }
    
    
    @Test
    public void test_64_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/density/groupBy/tag?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22Ubs%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.722%2C49.422%5D%2C%5B8.746%2C49.409%5D%2C%5B8.705%2C49.4307%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "groupByKey=building&" + 
                    "groupByValues=school&" + 
                    "keys=highway&" + 
                    "showMetadata=false&" + 
                    "values=platform")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.722 49.422 ) and LINESTRING ( 8.746 49.409, 8.705 49.4307 ) [ (8.721814526320985, 49.42180060436182, NaN) ]"))
                .body("'path'", containsString("/elements/perimeter/density/groupBy/tag"));
    }
    
    
    @Test
    public void test_65_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/density/groupBy/tag?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22a%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7349%2C49.405%5D%2C%5B8.70119%2C49.433042%5D%2C%5B8.704560%2C49.437%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22c%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7328%2C49.42592%5D%2C%5B8.705004%2C49.4174%5D%2C%5B8.713%2C49.4168%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "format=csv&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=speed_camera%2Chotel&" + 
                    "keys=highway&" + 
                    "showMetadata=no&" + 
                    "time=2016-12-07&" + 
                    "timeout=60&" + 
                    "values=elevator")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.71595754627927 49.42075746921497, 8.70119 49.433042 ) and LINESTRING ( 8.70456 49.437, 8.704561 49.403252 ) [ (8.704560200353646, 49.4302384651938, NaN) ]"))
                .body("'path'", containsString("/elements/perimeter/density/groupBy/tag"));
    }
    
    
    @Test
    public void test_66_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/density/groupBy/tag?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22x%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7188%2C49.405%5D%2C%5B8.702%2C49.409002%5D%2C%5B8.701%2C49.438%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=bicycle%21%3D*+and+length%3A%28+..+100%29&" + 
                    "format=geojson&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=synagogue%2Croof%2Cship&" + 
                    "showMetadata=yes&" + 
                    "time=2008-09-14")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.7188 49.405, 8.702 49.409002 ) and LINESTRING ( 8.701 49.438, 8.704561 49.403252 ) [ (8.704021075105207, 49.40852055103744, NaN) ]"))
                .body("'path'", containsString("/elements/perimeter/density/groupBy/tag"));
    }
    
    
    @Test
    public void test_67_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/density/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=kwvBQ%3A8.708%2C49.401%2C4%7CfR%3A8.717587%2C49.418%2C800456389&" + 
                    "format=geojson&" + 
                    "groupByKey=foo&" + 
                    "groupByValues=yes%2Coffice&" + 
                    "time=2012-12-03")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El ángulo 1.813.156.992.231.254.270 es demasiado grande."))
                .body("'path'", containsString("/elements/perimeter/density/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_68_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/density/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22LX%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7496%2C49.401%5D%2C%5B8.70128%2C49.43307%5D%2C%5B8.7305%2C49.427%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22NQ%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.749%2C49.413%5D%2C%5B8.708%2C49.4390%5D%2C%5B8.7055%2C49.417920%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22Cp%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7130%2C49.402%5D%2C%5B8.741%2C49.4283%5D%2C%5B8.70457%2C49.401%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "groupByKey=building&" + 
                    "showMetadata=no&" + 
                    "timeout=76")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.735861802643653 49.410118046134485, 8.706857694751704 49.429368082146375 ) and LINESTRING ( 8.72903628217528 49.42565991862055, 8.704561 49.403252 ) [ (8.722063420791745, 49.419276036738594, NaN) ]"))
                .body("'path'", containsString("/elements/perimeter/density/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_69_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/density/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=XdL%3A8.704561%2C49.403252%2C8.71322%2C49.4054%2C8.70390%2C49.406%2C8.71632%2C49.4122%2C8.704561%2C49.403252%7CO%3A8.704561%2C49.403252%2C8.716%2C49.4352%2C8.71959%2C49.43651%2C8.70344%2C49.410%2C8.704561%2C49.403252&" + 
                    "format=geojson&" + 
                    "groupByKey=building&" + 
                    "timeout=73")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.71322 49.4054 ) and LINESTRING ( 8.71632 49.4122, 8.704561 49.403252 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/perimeter/density/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_70_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/density/groupBy/boundary?" + 
                    "bcircles=XQ%3A8.7443%2C49.439135%2C4%7ChrpBw%3A8.728%2C49.409%2C8%7CXDjjT%3A8.726%2C49.422922%2C8%7CCmNWv%3A8.709%2C49.406%2C407436209&" + 
                    "showMetadata=true&" + 
                    "timeout=60&" + 
                    "values=path")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El ángulo 8.151.073.748.683.335 es demasiado grande."))
                .body("'path'", containsString("/elements/perimeter/density/groupBy/boundary"));
    }
    
    
    @Test
    public void test_71_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/density/groupBy/boundary?" + 
                    "bpolys=y%3A8.704561%2C49.403252%2C8.710464%2C49.4091%2C8.7011%2C49.432691%2C8.704%2C49.413%2C8.704561%2C49.403252%7CmJ%3A8.704561%2C49.403252%2C8.730753%2C49.407788%2C8.7011%2C49.4118%2C8.703113%2C49.4080%2C8.704561%2C49.403252&" + 
                    "format=csv&" + 
                    "time=2007-12-30&" + 
                    "timeout=62")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.710464 49.4091 ) and LINESTRING ( 8.704561 49.403252, 8.730753 49.407788 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/perimeter/density/groupBy/boundary"));
    }
    
    
    @Test
    public void test_72_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/density?" + 
                    "bcircles=f%3A8.7.04%2C49.434%2C6%7CO%3A8.7343%2C49.406277%2C4&" + 
                    "format=geojso&" + 
                    "keys=highway&" + 
                    "showMetadata=false&" + 
                    "values=elevator")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_114_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/perimeter/density"));
    }
    
    
    @Test
    public void test_73_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/density?" + 
                    "bcircles=8.7090%2C49.402%2C2%7C8.70789%2C49.4290%2C3%7C8.72555%2C49.431%2C3012206365&" + 
                    "format=json&" + 
                    "showMetadata=true&" + 
                    "time=2011-06-24")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El ángulo 73.081.734.500.747.705.000.000 es demasiado grande."))
                .body("'path'", containsString("/elements/perimeter/density"));
    }
    
    
    @Test
    public void test_74_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/density?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22L%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.726279%2C49.4002%5D%2C%5B8.74000%2C49.435235%5D%2C%5B8.746%2C49.4223%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "format=csv&" + 
                    "keys=highway&" + 
                    "time=2011-02-22&" + 
                    "timeout=45&" + 
                    "values=street_lamp")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.726279 49.4002, 8.74 49.435235 ) and LINESTRING ( 8.746 49.4223, 8.704561 49.403252 ) [ (8.732504743365485, 49.41609672172653, NaN) ]"))
                .body("'path'", containsString("/elements/perimeter/density"));
    }
    
    
    @Test
    public void test_75_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter?" + 
                    "bpolys=BO%3A8.704561%2C49.403252%2C8.744%2C49.406%2C8.707863%2C49.4362%2C8.7355%2C49.431%2C8.704561%2C49.403252%7CbBJ%3A8.704561%2C49.403252%2C8.738%2C49.432%2C8.705661%2C49.413%2C8.704867%2C49.4117%2C8.704561%2C49.403252%7CQPI%3A8.704561%2C49.403252%2C8.732%2C49.412%2C8.704%2C49.427%2C8.701084%2C49.412%2C8.704561%2C49.403252&" + 
                    "format=geojson&" + 
                    "showMetadata=false&" + 
                    "time=2009-09-26&" + 
                    "timeout=72")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.744 49.406 ) and LINESTRING ( 8.704561 49.403252, 8.732 49.412 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/perimeter"));
    }
    
    
    @Test
    public void test_76_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter?" + 
                    "bpolys=dB%3A8.704561%2C49.403252%2C8.726%2C49.40772%2C8.720479%2C49.428%2C8.70215%2C49.429%2C8.704561%2C49.403252%7CbYjV%3A8.704561%2C49.403252%2C8.729361%2C49.4216%2C8.74682%2C49.40597%2C8.730%2C49.417%2C8.704561%2C49.403252&" + 
                    "keys=highway&" + 
                    "showMetadata=no&" + 
                    "time=2011-11-13&" + 
                    "timeout=99&" + 
                    "values=tertiary")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.726 49.40772 ) and LINESTRING ( 8.704561 49.403252, 8.729361 49.4216 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/perimeter"));
    }
    
    
    @Test
    public void test_77_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/ratio/groupBy/boundary?" + 
                    "bcircles=8.745%2C49.4358%2C771459690&" + 
                    "format=geojson&" + 
                    "keys=highway&" + 
                    "values=elevator")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El ángulo 1.353.589.259.149.690.370 es demasiado grande."))
                .body("'path'", containsString("/elements/length/ratio/groupBy/boundary"));
    }
    
    
    @Test
    public void test_78_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/ratio/groupBy/boundary?" + 
                    "bpolys=u%3A8.704561%2C49.403252%2C8.7289%2C49.4213%2C8.732301%2C49.4296%2C8.703%2C49.4269%2C8.704561%2C49.403252%7CJ%3A8.704561%2C49.403252%2C8.716%2C49.4103%2C8.746%2C49.403%2C8.739%2C49.418%2C8.704561%2C49.403252%7CY%3A8.704561%2C49.403252%2C8.713%2C49.435%2C8.704069%2C49.413%2C8.7060%2C49.40476%2C8.704561%2C49.403252&" + 
                    "keys=highway&" + 
                    "timeout=54")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.7289 49.4213 ) and LINESTRING ( 8.703 49.4269, 8.704561 49.403252 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/length/ratio/groupBy/boundary"));
    }
    
    
    @Test
    public void test_79_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/ratio/groupBy/boundary?" + 
                    "bpolys=aK%3A8.704561%2C49.403252%2C8.7413%2C49.427%2C8.700561%2C49.4389%2C8.737%2C49.429%2C8.704561%2C49.403252%7Cayti%3A8.704561%2C49.403252%2C8.748917%2C49.426%2C8.7202%2C49.419%2C8.7108%2C49.4217%2C8.704561%2C49.403252%7CZtX%3A8.704561%2C49.403252%2C8.735%2C49.42239%2C8.739530%2C49.41994%2C8.704561%2C49.434%2C8.704561%2C49.403252&" + 
                    "keys2=highway&" + 
                    "showMetadata=yes&" + 
                    "values2=stop_line")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.7413 49.427 ) and LINESTRING ( 8.7108 49.4217, 8.704561 49.403252 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/length/ratio/groupBy/boundary"));
    }
    
    
    @Test
    public void test_80_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/ratio?" + 
                    "bpolys=8.704561%2C49.403252%2C8.73046%2C49.4051%2C8.7003%2C49.4025%2C8.704338%2C49.4017%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.7187%2C49.41255%2C8.729%2C49.405%2C8.73917%2C49.438%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.714%2C49.43096%2C8.7273%2C49.402%2C8.734%2C49.402%2C8.704561%2C49.403252&" + 
                    "filter2=oneway%21%3D*+and+area%3A%281.0+..+1E6%29&" + 
                    "format=csv&" + 
                    "keys2=highway&" + 
                    "showMetadata=yes&" + 
                    "time=2008-04-16&" + 
                    "values2=cycleway")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.73046 49.4051 ) and LINESTRING ( 8.704338 49.4017, 8.704561 49.403252 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/length/ratio"));
    }
    
    
    @Test
    public void test_81_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/ratio?" + 
                    "bcircles=fo%3A8.7407%2C49.406%2C65%7CVp%3A8.700%2C49.416%2C98%7CNDuuA%3A8.706%2C49.404%2C8%7CI%3A8.747%2C49.4116%2C364487645458&" + 
                    "keys2=highway&" + 
                    "timeout=41")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El ángulo 3.348.536.814.537.033.000.000.000.000.000.000.000.000 es demasiado grande."))
                .body("'path'", containsString("/elements/length/ratio"));
    }
    
    
    @Test
    public void test_82_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/ratio?" + 
                    "bpolys=EXtfq%3A8.704561%2C49.403252%2C8.7242%2C49.43600%2C8.714%2C49.429%2C8.734%2C49.408%2C8.704561%2C49.403252%7CWVQhi%3A8.704561%2C49.403252%2C8.70507%2C49.4184%2C8.727184%2C49.4179%2C8.74331%2C49.408%2C8.704561%2C49.403252%7CU%3A8.704561%2C49.403252%2C8.7466%2C49.4324%2C8.703%2C49.41162%2C8.73698%2C49.4201%2C8.704561%2C49.403252&" + 
                    "filter2=maxspeed%3D*+or+geometry%3Apolygon+or+not+id%3A%281+..+9999%29&" + 
                    "keys=highway&" + 
                    "keys2=highway&" + 
                    "time=2010-09-05&" + 
                    "timeout=52&" + 
                    "types2=other&" + 
                    "values=street_lamp&" + 
                    "values2=crossing")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.7242 49.436 ) and LINESTRING ( 8.734 49.408, 8.704561 49.403252 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/length/ratio"));
    }
    
    
    @Test
    public void test_83_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/type?" + 
                    "bpolys=F%3A8.704561%2C49.403252%2C8.71644%2C49.41228%2C8.701%2C49.438%2C8.708%2C49.416%2C8.704561%2C49.403252%7COg%3A8.704561%2C49.403252%2C8.729%2C49.403326%2C8.7035%2C49.413%2C8.747%2C49.414541%2C8.704561%2C49.403252%7CicRMd%3A8.704561%2C49.403252%2C8.7170%2C49.408%2C8.704%2C49.413%2C8.728%2C49.424%2C8.704561%2C49.403252&" + 
                    "filter=ref%21%3D*+and+area%3A%281.0+..+1E6%29&" + 
                    "time=2015-06-16&" + 
                    "timeout=64")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.71644 49.41228 ) and LINESTRING ( 8.708 49.416, 8.704561 49.403252 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/length/groupBy/type"));
    }
    
    
    @Test
    public void test_84_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/type?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22YaJgv%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7139%2C49.415%5D%2C%5B8.7283%2C49.416%5D%2C%5B8.741%2C49.4356%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22G%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.710028%2C49.43960%5D%2C%5B8.7049%2C49.4332%5D%2C%5B8.729%2C49.41766%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22nWLV%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7482%2C49.400%5D%2C%5B8.747%2C49.416880%5D%2C%5B8.73646%2C49.4183%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "timeout=35")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.7139 49.415, 8.725901801086339 49.41583345840877 ) and LINESTRING ( 8.72424500410395 49.420726084490646, 8.704561 49.403252 ) [ (8.718125281841717, 49.41529342235012, NaN) ]"))
                .body("'path'", containsString("/elements/length/groupBy/type"));
    }
    
    
    @Test
    public void test_85_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/groupBy/type?" + 
                    "bpolys=8.704561%2C49.403252%2C8.727%2C49.43096%2C8.717%2C49.4148%2C8.701%2C49.427%2C8.704561%2C49.403252&" + 
                    "filter=lit%21%3D*+or+type%3Anode+and+area%3A%281.0+..+1E6%29&" + 
                    "showMetadata=false")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.727 49.43096 ) and LINESTRING ( 8.717 49.4148, 8.701 49.427 ) [ (8.715091509193208, 49.41625522424018, NaN) ]"))
                .body("'path'", containsString("/elements/length/groupBy/type"));
    }
    
    
    @Test
    public void test_86_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/tag?" + 
                    "bcircles=Kav%3A8.718%2C49.4010%2C4%7Cb%3A8.742%2C49.427%2C5%7CgawMg%3A8.7393%2C49.423%2C2%7CQCw%3A8.720%2C49.42962%2C555469144856&" + 
                    "groupByKey=building&" + 
                    "groupByValues=primary%2Cgive_way")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El ángulo 97.710.051.648.562.020.000.000.000.000.000.000.000.000 es demasiado grande."))
                .body("'path'", containsString("/elements/length/groupBy/tag"));
    }
    
    
    @Test
    public void test_87_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/tag?" + 
                    "bpolys=8.704561%2C49.403252%2C8.7492%2C49.40738%2C8.708602%2C49.4373%2C8.7110%2C49.408%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.738%2C49.410%2C8.7241%2C49.43804%2C8.704368%2C49.414647%2C8.704561%2C49.403252&" + 
                    "format=csv&" + 
                    "groupByKey=building&" + 
                    "keys=highway&" + 
                    "values=residential")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.7492 49.40738 ) and LINESTRING ( 8.711 49.408, 8.704561 49.403252 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/length/groupBy/tag"));
    }
    
    
    @Test
    public void test_88_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/tag?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22Yyl%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.72440%2C49.4272%5D%2C%5B8.709%2C49.4317%5D%2C%5B8.72097%2C49.40478%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22kA%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7096%2C49.42531%5D%2C%5B8.700%2C49.427%5D%2C%5B8.7045%2C49.4391%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22DIs%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7248%2C49.424%5D%2C%5B8.70296%2C49.403%5D%2C%5B8.700466%2C49.41025%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=source%3Amaxspeed%3D*+and+length%3A%28+..+100%29&" + 
                    "format=json&" + 
                    "groupByKey=highway&" + 
                    "showMetadata=yes&" + 
                    "time=2014-02-12")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.7244 49.4272 ) and LINESTRING ( 8.709 49.4317, 8.72097 49.40478 ) [ (8.715680879199697, 49.41667499849157, NaN) ]"))
                .body("'path'", containsString("/elements/length/groupBy/tag"));
    }
    
    
    @Test
    public void test_89_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/groupBy/tag?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22EuN%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.707%2C49.423%5D%2C%5B8.70579%2C49.4030%5D%2C%5B8.7039%2C49.417%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "groupByKey=highway&" + 
                    "keys=highway&" + 
                    "values=living_street")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.707 49.423 ) and LINESTRING ( 8.70579 49.403, 8.7039 49.417 ) [ (8.705131924121153, 49.40787463613962, NaN) ]"))
                .body("'path'", containsString("/elements/length/groupBy/tag"));
    }
    
    
    @Test
    public void test_90_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/key?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22Wdc%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7102%2C49.429%5D%2C%5B8.726%2C49.437%5D%2C%5B8.703%2C49.413%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=lit%3D*+or+area%3A%281.0+..+1E6%29&" + 
                    "groupByKeys=bicycle%2Caddr%3Apostcode%2Clit&" + 
                    "showMetadata=false&" + 
                    "time=2013-02-21")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.7102 49.429 ) and LINESTRING ( 8.726 49.437, 8.703 49.413 ) [ (8.707790698407416, 49.41799898964252, NaN) ]"))
                .body("'path'", containsString("/elements/length/groupBy/key"));
    }
    
    
    @Test
    public void test_91_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/groupBy/key?" + 
                    "bpolys=f%3A8.704561%2C49.403252%2C8.7459%2C49.4377%2C8.704%2C49.4167%2C8.7040%2C49.437676%2C8.704561%2C49.403252&" + 
                    "format=csv&" + 
                    "groupByKeys=foot%2Cname&" + 
                    "time=2016-05-09&" + 
                    "timeout=94")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.7459 49.4377, 8.704 49.4167 ) and LINESTRING ( 8.704 49.437676, 8.704561 49.403252 ) [ (8.704339071561561, 49.41686994040078, NaN) ]"))
                .body("'path'", containsString("/elements/length/groupBy/key"));
    }
    
    
    @Test
    public void test_92_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/groupBy/key?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22sbQun%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.700%2C49.423%5D%2C%5B8.735%2C49.407816%5D%2C%5B8.7049%2C49.436%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22gWh%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7006%2C49.4354%5D%2C%5B8.720%2C49.4162%5D%2C%5B8.721%2C49.43327%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22fe%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.715776%2C49.42063%5D%2C%5B8.7041%2C49.430%5D%2C%5B8.72409%2C49.43746%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=ref%3D*+or+area%3A%281.0+..+1E6%29&" + 
                    "groupByKeys=network%2Ctype%2Cfoot&" + 
                    "time=2010-07-02")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.7 49.423, 8.712691620365947 49.41749401246753 ) and LINESTRING ( 8.704831809964462 49.42941272187675, 8.704561 49.403252 ) [ (8.704744121536462, 49.42094186453115, NaN) ]"))
                .body("'path'", containsString("/elements/length/groupBy/key"));
    }
    
    
    @Test
    public void test_93_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=Z%3A8.73563%2C49.429%2C5&" + 
                    "format=geojson&" + 
                    "groupByKey=highway&" + 
                    "keys=highway&" + 
                    "time=2010-08-28&" + 
                    "timeout=34&" + 
                    "values=secondary_link")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/utils/GroupByBoundaryGeoJsonGenerator_75_generateGroupByResultGeoJson
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Index 0 out of bounds for length 0"))
                .body("'path'", containsString("/elements/length/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_94_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22fk%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.704%2C49.40177%5D%2C%5B8.704%2C49.433%5D%2C%5B8.729312%2C49.402%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22d%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.73766%2C49.413%5D%2C%5B8.705%2C49.422%5D%2C%5B8.7096%2C49.404%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "format=csv&" + 
                    "groupByKey=building&" + 
                    "groupByValues=construction%2Cemergency_access_point%2Ctower&" + 
                    "time=2013-11-25")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.723689777007413 49.408885623924235 ) and LINESTRING ( 8.705 49.422, 8.7096 49.404 ) [ (8.709425067493695, 49.40468451850293, NaN) ]"))
                .body("'path'", containsString("/elements/length/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_95_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/boundary?" + 
                    "bcircles=8.717%2C49.426292%2C4%7C8.72036%2C49.432%2C8%7C8.7232%2C49.4052%2C3%7C8.711%2C49.4321%2C771400082119&" + 
                    "keys=highway&" + 
                    "showMetadata=no&" + 
                    "time=2009-09-03&" + 
                    "values=speed_camera")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El ángulo 1.352.298.576.975.421.000.000.000.000.000.000.000.000.000 es demasiado grande."))
                .body("'path'", containsString("/elements/length/groupBy/boundary"));
    }
    
    
    @Test
    public void test_96_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/groupBy/boundary?" + 
                    "bpolys=lSB%3A8.704561%2C49.403252%2C8.7382%2C49.4167%2C8.709%2C49.4387%2C8.729926%2C49.430%2C8.704561%2C49.403252%7CHot%3A8.704561%2C49.403252%2C8.7471%2C49.406%2C8.71887%2C49.40611%2C8.706%2C49.4343%2C8.704561%2C49.403252%7ChdjCI%3A8.704561%2C49.403252%2C8.718%2C49.419157%2C8.7444%2C49.419%2C8.7043%2C49.401%2C8.704561%2C49.403252&" + 
                    "keys=highway&" + 
                    "showMetadata=false&" + 
                    "time=2016-04-10&" + 
                    "timeout=61")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.7382 49.4167 ) and LINESTRING ( 8.704561 49.403252, 8.718 49.419157 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/length/groupBy/boundary"));
    }
    
    
    @Test
    public void test_97_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density/groupBy/type?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22uTn%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.727%2C49.4172%5D%2C%5B8.704319%2C49.423%5D%2C%5B8.7243%2C49.414%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22q%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7381%2C49.420%5D%2C%5B8.736762%2C49.408798%5D%2C%5B8.70456%2C49.431%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22v%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.731%2C49.4291%5D%2C%5B8.749%2C49.424028%5D%2C%5B8.7304%2C49.430%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=lanes%3D*+or+area%3A%281.0+..+1E6%29&" + 
                    "format=json&" + 
                    "time=2017-09-28&" + 
                    "timeout=21")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.7381 49.42 ) and LINESTRING ( 8.736762 49.408798, 8.721204989577814 49.41952394079229 ) [ (8.727901226731767, 49.41490715123599, NaN) ]"))
                .body("'path'", containsString("/elements/length/density/groupBy/type"));
    }
    
    
    @Test
    public void test_98_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/density/groupBy/type?" + 
                    "bpolys=LNJSl%3A8.704561%2C49.403252%2C8.7264%2C49.438755%2C8.705%2C49.41987%2C8.7055%2C49.4253%2C8.704561%2C49.403252&" + 
                    "filter=highway%21%3D*+and+length%3A%28+..+100%29&" + 
                    "showMetadata=false&" + 
                    "time=2014-03-12&" + 
                    "timeout=61")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.7264 49.438755, 8.705 49.41987 ) and LINESTRING ( 8.7055 49.4253, 8.704561 49.403252 ) [ (8.705279237052991, 49.42011642017504, NaN) ]"))
                .body("'path'", containsString("/elements/length/density/groupBy/type"));
    }
    
    
    @Test
    public void test_99_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/density/groupBy/type?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22VwPRa%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.727%2C49.410964%5D%2C%5B8.7042%2C49.401%5D%2C%5B8.701%2C49.439%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22v%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.709%2C49.4044%5D%2C%5B8.704%2C49.4225%5D%2C%5B8.741770%2C49.416%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22r%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.719%2C49.404796%5D%2C%5B8.705%2C49.43856%5D%2C%5B8.717%2C49.4023%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "time=2014-09-04")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.710905538848237 49.40393043811771, 8.719 49.404796 ) and LINESTRING ( 8.715758538131832 49.40605128394498, 8.717 49.4023 ) [ (8.716270557022543, 49.40450413353022, NaN) ]"))
                .body("'path'", containsString("/elements/length/density/groupBy/type"));
    }
    
    
    @Test
    public void test_100_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/density/groupBy/tag?" + 
                    "bcircles=lo%3A8.733%2C49.414%2C6%7CIXikb%3A8.7368%2C49.414%2C4%7CsSXSH%3A8.730%2C49.411%2C8%7CehTkv%3A8.71034%2C49.403%2C881832377620&" + 
                    "groupByKey=building&" + 
                    "groupByValues=dormitory%2Ctower&" + 
                    "keys=highway&" + 
                    "time=2014-05-26&" + 
                    "values=unclassified")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El ángulo 3.925.406.323.192.392.600.000.000.000.000.000.000.000.000 es demasiado grande."))
                .body("'path'", containsString("/elements/length/density/groupBy/tag"));
    }
    
    
    @Test
    public void test_101_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/density/groupBy/tag?" + 
                    "bpolys=IcV%3A8.704561%2C49.403252%2C8.70860%2C49.4349%2C8.706%2C49.410422%2C8.70298%2C49.4383%2C8.704561%2C49.403252%7CRxeG%3A8.704561%2C49.403252%2C8.727%2C49.427%2C8.7047%2C49.43806%2C8.725%2C49.4382%2C8.704561%2C49.403252%7CbYT%3A8.704561%2C49.403252%2C8.7112%2C49.430%2C8.749786%2C49.4024%2C8.708%2C49.422341%2C8.704561%2C49.403252&" + 
                    "groupByKey=highway&" + 
                    "showMetadata=no&" + 
                    "time=2008-03-09&" + 
                    "timeout=28")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.7086 49.4349 ) and LINESTRING ( 8.70298 49.4383, 8.704561 49.403252 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/length/density/groupBy/tag"));
    }
    
    
    @Test
    public void test_102_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22zgvf%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7062%2C49.402%5D%2C%5B8.704%2C49.40920%5D%2C%5B8.7397%2C49.403818%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22eZq%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.728%2C49.401%5D%2C%5B8.726%2C49.40008%5D%2C%5B8.74492%2C49.4381%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22u%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.714%2C49.416678%5D%2C%5B8.700%2C49.4194%5D%2C%5B8.722%2C49.4059%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=destination%3D*+or+length%3A%28+..+100%29&" + 
                    "groupByKey=highway&" + 
                    "time=2015-12-19")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.714 49.416678 ) and LINESTRING ( 8.7 49.4194, 8.71359852148204 49.411055452726934 ) [ (8.71111747812729, 49.412577911149164, NaN) ]"))
                .body("'path'", containsString("/elements/length/density/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_103_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=8.704561%2C49.403252%2C8.7140%2C49.43457%2C8.70495%2C49.43786%2C8.739%2C49.410%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.729145%2C49.417%2C8.703%2C49.411554%2C8.7149%2C49.4235%2C8.704561%2C49.403252&" + 
                    "filter=oneway%21%3D*+or+type%3Anode+or+not+length%3A%28+..+100%29&" + 
                    "groupByKey=highway")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.714 49.43457 ) and LINESTRING ( 8.703 49.411554, 8.7149 49.4235 ) [ (8.708825793733695, 49.41740231360863, NaN) ]"))
                .body("'path'", containsString("/elements/length/density/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_104_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/density/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=8.733%2C49.4219%2C361974366&" + 
                    "format=geojson&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=street_lamp%2Ctraffic_mirror&" + 
                    "keys=highway&" + 
                    "showMetadata=false&" + 
                    "values=tertiary")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El ángulo 3.171.325.431.477.904,5 es demasiado grande."))
                .body("'path'", containsString("/elements/length/density/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_105_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/density/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22YWwa%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.701%2C49.437%5D%2C%5B8.725%2C49.4118%5D%2C%5B8.71389%2C49.40303%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22sAxOw%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.72263%2C49.403%5D%2C%5B8.7117%2C49.401%5D%2C%5B8.701%2C49.434%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=demolished%2Celevator%2Ccommercial&" + 
                    "keys=highway&" + 
                    "timeout=37")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.714004390427299 49.40312029739401 ) and LINESTRING ( 8.711019640413696 49.40309830526618, 8.70146926318175 49.43255273971984 ) [ (8.710998918711292, 49.403162213320314, NaN) ]"))
                .body("'path'", containsString("/elements/length/density/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_106_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density/groupBy/boundary?" + 
                    "bpolys=8.704561%2C49.403252%2C8.733623%2C49.4121%2C8.704%2C49.409778%2C8.708%2C49.434982%2C8.704561%2C49.403252&" + 
                    "format=csv&" + 
                    "keys=highway&" + 
                    "time=2010-12-02&" + 
                    "timeout=48")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.733623 49.4121, 8.704 49.409778 ) and LINESTRING ( 8.708 49.434982, 8.704561 49.403252 ) [ (8.705279176383556, 49.40987826829027, NaN) ]"))
                .body("'path'", containsString("/elements/length/density/groupBy/boundary"));
    }
    
    
    @Test
    public void test_107_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/density/groupBy/boundary?" + 
                    "bpolys=s%3A8.704561%2C49.403252%2C8.700%2C49.438%2C8.749835%2C49.435434%2C8.732%2C49.436598%2C8.704561%2C49.403252%7CQK%3A8.704561%2C49.403252%2C8.7341%2C49.412%2C8.704%2C49.42363%2C8.709%2C49.411%2C8.704561%2C49.403252%7CuMd%3A8.704561%2C49.403252%2C8.7155%2C49.43376%2C8.74512%2C49.4273%2C8.72731%2C49.427%2C8.704561%2C49.403252&" + 
                    "filter=network%3D*+and+type%3Away+and+not+area%3A%281.0+..+1E6%29&" + 
                    "format=json&" + 
                    "timeout=71")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.7 49.438 ) and LINESTRING ( 8.709 49.411, 8.704561 49.403252 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/length/density/groupBy/boundary"));
    }
    
    
    @Test
    public void test_108_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/density?" + 
                    "bpolys=8.704561%2C49.403252%2C8.743%2C49.402%2C8.720%2C49.42687%2C8.725%2C49.418%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.724%2C49.4114%2C8.73577%2C49.4108%2C8.701%2C49.4306%2C8.704561%2C49.403252&" + 
                    "format=geojson&" + 
                    "keys=highway&" + 
                    "time=2012-12-05&" + 
                    "values=secondary_link")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.743 49.402 ) and LINESTRING ( 8.704561 49.403252, 8.724 49.4114 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/length/density"));
    }
    
    
    @Test
    public void test_109_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length?" + 
                    "bpolys=YBGMO%3A8.704561%2C49.403252%2C8.742%2C49.42220%2C8.743%2C49.434164%2C8.7477%2C49.420%2C8.704561%2C49.403252%7CTBc%3A8.704561%2C49.403252%2C8.717%2C49.41435%2C8.704%2C49.417%2C8.7023%2C49.434%2C8.704561%2C49.403252%7CkCcr%3A8.704561%2C49.403252%2C8.72131%2C49.4271%2C8.703%2C49.427599%2C8.704%2C49.406%2C8.704561%2C49.403252&" + 
                    "format=geojson&" + 
                    "keys=highway&" + 
                    "showMetadata=no&" + 
                    "values=residential")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.742 49.4222 ) and LINESTRING ( 8.7023 49.434, 8.704561 49.403252 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/length"));
    }
    
    
    @Test
    public void test_110_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22v%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.70368%2C49.412%5D%2C%5B8.731%2C49.415%5D%2C%5B8.7096%2C49.4262%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=barrier%21%3D*+or+type%3Arelation+and+id%3A%281+..+9999%29&" + 
                    "format=json")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.70368 49.412, 8.731 49.415 ) and LINESTRING ( 8.7096 49.4262, 8.704561 49.403252 ) [ (8.706551145793364, 49.41231527955271, NaN) ]"))
                .body("'path'", containsString("/elements/length"));
    }
    
    
    @Test
    public void test_111_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/ratio/groupBy/boundary?" + 
                    "bpolys=tMSF%3A8.704561%2C49.403252%2C8.744%2C49.4072%2C8.7137%2C49.4115%2C8.743597%2C49.4391%2C8.704561%2C49.403252%7CT%3A8.704561%2C49.403252%2C8.718%2C49.432%2C8.7104%2C49.4291%2C8.708518%2C49.422%2C8.704561%2C49.403252&" + 
                    "filter2=lit%3D*+and+geometry%3Apoint+and+length%3A%28+..+100%29&" + 
                    "keys=highway&" + 
                    "keys2=highway&" + 
                    "time=2010-07-11&" + 
                    "values=platform")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.744 49.4072 ) and LINESTRING ( 8.704561 49.403252, 8.718 49.432 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/count/ratio/groupBy/boundary"));
    }
    
    
    @Test
    public void test_112_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/ratio?" + 
                    "bpolys=ob%3A8.704561%2C49.403252%2C8.739%2C49.431277%2C8.704289%2C49.4355%2C8.74603%2C49.4181%2C8.704561%2C49.403252%7CgJ%3A8.704561%2C49.403252%2C8.74680%2C49.426763%2C8.7049%2C49.434%2C8.734%2C49.430%2C8.704561%2C49.403252&" + 
                    "filter=highway%3D*+and+geometry%3Aline+or+not+length%3A%28+..+100%29&" + 
                    "filter2=destination%3D*+and+type%3Arelation+or+length%3A%28+..+100%29&" + 
                    "format=geojson&" + 
                    "keys2=highway&" + 
                    "showMetadata=yes&" + 
                    "time=2016-02-27&" + 
                    "timeout=50&" + 
                    "types2=point%2Cpolygon%2Cother&" + 
                    "values2=traffic_mirror")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.739 49.431277 ) and LINESTRING ( 8.74603 49.4181, 8.704561 49.403252 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/count/ratio"));
    }
    
    
    @Test
    public void test_113_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/ratio?" + 
                    "bpolys=8.704561%2C49.403252%2C8.714344%2C49.431%2C8.70422%2C49.437%2C8.701%2C49.4186%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.7477%2C49.4338%2C8.701%2C49.422662%2C8.704%2C49.415%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.715%2C49.402%2C8.720%2C49.435%2C8.70140%2C49.42470%2C8.704561%2C49.403252&" + 
                    "showMetadata=yes&" + 
                    "time=2010-05-29&" + 
                    "timeout=64&" + 
                    "types2=point%2Cpolygon%2Cother")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.714344 49.431 ) and LINESTRING ( 8.701 49.4186, 8.704561 49.403252 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/count/ratio"));
    }
    
    
    @Test
    public void test_114_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/ratio?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22z%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7160%2C49.439518%5D%2C%5B8.7046%2C49.409%5D%2C%5B8.7097%2C49.4118%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22JgPLR%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7398%2C49.410%5D%2C%5B8.702928%2C49.403%5D%2C%5B8.703%2C49.437%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "keys=highway&" + 
                    "showMetadata=no&" + 
                    "timeout=42&" + 
                    "values=cycleway")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704580465774196 49.40331371394064, 8.702928 49.403 ) and LINESTRING ( 8.703 49.437, 8.704561 49.403252 ) [ (8.704558339740972, 49.40330951340277, NaN) ]"))
                .body("'path'", containsString("/elements/count/ratio"));
    }
    
    
    @Test
    public void test_115_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/groupBy/type?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22m%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7370%2C49.4018%5D%2C%5B8.722052%2C49.418%5D%2C%5B8.7021%2C49.4104%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22Y%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.747%2C49.419%5D%2C%5B8.726371%2C49.4167%5D%2C%5B8.70417%2C49.434%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22hX%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.736%2C49.419%5D%2C%5B8.719%2C49.400%5D%2C%5B8.70107%2C49.43089%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "format=geojson&" + 
                    "keys=highway&" + 
                    "showMetadata=no&" + 
                    "time=2015-03-31&" + 
                    "timeout=36&" + 
                    "values=traffic_mirror")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.732850570348434 49.41742243016149 ) and LINESTRING ( 8.71488805714747 49.40708410009563, 8.704279868566807 49.42536000334474 ) [ (8.714285107282748, 49.40812286871366, NaN) ]"))
                .body("'path'", containsString("/elements/count/groupBy/type"));
    }
    
    
    @Test
    public void test_116_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/groupBy/type?" + 
                    "bpolys=svRUh%3A8.704561%2C49.403252%2C8.701000%2C49.431%2C8.70751%2C49.433%2C8.70456%2C49.4033%2C8.704561%2C49.403252%7ClQ%3A8.704561%2C49.403252%2C8.7008%2C49.4167%2C8.704%2C49.41438%2C8.708%2C49.42755%2C8.704561%2C49.403252&" + 
                    "format=json&" + 
                    "time=2015-11-29&" + 
                    "timeout=87")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.701 49.431 ) and LINESTRING ( 8.704561 49.403252, 8.7008 49.4167 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/count/groupBy/type"));
    }
    
    
    @Test
    public void test_117_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/tag?" + 
                    "bpolys=Plmmp%3A8.704561%2C49.403252%2C8.714%2C49.429%2C8.704367%2C49.418%2C8.7045%2C49.4221%2C8.704561%2C49.403252%7CqmDv%3A8.704561%2C49.403252%2C8.713%2C49.429%2C8.7029%2C49.4185%2C8.703%2C49.432%2C8.704561%2C49.403252%7Cwv%3A8.704561%2C49.403252%2C8.712%2C49.434%2C8.748%2C49.401%2C8.700%2C49.402%2C8.704561%2C49.403252&" + 
                    "filter=highway%21%3D*+and+not+length%3A%28+..+100%29&" + 
                    "groupByKey=building&" + 
                    "groupByValues=crossing%2Cemergency_access_point&" + 
                    "showMetadata=false&" + 
                    "timeout=93")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.714 49.429 ) and LINESTRING ( 8.7045 49.4221, 8.704561 49.403252 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/count/groupBy/tag"));
    }
    
    
    @Test
    public void test_118_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/tag?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22OGlk%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7267%2C49.431%5D%2C%5B8.704782%2C49.421855%5D%2C%5B8.742%2C49.425%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22p%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.703%2C49.424%5D%2C%5B8.707396%2C49.42660%5D%2C%5B8.708%2C49.418%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=type%3D*+and+id%3A%281+..+9999%29&" + 
                    "groupByKey=highway&" + 
                    "showMetadata=no&" + 
                    "time=2008-11-14")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.7267 49.431 ) and LINESTRING ( 8.707711865322949 49.42210257983881, 8.742 49.425 ) [ (8.720460643411904, 49.42317987864825, NaN) ]"))
                .body("'path'", containsString("/elements/count/groupBy/tag"));
    }
    
    
    @Test
    public void test_119_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/groupBy/tag?" + 
                    "bpolys=8.704561%2C49.403252%2C8.703%2C49.4241%2C8.71659%2C49.4331%2C8.741%2C49.4291%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.736182%2C49.406%2C8.704%2C49.419%2C8.70720%2C49.436148%2C8.704561%2C49.403252&" + 
                    "filter=foot%3D*+or+id%3A%281+..+9999%29&" + 
                    "format=json&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=church%2Chouse&" + 
                    "showMetadata=true&" + 
                    "time=2009-08-16")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.703 49.4241 ) and LINESTRING ( 8.704561 49.403252, 8.736182 49.406 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/count/groupBy/tag"));
    }
    
    
    @Test
    public void test_120_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/key?" + 
                    "bpolys=Ts%3A8.704561%2C49.403252%2C8.71281%2C49.426%2C8.7358%2C49.40782%2C8.701%2C49.43699%2C8.704561%2C49.403252%7CFhTCR%3A8.704561%2C49.403252%2C8.7297%2C49.43115%2C8.744%2C49.416%2C8.7084%2C49.4164%2C8.704561%2C49.403252%7CM%3A8.704561%2C49.403252%2C8.7471%2C49.427%2C8.714%2C49.4251%2C8.74705%2C49.42611%2C8.704561%2C49.403252&" + 
                    "format=geojson&" + 
                    "groupByKeys=source%3Amaxspeed&" + 
                    "showMetadata=no&" + 
                    "time=2008-06-15")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.71281 49.426 ) and LINESTRING ( 8.7084 49.4164, 8.704561 49.403252 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/count/groupBy/key"));
    }
    
    
    @Test
    public void test_121_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/groupBy/key?" + 
                    "bpolys=y%3A8.704561%2C49.403252%2C8.743%2C49.433%2C8.740%2C49.412%2C8.731%2C49.418749%2C8.704561%2C49.403252%7CmQ%3A8.704561%2C49.403252%2C8.715%2C49.404%2C8.701%2C49.404%2C8.72761%2C49.433%2C8.704561%2C49.403252%7Clf%3A8.704561%2C49.403252%2C8.702%2C49.4281%2C8.700%2C49.431%2C8.733%2C49.413%2C8.704561%2C49.403252&" + 
                    "groupByKeys=addr%3Acountry%2Caddr%3Astreet&" + 
                    "keys=highway&" + 
                    "time=2010-10-04&" + 
                    "timeout=76&" + 
                    "values=speed_camera")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.743 49.433 ) and LINESTRING ( 8.704561 49.403252, 8.715 49.404 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/count/groupBy/key"));
    }
    
    
    @Test
    public void test_122_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22YvnB%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.706%2C49.4352%5D%2C%5B8.7054%2C49.400468%5D%2C%5B8.727%2C49.43708%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "format=json&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=emergency_access_point%2Cplatform%2Cservice&" + 
                    "keys=highway&" + 
                    "showMetadata=no&" + 
                    "time=2014-08-13&" + 
                    "timeout=87")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.706 49.4352, 8.7054 49.400468 ) and LINESTRING ( 8.727 49.43708, 8.704561 49.403252 ) [ (8.705471814497315, 49.404625101867964, NaN) ]"))
                .body("'path'", containsString("/elements/count/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_123_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=8.704561%2C49.403252%2C8.7264%2C49.429%2C8.7004%2C49.4041%2C8.741%2C49.425%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.7088%2C49.435%2C8.74505%2C49.4322%2C8.7496%2C49.437%2C8.704561%2C49.403252&" + 
                    "format=csv&" + 
                    "groupByKey=building&" + 
                    "keys=highway&" + 
                    "showMetadata=true&" + 
                    "time=2008-06-21&" + 
                    "timeout=77&" + 
                    "values=speed_camera")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.7264 49.429 ) and LINESTRING ( 8.704561 49.403252, 8.7088 49.435 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/count/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_124_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/boundary?" + 
                    "bpolys=8.704561%2C49.403252%2C8.720308%2C49.433%2C8.7013%2C49.433%2C8.7272%2C49.419%2C8.704561%2C49.403252&" + 
                    "filter=oneway%21%3D*+or+type%3Away+or+area%3A%281.0+..+1E6%29&" + 
                    "format=json&" + 
                    "showMetadata=yes&" + 
                    "time=2011-05-22&" + 
                    "timeout=65")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.720308 49.433 ) and LINESTRING ( 8.7013 49.433, 8.7272 49.419 ) [ (8.71607918404991, 49.42501125186491, NaN) ]"))
                .body("'path'", containsString("/elements/count/groupBy/boundary"));
    }
    
    
    @Test
    public void test_125_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/boundary?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22OE%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.71815%2C49.424546%5D%2C%5B8.73811%2C49.40537%5D%2C%5B8.7299%2C49.42994%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22Cj%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.749%2C49.4136%5D%2C%5B8.7093%2C49.424320%5D%2C%5B8.7079%2C49.404675%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22ROGdJ%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.703%2C49.43941%5D%2C%5B8.72955%2C49.436%5D%2C%5B8.749%2C49.4014%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "keys=highway&" + 
                    "timeout=98&" + 
                    "values=give_way")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.71815 49.424546, 8.73811 49.40537 ) and LINESTRING ( 8.7299 49.42994, 8.704561 49.403252 ) [ (8.721616577880912, 49.42121558429638, NaN) ]"))
                .body("'path'", containsString("/elements/count/groupBy/boundary"));
    }
    
    
    @Test
    public void test_126_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/groupBy/boundary?" + 
                    "bpolys=M%3A8.704561%2C49.403252%2C8.739%2C49.4399%2C8.7063%2C49.410%2C8.737181%2C49.425662%2C8.704561%2C49.403252%7CjZ%3A8.704561%2C49.403252%2C8.722%2C49.4028%2C8.7035%2C49.421%2C8.737%2C49.402%2C8.704561%2C49.403252%7Cq%3A8.704561%2C49.403252%2C8.7337%2C49.40627%2C8.703%2C49.42038%2C8.7068%2C49.428506%2C8.704561%2C49.403252&" + 
                    "keys=highway&" + 
                    "showMetadata=no&" + 
                    "time=2012-03-27&" + 
                    "timeout=23")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.739 49.4399 ) and LINESTRING ( 8.704561 49.403252, 8.722 49.4028 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/count/groupBy/boundary"));
    }
    
    
    @Test
    public void test_127_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/density/groupBy/type?" + 
                    "bcircles=8.730%2C49.4207%2C2544040215%7C8.746519%2C49.401%2C4&" + 
                    "keys=highway&" + 
                    "values=elevator")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El ángulo 18.888.427.241.194.677.000.000 es demasiado grande."))
                .body("'path'", containsString("/elements/count/density/groupBy/type"));
    }
    
    
    @Test
    public void test_128_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/density/groupBy/type?" + 
                    "bpolys=lDv%3A8.704561%2C49.403252%2C8.748352%2C49.416%2C8.70282%2C49.40156%2C8.749%2C49.406%2C8.704561%2C49.403252&" + 
                    "timeout=20")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.748352 49.416, 8.70282 49.40156 ) and LINESTRING ( 8.749 49.406, 8.704561 49.403252 ) [ (8.709025751085607, 49.40352808938057, NaN) ]"))
                .body("'path'", containsString("/elements/count/density/groupBy/type"));
    }
    
    
    @Test
    public void test_129_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/density/groupBy/tag?" + 
                    "bpolys=R%3A8.704561%2C49.403252%2C8.738%2C49.4095%2C8.7334%2C49.4299%2C8.7049%2C49.410709%2C8.704561%2C49.403252%7Cb%3A8.704561%2C49.403252%2C8.710%2C49.426%2C8.71608%2C49.41173%2C8.727%2C49.4266%2C8.704561%2C49.403252%7CmBSec%3A8.704561%2C49.403252%2C8.72760%2C49.411%2C8.744%2C49.422%2C8.70901%2C49.437%2C8.704561%2C49.403252&" + 
                    "filter=addr%3Astreet%3D*+and+geometry%3Apoint+or+length%3A%28+..+100%29&" + 
                    "groupByKey=building&" + 
                    "time=2008-03-18&" + 
                    "timeout=97")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.738 49.4095 ) and LINESTRING ( 8.704561 49.403252, 8.71 49.426 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/count/density/groupBy/tag"));
    }
    
    
    @Test
    public void test_130_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/density/groupBy/tag?" + 
                    "bcircles=8.7060%2C49.439%2C8%7C8.713%2C49.4344%2C8%7C8.746%2C49.42686%2C5%7C8.715%2C49.439750%2C745995199&" + 
                    "groupByKey=building&" + 
                    "groupByValues=footway%2Capartments&" + 
                    "keys=highway&" + 
                    "showMetadata=false&" + 
                    "values=unclassified")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El ángulo 1.035.467.364.424.786.430 es demasiado grande."))
                .body("'path'", containsString("/elements/count/density/groupBy/tag"));
    }
    
    
    @Test
    public void test_131_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/density/groupBy/tag?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22o%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7316%2C49.405%5D%2C%5B8.700%2C49.423%5D%2C%5B8.711502%2C49.413%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22nT%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.72513%2C49.404%5D%2C%5B8.703%2C49.415%5D%2C%5B8.720%2C49.407%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "format=json&" + 
                    "groupByKey=building&" + 
                    "groupByValues=secondary_link%2Csteps%2Chospital&" + 
                    "keys=highway&" + 
                    "timeout=40")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.724094356349537 49.404514779943746, 8.710331312910307 49.41135587699895 ) and LINESTRING ( 8.72 49.407, 8.704561 49.403252 ) [ (8.719391656140727, 49.40685231732725, NaN) ]"))
                .body("'path'", containsString("/elements/count/density/groupBy/tag"));
    }
    
    
    @Test
    public void test_132_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/density/groupBy/tag?" + 
                    "bpolys=IUVe%3A8.704561%2C49.403252%2C8.722%2C49.4371%2C8.700%2C49.433%2C8.708610%2C49.407221%2C8.704561%2C49.403252&" + 
                    "groupByKey=highway&" + 
                    "keys=highway&" + 
                    "showMetadata=true&" + 
                    "timeout=96&" + 
                    "values=path")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.722 49.4371 ) and LINESTRING ( 8.7 49.433, 8.70861 49.407221 ) [ (8.707821784582423, 49.40958097738092, NaN) ]"))
                .body("'path'", containsString("/elements/count/density/groupBy/tag"));
    }
    
    
    @Test
    public void test_133_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/density/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22zl%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.717%2C49.438%5D%2C%5B8.70108%2C49.4024%5D%2C%5B8.7404%2C49.42677%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "groupByKey=highway&" + 
                    "keys=highway&" + 
                    "showMetadata=false&" + 
                    "timeout=59")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.717 49.438 ) and LINESTRING ( 8.70108 49.4024, 8.7404 49.42677 ) [ (8.705161581906752, 49.40492970882674, NaN) ]"))
                .body("'path'", containsString("/elements/count/density/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_134_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/density/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22JWh%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7093%2C49.4306%5D%2C%5B8.743%2C49.431%5D%2C%5B8.718%2C49.431%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22vi%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.716%2C49.433%5D%2C%5B8.7391%2C49.421839%5D%2C%5B8.7073%2C49.41763%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=commercial%2Coffice&" + 
                    "keys=highway&" + 
                    "time=2013-05-15&" + 
                    "timeout=31&" + 
                    "values=pedestrian")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.715103616478878 49.430668885655535, 8.720687547438708 49.430735163767814 ) and LINESTRING ( 8.718 49.431, 8.711813963287975 49.418227461367266 ) [ (8.717855452969243, 49.43070154840319, NaN) ]"))
                .body("'path'", containsString("/elements/count/density/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_135_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/density/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=x%3A8.704561%2C49.403252%2C8.7484%2C49.41311%2C8.7032%2C49.4071%2C8.747%2C49.420%2C8.704561%2C49.403252%7CZS%3A8.704561%2C49.403252%2C8.72192%2C49.425%2C8.713%2C49.410%2C8.709205%2C49.421%2C8.704561%2C49.403252%7CaJ%3A8.704561%2C49.403252%2C8.7245%2C49.406173%2C8.706188%2C49.427285%2C8.703689%2C49.438726%2C8.704561%2C49.403252&" + 
                    "filter=sidewalk%21%3D*&" + 
                    "format=geojson&" + 
                    "groupByKey=building&" + 
                    "groupByValues=street_lamp%2Chut%2Cresidential&" + 
                    "timeout=89")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.7484 49.41311 ) and LINESTRING ( 8.709205 49.421, 8.704561 49.403252 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/count/density/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_136_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/density/groupBy/boundary?" + 
                    "bpolys=8.704561%2C49.403252%2C8.747%2C49.40866%2C8.705%2C49.410%2C8.713%2C49.4142%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.729%2C49.412468%2C8.74985%2C49.420408%2C8.71391%2C49.424%2C8.704561%2C49.403252&" + 
                    "format=csv&" + 
                    "time=2014-03-01&" + 
                    "timeout=98")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.747 49.40866 ) and LINESTRING ( 8.713 49.4142, 8.704561 49.403252 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/count/density/groupBy/boundary"));
    }
    
    
    @Test
    public void test_137_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/density/groupBy/boundary?" + 
                    "bpolys=8.704561%2C49.403252%2C8.708%2C49.424%2C8.713%2C49.427%2C8.7106%2C49.43477%2C8.704561%2C49.403252&" + 
                    "filter=foot%3D*&" + 
                    "format=csv&" + 
                    "showMetadata=false&" + 
                    "time=2014-12-27&" + 
                    "timeout=94")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.708 49.424, 8.713 49.427 ) and LINESTRING ( 8.7106 49.43477, 8.704561 49.403252 ) [ (8.708606094728012, 49.4243636568368, NaN) ]"))
                .body("'path'", containsString("/elements/count/density/groupBy/boundary"));
    }
    
    
    @Test
    public void test_138_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/density?" + 
                    "bcircles=zdEFO%3A8.742%2C49.4233%2C427%7CddkMa%3A8.7104%2C49.42293%2C575733855&" + 
                    "keys=highway&" + 
                    "showMetadata=yes&" + 
                    "time=2010-01-23&" + 
                    "values=residential")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El ángulo 129.955.769.876.850.864 es demasiado grande."))
                .body("'path'", containsString("/elements/count/density"));
    }
    
    
    @Test
    public void test_139_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/density?" + 
                    "bpolys=r%3A8.704561%2C49.403252%2C8.736%2C49.432%2C8.704056%2C49.4138%2C8.738%2C49.418%2C8.704561%2C49.403252&" + 
                    "keys=highway&" + 
                    "time=2015-01-19&" + 
                    "values=residential")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.736 49.432 ) and LINESTRING ( 8.704056 49.4138, 8.738 49.418 ) [ (8.71798057095357, 49.415522931829045, NaN) ]"))
                .body("'path'", containsString("/elements/count/density"));
    }
    
    
    @Test
    public void test_140_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/density?" + 
                    "bpolys=osfle%3A8.704561%2C49.403252%2C8.70159%2C49.438%2C8.71351%2C49.419%2C8.721%2C49.422%2C8.704561%2C49.403252%7CKqOZX%3A8.704561%2C49.403252%2C8.748883%2C49.4226%2C8.7038%2C49.400%2C8.717%2C49.434%2C8.704561%2C49.403252%7Ctn%3A8.704561%2C49.403252%2C8.7394%2C49.424%2C8.71629%2C49.407%2C8.747%2C49.408%2C8.704561%2C49.403252&" + 
                    "format=geojson&" + 
                    "keys=highway&" + 
                    "showMetadata=true&" + 
                    "values=elevator")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.70159 49.438 ) and LINESTRING ( 8.721 49.422, 8.704561 49.403252 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/count/density"));
    }
    
    
    @Test
    public void test_141_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count?" + 
                    "bpolys=ow%3A8.704561%2C49.403252%2C8.703%2C49.431%2C8.739%2C49.407%2C8.7144%2C49.439923%2C8.704561%2C49.403252&" + 
                    "keys=highway&" + 
                    "timeout=100&" + 
                    "values=pedestrian")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.703 49.431, 8.739 49.407 ) and LINESTRING ( 8.7144 49.439923, 8.704561 49.403252 ) [ (8.710639450763738, 49.42590703282417, NaN) ]"))
                .body("'path'", containsString("/elements/count"));
    }
    
    
    @Test
    public void test_142_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count?" + 
                    "bcircles=n%3A8.7277%2C49.435%2C5%7CtE%3A8.710%2C49.4260%2C909%7CxLc%3A8.7000%2C49.4331%2C9172636656&" + 
                    "keys=highway&" + 
                    "time=2011-04-07&" + 
                    "timeout=61")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El ángulo 540.570.588.785.819.000.000.000.000 es demasiado grande."))
                .body("'path'", containsString("/elements/count"));
    }
    
    
    @Test
    public void test_143_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/ratio/groupBy/boundary?" + 
                    "bcircles=8.74430%2C49.405%2C4%7C8.711%2C49.416933%2C18%7C8.722%2C49.418%2C24%7C8.7160%2C49.42780%2C45286846267&" + 
                    "filter=evomaster_1332_input&" + 
                    "filter2=foo&" + 
                    "format=foo&" + 
                    "keys=foo&" + 
                    "keys2=highway&" + 
                    "time=foo&" + 
                    "values2=platform")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El ángulo 190.681.256.896.540.800.000.000.000.000.000 es demasiado grande."))
                .body("'path'", containsString("/elements/area/ratio/groupBy/boundary"));
    }
    
    
    @Test
    public void test_144_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/ratio/groupBy/boundary?" + 
                    "bpolys=8.704561%2C49.403252%2C8.723%2C49.43753%2C8.7362%2C49.412%2C8.7044%2C49.4114%2C8.704561%2C49.403252&" + 
                    "filter=lanes%21%3D*+or+length%3A%28+..+100%29&" + 
                    "filter2=network%3D*+or+area%3A%281.0+..+1E6%29&" + 
                    "showMetadata=true&" + 
                    "time=2017-07-23")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.723 49.43753 ) and LINESTRING ( 8.7362 49.412, 8.7044 49.4114 ) [ (8.708990607041668, 49.411486615227204, NaN) ]"))
                .body("'path'", containsString("/elements/area/ratio/groupBy/boundary"));
    }
    
    
    @Test
    public void test_145_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/ratio/groupBy/boundary?" + 
                    "bpolys=Td%3A8.704561%2C49.403252%2C8.731%2C49.402%2C8.728%2C49.40905%2C8.702280%2C49.409%2C8.704561%2C49.403252%7CvtcB%3A8.704561%2C49.403252%2C8.704%2C49.405%2C8.710%2C49.413%2C8.716364%2C49.429%2C8.704561%2C49.403252%7CdRw%3A8.704561%2C49.403252%2C8.72093%2C49.4042%2C8.70992%2C49.428462%2C8.73325%2C49.439405%2C8.704561%2C49.403252&" + 
                    "format=csv&" + 
                    "keys=highway&" + 
                    "keys2=highway&" + 
                    "time=2015-08-10&" + 
                    "timeout=74&" + 
                    "types2=way%2C&" + 
                    "values=pedestrian&" + 
                    "values2=stop_line")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.731 49.402 ) and LINESTRING ( 8.704561 49.403252, 8.704 49.405 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/area/ratio/groupBy/boundary"));
    }
    
    
    @Test
    public void test_146_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/ratio?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22TjHeJ%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.713%2C49.4376%5D%2C%5B8.7034%2C49.4305%5D%2C%5B8.723%2C49.411%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22V%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.710%2C49.435%5D%2C%5B8.748%2C49.407%5D%2C%5B8.741%2C49.402771%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22iv%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.726%2C49.429824%5D%2C%5B8.704635%2C49.4122%5D%2C%5B8.7045%2C49.403%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "keys=highway&" + 
                    "time=2016-06-19&" + 
                    "timeout=22&" + 
                    "values=platform")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.711999264879507 49.43352685745721 ) and LINESTRING ( 8.70838022161373 49.42554518768022, 8.723 49.411 ) [ (8.709712564436565, 49.42421964252485, NaN) ]"))
                .body("'path'", containsString("/elements/area/ratio"));
    }
    
    
    @Test
    public void test_147_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/ratio?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22Sp%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7461%2C49.4327%5D%2C%5B8.7042%2C49.436870%5D%2C%5B8.708%2C49.4008%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "format=json&" + 
                    "keys=highway&" + 
                    "keys2=highway&" + 
                    "time=2013-02-10&" + 
                    "timeout=21&" + 
                    "types2=node%2C&" + 
                    "values2=footway")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.7461 49.4327 ) and LINESTRING ( 8.7042 49.43687, 8.708 49.4008 ) [ (8.707520637581288, 49.40535015853761, NaN) ]"))
                .body("'path'", containsString("/elements/area/ratio"));
    }
    
    
    @Test
    public void test_148_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/type?" + 
                    "bcircles=8.709%2C49.427%2C105084449%7C8.704%2C49.412851%2C23%7C8.748%2C49.425%2C41&" + 
                    "format=geojson&" + 
                    "showMetadata=false&" + 
                    "time=2009-09-07&" + 
                    "timeout=91")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El ángulo 159.498.209.659,202 es demasiado grande."))
                .body("'path'", containsString("/elements/area/groupBy/type"));
    }
    
    
    @Test
    public void test_149_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/type?" + 
                    "bpolys=8.704561%2C49.403252%2C8.73935%2C49.426%2C8.70297%2C49.408%2C8.729%2C49.435%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.708%2C49.40417%2C8.70427%2C49.433%2C8.73284%2C49.432231%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.7151%2C49.406508%2C8.732%2C49.430%2C8.744%2C49.4043%2C8.704561%2C49.403252&" + 
                    "time=2014-05-14&" + 
                    "timeout=42")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.73935 49.426 ) and LINESTRING ( 8.704561 49.403252, 8.708 49.40417 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/area/groupBy/type"));
    }
    
    
    @Test
    public void test_150_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/type?" + 
                    "bcircles=8.742%2C49.429%2C2%7C8.700%2C49.4356%2C99%7C8.727%2C49.410%2C87%7C8.744%2C49.4262%2C682901132&" + 
                    "filter=natural%3Dwood+and+id%3A%281+..+9999%29&" + 
                    "time=2008-12-13&" + 
                    "timeout=55&" + 
                    "values=pedestrian")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El ángulo 509.510.170.223.111.870 es demasiado grande."))
                .body("'path'", containsString("/elements/area/groupBy/type"));
    }
    
    
    @Test
    public void test_151_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/type?" + 
                    "bpolys=8.704561%2C49.403252%2C8.7073%2C49.4088%2C8.727%2C49.4320%2C8.737%2C49.416%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.716%2C49.4027%2C8.70356%2C49.40576%2C8.700%2C49.414%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.708177%2C49.430%2C8.70666%2C49.419%2C8.710%2C49.4278%2C8.704561%2C49.403252&" + 
                    "format=geojson&" + 
                    "time=2015-05-08&" + 
                    "timeout=39")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.7073 49.4088 ) and LINESTRING ( 8.7 49.414, 8.704561 49.403252 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/area/groupBy/type"));
    }
    
    
    @Test
    public void test_152_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/tag?" + 
                    "bcircles=8.749%2C49.41075%2C7%7C8.703%2C49.418%2C4%7C8.7295%2C49.438%2C6%7C8.727%2C49.41336%2C728895638698&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=secondary_link%2Cservice&" + 
                    "keys=highway&" + 
                    "showMetadata=false&" + 
                    "time=2016-06-03&" + 
                    "timeout=41")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El ángulo 856.726.029.993.853.700.000.000.000.000.000.000.000.000 es demasiado grande."))
                .body("'path'", containsString("/elements/area/groupBy/tag"));
    }
    
    
    @Test
    public void test_153_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/tag?" + 
                    "bpolys=Wv%3A8.704561%2C49.403252%2C8.714%2C49.424%2C8.707%2C49.432%2C8.7310%2C49.413%2C8.704561%2C49.403252%7CX%3A8.704561%2C49.403252%2C8.71887%2C49.43173%2C8.71536%2C49.4310%2C8.711%2C49.425%2C8.704561%2C49.403252%7CzsCZV%3A8.704561%2C49.403252%2C8.737057%2C49.4188%2C8.7063%2C49.4172%2C8.727%2C49.435%2C8.704561%2C49.403252&" + 
                    "groupByKey=highway&" + 
                    "keys=highway&" + 
                    "timeout=98&" + 
                    "values=speed_camera")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.714 49.424 ) and LINESTRING ( 8.704561 49.403252, 8.71887 49.43173 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/area/groupBy/tag"));
    }
    
    
    @Test
    public void test_154_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/tag?" + 
                    "bpolys=ypDaF%3A8.704561%2C49.403252%2C8.743%2C49.4040%2C8.705%2C49.4340%2C8.711%2C49.419%2C8.704561%2C49.403252%7Cr%3A8.704561%2C49.403252%2C8.711%2C49.427%2C8.705120%2C49.42196%2C8.704179%2C49.4192%2C8.704561%2C49.403252%7CiqOJc%3A8.704561%2C49.403252%2C8.741%2C49.43663%2C8.7084%2C49.4275%2C8.7133%2C49.4382%2C8.704561%2C49.403252&" + 
                    "filter=surface%21%3D*+or+id%3A%281+..+9999%29&" + 
                    "format=geojson&" + 
                    "groupByKey=building&" + 
                    "time=2011-01-03&" + 
                    "timeout=65&" + 
                    "values=primary_link")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.743 49.404 ) and LINESTRING ( 8.711 49.419, 8.704561 49.403252 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/area/groupBy/tag"));
    }
    
    
    @Test
    public void test_155_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/key?" + 
                    "bboxes=d%3A8..73%2C49.419%2C8.7590%2C49.393668&" + 
                    "filter=foo&" + 
                    "format=foo&" + 
                    "groupByKeys=lanes%3Aforward%2Cturn%3Alanes&" + 
                    "showMetadata=yes&" + 
                    "time=2011-08-24&" + 
                    "timeout=98&" + 
                    "values=track")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_63_createBboxes
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/area/groupBy/key"));
    }
    
    
    @Test
    public void test_156_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/key?" + 
                    "bpolys=8.704561%2C49.403252%2C8.700%2C49.4263%2C8.719%2C49.40536%2C8.701%2C49.400%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.747%2C49.4055%2C8.736%2C49.4079%2C8.706114%2C49.435%2C8.704561%2C49.403252&" + 
                    "format=geojson&" + 
                    "groupByKeys=name%2Clanduse%2Caddr%3Astreet&" + 
                    "keys=highway&" + 
                    "time=2016-10-31&" + 
                    "values=service")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.7 49.4263 ) and LINESTRING ( 8.701 49.4, 8.704561 49.403252 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/area/groupBy/key"));
    }
    
    
    @Test
    public void test_157_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=8.704561%2C49.403252%2C8.738193%2C49.437%2C8.7108%2C49.42302%2C8.708%2C49.415%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.701%2C49.404%2C8.716417%2C49.4256%2C8.7043%2C49.4180%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.716863%2C49.412%2C8.702%2C49.41887%2C8.706%2C49.42533%2C8.704561%2C49.403252&" + 
                    "format=csv&" + 
                    "groupByKey=highway&" + 
                    "keys=highway&" + 
                    "showMetadata=yes&" + 
                    "time=2009-03-19&" + 
                    "values=cycleway")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.738193 49.437 ) and LINESTRING ( 8.704561 49.403252, 8.701 49.404 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/area/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_158_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=zf%3A8.734%2C49.421%2C371313349%7CIKsit%3A8.73969%2C49.431%2C2&" + 
                    "groupByKey=highway&" + 
                    "showMetadata=yes&" + 
                    "timeout=77")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El ángulo 3.887.679.780.294.300 es demasiado grande."))
                .body("'path'", containsString("/elements/area/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_159_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22ggdJk%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.744853%2C49.407%5D%2C%5B8.705%2C49.42059%5D%2C%5B8.7088%2C49.4270%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22Ackcn%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.715%2C49.420%5D%2C%5B8.7408%2C49.42149%5D%2C%5B8.74604%2C49.413%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=type%21%3D*+or+id%3A%281+..+9999%29&" + 
                    "format=csv&" + 
                    "groupByKey=building&" + 
                    "groupByValues=yes%2Ctraffic_mirror%2Cpath&" + 
                    "time=2012-02-27&" + 
                    "timeout=96")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.713550388971298 49.41767429011316, 8.705 49.42059 ) and LINESTRING ( 8.7088 49.427, 8.704561 49.403252 ) [ (8.707503438533186, 49.419736319482446, NaN) ]"))
                .body("'path'", containsString("/elements/area/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_160_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=u%3A8.704561%2C49.403252%2C8.711310%2C49.4190%2C8.7150%2C49.425%2C8.7448%2C49.430935%2C8.704561%2C49.403252%7CqtTYm%3A8.704561%2C49.403252%2C8.739%2C49.43947%2C8.737%2C49.427%2C8.749%2C49.402%2C8.704561%2C49.403252%7Cbo%3A8.704561%2C49.403252%2C8.743%2C49.414034%2C8.7025%2C49.422%2C8.7173%2C49.406%2C8.704561%2C49.403252&" + 
                    "groupByKey=highway&" + 
                    "keys=highway&" + 
                    "showMetadata=false&" + 
                    "time=2010-09-13&" + 
                    "timeout=35")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.71131 49.419 ) and LINESTRING ( 8.7025 49.422, 8.7173 49.406 ) [ (8.709399209697924, 49.41454139492116, NaN) ]"))
                .body("'path'", containsString("/elements/area/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_161_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/boundary?" + 
                    "bpolys=JinDp%3A8.704561%2C49.403252%2C8.749%2C49.415%2C8.7045%2C49.40374%2C8.7045%2C49.439%2C8.704561%2C49.403252%7Ch%3A8.704561%2C49.403252%2C8.700%2C49.415%2C8.70539%2C49.43641%2C8.71496%2C49.409%2C8.704561%2C49.403252%7CrWAM%3A8.704561%2C49.403252%2C8.7355%2C49.411%2C8.749%2C49.435419%2C8.704896%2C49.429%2C8.704561%2C49.403252&" + 
                    "filter=destination%3D*+or+not+type%3Away&" + 
                    "format=csv&" + 
                    "time=2011-09-30&" + 
                    "timeout=74")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.749 49.415 ) and LINESTRING ( 8.704561 49.403252, 8.7 49.415 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/area/groupBy/boundary"));
    }
    
    
    @Test
    public void test_162_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density/groupBy/type?" + 
                    "bpolys=skH%3A8.704561%2C49.403252%2C8.706902%2C49.4259%2C8.741%2C49.4174%2C8.744%2C49.409880%2C8.704561%2C49.403252%7CF%3A8.704561%2C49.403252%2C8.706%2C49.4260%2C8.704961%2C49.429%2C8.701%2C49.407%2C8.704561%2C49.403252%7CWaV%3A8.704561%2C49.403252%2C8.711%2C49.400%2C8.7318%2C49.4229%2C8.7037%2C49.423%2C8.704561%2C49.403252&" + 
                    "keys=highway&" + 
                    "time=2007-12-31&" + 
                    "timeout=46&" + 
                    "values=emergency_access_point")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.706902 49.4259 ) and LINESTRING ( 8.704561 49.403252, 8.706 49.426 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/area/density/groupBy/type"));
    }
    
    
    @Test
    public void test_163_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/density/groupBy/type?" + 
                    "bcircles=i%3A8.744%2C49.403%2C439603064%7CU%3A8.74467%2C49.4376%2C3%7CYO%3A8.70773%2C49.419%2C1&" + 
                    "showMetadata=false&" + 
                    "time=2016-07-31")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El ángulo 14.964.194.980.022.276 es demasiado grande."))
                .body("'path'", containsString("/elements/area/density/groupBy/type"));
    }
    
    
    @Test
    public void test_164_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/density/groupBy/type?" + 
                    "bpolys=FFe%3A8.704561%2C49.403252%2C8.72441%2C49.4075%2C8.704778%2C49.4181%2C8.7066%2C49.4330%2C8.704561%2C49.403252%7CB%3A8.704561%2C49.403252%2C8.720%2C49.43070%2C8.7468%2C49.4052%2C8.722%2C49.41901%2C8.704561%2C49.403252%7Cja%3A8.704561%2C49.403252%2C8.7056%2C49.422%2C8.706%2C49.40073%2C8.7385%2C49.400%2C8.704561%2C49.403252&" + 
                    "timeout=47")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.72441 49.4075 ) and LINESTRING ( 8.704561 49.403252, 8.7056 49.422 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/area/density/groupBy/type"));
    }
    
    
    @Test
    public void test_165_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density/groupBy/tag?" + 
                    "bpolys=8.704561%2C49.403252%2C8.727%2C49.4305%2C8.715%2C49.438537%2C8.735749%2C49.403383%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.711433%2C49.420217%2C8.716%2C49.40401%2C8.722%2C49.429%2C8.704561%2C49.403252&" + 
                    "format=geojson&" + 
                    "groupByKey=highway&" + 
                    "keys=highway&" + 
                    "showMetadata=no&" + 
                    "time=2017-07-27&" + 
                    "timeout=84")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.727 49.4305 ) and LINESTRING ( 8.704561 49.403252, 8.711433 49.420217 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/area/density/groupBy/tag"));
    }
    
    
    @Test
    public void test_166_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/density/groupBy/tag?" + 
                    "bpolys=iEk%3A8.704561%2C49.403252%2C8.703%2C49.433%2C8.740%2C49.431%2C8.7050%2C49.436%2C8.704561%2C49.403252%7CMJ%3A8.704561%2C49.403252%2C8.746896%2C49.417%2C8.70462%2C49.411%2C8.706344%2C49.401916%2C8.704561%2C49.403252&" + 
                    "groupByKey=building&" + 
                    "keys=highway&" + 
                    "showMetadata=true&" + 
                    "time=2016-12-03&" + 
                    "timeout=70&" + 
                    "values=elevator")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.703 49.433 ) and LINESTRING ( 8.705 49.436, 8.704561 49.403252 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/area/density/groupBy/tag"));
    }
    
    
    @Test
    public void test_167_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=8.7042%2C49.401%2C2&" + 
                    "format=geojson&" + 
                    "groupByKey=highway&" + 
                    "keys=highway&" + 
                    "showMetadata=true&" + 
                    "timeout=40&" + 
                    "values=secondary")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/utils/GroupByBoundaryGeoJsonGenerator_75_generateGroupByResultGeoJson
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Index 0 out of bounds for length 0"))
                .body("'path'", containsString("/elements/area/density/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_168_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=AyI%3A8.704561%2C49.403252%2C8.724387%2C49.4088%2C8.705%2C49.4053%2C8.704972%2C49.4198%2C8.704561%2C49.403252%7CZB%3A8.704561%2C49.403252%2C8.718240%2C49.4100%2C8.730014%2C49.4338%2C8.738%2C49.40950%2C8.704561%2C49.403252%7CTH%3A8.704561%2C49.403252%2C8.719%2C49.428%2C8.71599%2C49.42981%2C8.724%2C49.413%2C8.704561%2C49.403252&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=stop%2Cdemolished&" + 
                    "keys=highway&" + 
                    "time=2015-07-20&" + 
                    "timeout=81")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.724387 49.4088 ) and LINESTRING ( 8.704972 49.4198, 8.704561 49.403252 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/area/density/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_169_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22mH%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.744%2C49.4045%5D%2C%5B8.702%2C49.402%5D%2C%5B8.70457%2C49.401%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22yGMLl%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.704%2C49.423501%5D%2C%5B8.70876%2C49.406%5D%2C%5B8.73884%2C49.438%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=foo&" + 
                    "format=csv&" + 
                    "groupByKey=evomaster%7F1745_input&" + 
                    "showMetadata=yes&" + 
                    "time=foo&" + 
                    "values=foo")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.744 49.4045, 8.702 49.402 ) and LINESTRING ( 8.70457 49.401, 8.704561 49.403252 ) [ (8.70456539328693, 49.402152701981365, NaN) ]"))
                .body("'path'", containsString("/elements/area/density/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_170_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/density/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=ezGPN%3A8.72851%2C49.41010%2C6%7CXg%3A8.74990%2C49.43363%2C3%7Cohxhq%3A8.71251%2C49.4076%2C909260904&" + 
                    "filter=barrier%3D*+and+id%3A%281+..+9999%29&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=synagogue&" + 
                    "showMetadata=no&" + 
                    "time=2014-04-09&" + 
                    "timeout=37")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El ángulo 5.017.978.581.006.759.900 es demasiado grande."))
                .body("'path'", containsString("/elements/area/density/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_171_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density/groupBy/boundary?" + 
                    "bpolys=IoXGR%3A8.704561%2C49.403252%2C8.7457%2C49.43021%2C8.702%2C49.434%2C8.715%2C49.428%2C8.704561%2C49.403252%7CkIx%3A8.704561%2C49.403252%2C8.722%2C49.439%2C8.705%2C49.410%2C8.71010%2C49.4245%2C8.704561%2C49.403252%7Ci%3A8.704561%2C49.403252%2C8.723586%2C49.434835%2C8.70469%2C49.43985%2C8.736%2C49.4251%2C8.704561%2C49.403252&" + 
                    "format=json&" + 
                    "keys=highway&" + 
                    "timeout=28")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.7457 49.43021 ) and LINESTRING ( 8.7101 49.4245, 8.704561 49.403252 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/area/density/groupBy/boundary"));
    }
    
    
    @Test
    public void test_172_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/density/groupBy/boundary?" + 
                    "bpolys=A%3A8.704561%2C49.403252%2C8.734%2C49.417%2C8.742%2C49.418%2C8.70441%2C49.40316%2C8.704561%2C49.403252%7CP%3A8.704561%2C49.403252%2C8.714%2C49.407%2C8.747179%2C49.410%2C8.70239%2C49.413%2C8.704561%2C49.403252%7CF%3A8.704561%2C49.403252%2C8.746%2C49.4119%2C8.7006%2C49.413%2C8.706%2C49.431765%2C8.704561%2C49.403252&" + 
                    "format=geojson&" + 
                    "showMetadata=no&" + 
                    "timeout=74")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.734 49.417 ) and LINESTRING ( 8.70239 49.413, 8.704561 49.403252 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/area/density/groupBy/boundary"));
    }
    
    
    @Test
    public void test_173_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density?" + 
                    "bpolys=RhHH%3A8.704561%2C49.403252%2C8.70552%2C49.424%2C8.70456%2C49.420%2C8.70456%2C49.4282%2C8.704561%2C49.403252%7CL%3A8.704561%2C49.403252%2C8.741%2C49.4338%2C8.736%2C49.4154%2C8.748%2C49.4338%2C8.704561%2C49.403252&" + 
                    "format=json&" + 
                    "keys=highway&" + 
                    "time=2008-10-24&" + 
                    "timeout=30&" + 
                    "values=pedestrian")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.70552 49.424 ) and LINESTRING ( 8.70456 49.4282, 8.704561 49.403252 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/area/density"));
    }
    
    
    @Test
    public void test_174_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22Im%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.719110%2C49.4343%5D%2C%5B8.734%2C49.407%5D%2C%5B8.7007%2C49.40268%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22E%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.739%2C49.4222%5D%2C%5B8.714%2C49.405%5D%2C%5B8.7037%2C49.413%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22hjUyF%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.738%2C49.418%5D%2C%5B8.701%2C49.408%5D%2C%5B8.702%2C49.429%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "keys=highway&" + 
                    "timeout=36")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.707624931933665 49.409790522144235, 8.701 49.408 ) and LINESTRING ( 8.702 49.429, 8.704561 49.403252 ) [ (8.704007886241856, 49.40881294222753, NaN) ]"))
                .body("'path'", containsString("/elements/area/density"));
    }
    
    
    @Test
    public void test_175_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/density?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22YB%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7141%2C49.422%5D%2C%5B8.731%2C49.409973%5D%2C%5B8.7398%2C49.417%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "format=geojson&" + 
                    "time=2008-08-04&" + 
                    "timeout=56")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.7141 49.422, 8.731 49.409973 ) and LINESTRING ( 8.7398 49.417, 8.704561 49.403252 ) [ (8.727738221522555, 49.41229426684901, NaN) ]"))
                .body("'path'", containsString("/elements/area/density"));
    }
    
    
    @Test
    public void test_176_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/density?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22VJvM%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7205%2C49.419%5D%2C%5B8.706%2C49.406%5D%2C%5B8.7310%2C49.404%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22U%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7377%2C49.415529%5D%2C%5B8.706%2C49.407241%5D%2C%5B8.7337%2C49.4391%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22Y%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.72824%2C49.425%5D%2C%5B8.70828%2C49.429%5D%2C%5B8.705%2C49.408%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "keys=highway&" + 
                    "timeout=26&" + 
                    "values=secondary_link")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.710059893027463 49.40830246351456, 8.706 49.407241 ) and LINESTRING ( 8.723079461982882 49.42603417595533, 8.704561 49.403252 ) [ (8.708290158320626, 49.40783976442149, NaN) ]"))
                .body("'path'", containsString("/elements/area/density"));
    }
    
    
    @Test
    public void test_177_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area?" + 
                    "bpolys=8.704561%2C49.403252%2C8.747%2C49.434%2C8.704911%2C49.403%2C8.721%2C49.423%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.739%2C49.400%2C8.7235%2C49.433%2C8.701%2C49.431600%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.718%2C49.4332%2C8.72158%2C49.41751%2C8.7048%2C49.437442%2C8.704561%2C49.403252&" + 
                    "keys=highway&" + 
                    "showMetadata=no&" + 
                    "time=2010-10-09&" + 
                    "values=secondary_link")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.747 49.434 ) and LINESTRING ( 8.721 49.423, 8.704561 49.403252 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/area"));
    }
    
    
    @Test
    public void test_178_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22Y%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.721%2C49.4389%5D%2C%5B8.713%2C49.41029%5D%2C%5B8.701%2C49.4314%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "format=geojson&" + 
                    "keys=highway&" + 
                    "showMetadata=no&" + 
                    "timeout=24")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.721 49.4389 ) and LINESTRING ( 8.713 49.41029, 8.701 49.4314 ) [ (8.710132653528097, 49.415334140335155, NaN) ]"))
                .body("'path'", containsString("/elements/area"));
    }
    
    
    @Test
    public void test_179_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22FpJa%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7245%2C49.415%5D%2C%5B8.704%2C49.426402%5D%2C%5B8.748%2C49.439%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22r%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.735%2C49.40713%5D%2C%5B8.7043%2C49.416%5D%2C%5B8.7225%2C49.41202%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=sidewalk%3D*+and+geometry%3Apoint+or+id%3A%281+..+9999%29&" + 
                    "time=2007-12-16")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.735 49.40713, 8.718992466974361 49.41175497778298 ) and LINESTRING ( 8.7225 49.41202, 8.704561 49.403252 ) [ (8.720856115862064, 49.41121652287634, NaN) ]"))
                .body("'path'", containsString("/elements/area"));
    }
    
    
    @Test
    public void test_180_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/key?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22zeA%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.713%2C49.410%5D%2C%5B8.716%2C49.438%5D%2C%5B8.735%2C49.4007%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22R%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.737%2C49.420%5D%2C%5B8.709960%2C49.42343%5D%2C%5B8.70488%2C49.437%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22Wk%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.722%2C49.42021%5D%2C%5B8.703%2C49.4056%5D%2C%5B8.700%2C49.417%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=foo&" + 
                    "format=foo&" + 
                    "groupByKeys=evomaster_18741_input&" + 
                    "keys=highway&" + 
                    "showMetadata=no&" + 
                    "time=evomaster_18742_input&" + 
                    "types=evomaster_18743_input&" + 
                    "values=crossing")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704594785816278 49.40682630635662, 8.703 49.4056 ) and LINESTRING ( 8.7 49.417, 8.704561 49.403252 ) [ (8.703623082858986, 49.406079117924726, NaN) ]"))
                .body("'path'", containsString("/users/count/groupBy/key"));
    }
    
    
    @Test
    public void test_181_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/groupBy/tag?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22J%22%7D%2C%22geometry%22%3A%7B%22tyqe%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704761%2C49.403252%5D%2C%5B8.739695%2C49.400%5D%2C%5B8.7321%2C49.439%5D%2C%5B8.700%2C49.4193%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=evomaster_45218_input&" + 
                    "format=geojson&" + 
                    "groupByKey=evomaster_23910_input&" + 
                    "groupByValues=evomasterg5091_input&" + 
                    "keys=evomaster_23911_Input&" + 
                    "showMetadata=evomaster_45219_input&" + 
                    "time=evomaster_23912_input&" + 
                    "timeout=62&" + 
                    "types=foo&" + 
                    "values=foo")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_343_checkGeometryTypeOfFeature
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/elements/length/groupBy/tag"));
    }
    
    
    @Test
    public void test_182_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/groupBy/boundary?" + 
                    "bcircles=mdguO%3A8.709%2C49.4.0%2C1%7CF%3A8.726430%2C49.%1416%2C8&" + 
                    "filter=evomaster_84898_input&" + 
                    "format=evomaster_113436_input&" + 
                    "keys=r8Sa4cQ2Tipp4&" + 
                    "showMetadata=evomaster_84899_inpu&" + 
                    "time=foo&" + 
                    "timeout=48&" + 
                    "types=evomaster_113437_input&" + 
                    "values=elevator")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_114_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/length/groupBy/boundary"));
    }
    
    
    @Test
    public void test_183_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area?" + 
                    "bcircles=8.713%2C11.0.4%2C9&" + 
                    "filter=evomaster_163667_input&" + 
                    "format=Csv&" + 
                    "keys=4ESQPazOsVs&" + 
                    "showMetadata=&" + 
                    "types=lIne&" + 
                    "values=6fr6nZhRF")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_114_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/area"));
    }
    
    
    @Test
    public void test_184_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/density/groupBy/tag?" + 
                    "bpolys=yaI%3A8.704561%2C49.403252%2C8.71422%2C49.410%2C8.704661%2C49.405%2C8.703%2C49.4280%2C8.704561%2C49.403.5&" + 
                    "filter=evomaster_349842_input&" + 
                    "format=json&" + 
                    "groupByKey=bok&" + 
                    "groupByValues=pQIkTq&" + 
                    "keys=highway&" + 
                    "time=evomaster_115232_inpu%C2%84&" + 
                    "types=foo")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_176_createBpolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/users/count/density/groupBy/tag"));
    }
    
    
    @Test
    public void test_185_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/ratio?" + 
                    "bcircles=8.732.%2C49.4107%2C33&" + 
                    "filter=ref%3D*+or+type%3Away+or+id%3A%281+..+9999%29&" + 
                    "showMetadata=foo&" + 
                    "time=foo&" + 
                    "types2=foo&" + 
                    "values=foo&" + 
                    "values2=foo")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_114_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/length/ratio"));
    }
    
    
    @Test
    public void test_186_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/tag?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22%3EWP%22%7D%2C%22geometr%C2%81%22%3A%7B%22type%22%3A%22Lplwimn%22%2C%22coordinates%22%3A%5B%5B%5B8.704569%2C49.403252%5D%2C%5B8.738%2C49.41663%5D%2C%5B8.70892%2C49.416%5D%2C%5B8.7036%2C49.408%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=evomaster_794457_input&" + 
                    "format=CSv&" + 
                    "groupByKey=Nb6NrgSxf7m1A3&" + 
                    "showMetadata=evomaster_458624_input&" + 
                    "time=mQ%40b0Zf5")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_343_checkGeometryTypeOfFeature
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/elements/area/groupBy/tag"));
    }
    
    
    @Test
    public void test_187_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/boundary?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22OE%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.71815%2C49.424546%5D%2C%5B8.73811%2C49.40537%5D%2C%5B8.7299%2C49.42994%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22Cj%22%7D%2C%22geometry%22%3A%7B%22t%C2%81pe%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.749%2C49.4136%5D%2C%5B8.7093%2C49.424320%5D%2C%5B8.7079%2C49.404675%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22ROGdJ%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.703%2C49.43941%5D%2C%5B8.72955%2C49.436%5D%2C%5B8.749%2C49.4014%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "format=foo&" + 
                    "timeout=98&" + 
                    "values=give_way")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_343_checkGeometryTypeOfFeature
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/elements/count/groupBy/boundary"));
    }
    
    
    @Test
    public void test_188_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/density/groupBy/tag?" + 
                    "bpolys=yaI%3A8.704561%2C49.40325.%2C8.71422%2C49.410%2C8.704661%2C49.405%2C8.703%2C49.4280%2C8.704561%2C49.40325&" + 
                    "filter=foo&" + 
                    "format=jcon&" + 
                    "groupByKey=foo&" + 
                    "keys=highway&" + 
                    "showMetadata=foo&" + 
                    "time=%2F%2FP11D&" + 
                    "timeout=55&" + 
                    "types=foo&" + 
                    "values=primary_link")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_186_createBpolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/users/count/density/groupBy/tag"));
    }
    
    
    @Test
    public void test_189_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/tag?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22featurfs%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22FWP%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Lolygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704569%2C49.403252%5D%2C%5B8.738%2C49.41663%5D%2C%5B8.70892%2C49.416%5D%2C%5B8.7036%2C49.408%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=evomaster_458024_input&" + 
                    "format=csv&" + 
                    "groupByKey=evomaster_458786_input&" + 
                    "groupByValues=evomaster_458026_input&" + 
                    "showMetadata=evomaster_54485ginpu&" + 
                    "time=evomaster_458027_input&" + 
                    "types=evomaster_458787_input&" + 
                    "values=evomaster_54486_input")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_237_createGeometryFromGeoJson
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/elements/area/groupBy/tag"));
    }
    
    
    @Test
    public void test_190_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/tag?" + 
                    "bpolys=%7B%22tyle%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22FWP%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Lolygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704569%2C49.403252%5D%2C%5B8.738%2C49.41663%5D%2C%5B8.70892%2C49.416%5D%2C%5B8.7036%2C49.408%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=foo&" + 
                    "groupByKey=evomaster_458007_input&" + 
                    "keys=Q65BzPoog&" + 
                    "showMetadata=yES&" + 
                    "types=fon")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_233_createGeometryFromGeoJson
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/elements/area/groupBy/tag"));
    }
    
    
    @Test
    public void test_191_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22fUatures%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22ggdJk%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.744853%2C49.407%5D%2C%5B8.705%2C49.42059%5D%2C%5B8.7088%2C49.4270%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22Ackcn%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.715%2C49.420%5D%2C%5B8.7408%2C49.42149%5D%2C%5B8.74604%2C49.413%5D%2C%5B8.704361%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=type%21%3D*+or+id%3A%281+..+9999%29&" + 
                    "format=csv&" + 
                    "groupByKey=evomaster_461814_inpu&" + 
                    "groupByValues=evomaster_452786_input&" + 
                    "time=evomaster_452787_input&" + 
                    "timeout=94&" + 
                    "types=evomaster_473105_input")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_237_createGeometryFromGeoJson
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/elements/area/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_192_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/key?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22zeA%22%7D%2C%22geometvy%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.713%2C49.410%5D%2C%5B8.716%2C49.438%5D%2C%5B8.735%2C49.4007%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22R%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.737%2C49.420%5D%2C%5B8.709960%2C49.42343%5D%2C%5B8.70488%2C49.437%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22Wk%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.722%2C49.42021%5D%2C%5B8.703%2C49.4056%5D%2C%5B8.700%2C49.417%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "format=csv&" + 
                    "groupByKeys=evomaster_1110609_input&" + 
                    "showMetadata=eUoUUUter_UUU94UUiUpmt&" + 
                    "time=wf6_sfUw&" + 
                    "types=foo")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_343_checkGeometryTypeOfFeature
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/users/count/groupBy/key"));
    }
    
    
    @Test
    public void test_193_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=%7B%22tyle%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22ggdJk%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.744853%2C49.407%5D%2C%5B8.705%2C49.42059%5D%2C%5B8.7088%2C49.4270%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22Ackcn%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.715%2C49.420%5D%2C%5B8.7408%2C49.42149%5D%2C%5B8.74604%2C49.413%5D%2C%5B9.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=evomaster_495990_input&" + 
                    "format=csv&" + 
                    "groupByKey=evomaster_451654_input&" + 
                    "groupByValues=yes%2Ctraffic_mirror%2Cpath&" + 
                    "keys=evomaster_495991_input&" + 
                    "showMetadata=fno&" + 
                    "time=evomaster_495992_input&" + 
                    "timeout=96&" + 
                    "types=fog")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_233_createGeometryFromGeoJson
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/elements/area/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_194_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/boundary?" + 
                    "bboxes=%2C&" + 
                    "filter=ntYBQtw1y24VTaAU&" + 
                    "format=ayuJy9a&" + 
                    "keys=evomaster_576699_input&" + 
                    "showMetadata=KS0&" + 
                    "time=RN2EAit8NY8&" + 
                    "types=evomaster_576700_input")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_63_createBboxes
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Index 0 out of bounds for length 0"))
                .body("'path'", containsString("/users/count/groupBy/boundary"));
    }
    
    
    @Test
    public void test_195_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/ratio/groupBy/boundary?" + 
                    "bboxes=R%3A8.69547%2C49.41080%2C8.7544%2C49.39.&" + 
                    "filter2=foo&" + 
                    "keys=evomaster_661270_input&" + 
                    "keys2=evomaster_661271_input&" + 
                    "types2=foo&" + 
                    "values2=give_way")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_66_createBboxes
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/area/ratio/groupBy/boundary"));
    }
    
    
    @Test
    public void test_196_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/ratio/groupBy/boundary?" + 
                    "bboxes=q%3A8.685296%2C49.41.%2C8.746011%2C49.385&" + 
                    "filter=natural%3Dwood+or+geometry%3Aline&" + 
                    "filter2=foo&" + 
                    "timeout=35&" + 
                    "types=foo&" + 
                    "values=foo&" + 
                    "values2=foo")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_64_createBboxes
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/count/ratio/groupBy/boundary"));
    }
    
    
    @Test
    public void test_197_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22ggdJk%22%7D%2C%22geometry%22%3A%7B%22tqpe%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.744853%2C49.407%5D%2C%5B8.705%2C49.42059%5D%2C%5B8.7088%2C49.4270%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22Ackcn%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.715%2C49.420%5D%2C%5B8.7408%2C49.42149%5D%2C%5B8.74604%2C49.413%5D%2C%5B8.704361%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=tyte%21%3D*+or+id%3A%281+..+9999%29&" + 
                    "groupByKey=building&" + 
                    "keys=foo&" + 
                    "showMetadata=foo&" + 
                    "time=evomaster_452787_input&" + 
                    "timeout=96&" + 
                    "types=fooU&" + 
                    "values=foo")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_343_checkGeometryTypeOfFeature
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/elements/area/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_198_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/ratio/groupBy/boundary?" + 
                    "bboxes=8..74%2C49.4203%2C8.705150%2C49.383%7C8.689%2C49.413%2C8.711%2C49.390&" + 
                    "filter2=foo6&" + 
                    "format=foo&" + 
                    "keys=fooo&" + 
                    "keys2=highway&" + 
                    "showMetadata=foo&" + 
                    "time=2015-10-03&" + 
                    "types2=foo&" + 
                    "values2=EaQ8")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_63_createBboxes
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/count/ratio/groupBy/boundary"));
    }
    
    
    @Test
    public void test_199_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area?" + 
                    "bboxes=8.678%2C49.426%2C8.7.4%2C49.381%7C8.6776%2C49.428%2C8.720%2C49.3844&" + 
                    "filter=foo&" + 
                    "format=csx&" + 
                    "keys=highway&" + 
                    "showMetadata=yes&" + 
                    "time=20%297-10-20&" + 
                    "timeout=73&" + 
                    "types=evomaster_856822_input&" + 
                    "values=steps")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_65_createBboxes
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/area"));
    }
    
    
    @Test
    public void test_200_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/ratio/groupBy/boundary?" + 
                    "bboxes=q%3A8.685296%2C49.410%2C8.746.11%2C49.385&" + 
                    "filter=natural%3Dwood+or+geometry%3Aline&" + 
                    "keys=foo&" + 
                    "showMetadata=foo&" + 
                    "timeout=39&" + 
                    "types=foo&" + 
                    "types2=foo")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_65_createBboxes
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/count/ratio/groupBy/boundary"));
    }
    
    
    @Test
    public void test_201_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/density/groupBy/type?" + 
                    "bpolys=LNJSl%3A8.704561%2C49.403252%2C8.7264%2C49.438755%2C8.705%2C49.41987%2C8.7055%2C49.4253%2C8.7.4561%2C49.403252&" + 
                    "filter=highway%21%3D*+and+length%3A%28+..+100%29&" + 
                    "format=foo&" + 
                    "keys=foo&" + 
                    "showMetadata=Kd24eEZvca26_a8l&" + 
                    "timeout=61&" + 
                    "types=foq")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_175_createBpolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/length/density/groupBy/type"));
    }
    
    
    @Test
    public void test_202_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/ratio/groupBy/boundary?" + 
                    "bboxes=8.674%2C49.4.03%2C8.705150%2C49.383%7C8.689%2C49.413%2C8.711%2C49.390&" + 
                    "filter=foo&" + 
                    "filter2=foo&" + 
                    "keys2=highway&" + 
                    "time=2015-10-03&" + 
                    "types2=foo&" + 
                    "values=foo&" + 
                    "values2=sxeps")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_64_createBboxes
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/count/ratio/groupBy/boundary"));
    }
    
    
    @Test
    public void test_203_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/ratio/groupBy/boundary?" + 
                    "bboxes=R%3A8.69547%2C49.41.80%2C8.7543%2C49.396&" + 
                    "filter=foot%21%3D*+and+geometry%3Aline+and+not+area%3A%281.0+..+1E6%29&" + 
                    "filter2=foo&" + 
                    "format=json&" + 
                    "keys2=highway&" + 
                    "types=foo&" + 
                    "types2=evomaster_1031878_input&" + 
                    "values=evomaster_1031879_input&" + 
                    "values2=evomaster_1031876_input")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_64_createBboxes
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/area/ratio/groupBy/boundary"));
    }
    
    
    @Test
    public void test_204_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/ratio/groupBy/boundary?" + 
                    "bboxes=q%3A8..85296%2C49.410%2C8.746011%2C49.385&" + 
                    "keys=foo&" + 
                    "timeout=39&" + 
                    "types=foo")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_63_createBboxes
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/count/ratio/groupBy/boundary"));
    }
    
    
    @Test
    public void test_205_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area?" + 
                    "bboxes=8.678%2C49.42.%2C8.704%2C49.381%7C8.6776%2C49.428%2C8.720%2C49.3844&" + 
                    "filter=foo&" + 
                    "format=csv&" + 
                    "keys=highway&" + 
                    "showMetadata=yes&" + 
                    "time=2017-10-20&" + 
                    "timeout=73&" + 
                    "types=point%2Cpolygon%2C&" + 
                    "values=steps")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_64_createBboxes
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/area"));
    }
    
    
    @Test
    public void test_206_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/key?" + 
                    "bpolys=%7B%22uype%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22zeA%22%7D%2C%22geometvy%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.713%2C49.410%5D%2C%5B8.716%2C49.438%5D%2C%5B8.735%2C49.4007%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22R%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.737%2C49.420%5D%2C%5B8.709960%2C49.42343%5D%2C%5B8.70488%2C49.437%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22Wk%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.722%2C49.42021%5D%2C%5B8.703%2C49.4056%5D%2C%5B8.700%2C49.417%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=evomaster_1109042_input&" + 
                    "format=csV&" + 
                    "groupByKeys=efomauter_1109043_inpu&" + 
                    "keys=highway&" + 
                    "types=foo&" + 
                    "values=crossing")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_233_createGeometryFromGeoJson
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/users/count/groupBy/key"));
    }
    
    
    @Test
    public void test_207_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/density?" + 
                    "bboxes=T%3A8.6955.%2C49.419%2C8.721%2C49.388&" + 
                    "format=Ssv&" + 
                    "showMetadata=foo&" + 
                    "time=%2F%2BP6M1%2FC&" + 
                    "types=foo&" + 
                    "values=evomaster_1255553_input")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_63_createBboxes
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/users/count/density"));
    }
    
    
    @Test
    public void test_208_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/density?" + 
                    "bboxes=T%3A8.69552%2C49.419%2C8.7.1%2C49.388&" + 
                    "keys=evomaster_1255271_input&" + 
                    "showMetadata=foo&" + 
                    "time=%2F%2BP6M1%2FDi")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_65_createBboxes
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/users/count/density"));
    }
    
    
    @Test
    public void test_209_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/ratio?" + 
                    "bboxes=8.697%2C49.4054%2C8.71975%2C49.394%7C8.6631%2C49.411%2C8.74615%2C49.393%7C8..70%2C49.423%2C8.749743%2C49.398&" + 
                    "format=jso&" + 
                    "keys2=evomaster_1216124_input&" + 
                    "showMetadata=true&" + 
                    "types=foo&" + 
                    "types2=foo&" + 
                    "values2=path")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_72_createBboxes
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/length/ratio"));
    }
    
    
    @Test
    public void test_210_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/ratio/groupBy/boundary?" + 
                    "bcircles=8.719%2C49.4.3064%2C2%7C8.725%2C49.414%2C7&" + 
                    "format=json&" + 
                    "keys2=highway&" + 
                    "showMetadata=yes&" + 
                    "time=2495-10-13&" + 
                    "types2=point%2Cpolygon%2Cothe")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_114_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/length/ratio/groupBy/boundary"));
    }
    
    
    @Test
    public void test_211_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/ratio?" + 
                    "bboxes=8.697%2C49.4.54%2C8.71975%2C49.394%7C8.6631%2C49.411%2C8.74615%2C49.393%7C8.670%2C49.423%2C8.749743%2C49.398&" + 
                    "filter2=foo&" + 
                    "format=json&" + 
                    "keys2=evomaster_1342908_input&" + 
                    "showMetadata=true&" + 
                    "types2=fom")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_64_createBboxes
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/length/ratio"));
    }
    
    
    @Test
    public void test_212_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/density/groupBy/type?" + 
                    "bcircles=i%3A8.744%2C49.405%2C439603064%7CU%3A8.74467%2C49.4376%2C3%7CYO%3A8.70773%2C49.419%2C1&" + 
                    "filter=fno&" + 
                    "format=foo&" + 
                    "keys=foo&" + 
                    "showMetadata=evomaster_1407510_input&" + 
                    "types=foo&" + 
                    "values=foo")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 9.0 -90.0, -71.28400693326844 1.4979145242218542E16 ) and LINESTRING ( 9.0 90.0, -149.05855138950324 1.4969022884053752E16 ) [ (8.999999999998039, 277.0, NaN) ]"))
                .body("'path'", containsString("/elements/area/density/groupBy/type"));
    }
    
    
    @Test
    public void test_213_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/density/groupBy/tag?" + 
                    "bboxes=D%3A8.684%2C49.425935%2C8.7.05%2C49.387&" + 
                    "groupByKey=evomaster_498829_input&" + 
                    "groupByValues=evomaster_498830_input&" + 
                    "keys=highway&" + 
                    "time=2%2C07-11-23&" + 
                    "timeout=21&" + 
                    "values=foo")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_65_createBboxes
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/count/density/groupBy/tag"));
    }
    
    
    @Test
    public void test_214_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/density/groupBy/type?" + 
                    "bcircles=q%3A8.730093%2C49.43.3%2C35%7CXSy%3A8.749020%2C49.420%2C9%7CPg%3A8.705%2C49.4101%2C2%7Cvj%3A8.7217%2C49.407%2C4&" + 
                    "filter=evomaster_85600_input&" + 
                    "keys=foo&" + 
                    "time=3%2FP6D&" + 
                    "values=foo")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_114_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/users/count/density/groupBy/type"));
    }
    
    
    @Test
    public void test_215_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22aFDFI%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.719%2C49.426766%5D%2C%5B8.704770%2C49.435279%5D%2C%5B8.7431%2C49.434591%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "format=geojson&" + 
                    "groupByKey=evomaster_1541969_input&" + 
                    "keys=highway&" + 
                    "showMetadata=false&" + 
                    "time=2012-03-27&" + 
                    "values=prhmary")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/utils/GroupByBoundaryGeoJsonGenerator_75_generateGroupByResultGeoJson
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Index 0 out of bounds for length 0"))
                .body("'path'", containsString("/elements/length/density/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_216_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/density/groupBy/tag?" + 
                    "bboxes=D%3A8..84%2C49.425935%2C8.7205%2C49.387&" + 
                    "filter=foo&" + 
                    "groupByKey=evomaster_498829_input&" + 
                    "keys=highway&" + 
                    "time=2%2C07-11-23&" + 
                    "timeout=61&" + 
                    "values=fog")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_63_createBboxes
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/count/density/groupBy/tag"));
    }
    
    
    @Test
    public void test_217_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/key?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22featuses%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22zeA%22%7D%2C%22geometvy%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.713%2C49.410%5D%2C%5B8.716%2C49.438%5D%2C%5B8.735%2C49.4007%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22R%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.737%2C49.420%5D%2C%5B8.709960%2C49.42343%5D%2C%5B8.70488%2C49.437%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22Wk%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.722%2C49.42021%5D%2C%5B8.703%2C49.4056%5D%2C%5B8.700%2C49.417%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "format=evomaster_371943_input&" + 
                    "groupByKeys=evomaster_1111634_input&" + 
                    "keys=hmghway&" + 
                    "types=foo")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_237_createGeometryFromGeoJson
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/users/count/groupBy/key"));
    }
    
    
    @Test
    public void test_218_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=8.7270%2C49.4033%2C60&" + 
                    "format=geojson&" + 
                    "groupByKey=highway&" + 
                    "keys=highway&" + 
                    "showMetadata=true&" + 
                    "timeout=38&" + 
                    "values=foo")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/utils/GroupByBoundaryGeoJsonGenerator_75_generateGroupByResultGeoJson
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Index 0 out of bounds for length 0"))
                .body("'path'", containsString("/elements/perimeter/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_219_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22fcatures%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22aFDFI%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.719%2C49.426766%5D%2C%5B8.704770%2C49.435279%5D%2C%5B8.7431%2C49.434591%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=foo&" + 
                    "format=geojson&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=foo&" + 
                    "keys=highway&" + 
                    "showMetadata=false6&" + 
                    "time=2012-03-27&" + 
                    "values=primar%7B")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_237_createGeometryFromGeoJson
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/elements/length/density/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_220_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/density/groupBy/tag?" + 
                    "bboxes=D%3A8.684%2C49.4.5935%2C8.7205%2C49.387&" + 
                    "filter=foo&" + 
                    "groupByKey=evUlasteU_0988U9%5Einput&" + 
                    "groupByValues=evomaster_498830_input&" + 
                    "keys=highway&" + 
                    "time=2%2C07%2F11-13&" + 
                    "timeout=21&" + 
                    "values=fooR")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_64_createBboxes
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/count/density/groupBy/tag"));
    }
    
    
    @Test
    public void test_221_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/groupBy/boundary?" + 
                    "bpolys=8.7.4561%2C49.403252%2C8.7477%2C49.413146%2C8.742881%2C49.433985%2C8.73263%2C49.430%2C8.704561%2C49.403252&" + 
                    "format=csv&" + 
                    "keys=highway&" + 
                    "time=2017-05-1&" + 
                    "types=foo&" + 
                    "values=evomaster_1697336_input")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_186_createBpolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/length/groupBy/boundary"));
    }
    
    
    @Test
    public void test_222_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/density/groupBy/boundary?" + 
                    "bcircles=Kznr%3A8.70.%2C49.409%2C3&" + 
                    "keys=highway&" + 
                    "showMetadata=false&" + 
                    "time=2016-12-20&" + 
                    "timeout=0.30972900242369783&" + 
                    "values=plctform")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_114_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/count/density/groupBy/boundary"));
    }
    
    
    @Test
    public void test_223_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/ratio?" + 
                    "bboxes=J%3A8.6551%2C49.4137%2C8.737936%2C49.382.&" + 
                    "filter=joo&" + 
                    "format=csv&" + 
                    "keys=Ghiggway&" + 
                    "keys2=highwa&" + 
                    "time=0%2F09-%2F%3B%2CU9&" + 
                    "types=foo")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_66_createBboxes
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/count/ratio"));
    }
    
    
    @Test
    public void test_224_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/density/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=O%3A8.704561%2C49.403252%2C8.705%2C49.4092%2C8.332%2C49.429%2C8.702%2C49.417%2C8.704561%2C49.403252&" + 
                    "groupByKey=highway&" + 
                    "keys=highway&" + 
                    "timeout=98&" + 
                    "types=foo")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.705 49.4092, 8.332 49.429 ) and LINESTRING ( 8.702 49.417, 8.704561 49.403252 ) [ (8.703437546621764, 49.40928293988442, NaN) ]"))
                .body("'path'", containsString("/elements/area/density/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_225_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area?" + 
                    "bboxes=8.678049.426%2C8.704%2C49.381x806776%2C49.4U8%2C8.720%2C49.3844&" + 
                    "format=csv&" + 
                    "keys=highway&" + 
                    "showMetadata=yes&" + 
                    "time=evomaster_1767845_input&" + 
                    "timeout=73&" + 
                    "types=point%2Cpolygon")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_63_createBboxes
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/area"));
    }
    
    
    @Test
    public void test_226_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area?" + 
                    "bboxes=8.674%2C49.426%2C8.704%2C49.381%7C8.6776%2C49.428%2C8.7.0%2C49.3844&" + 
                    "filter=hoo&" + 
                    "format=csv&" + 
                    "keys=hkghwa&" + 
                    "showMetadata=yes&" + 
                    "time=2017-12-40&" + 
                    "timeout=30&" + 
                    "types=point%2Cpolygon")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_74_createBboxes
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/area"));
    }
    
    
    @Test
    public void test_227_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area?" + 
                    "bboxes=8.674%2C49.426%2C8.704%2C49.381%7C8.6776%2C49.4.8%2C8.720%2C49.3844&" + 
                    "filter=fmo&" + 
                    "format=csv&" + 
                    "keys=highw_&" + 
                    "showMetadata=yesR&" + 
                    "time=2017-12%2C.%2F&" + 
                    "timeout=30&" + 
                    "types=poiUt%2Cpolygnn")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_73_createBboxes
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/area"));
    }
    
    
    @Test
    public void test_228_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area?" + 
                    "bboxes=8.674%2C49.426%2C8.704%2C49.381%7C8.6776049.42808.720%2C49.3844&" + 
                    "filter=bmo&" + 
                    "format=csv&" + 
                    "keys=UiUlt_&" + 
                    "showMetadata=yes&" + 
                    "time=2017-12-%2F%2F&" + 
                    "timeout=70&" + 
                    "types=point%2Cpolygon")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_72_createBboxes
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/area"));
    }
    
    
    @Test
    public void test_229_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/ratio?" + 
                    "bboxes=J%3A8.655.%2C49.4137%2C8.737936%2C49.3822&" + 
                    "format=csv&" + 
                    "keys2=emU&" + 
                    "types2=fok%3A")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_63_createBboxes
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/count/ratio"));
    }
    
    
    @Test
    public void test_230_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/ratio?" + 
                    "bboxes=J%3A8.6550%2C49.4.37%2C8.737935%2C49.384&" + 
                    "filter=gk&" + 
                    "keys=higgwa%7BPaW&" + 
                    "keys2=AQST&" + 
                    "time=2%2F%2B9%2B%287%2F27A&" + 
                    "values=fom&" + 
                    "values2=Lfuk5A")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_64_createBboxes
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Values cannot be both equal to 1"))
                .body("'path'", containsString("/elements/count/ratio"));
    }
    
    
    @Test
    public void test_231_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/key?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22propirties%22%3A%7B%22id%22%3A%22zeE%22%7D%2C%22geometvy%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.713%2C49.410%5D%2C%5B8.716%2C49.438%5D%2C%5B8.735%2C49.4007%5D%2C%5B8.704551%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Fiatqre%22%2C%22properties%22%3A%7B%22kd%22%3A%22R%22%7D%2C%22gdometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.700561%2C49.403254%5D%2C%5B8.737%2C49.420%5D%2C%5B8.709960%2C49.42343%5D%2C%5B8270488%2C49.437%5D%2C%5B8.704551%2C49.403292%5D%5D%5D%7D%7D%2C%7B%22tupe%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22Wk%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Qolygon%22%2C%22coordinatfs%22%3A%5B%5B%5B8.704661%2C49.403252%5D%2C%5B8.722%2C49.42021%5D%2C%5B8.703%2C49.4056%5D%2C%5B8.700%2C69.417%5D%2C%5B8.704541%2C47.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=FYbzee%5EBRvqKC&" + 
                    "format=%5B&" + 
                    "groupByKeys=UlNBg&" + 
                    "keys=erwjastft_%2F59%3B4%2C&" + 
                    "types=el&" + 
                    "values=rd")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/executor/ExecutionUtils_169_snapshotMatches
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/users/count/groupBy/key"));
    }
    
    
    @Test
    public void test_232_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/key?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22propirties%22%3A%7B%22id%22%3A%22zeE%22%7D%2C%22geometvy%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.713%2C49.410%5D%2C%5B8.716%2C49.438%5D%2C%5B8.735%2C49.4007%5D%2C%5B8.704551%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Fiatqre%22%2C%22properties%22%3A%7B%22kd%22%3A%22R%22%7D%2C%22gdometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.700561%2C49.403254%5D%2C%5B8.737%2C49.420%5D%2C%5B8.709960%2C49.42343%5D%2C%5B8270488%2C49.437%5D%2C%5B8.704551%2C49.403292%5D%5D%5D%7D%7D%2C%7B%22tupe%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22Wk%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Qolygon%22%2C%22coordinatfs%22%3A%5B%5B%5B8.704661%2C49.403252%5D%2C%5B8.722%2C49.42021%5D%2C%5B8.703%2C49.4056%5D%2C%5B8.700%2C69.417%5D%2C%5B8.704541%2C47.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=FYbzee%5EBRvqKC&" + 
                    "format=%5B&" + 
                    "groupByKeys=UlNBg&" + 
                    "keys=erwjastft_%2F59%3B4%2C&" + 
                    "types=e&" + 
                    "values=rd")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/executor/ExecutionUtils_177_snapshotMatches
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/users/count/groupBy/key"));
    }
    
    
    @Test
    public void test_233_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/key?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22propirties%22%3A%7B%22id%22%3A%22zeE%22%7D%2C%22geometvy%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.713%2C49.410%5D%2C%5B8.716%2C49.438%5D%2C%5B8.735%2C49.4007%5D%2C%5B8.704551%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Fiatqre%22%2C%22properties%22%3A%7B%22kd%22%3A%22R%22%7D%2C%22gdometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.700561%2C49.403254%5D%2C%5B8.737%2C49.420%5D%2C%5B8.709960%2C49.42343%5D%2C%5B8270488%2C49.437%5D%2C%5B8.704551%2C49.403292%5D%5D%5D%7D%7D%2C%7B%22tupe%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22Wk%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Qolygon%22%2C%22coordinatfs%22%3A%5B%5B%5B8.704661%2C49.403252%5D%2C%5B8.722%2C49.42021%5D%2C%5B8.703%2C49.4056%5D%2C%5B8.700%2C69.417%5D%2C%5B8.704541%2C47.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=FYbzee%5EBRvqKC&" + 
                    "format=%5B&" + 
                    "groupByKeys=UlNBg&" + 
                    "keys=erwjastft_%2F59%3B4%2C&" + 
                    "types=e&" + 
                    "values=td")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/executor/ExecutionUtils_171_snapshotMatches
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/users/count/groupBy/key"));
    }
    
    
    @Test
    public void test_234_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/key?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22propirties%22%3A%7B%22id%22%3A%22zeE%22%7D%2C%22geometvy%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.713%2C49.410%5D%2C%5B8.716%2C49.438%5D%2C%5B8.735%2C49.4007%5D%2C%5B8.704551%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Fiatqre%22%2C%22properties%22%3A%7B%22kd%22%3A%22R%22%7D%2C%22gdometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.700561%2C49.403254%5D%2C%5B8.737%2C49.420%5D%2C%5B8.709960%2C49.42343%5D%2C%5B8270488%2C49.437%5D%2C%5B8.704551%2C49.403292%5D%5D%5D%7D%7D%2C%7B%22tupe%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22Wk%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Qolygon%22%2C%22coordinatfs%22%3A%5B%5B%5B8.704661%2C49.403252%5D%2C%5B8.722%2C49.42021%5D%2C%5B8.703%2C49.4056%5D%2C%5B8.700%2C69.417%5D%2C%5B8.704541%2C47.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=FYbzee%5EBRvqKC&" + 
                    "format=%5B&" + 
                    "groupByKeys=UlNBg&" + 
                    "time=1918*863993209%3F807&" + 
                    "types=e&" + 
                    "values=td")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/executor/ExecutionUtils_170_snapshotMatches
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/users/count/groupBy/key"));
    }
    
    
    @Test
    public void test_235_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/key?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22propirties%22%3A%7B%22id%22%3A%22zeE%22%7D%2C%22geometvy%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.713%2C49.410%5D%2C%5B8.716%2C49.438%5D%2C%5B8.735%2C49.4007%5D%2C%5B8.704551%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Fiatqre%22%2C%22properties%22%3A%7B%22kd%22%3A%22R%22%7D%2C%22gdometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.700561%2C49.403254%5D%2C%5B8.737%2C49.420%5D%2C%5B8.709960%2C49.42343%5D%2C%5B8270488%2C49.437%5D%2C%5B8.704551%2C49.403292%5D%5D%5D%7D%7D%2C%7B%22tupe%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22Wk%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Qolygon%22%2C%22coordinatfs%22%3A%5B%5B%5B8.704661%2C49.403252%5D%2C%5B8.722%2C49.42021%5D%2C%5B8.703%2C49.4056%5D%2C%5B8.700%2C69.417%5D%2C%5B8.704541%2C47.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=FYbzee%5EBRvqKC&" + 
                    "format=application%2Fx-www-form-urlencoded&" + 
                    "groupByKeys=UlNBg&" + 
                    "time=1918*863993209%3F807&" + 
                    "types=e&" + 
                    "values=td")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/executor/ExecutionUtils_159_snapshotMatches
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/users/count/groupBy/key"));
    }
    
    
    @Test
    public void test_236_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/key?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22propirties%22%3A%7B%22id%22%3A%22zeE%22%7D%2C%22geometvy%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.713%2C49.410%5D%2C%5B8.716%2C49.438%5D%2C%5B8.735%2C49.4007%5D%2C%5B8.704551%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Fiatqre%22%2C%22properties%22%3A%7B%22kd%22%3A%22R%22%7D%2C%22gdometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.700561%2C49.403254%5D%2C%5B8.737%2C49.420%5D%2C%5B8.709960%2C49.42343%5D%2C%5B8270488%2C49.437%5D%2C%5B8.704551%2C49.403292%5D%5D%5D%7D%7D%2C%7B%22tupe%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22Wk%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Qolygon%22%2C%22coordinatfs%22%3A%5B%5B%5B8.704661%2C49.403252%5D%2C%5B8.722%2C49.42021%5D%2C%5B8.703%2C49.4056%5D%2C%5B8.700%2C69.417%5D%2C%5B8.704541%2C47.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=FYbzee%5EBRvqKC&" + 
                    "format=application%2Fx-www-form-urlencoded&" + 
                    "groupByKeys=UlNBg&" + 
                    "types=e&" + 
                    "values=td")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/executor/ExecutionUtils_165_snapshotMatches
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/users/count/groupBy/key"));
    }
    
    
    @Test
    public void test_237_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/key?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22propirties%22%3A%7B%22id%22%3A%22zeE%22%7D%2C%22geometvy%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.713%2C49.410%5D%2C%5B8.716%2C49.438%5D%2C%5B8.735%2C49.4007%5D%2C%5B8.704551%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Fiatqre%22%2C%22properties%22%3A%7B%22kd%22%3A%22R%22%7D%2C%22gdometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.700561%2C49.403254%5D%2C%5B8.737%2C49.420%5D%2C%5B8.709960%2C49.42343%5D%2C%5B8270488%2C49.437%5D%2C%5B8.704551%2C49.403292%5D%5D%5D%7D%7D%2C%7B%22tupe%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22Wk%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Qolygon%22%2C%22coordinatfs%22%3A%5B%5B%5B8.704661%2C49.403252%5D%2C%5B8.722%2C49.42021%5D%2C%5B8.703%2C49.4056%5D%2C%5B8.700%2C69.417%5D%2C%5B8.704541%2C47.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=FYbzee%5EBRvqKCg&" + 
                    "format=application%2Fx-www-form-urlencoded&" + 
                    "groupByKeys=UlNBg&" + 
                    "types=e&" + 
                    "values=td")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/executor/ExecutionUtils_162_snapshotMatches
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/users/count/groupBy/key"));
    }
    
    
    @Test
    public void test_238_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/key?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22propirties%22%3A%7B%22id%22%3A%22zeE%22%7D%2C%22geometvy%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.713%2C49.410%5D%2C%5B8.716%2C49.438%5D%2C%5B8.735%2C49.4007%5D%2C%5B8.704551%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Fiatqre%22%2C%22properties%22%3A%7B%22kd%22%3A%22R%22%7D%2C%22gdometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.700561%2C49.403254%5D%2C%5B8.737%2C49.420%5D%2C%5B8.709960%2C49.42343%5D%2C%5B8270488%2C49.437%5D%2C%5B8.704551%2C49.403292%5D%5D%5D%7D%7D%2C%7B%22tupe%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22Wk%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Qolygon%22%2C%22coordinatfs%22%3A%5B%5B%5B8.704661%2C49.403252%5D%2C%5B8.722%2C49.42021%5D%2C%5B8.703%2C49.4056%5D%2C%5B8.700%2C69.417%5D%2C%5B8.704541%2C47.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=FYbzee%5EBRvqKCg&" + 
                    "format=application%2Fx-www-form-urlencoded&" + 
                    "groupByKeys=UlNBg&" + 
                    "showMetadata=ersmastft_39%3A98-_&" + 
                    "time=1918*863993209%3F807&" + 
                    "types=e")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/executor/ExecutionUtils_184_snapshotMatches
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/users/count/groupBy/key"));
    }
    
    
    @Test
    public void test_239_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/key?" + 
                    "bpolys=%2C&" + 
                    "format=multipart%2Fform-data&" + 
                    "groupByKeys=fpNUp&" + 
                    "time=FYbzee%5ECRvqKC&" + 
                    "types=g&" + 
                    "values=MINUS")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_156_createBpolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Index 0 out of bounds for length 0"))
                .body("'path'", containsString("/users/count/groupBy/key"));
    }
    
    
    @Test
    public void test_240_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/tag?" + 
                    "bpolys=%2C&" + 
                    "filter=%2C&" + 
                    "format=-&" + 
                    "groupByKey=qTYPQSU7t&" + 
                    "keys=V&" + 
                    "time=W4t&" + 
                    "types=%5CuU&" + 
                    "values=")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_156_createBpolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/elements/area/groupBy/tag"));
    }
    
    
    @Test
    public void test_241_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/density/groupBy/tag?" + 
                    "bpolys=8.704561%2C49.403252%2C8.71811%2C49.42095%2C8.706%2C49.434%2C8.719%2C49.4073%2C8.704561%2C49.403252&" + 
                    "format=csv&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=apartments%2Cspeed_camera&" + 
                    "keys=highway&" + 
                    "showMetadata=yes&" + 
                    "values=platform")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.71811 49.42095 ) and LINESTRING ( 8.706 49.434, 8.719 49.4073 ) [ (8.714591595947027, 49.4163541837088, NaN) ]"))
                .body("'path'", containsString("/users/count/density/groupBy/tag"));
    }
    
    
    @Test
    public void test_242_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/density/groupBy/boundary?" + 
                    "bpolys=8.704561%2C49.403252%2C8.70632%2C49.435%2C8.727%2C49.404%2C8.70467%2C49.40359%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.748%2C49.4099%2C8.7327%2C49.425%2C8.705%2C49.4109%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.7175%2C49.412%2C8.70443%2C49.405012%2C8.743%2C49.420813%2C8.704561%2C49.403252&" + 
                    "filter=foot%3D*+and+not+area%3A%281.0+..+1E6%29&" + 
                    "showMetadata=false&" + 
                    "time=%2F%2FP10M2D&" + 
                    "timeout=41")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.70632 49.435 ) and LINESTRING ( 8.70467 49.40359, 8.704561 49.403252 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/users/count/density/groupBy/boundary"));
    }
    
    
    @Test
    public void test_243_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count?" + 
                    "bpolys=K%3A8.704561%2C49.403252%2C8.738%2C49.428%2C8.734%2C49.427%2C8.746%2C49.41259%2C8.704561%2C49.403252%7Cv%3A8.704561%2C49.403252%2C8.722%2C49.402%2C8.748%2C49.4250%2C8.704%2C49.419049%2C8.704561%2C49.403252%7CTnOz%3A8.704561%2C49.403252%2C8.723%2C49.43455%2C8.730%2C49.4086%2C8.706%2C49.413%2C8.704561%2C49.403252&" + 
                    "format=csv&" + 
                    "keys=highway&" + 
                    "time=%2F%2FP3Y3D&" + 
                    "timeout=70")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.738 49.428 ) and LINESTRING ( 8.704561 49.403252, 8.722 49.402 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/users/count"));
    }
    
    
    @Test
    public void test_244_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/density/groupBy/type?" + 
                    "bpolys=UXXju%3A8.704561%2C49.403252%2C8.743%2C49.43751%2C8.7036%2C49.425%2C8.74923%2C49.422%2C8.704561%2C49.403252%7CwYqgl%3A8.704561%2C49.403252%2C8.73522%2C49.403%2C8.704163%2C49.4242%2C8.704%2C49.40012%2C8.704561%2C49.403252%7COkUW%3A8.704561%2C49.403252%2C8.745482%2C49.40461%2C8.709976%2C49.4167%2C8.724%2C49.401%2C8.704561%2C49.403252&" + 
                    "keys=highway&" + 
                    "time=2011-02-17&" + 
                    "values=emergency_access_point")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.743 49.43751 ) and LINESTRING ( 8.709976 49.4167, 8.724 49.401 ) [ (8.714263968378622, 49.411899579039904, NaN) ]"))
                .body("'path'", containsString("/elements/perimeter/density/groupBy/type"));
    }
    
    
    @Test
    public void test_245_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/density/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=8.704561%2C49.403252%2C8.74130%2C49.41636%2C8.70438%2C49.438%2C8.703%2C49.420107%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.721592%2C49.4078%2C8.743%2C49.423%2C8.737%2C49.419%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.7444%2C49.413%2C8.723%2C49.426%2C8.731%2C49.420094%2C8.704561%2C49.403252&" + 
                    "format=csv&" + 
                    "groupByKey=building&" + 
                    "keys=highway&" + 
                    "time=2017-04-09&" + 
                    "timeout=77&" + 
                    "values=stop")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.7413 49.41636 ) and LINESTRING ( 8.703 49.420107, 8.704561 49.403252 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/perimeter/density/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_246_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=EgH%3A8.704561%2C49.403252%2C8.70150%2C49.401%2C8.72690%2C49.412%2C8.709%2C49.402%2C8.704561%2C49.403252&" + 
                    "filter=landuse%21%3D*+and+length%3A%28+..+100%29&" + 
                    "format=json&" + 
                    "groupByKey=building&" + 
                    "time=2010-11-03&" + 
                    "timeout=27")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.7015 49.401, 8.7269 49.412 ) and LINESTRING ( 8.709 49.402, 8.704561 49.403252 ) [ (8.70585641164929, 49.40288663496623, NaN) ]"))
                .body("'path'", containsString("/elements/length/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_247_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density/groupBy/tag?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22XH%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.73232%2C49.430%5D%2C%5B8.73489%2C49.4382%5D%2C%5B8.708%2C49.4045%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22ta%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.741%2C49.4011%5D%2C%5B8.712%2C49.433%5D%2C%5B8.702%2C49.4162%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22P%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.717%2C49.407%5D%2C%5B8.704561%2C49.41213%5D%2C%5B8.7245%2C49.4077%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "format=csv&" + 
                    "groupByKey=building&" + 
                    "keys=highway&" + 
                    "showMetadata=false&" + 
                    "values=bus_stop")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.722942119899656 49.42096366811038 ) and LINESTRING ( 8.721980641286999 49.422021294584304, 8.708 49.4045 ) [ (8.715131275429469, 49.41343729944117, NaN) ]"))
                .body("'path'", containsString("/elements/length/density/groupBy/tag"));
    }
    
    
    @Test
    public void test_248_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/type?" + 
                    "bpolys=O%3A8.704561%2C49.403252%2C8.704250%2C49.4217%2C8.7418%2C49.422%2C8.704558%2C49.4288%2C8.704561%2C49.403252%7CbS%3A8.704561%2C49.403252%2C8.700%2C49.416%2C8.72371%2C49.4250%2C8.70191%2C49.41452%2C8.704561%2C49.403252%7CMbF%3A8.704561%2C49.403252%2C8.728019%2C49.401%2C8.7215%2C49.4382%2C8.704%2C49.439%2C8.704561%2C49.403252&" + 
                    "format=geojson&" + 
                    "keys=highway&" + 
                    "time=2011-10-03&" + 
                    "timeout=65&" + 
                    "values=cycleway")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.70425 49.4217 ) and LINESTRING ( 8.704561 49.403252, 8.7 49.416 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/count/groupBy/type"));
    }
    
    
    @Test
    public void test_249_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22HMFES%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.704668%2C49.432473%5D%2C%5B8.734%2C49.43255%5D%2C%5B8.723%2C49.401%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22hgl%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.727%2C49.415%5D%2C%5B8.7052%2C49.435%5D%2C%5B8.7415%2C49.4007%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22xgEv%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.706%2C49.4164%5D%2C%5B8.701%2C49.421%5D%2C%5B8.703032%2C49.4065%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "groupByKey=building&" + 
                    "keys=highway&" + 
                    "showMetadata=true&" + 
                    "time=2016-06-30&" + 
                    "timeout=48")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.727 49.415 ) and LINESTRING ( 8.707865463784838 49.43248139372397, 8.727505725535528 49.413923240058715 ) [ (8.72659215806304, 49.414786473235196, NaN) ]"))
                .body("'path'", containsString("/elements/count/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_250_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/ratio?" + 
                    "bpolys=LvSdk%3A8.704561%2C49.403252%2C8.7141%2C49.407756%2C8.701%2C49.4384%2C8.7069%2C49.422%2C8.704561%2C49.403252%7ClEQ%3A8.704561%2C49.403252%2C8.748%2C49.406%2C8.70916%2C49.42074%2C8.7371%2C49.42250%2C8.704561%2C49.403252&" + 
                    "filter=smoothness%3D*+or+not+id%3A%281+..+9999%29&" + 
                    "keys2=highway&" + 
                    "time=2014-03-12&" + 
                    "timeout=96&" + 
                    "types2=node%2Crelation")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.7141 49.407756 ) and LINESTRING ( 8.7069 49.422, 8.704561 49.403252 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/area/ratio"));
    }
    
    
    @Test
    public void test_251_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/type?" + 
                    "bpolys=j%3A8.704561%2C49.403252%2C8.714%2C49.412%2C8.749%2C49.42548%2C8.70348%2C49.40293%2C8.704561%2C49.403252&" + 
                    "format=csv&" + 
                    "keys=highway&" + 
                    "showMetadata=yes")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.714 49.412 ) and LINESTRING ( 8.749 49.42548, 8.70348 49.40293 ) [ (8.705055922970438, 49.40371069119032, NaN) ]"))
                .body("'path'", containsString("/users/count/groupBy/type"));
    }
    
    
    @Test
    public void test_252_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/ratio/groupBy/boundary?" + 
                    "bpolys=MDFd%3A8.704561%2C49.403252%2C8.709%2C49.432984%2C8.707%2C49.405%2C8.749686%2C49.431%2C8.704561%2C49.403252%7CC%3A8.704561%2C49.403252%2C8.729490%2C49.40822%2C8.730484%2C49.4249%2C8.745%2C49.423537%2C8.704561%2C49.403252%7CUm%3A8.704561%2C49.403252%2C8.745%2C49.425%2C8.704%2C49.412%2C8.712147%2C49.43152%2C8.704561%2C49.403252&" + 
                    "format=csv&" + 
                    "keys=highway&" + 
                    "time=2010-10-30&" + 
                    "timeout=38&" + 
                    "types2=way%2C")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.709 49.432984 ) and LINESTRING ( 8.704 49.412, 8.712147 49.43152 ) [ (8.706906956154663, 49.4189649913022, NaN) ]"))
                .body("'path'", containsString("/elements/count/ratio/groupBy/boundary"));
    }
    
    
    @Test
    public void test_253_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/boundary?" + 
                    "bpolys=iKqJI%3A8.704561%2C49.403252%2C8.700845%2C49.4169%2C8.7099%2C49.419%2C8.7041%2C49.4190%2C8.704561%2C49.403252%7Ckus%3A8.704561%2C49.403252%2C8.724%2C49.41236%2C8.7181%2C49.40334%2C8.704%2C49.414%2C8.704561%2C49.403252%7CeFbP%3A8.704561%2C49.403252%2C8.702%2C49.412%2C8.706%2C49.409%2C8.736%2C49.422612%2C8.704561%2C49.403252&" + 
                    "keys=highway&" + 
                    "timeout=39&" + 
                    "values=pedestrian")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.700845 49.4169 ) and LINESTRING ( 8.704561 49.403252, 8.702 49.412 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/length/groupBy/boundary"));
    }
    
    
    @Test
    public void test_254_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density?" + 
                    "bpolys=j%3A8.704561%2C49.403252%2C8.7062%2C49.4392%2C8.7472%2C49.4269%2C8.700%2C49.425%2C8.704561%2C49.403252%7COuqm%3A8.704561%2C49.403252%2C8.7298%2C49.4120%2C8.701%2C49.4368%2C8.742%2C49.4159%2C8.704561%2C49.403252%7Cn%3A8.704561%2C49.403252%2C8.71459%2C49.416%2C8.737%2C49.412327%2C8.706%2C49.40541%2C8.704561%2C49.403252&" + 
                    "keys=highway&" + 
                    "showMetadata=yes")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.7062 49.4392 ) and LINESTRING ( 8.704561 49.403252, 8.71459 49.416 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/length/density"));
    }
    
    
    @Test
    public void test_255_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22c%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.705%2C49.423565%5D%2C%5B8.719401%2C49.419%5D%2C%5B8.704%2C49.416%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22IrWE%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.749%2C49.417698%5D%2C%5B8.749%2C49.4258%5D%2C%5B8.7097%2C49.421%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "keys=highway&" + 
                    "time=2017-06-15&" + 
                    "timeout=49&" + 
                    "values=crossing")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.705 49.423565 ) and LINESTRING ( 8.708506405641023 49.416877814227846, 8.704 49.416 ) [ (8.704840043341978, 49.41616363418128, NaN) ]"))
                .body("'path'", containsString("/elements/count"));
    }
    
    
    @Test
    public void test_256_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/boundary?" + 
                    "bpolys=Xvouh%3A8.704561%2C49.403252%2C8.71678%2C49.4172%2C8.700%2C49.409522%2C8.713%2C49.410%2C8.704561%2C49.403252%7CN%3A8.704561%2C49.403252%2C8.708%2C49.431%2C8.707516%2C49.408%2C8.7097%2C49.4039%2C8.704561%2C49.403252%7CW%3A8.704561%2C49.403252%2C8.73647%2C49.402%2C8.7080%2C49.4330%2C8.733%2C49.40082%2C8.704561%2C49.403252&" + 
                    "filter=ref%3D*+and+type%3Anode&" + 
                    "format=json&" + 
                    "showMetadata=no&" + 
                    "time=2009-11-22")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.71678 49.4172 ) and LINESTRING ( 8.7097 49.4039, 8.704561 49.403252 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/area/groupBy/boundary"));
    }
    
    
    @Test
    public void test_257() throws Exception {
        
        try{
            given().accept("*/*")
                    .post(baseUrlOfSut + "/users/count/groupBy/boundary?" + 
                        "bboxes=8.699737%2C49.411%2C8.742%2C49.382%7C8.690%2C49.414858%2C8.732%2C49.3962%7C8.698%2C49.407%2C8.754%2C49.3826&" + 
                        "filter=highway%21%3D*+or+not+geometry%3Apolygon&" + 
                        "format=json&" + 
                        "time=%2F%2FP26D")
                    .then();
        } catch(Exception e){
        }
    }
    
    
    @Test
    public void test_258_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/type?" + 
                    "bcircles=Krs%3A8.715%2C49.427%2C8%7Cp%3A8.722%2C49.410922%2C423%7CBq%3A8.72731%2C49.437%2C42%7Ccu%3A8.701%2C49.403%2C427444481208&" + 
                    "filter=type%3D*+or+id%3A%281+..+9999%29&" + 
                    "time=2017-06-13")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El ángulo 66.057.536.323.845.030.000 es demasiado grande."))
                .body("'path'", containsString("/elements/perimeter/groupBy/type"));
    }
    
    
    @Test
    public void test_259() throws Exception {
        
        try{
            given().accept("*/*")
                    .post(baseUrlOfSut + "/users/count/groupBy/type?" + 
                        "bboxes=8.656%2C49.4088%2C8.738%2C49.383%7C8.683%2C49.424%2C8.7072%2C49.3872&" + 
                        "format=csv")
                    .then();
        } catch(Exception e){
        }
    }
    
    
    @Test
    public void test_260() throws Exception {
        
        try{
            given().accept("*/*")
                    .get(baseUrlOfSut + "/users/count/groupBy/type?" + 
                        "bboxes=8.6547%2C49.424%2C8.7180%2C49.3918&" + 
                        "filter=ref%3D*+or+type%3Away&" + 
                        "format=json&" + 
                        "showMetadata=no&" + 
                        "timeout=70")
                    .then();
        } catch(Exception e){
        }
    }
    
    
    @Test
    public void test_261() throws Exception {
        
        try{
            given().accept("*/*")
                    .post(baseUrlOfSut + "/users/count/groupBy/type?" + 
                        "bcircles=x%3A8.720%2C49.4043%2C7%7CAE%3A8.709%2C49.400%2C44&" + 
                        "filter=type%3D*+or+type%3Arelation+and+id%3A%281+..+9999%29&" + 
                        "showMetadata=yes&" + 
                        "timeout=26")
                    .then();
        } catch(Exception e){
        }
    }
    
    
    @Test
    public void test_262_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/ratio?" + 
                    "bpolys=h%3A8.704561%2C49.403252%2C8.723%2C49.41438%2C8.701%2C49.407%2C8.7079%2C49.400118%2C8.704561%2C49.403252%7CrNXc%3A8.704561%2C49.403252%2C8.718%2C49.400%2C8.704561%2C49.4060%2C8.7048%2C49.41507%2C8.704561%2C49.403252&" + 
                    "filter=network%3D*+or+geometry%3Aline+and+not+length%3A%28+..+100%29&" + 
                    "format=geojson&" + 
                    "keys2=highway&" + 
                    "showMetadata=yes&" + 
                    "time=2009-04-26&" + 
                    "timeout=82&" + 
                    "types2=way%2Crelation")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.723 49.41438 ) and LINESTRING ( 8.701 49.407, 8.7079 49.400118 ) [ (8.704683612411243, 49.40332599701244, NaN) ]"))
                .body("'path'", containsString("/elements/perimeter/ratio"));
    }
    
    
    @Test
    public void test_263_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/key?" + 
                    "bpolys=8.704561%2C49.403252%2C8.736%2C49.4348%2C8.712%2C49.4261%2C8.705%2C49.414%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.712%2C49.404%2C8.71461%2C49.420%2C8.717%2C49.402083%2C8.704561%2C49.403252&" + 
                    "format=geojson&" + 
                    "groupByKeys=name%2Ctracktype%2Caddr%3Apostcode")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.736 49.4348 ) and LINESTRING ( 8.71461 49.42, 8.717 49.402083 ) [ (8.715394007754796, 49.414122566132775, NaN) ]"))
                .body("'path'", containsString("/users/count/groupBy/key"));
    }
    
    
    @Test
    public void test_264() throws Exception {
        
        try{
            given().accept("*/*")
                    .get(baseUrlOfSut + "/users/count/groupBy/tag?" + 
                        "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22c%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.712%2C49.42663%5D%2C%5B8.701159%2C49.434%5D%2C%5B8.72069%2C49.43090%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                        "filter=ref%3D*+or+geometry%3Apoint+or+area%3A%281.0+..+1E6%29&" + 
                        "format=json&" + 
                        "groupByKey=highway&" + 
                        "groupByValues=traffic_signals%2Csynagogue&" + 
                        "showMetadata=no&" + 
                        "time=%2F%2FP3Y26D&" + 
                        "timeout=77")
                    .then();
        } catch(Exception e){
        }
    }
    
    
    @Test
    public void test_265_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/tag?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22Ps%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7241%2C49.43283%5D%2C%5B8.70343%2C49.422860%5D%2C%5B8.711%2C49.421%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22GeJ%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7467%2C49.406973%5D%2C%5B8.7045%2C49.414%5D%2C%5B8.7467%2C49.435%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22BaAfI%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.70801%2C49.434%5D%2C%5B8.70971%2C49.435%5D%2C%5B8.724%2C49.4331%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "format=json&" + 
                    "groupByKey=highway&" + 
                    "keys=highway&" + 
                    "showMetadata=no&" + 
                    "time=%2F%2FP1M23D")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.7467 49.406973, 8.710870005604127 49.412939288403315 ) and LINESTRING ( 8.7467 49.435, 8.704561 49.403252 ) [ (8.716233482475493, 49.412046180536606, NaN) ]"))
                .body("'path'", containsString("/users/count/groupBy/tag"));
    }
    
    
    @Test
    public void test_266() throws Exception {
        
        try{
            given().accept("*/*")
                    .post(baseUrlOfSut + "/users/count/groupBy/key?" + 
                        "bcircles=KXipk%3A8.745%2C49.434741%2C47&" + 
                        "groupByKeys=network%2Caddr%3Ahousenumber&" + 
                        "time=%2F%2FP2Y2D&" + 
                        "timeout=94")
                    .then();
        } catch(Exception e){
        }
    }
    
    
    @Test
    public void test_267_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/type?" + 
                    "bpolys=mvxgV%3A8.704561%2C49.403252%2C8.738182%2C49.407%2C8.701%2C49.4102%2C8.705%2C49.411%2C8.704561%2C49.403252%7CPuaED%3A8.704561%2C49.403252%2C8.741%2C49.424%2C8.70446%2C49.41415%2C8.70895%2C49.4295%2C8.704561%2C49.403252%7CzDM%3A8.704561%2C49.403252%2C8.72289%2C49.435%2C8.706381%2C49.4350%2C8.724019%2C49.41297%2C8.704561%2C49.403252&" + 
                    "format=json&" + 
                    "keys=highway&" + 
                    "timeout=98&" + 
                    "values=give_way")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.738182 49.407 ) and LINESTRING ( 8.705 49.411, 8.704561 49.403252 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/users/count/groupBy/type"));
    }
    
    
    @Test
    public void test_268() throws Exception {
        
        try{
            given().accept("*/*")
                    .post(baseUrlOfSut + "/users/count/groupBy/boundary?" + 
                        "bboxes=SBJjv%3A8.685%2C49.417%2C8.726%2C49.399%7Cfv%3A8.699%2C49.421%2C8.738791%2C49.3841%7CCW%3A8.697%2C49.409%2C8.756397%2C49.391%7CAm%3A8.65325%2C49.40452%2C8.738%2C49.399902&" + 
                        "timeout=31")
                    .then();
        } catch(Exception e){
        }
    }
    
    
    @Test
    public void test_269() throws Exception {
        
        try{
            given().accept("*/*")
                    .post(baseUrlOfSut + "/users/count/groupBy/key?" + 
                        "bboxes=8.6983%2C49.413%2C8.750%2C49.386&" + 
                        "filter=bicycle%21%3D*&" + 
                        "groupByKeys=tracktype%2Ctype&" + 
                        "showMetadata=true&" + 
                        "time=%2F%2FP1Y5M4D&" + 
                        "timeout=54")
                    .then();
        } catch(Exception e){
        }
    }
    
    
    @Test
    public void test_270_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/ratio/groupBy/boundary?" + 
                    "bpolys=cx%3A8.704561%2C49.403252%2C8.7282%2C49.410%2C8.71568%2C49.4281%2C8.708%2C49.42762%2C8.704561%2C49.403252%7CqLl%3A8.704561%2C49.403252%2C8.736%2C49.419%2C8.7243%2C49.402%2C8.727478%2C49.420680%2C8.704561%2C49.403252%7CHVsa%3A8.704561%2C49.403252%2C8.7161%2C49.406401%2C8.708%2C49.43054%2C8.7264%2C49.4031%2C8.704561%2C49.403252&" + 
                    "format=csv&" + 
                    "keys=highway&" + 
                    "showMetadata=no&" + 
                    "timeout=66")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.7282 49.41 ) and LINESTRING ( 8.704561 49.403252, 8.7161 49.406401 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/perimeter/ratio/groupBy/boundary"));
    }
    
    
    @Test
    public void test_271() throws Exception {
        
        try{
            given().accept("*/*")
                    .post(baseUrlOfSut + "/users/count/groupBy/tag?" + 
                        "bboxes=LNQBC%3A8.692554%2C49.400%2C8.719%2C49.398%7Ce%3A8.665%2C49.422%2C8.7339%2C49.387%7Ce%3A8.670%2C49.4075%2C8.753%2C49.390%7Cw%3A8.662%2C49.4065%2C8.757%2C49.3990&" + 
                        "filter=barrier%21%3D*+or+length%3A%28+..+100%29&" + 
                        "groupByKey=building")
                    .then();
        } catch(Exception e){
        }
    }
    
    
    @Test
    public void test_272() throws Exception {
        
        try{
            given().accept("*/*")
                    .get(baseUrlOfSut + "/users/count/groupBy/type?" + 
                        "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22wQlPi%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.741667%2C49.4182%5D%2C%5B8.7041%2C49.42425%5D%2C%5B8.701%2C49.4146%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                        "filter=maxspeed%3D*+or+type%3Anode+or+length%3A%28+..+100%29&" + 
                        "showMetadata=true&" + 
                        "time=%2F%2FP10M5D&" + 
                        "timeout=59")
                    .then();
        } catch(Exception e){
        }
    }
    
    
    @Test
    public void test_273() throws Exception {
        
        try{
            given().accept("*/*")
                    .post(baseUrlOfSut + "/users/count/groupBy/type?" + 
                        "bboxes=BAo%3A8.696%2C49.429%2C8.746%2C49.3802%7CIXP%3A8.654%2C49.408%2C8.739%2C49.3857&" + 
                        "filter=tracktype%21%3D*+and+area%3A%281.0+..+1E6%29&" + 
                        "showMetadata=false&" + 
                        "time=%2F%2FP3Y21D")
                    .then();
        } catch(Exception e){
        }
    }
    
    
    @Test
    public void test_274_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/type?" + 
                    "bpolys=8.704561%2C49.403252%2C8.720%2C49.410%2C8.7282%2C49.435086%2C8.7024%2C49.42067%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.702838%2C49.41197%2C8.7098%2C49.4129%2C8.7471%2C49.4031%2C8.704561%2C49.403252&" + 
                    "filter=addr%3Astreet%3D*+or+not+area%3A%281.0+..+1E6%29")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.72 49.41 ) and LINESTRING ( 8.704561 49.403252, 8.702838 49.41197 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/users/count/groupBy/type"));
    }
    
    
    @Test
    public void test_275() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/density/groupBy/type?" + 
                    "bcircles=OtZVX%3A8.7155%2C49.424%2C8%7Cs%3A8.740%2C49.428%2C7&" + 
                    "keys=highway&" + 
                    "showMetadata=true&" + 
                    "time=%2F%2FP8M9D&" + 
                    "timeout=25&" + 
                    "values=speed_camera")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(1361.0))
                .body("'metadata'.'description'", containsString("Density of distinct active users per time interval (number of users per square-kilometer) aggregated on the type."));
    }
    
    
    @Test
    public void test_276() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/density/groupBy/tag?" + 
                    "bcircles=RZx%3A8.7285%2C49.41428%2C5&" + 
                    "format=json&" + 
                    "groupByKey=building&" + 
                    "keys=highway&" + 
                    "time=%2F%2FP1M7D")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'groupByResult'", hasItems());
    }
    
    
    @Test
    public void test_277() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/density/groupBy/tag?" + 
                    "bpolys=Hv%3A8.704561%2C49.403252%2C8.709%2C49.411%2C8.7161%2C49.421%2C8.708158%2C49.424%2C8.704561%2C49.403252&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=secondary_link%2Cspeed_camera&" + 
                    "keys=highway&" + 
                    "time=%2F%2FP7M5D")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_278() throws Exception {
        
        given().accept("text/csv")
                .get(baseUrlOfSut + "/users/count/density/groupBy/boundary?" + 
                    "bcircles=PrN%3A8.7128%2C49.426%2C1%7Cr%3A8.7150%2C49.4080%2C9%7Cb%3A8.713%2C49.439%2C8&" + 
                    "format=csv&" + 
                    "keys=highway&" + 
                    "showMetadata=no&" + 
                    "time=%2F%2FP2M15D&" + 
                    "timeout=49&" + 
                    "values=tertiary")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_279() throws Exception {
        
        given().accept("text/csv")
                .post(baseUrlOfSut + "/users/count?" + 
                    "bcircles=ye%3A8.7333%2C49.409%2C9&" + 
                    "format=csv&" + 
                    "keys=highway&" + 
                    "showMetadata=false&" + 
                    "time=%2F%2FP1Y6M17D&" + 
                    "values=living_street")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_280() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/groupBy/type?" + 
                    "bcircles=NWvos%3A8.7001%2C49.43083%2C57&" + 
                    "filter=maxspeed%21%3D*+or+geometry%3Aline+and+area%3A%281.0+..+1E6%29&" + 
                    "showMetadata=no&" + 
                    "time=2011-09-08&" + 
                    "timeout=51")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_281() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/groupBy/tag?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22A%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.708%2C49.418%5D%2C%5B8.742%2C49.400%5D%2C%5B8.703%2C49.423%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "groupByKey=highway&" + 
                    "keys=highway&" + 
                    "time=2014-09-02&" + 
                    "timeout=66")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_282() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/groupBy/key?" + 
                    "bcircles=8.74592%2C49.414%2C76%7C8.711%2C49.439%2C9&" + 
                    "filter=foot%21%3D*+or+not+type%3Away+and+not+length%3A%28+..+100%29&" + 
                    "groupByKeys=building%2Clit%2Chighway&" + 
                    "showMetadata=true&" + 
                    "time=2012-06-24")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(589.0))
                .body("'metadata'.'description'", containsString("Total perimeter of items in meters, aggregated on the key."));
    }
    
    
    @Test
    public void test_283() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/density/groupBy/type?" + 
                    "bcircles=T%3A8.719%2C49.425391%2C2&" + 
                    "keys=highway&" + 
                    "time=2009-12-05")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_284() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/density/groupBy/tag?" + 
                    "bcircles=LZ%3A8.7107%2C49.4180%2C15&" + 
                    "filter=turn%3D*+or+id%3A%281+..+9999%29&" + 
                    "format=json&" + 
                    "groupByKey=building&" + 
                    "time=2017-03-31")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'groupByResult'", hasItems());
    }
    
    
    @Test
    public void test_285() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/density/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=LOIc%3A8.743%2C49.411%2C6%7Cksnt%3A8.73845%2C49.429%2C6%7CeUKKL%3A8.7177%2C49.41291%2C7&" + 
                    "filter=foot%21%3D*+or+type%3Arelation+and+length%3A%28+..+100%29&" + 
                    "groupByKey=building&" + 
                    "showMetadata=true&" + 
                    "time=2016-09-01")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(568.0))
                .body("'metadata'.'description'", containsString("Density of selected items (perimeter of items in meters divided by the area in square kilometers), aggregated on the boundary and on the tag."));
    }
    
    
    @Test
    public void test_286() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/density/groupBy/boundary?" + 
                    "bcircles=8.7073%2C49.432%2C5%7C8.700%2C49.406%2C5%7C8.718%2C49.429597%2C7&" + 
                    "keys=highway&" + 
                    "time=2009-11-21")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_287() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/density?" + 
                    "bcircles=8.740907%2C49.4162%2C8%7C8.74555%2C49.40131%2C2&" + 
                    "format=json&" + 
                    "keys=highway&" + 
                    "time=2012-05-10&" + 
                    "values=living_street")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_288() throws Exception {
        
        given().accept("text/csv")
                .get(baseUrlOfSut + "/elements/perimeter?" + 
                    "bcircles=8.741119%2C49.407%2C68&" + 
                    "format=csv&" + 
                    "keys=highway&" + 
                    "showMetadata=no&" + 
                    "values=service")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_289() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/ratio?" + 
                    "bboxes=yhNxX%3A8.684810%2C49.416367%2C8.732%2C49.389&" + 
                    "filter2=lanes%3Aforward%21%3D*&" + 
                    "format=json&" + 
                    "keys=highway&" + 
                    "time=2015-05-27")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_290() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/type?" + 
                    "bcircles=MpEU%3A8.723%2C49.403324%2C9&" + 
                    "filter=highway%3D*+or+type%3Anode&" + 
                    "showMetadata=true&" + 
                    "time=2012-07-31&" + 
                    "timeout=26")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(259.0))
                .body("'metadata'.'description'", containsString("Total length of items in meters, aggregated on the type."));
    }
    
    
    @Test
    public void test_291() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/groupBy/type?" + 
                    "bcircles=8.74337%2C49.4149%2C18&" + 
                    "keys=highway&" + 
                    "showMetadata=false&" + 
                    "time=2012-04-11&" + 
                    "values=bus_stop")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_292() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/tag?" + 
                    "bcircles=8.747%2C49.401%2C20&" + 
                    "groupByKey=building&" + 
                    "groupByValues=pedestrian%2Ctower&" + 
                    "time=2016-05-28")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_293() throws Exception {
        
        given().accept("text/csv")
                .get(baseUrlOfSut + "/elements/length/groupBy/tag?" + 
                    "bcircles=dpD%3A8.746682%2C49.4072%2C26%7CHGw%3A8.7283%2C49.4240%2C4&" + 
                    "filter=destination%3D*+or+geometry%3Aline+and+length%3A%28+..+100%29&" + 
                    "format=csv&" + 
                    "groupByKey=building&" + 
                    "groupByValues=street_lamp%2Ctrack&" + 
                    "time=2015-12-04")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_294() throws Exception {
        
        given().accept("text/csv")
                .get(baseUrlOfSut + "/elements/length/groupBy/key?" + 
                    "bcircles=GJF%3A8.74175%2C49.438%2C9%7CijWL%3A8.7107%2C49.4166%2C7%7Ca%3A8.74296%2C49.407%2C60&" + 
                    "filter=destination%21%3D*+or+geometry%3Aline+and+length%3A%28+..+100%29&" + 
                    "format=csv&" + 
                    "groupByKeys=addr%3Acity%2Cnetwork&" + 
                    "time=2017-08-24")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_295() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=AsF%3A8.745%2C49.4033%2C1&" + 
                    "format=json&" + 
                    "groupByKey=building&" + 
                    "keys=highway&" + 
                    "time=2016-09-13")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'groupByResult'", hasItems());
    }
    
    
    @Test
    public void test_296() throws Exception {
        
        given().accept("text/csv")
                .get(baseUrlOfSut + "/elements/length/groupBy/boundary?" + 
                    "bpolys=8.704561%2C49.403252%2C8.7477%2C49.413146%2C8.742881%2C49.433985%2C8.73263%2C49.430%2C8.704561%2C49.403252&" + 
                    "format=csv&" + 
                    "keys=highway&" + 
                    "time=2017-05-14&" + 
                    "values=primary_link")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_297() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density/groupBy/type?" + 
                    "bcircles=Azrde%3A8.732%2C49.4230%2C5&" + 
                    "format=geojson&" + 
                    "keys=highway&" + 
                    "showMetadata=yes&" + 
                    "time=2011-08-18&" + 
                    "timeout=22&" + 
                    "values=elevator")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(217.0))
                .body("'metadata'.'description'", containsString("Density of selected items (length of items in meters divided by the area in square kilometers), aggregated on the type."));
    }
    
    
    @Test
    public void test_298() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/density/groupBy/type?" + 
                    "bcircles=8.738%2C49.404806%2C92&" + 
                    "format=json&" + 
                    "keys=highway&" + 
                    "timeout=92&" + 
                    "values=pedestrian")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_299() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density/groupBy/tag?" + 
                    "bcircles=D%3A8.7422%2C49.4205%2C49%7CJ%3A8.7139%2C49.427%2C7&" + 
                    "filter=foot%21%3D*+or+not+length%3A%28+..+100%29&" + 
                    "groupByKey=highway&" + 
                    "showMetadata=true&" + 
                    "time=2011-11-17")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(477.0))
                .body("'metadata'.'description'", containsString("Density of selected items (length of items in meters divided by the area in square kilometers), aggregated on the tag."));
    }
    
    
    @Test
    public void test_300() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/density/groupBy/tag?" + 
                    "bcircles=8.741%2C49.4006%2C5%7C8.7349%2C49.431%2C2&" + 
                    "groupByKey=building&" + 
                    "groupByValues=yes%2Cresidential%2Ctower&" + 
                    "showMetadata=true&" + 
                    "time=2009-03-04")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(517.0))
                .body("'metadata'.'description'", containsString("Density of selected items (length of items in meters divided by the area in square kilometers), aggregated on the tag."));
    }
    
    
    @Test
    public void test_301() throws Exception {
        
        given().accept("text/csv")
                .post(baseUrlOfSut + "/elements/length/density/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=8.731%2C49.421286%2C9&" + 
                    "format=csv&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=platform%2Cconstruction%2Cchapel&" + 
                    "time=2009-01-14")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_302() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/density/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=8.7349%2C49.4033%2C985&" + 
                    "format=json&" + 
                    "groupByKey=building&" + 
                    "groupByValues=service%2Cstreet_lamp%2Cplatform&" + 
                    "showMetadata=false&" + 
                    "time=2009-08-25")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_303() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density/groupBy/boundary?" + 
                    "bcircles=gdjpf%3A8.737%2C49.427%2C45%7Co%3A8.737%2C49.40536%2C83&" + 
                    "format=geojson&" + 
                    "time=2018-03-18&" + 
                    "timeout=30")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'type'", containsString("FeatureCollection"));
    }
    
    
    @Test
    public void test_304() throws Exception {
        
        given().accept("text/csv")
                .get(baseUrlOfSut + "/elements/length/density/groupBy/boundary?" + 
                    "bcircles=pev%3A8.7465%2C49.404353%2C4&" + 
                    "format=csv&" + 
                    "keys=highway&" + 
                    "showMetadata=false&" + 
                    "time=2017-09-10")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_305() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/density?" + 
                    "bcircles=aWAkt%3A8.74421%2C49.414333%2C8&" + 
                    "keys=highway&" + 
                    "time=2008-07-08&" + 
                    "timeout=54")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_306() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length?" + 
                    "bcircles=g%3A8.7239%2C49.430%2C1%7CAjyLz%3A8.701%2C49.436720%2C193&" + 
                    "time=2016-02-10")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_307() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length?" + 
                    "bcircles=SZzS%3A8.722%2C49.43264%2C91&" + 
                    "filter=destination%21%3D*+or+type%3Anode+and+id%3A%281+..+9999%29&" + 
                    "showMetadata=no")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_308() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/ratio?" + 
                    "bcircles=8.7293%2C49.4184%2C7&" + 
                    "filter2=barrier%3D*&" + 
                    "format=geojson&" + 
                    "keys2=highway&" + 
                    "time=2012-06-16&" + 
                    "timeout=93&" + 
                    "values2=elevator")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_309() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/groupBy/type?" + 
                    "bcircles=Z%3A8.729%2C49.404%2C5&" + 
                    "keys=highway&" + 
                    "time=2016-09-23")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_310() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/tag?" + 
                    "bcircles=TMRGK%3A8.702%2C49.42944%2C13%7Cry%3A8.72778%2C49.439%2C4&" + 
                    "format=json&" + 
                    "groupByKey=highway&" + 
                    "keys=highway&" + 
                    "showMetadata=false&" + 
                    "time=2014-05-26&" + 
                    "timeout=57")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'groupByResult'", hasItems());
    }
    
    
    @Test
    public void test_311() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/groupBy/tag?" + 
                    "bcircles=8.7015%2C49.435347%2C3&" + 
                    "groupByKey=building&" + 
                    "groupByValues=garage%2Csecondary%2Chouse&" + 
                    "showMetadata=no&" + 
                    "time=2011-10-04")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_312() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/key?" + 
                    "bcircles=8.7135%2C49.40148%2C1%7C8.7305%2C49.41345%2C47%7C8.7472%2C49.427048%2C3&" + 
                    "groupByKeys=landuse%2Cref%2Cturn%3Alanes&" + 
                    "keys=highway&" + 
                    "time=2009-11-16&" + 
                    "timeout=48&" + 
                    "values=speed_camera")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_313() throws Exception {
        
        given().accept("text/csv")
                .get(baseUrlOfSut + "/elements/count/groupBy/key?" + 
                    "bcircles=8.73821%2C49.433%2C3&" + 
                    "filter=network%3D*&" + 
                    "format=csv&" + 
                    "groupByKeys=foot%2Clanes%2Caddr%3Astreet&" + 
                    "showMetadata=true&" + 
                    "time=2010-09-08&" + 
                    "timeout=55")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_314() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=lvn%3A8.748%2C49.434299%2C2&" + 
                    "groupByKey=building&" + 
                    "groupByValues=dormitory%2Ctertiary%2Cpublic&" + 
                    "showMetadata=true&" + 
                    "time=2017-06-18&" + 
                    "timeout=26")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(372.0))
                .body("'metadata'.'description'", containsString("Total count of items in absolute values, aggregated on the boundary and on the tag."));
    }
    
    
    @Test
    public void test_315() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=8.73985%2C49.4338%2C3%7C8.7348%2C49.432%2C4&" + 
                    "groupByKey=building&" + 
                    "keys=highway&" + 
                    "time=2016-01-01&" + 
                    "timeout=82&" + 
                    "values=stop")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'groupByResult'", hasItems());
    }
    
    
    @Test
    public void test_316() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/groupBy/boundary?" + 
                    "bcircles=offCJ%3A8.727%2C49.406%2C24%7Clq%3A8.713%2C49.403551%2C6%7CnU%3A8.715%2C49.4226%2C8&" + 
                    "format=json&" + 
                    "keys=highway&" + 
                    "timeout=91&" + 
                    "values=residential")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_317() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/density/groupBy/type?" + 
                    "bcircles=H%3A8.732%2C49.4055%2C7&" + 
                    "keys=highway&" + 
                    "showMetadata=yes&" + 
                    "time=2010-07-26&" + 
                    "timeout=29")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(214.0))
                .body("'metadata'.'description'", containsString("Density of selected items (count of items in absolute values divided by the area in square kilometers), aggregated on the type."));
    }
    
    
    @Test
    public void test_318() throws Exception {
        
        given().accept("text/csv")
                .get(baseUrlOfSut + "/elements/count/density/groupBy/type?" + 
                    "bcircles=YSdOH%3A8.7418%2C49.435%2C6%7CVXAIP%3A8.704%2C49.402%2C5%7CkF%3A8.700%2C49.427%2C6%7CC%3A8.706%2C49.406%2C58&" + 
                    "format=csv&" + 
                    "keys=highway&" + 
                    "time=2008-05-17&" + 
                    "timeout=67&" + 
                    "values=residential")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_319() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/density/groupBy/tag?" + 
                    "bcircles=y%3A8.745%2C49.429%2C75&" + 
                    "format=json&" + 
                    "groupByKey=highway&" + 
                    "keys=highway&" + 
                    "time=2014-07-04&" + 
                    "timeout=54&" + 
                    "values=crossing")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'groupByResult'", hasItems());
    }
    
    
    @Test
    public void test_320() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/density/groupBy/tag?" + 
                    "bcircles=D%3A8.710%2C49.414%2C8%7CPk%3A8.725%2C49.4079%2C9%7CO%3A8.743%2C49.4121%2C60&" + 
                    "format=json&" + 
                    "groupByKey=highway&" + 
                    "keys=highway&" + 
                    "showMetadata=no&" + 
                    "time=2011-02-16&" + 
                    "timeout=100")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_321() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/density/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=8.7376%2C49.406%2C4&" + 
                    "format=json&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=demolished%2Cgarage%2Cprimary_link&" + 
                    "keys=highway&" + 
                    "showMetadata=true&" + 
                    "time=2012-06-29&" + 
                    "timeout=70")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(232.0))
                .body("'metadata'.'description'", containsString("Density of selected items (count of items in absolute values divided by the area in square kilometers), aggregated on the boundary and on the tag."));
    }
    
    
    @Test
    public void test_322() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/density/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=BEB%3A8.7213%2C49.4371%2C3&" + 
                    "format=json&" + 
                    "groupByKey=foo&" + 
                    "keys=highway&" + 
                    "showMetadata=no&" + 
                    "time=2011-02-15")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'groupByResult'", hasItems());
    }
    
    
    @Test
    public void test_323() throws Exception {
        
        given().accept("text/csv")
                .post(baseUrlOfSut + "/elements/count/density/groupBy/boundary?" + 
                    "bcircles=Kznr%3A8.700%2C49.409%2C3&" + 
                    "format=csv&" + 
                    "keys=highway&" + 
                    "showMetadata=false&" + 
                    "time=2016-12-20&" + 
                    "timeout=86&" + 
                    "values=platform")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_324() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/density/groupBy/boundary?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22G%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.711144%2C49.423%5D%2C%5B8.718%2C49.438%5D%2C%5B8.700%2C49.423%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "keys=highway&" + 
                    "time=2008-04-24")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_325() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/density?" + 
                    "bcircles=8.7212%2C49.4243%2C1&" + 
                    "filter=ref%3D*+or+type%3Anode+and+length%3A%28+..+100%29&" + 
                    "format=json&" + 
                    "showMetadata=false&" + 
                    "time=2013-04-15&" + 
                    "timeout=83")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_326() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count?" + 
                    "bcircles=8.719%2C49.411%2C23%7C8.71998%2C49.4193%2C6&" + 
                    "filter=maxspeed%21%3D*+and+not+area%3A%281.0+..+1E6%29&" + 
                    "time=2010-12-31&" + 
                    "timeout=79")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_327() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/ratio/groupBy/boundary?" + 
                    "bcircles=XlCjM%3A8.7007%2C49.404%2C7%7CM%3A8.723%2C49.40633%2C7%7CSujxS%3A8.709%2C49.413%2C9%7CDzZf%3A8.743042%2C49.430%2C2&" + 
                    "filter=surface%3D*+and+type%3Anode+and+length%3A%28+..+100%29&" + 
                    "filter2=service%3Ddriveway+or+length%3A%28+..+100%29&" + 
                    "keys2=highway&" + 
                    "showMetadata=yes&" + 
                    "types2=other")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(639.0))
                .body("'metadata'.'description'", containsString("Total area of items in square meters satisfying types2, keys2, values2 parameters (= value2 output), as well as items selected by types, keys, values parameters (= value output) and ratio of value2:value, aggregated on the boundary objects."));
    }
    
    
    @Test
    public void test_328() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/ratio?" + 
                    "bcircles=sk%3A8.7003%2C49.436%2C18&" + 
                    "filter2=foot%3D*+and+not+type%3Arelation&" + 
                    "keys=highway&" + 
                    "keys2=highway&" + 
                    "showMetadata=yes&" + 
                    "time=2010-03-02&" + 
                    "values=crossing&" + 
                    "values2=cycleway")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(361.0))
                .body("'metadata'.'description'", containsString("Total area of items in square meters satisfying types2, keys2, values2 parameters (= value2 output), as well as items selected by types, keys, values parameters (= value output) and ratio of value2:value."));
    }
    
    
    @Test
    public void test_329() throws Exception {
        
        given().accept("text/csv")
                .post(baseUrlOfSut + "/elements/area/groupBy/type?" + 
                    "bcircles=yuxvn%3A8.720619%2C49.405213%2C5%7CrJwnc%3A8.7325%2C49.405%2C7&" + 
                    "filter=tracktype%3D*+or+geometry%3Apoint+or+length%3A%28+..+100%29&" + 
                    "format=csv&" + 
                    "showMetadata=yes&" + 
                    "time=2016-04-03&" + 
                    "timeout=27")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_330() throws Exception {
        
        given().accept("text/csv")
                .get(baseUrlOfSut + "/elements/area/groupBy/type?" + 
                    "bcircles=8.7038%2C49.4338%2C16%7C8.709031%2C49.41324%2C421&" + 
                    "filter=lit%3D*+or+type%3Anode+and+area%3A%281.0+..+1E6%29&" + 
                    "format=csv&" + 
                    "showMetadata=no&" + 
                    "time=2014-06-25")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_331() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/tag?" + 
                    "bpolys=bYNL%3A8.704561%2C49.403252%2C8.74263%2C49.411%2C8.7045%2C49.4009%2C8.700%2C49.40507%2C8.704561%2C49.403252&" + 
                    "format=json&" + 
                    "groupByKey=highway&" + 
                    "keys=highway&" + 
                    "showMetadata=true&" + 
                    "time=2017-12-06&" + 
                    "timeout=84")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(254.0))
                .body("'metadata'.'description'", containsString("Total area of items in square meters, aggregated on the tag."));
    }
    
    
    @Test
    public void test_332() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/tag?" + 
                    "bcircles=8.71080%2C49.407%2C7%7C8.732%2C49.42926%2C760&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=crossing%2Cstation&" + 
                    "keys=highway&" + 
                    "showMetadata=false&" + 
                    "time=2008-11-30&" + 
                    "timeout=38")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_333() throws Exception {
        
        given().accept("text/csv")
                .post(baseUrlOfSut + "/elements/area/groupBy/key?" + 
                    "bcircles=8.7027%2C49.430%2C4&" + 
                    "format=csv&" + 
                    "groupByKeys=highway%2Cmaxspeed&" + 
                    "showMetadata=true&" + 
                    "time=2011-05-26")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_334() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/key?" + 
                    "bcircles=n%3A8.739%2C49.407%2C42%7CDe%3A8.730%2C49.401%2C6%7Cj%3A8.724182%2C49.410573%2C8&" + 
                    "format=json&" + 
                    "groupByKeys=type%2Cnetwork%2Coneway&" + 
                    "keys=highway&" + 
                    "showMetadata=no&" + 
                    "timeout=57&" + 
                    "values=emergency_access_point")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_335() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=8.7056%2C49.422419%2C97%7C8.7220%2C49.42059%2C2%7C8.70293%2C49.42119%2C4%7C8.7317%2C49.435%2C41&" + 
                    "groupByKey=foo&" + 
                    "groupByValues=hospital&" + 
                    "keys=highway&" + 
                    "showMetadata=true&" + 
                    "time=2015-02-19&" + 
                    "timeout=36")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(243.0))
                .body("'metadata'.'description'", containsString("Total area of items in square meters, aggregated on the boundary and on the tag."));
    }
    
    
    @Test
    public void test_336() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/boundary?" + 
                    "bcircles=xSfer%3A8.715191%2C49.4308%2C218%7CzRUQr%3A8.713772%2C49.412%2C91&" + 
                    "format=geojson&" + 
                    "keys=highway&" + 
                    "time=2012-12-18")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'type'", containsString("FeatureCollection"));
    }
    
    
    @Test
    public void test_337() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/boundary?" + 
                    "bcircles=MZec%3A8.724230%2C49.413%2C5&" + 
                    "keys=highway&" + 
                    "showMetadata=true&" + 
                    "time=2016-12-02&" + 
                    "timeout=38")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(214.0))
                .body("'metadata'.'description'", containsString("Total area of items in square meters."));
    }
    
    
    @Test
    public void test_338() throws Exception {
        
        given().accept("text/csv")
                .get(baseUrlOfSut + "/elements/area/density/groupBy/type?" + 
                    "bcircles=KLMCA%3A8.721872%2C49.416%2C59&" + 
                    "filter=ref%21%3D*+or+length%3A%28+..+100%29&" + 
                    "format=csv&" + 
                    "showMetadata=false&" + 
                    "time=2011-06-12")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_339() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density/groupBy/tag?" + 
                    "bcircles=8.721%2C49.432%2C2%7C8.712%2C49.410%2C8&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=office%2Ccycleway&" + 
                    "keys=highway&" + 
                    "time=2014-11-23&" + 
                    "values=secondary_link")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_340() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/density/groupBy/tag?" + 
                    "bcircles=I%3A8.722%2C49.423%2C6&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=public%2Cstation%2Cschool&" + 
                    "keys=highway&" + 
                    "showMetadata=false&" + 
                    "time=2010-04-02")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_341() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density/groupBy/boundary/groupBy/tag?" + 
                    "bboxes=Nb%3A8.6599%2C49.41322%2C8.744%2C49.38728&" + 
                    "groupByKey=highway&" + 
                    "time=2013-08-10")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_342() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/density/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=r%3A8.722%2C49.4024%2C30%7CZG%3A8.7232%2C49.437%2C7%7CM%3A8.740%2C49.411%2C5%7CrASka%3A8.7170%2C49.4047%2C6&" + 
                    "groupByKey=building&" + 
                    "groupByValues=primary%2Cuniversity&" + 
                    "showMetadata=yes&" + 
                    "time=2011-11-24")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(563.0))
                .body("'metadata'.'description'", containsString("Density of selected items (area of items in square meters divided by the area in square kilometers), aggregated on the boundary and on the tag."));
    }
    
    
    @Test
    public void test_343() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/density/groupBy/boundary?" + 
                    "bcircles=RDmRE%3A8.715575%2C49.437%2C8%7Cce%3A8.715%2C49.400%2C1%7CuEWpg%3A8.704%2C49.403%2C3&" + 
                    "keys=highway&" + 
                    "showMetadata=false&" + 
                    "time=2013-04-12&" + 
                    "timeout=84&" + 
                    "values=footway")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_344() throws Exception {
        
        given().accept("text/csv")
                .get(baseUrlOfSut + "/elements/area/density?" + 
                    "bcircles=i%3A8.743332%2C49.413%2C8%7Ce%3A8.7139%2C49.406%2C4&" + 
                    "format=csv&" + 
                    "keys=highway&" + 
                    "time=2017-10-03&" + 
                    "timeout=52")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_345() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/ratio?" + 
                    "bboxes=VHwYY%3A8.6621%2C49.42127%2C8.737906%2C49.383%7Coj%3A8.6570%2C49.411%2C8.731501%2C49.388%7Cc%3A8.684%2C49.41152%2C8.7267%2C49.3967%7CRQ%3A8.696%2C49.4102%2C8.73471%2C49.38451&" + 
                    "filter2=destination%21%3D*+and+geometry%3Apoint&" + 
                    "showMetadata=false&" + 
                    "time=2010-11-05&" + 
                    "timeout=100")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_346() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/boundary?" + 
                    "bboxes=8.679%2C49.4050%2C8.749%2C49.3859&" + 
                    "filter=bicycle%21%3D*+and+type%3Anode+and+not+id%3A%281+..+9999%29")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_347() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/density/groupBy/type?" + 
                    "bcircles=H%3A8.722%2C49.439%2C1&" + 
                    "filter=type%3D*+or+id%3A%281+..+9999%29&" + 
                    "showMetadata=yes&" + 
                    "time=%2F%2FP6M5D&" + 
                    "timeout=73")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(5460.0))
                .body("'metadata'.'description'", containsString("Density of distinct active users per time interval (number of users per square-kilometer) aggregated on the type."));
    }
    
    
    @Test
    public void test_348() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/density/groupBy/tag?" + 
                    "bboxes=jD%3A8.681770%2C49.418%2C8.722%2C49.398&" + 
                    "groupByKey=highway&" + 
                    "keys=highway&" + 
                    "showMetadata=no")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_349() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/density/groupBy/boundary?" + 
                    "bcircles=8.70247%2C49.409%2C1&" + 
                    "format=json&" + 
                    "keys=highway&" + 
                    "showMetadata=false&" + 
                    "timeout=94&" + 
                    "values=residential")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_350() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/density/groupBy/boundary?" + 
                    "bcircles=u%3A8.72447%2C49.4323%2C1&" + 
                    "keys=highway&" + 
                    "showMetadata=yes&" + 
                    "time=%2F%2FP3M19D&" + 
                    "values=emergency_access_point")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(271.0))
                .body("'metadata'.'description'", containsString("Density of distinct active users per time interval (number of users per square-kilometer) aggregated on the boundary."));
    }
    
    
    @Test
    public void test_351() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count?" + 
                    "bboxes=8.656220%2C49.414%2C8.728%2C49.391&" + 
                    "keys=highway&" + 
                    "time=%2F%2FP3Y1M27D")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_352() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/ratio/groupBy/boundary?" + 
                    "bcircles=8.719%2C49.449996%2C2%7C8.766%2C49.424%2C7&" + 
                    "format=json&" + 
                    "keys=fosv&" + 
                    "keys2=f&" + 
                    "showMetadata=yes&" + 
                    "time=2013-12%2F%2F&" + 
                    "values=6015-12-1%3A")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(632.0))
                .body("'metadata'.'description'", containsString("Total length of items in meters satisfying types2, keys2, values2 parameters (= value2 output), as well as items selected by types, keys, values parameters (= value output) and ratio of value2:value, aggregated on the boundary objects."));
    }
    
    
    @Test
    public void test_353() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/ratio/groupBy/boundary?" + 
                    "bcircles=8.711%2C49.4116%2C5%7C8.716%2C49.4086%2C1&" + 
                    "filter=destination%3D*+or+geometry%3Aline&" + 
                    "filter2=ref%21%3D*+and+not+id%3A%281+..+9999%29&" + 
                    "keys2=highway&" + 
                    "showMetadata=false&" + 
                    "types2=line%2Cother")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_354() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/ratio?" + 
                    "bcircles=qbO%3A8.74431%2C49.42037%2C785&" + 
                    "filter2=foot%3D*&" + 
                    "format=json&" + 
                    "keys=highway&" + 
                    "keys2=highway&" + 
                    "time=2016-03-24&" + 
                    "timeout=29&" + 
                    "values2=stop_line")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_355() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/tag?" + 
                    "bcircles=rxpAO%3A8.723%2C49.404%2C7&" + 
                    "filter=foot%21%3D*+and+geometry%3Aline+or+area%3A%281.0+..+1E6%29&" + 
                    "format=json&" + 
                    "groupByKey=building&" + 
                    "showMetadata=no&" + 
                    "timeout=84")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_356() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/key?" + 
                    "bcircles=o%3A8.707%2C49.432%2C7&" + 
                    "format=geojson&" + 
                    "groupByKeys=lanes%2Csidewalk&" + 
                    "keys=highway&" + 
                    "showMetadata=no&" + 
                    "timeout=30&" + 
                    "values=pedestrian")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_357() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/boundary?" + 
                    "bcircles=8.745116%2C49.4218%2C647%7C8.743%2C49.425%2C101&" + 
                    "keys=highway&" + 
                    "showMetadata=no&" + 
                    "timeout=34")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_358() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/density/groupBy/type?" + 
                    "bpolys=8.704561%2C49.403252%2C8.7029%2C49.429%2C8.704%2C49.413%2C8.738410%2C49.430%2C8.704561%2C49.403252&" + 
                    "format=json&" + 
                    "showMetadata=true&" + 
                    "time=2013-05-02&" + 
                    "timeout=34")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(587.0))
                .body("'metadata'.'description'", containsString("Density of selected items (perimeter of items in meters divided by the area in square kilometers), aggregated on the type."));
    }
    
    
    @Test
    public void test_359() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/density/groupBy/tag?" + 
                    "bcircles=SlzWK%3A8.715%2C49.4188%2C4&" + 
                    "format=geojson&" + 
                    "groupByKey=foo&" + 
                    "keys=highway&" + 
                    "showMetadata=yes&" + 
                    "time=2016-10-21&" + 
                    "timeout=49")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(237.0))
                .body("'metadata'.'description'", containsString("Density of selected items (perimeter of items in meters divided by the area in square kilometers), aggregated on the tag."))
                .body("'groupByResult'", hasItems());
    }
    
    
    @Test
    public void test_360() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density/groupBy/tag?" + 
                    "bpolys=ZT%3A8.704561%2C49.403252%2C8.707%2C49.4324%2C8.715988%2C49.411%2C8.746%2C49.420%2C8.704561%2C49.403252&" + 
                    "groupByKey=building&" + 
                    "showMetadata=true&" + 
                    "time=2017-12-29")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(604.0))
                .body("'metadata'.'description'", containsString("Density of selected items (length of items in meters divided by the area in square kilometers), aggregated on the tag."));
    }
    
    
    @Test
    public void test_361() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/ratio/groupBy/boundary?" + 
                    "bboxes=zllaZ%3A8.655%2C49.402%2C8.751%2C49.3885&" + 
                    "filter2=fo&" + 
                    "format=json&" + 
                    "keys=foo&" + 
                    "types2=polygon%2Cother&" + 
                    "values=foo")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_362() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/type?" + 
                    "bcircles=8.71742%2C49.4318%2C35&" + 
                    "showMetadata=false&" + 
                    "time=2009-08-27&" + 
                    "timeout=80")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_363() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count?" + 
                    "bcircles=8.710%2C49.428%2C2&" + 
                    "format=geojson&" + 
                    "keys=highway&" + 
                    "time=2017-12-09&" + 
                    "timeout=88&" + 
                    "values=stop_line")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_364() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area?" + 
                    "bcircles=8.713%2C11.004%2C9&" + 
                    "keys=4ESQPazOsVs&" + 
                    "time=&" + 
                    "timeout=80&" + 
                    "types=LIne")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_365() throws Exception {
        
        given().accept("text/csv")
                .get(baseUrlOfSut + "/elements/area?" + 
                    "bcircles=8.713%2C-1.02D%2C9&" + 
                    "format=CSV&" + 
                    "keys=evomaster_17%2C994_input&" + 
                    "showMetadata=&" + 
                    "time=%2F&" + 
                    "types=poINt&" + 
                    "values=evomaster_1174875_input")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_366() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count?" + 
                    "bcircles=E%3A8.7294%2C49.405%2C5%7CFjz%3A8.743%2C49.410%2C5%7CSF%3A8.714%2C49.437272%2C54%7Co%3A8.7087%2C49.401%2C18&" + 
                    "keys=highway&" + 
                    "showMetadata=yes&" + 
                    "timeout=77&" + 
                    "values=primary_link")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(645.0))
                .body("'metadata'.'description'", containsString("Number of distinct active users per time interval."));
    }
    
    
    @Test
    public void test_367() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/ratio/groupBy/boundary?" + 
                    "bboxes=8.678%2C49.41424%2C8.745%2C49.390&" + 
                    "keys=highway&" + 
                    "time=2017-08-23&" + 
                    "timeout=91&" + 
                    "types2=node%2Crelation&" + 
                    "values=primary")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_368() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/density/groupBy/tag?" + 
                    "bcircles=TE%3A8.706%2C49.422%2C87%7CJU%3A8.7403%2C49.42885%2C8%7CO%3A8.71400%2C49.421%2C76&" + 
                    "filter=lit%3D*+or+area%3A%281.0+..+1E6%29&" + 
                    "groupByKey=building")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_369() throws Exception {
        
        given().accept("text/csv")
                .post(baseUrlOfSut + "/elements/perimeter/density/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22i%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7374%2C49.414%5D%2C%5B8.70722%2C49.408%5D%2C%5B8.7068%2C49.431%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "format=csv&" + 
                    "groupByKey=building&" + 
                    "groupByValues=turning_circle%2Cconstruction&" + 
                    "keys=highway&" + 
                    "showMetadata=true&" + 
                    "time=2009-06-17")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_370() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/type?" + 
                    "bboxes=8.6768%2C49.42420%2C8.7581%2C49.395&" + 
                    "filter=smoothness%21%3D*+and+id%3A%281+..+9999%29&" + 
                    "format=json&" + 
                    "showMetadata=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(538.0))
                .body("'metadata'.'description'", containsString("Total length of items in meters, aggregated on the type."));
    }
    
    
    @Test
    public void test_371() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/tag?" + 
                    "bpolys=8.704561%2C49.403252%2C8.743858%2C49.425%2C8.72712%2C49.435171%2C8.7037%2C49.422%2C8.704561%2C49.403252&" + 
                    "format=json&" + 
                    "groupByKey=building&" + 
                    "groupByValues=traffic_mirror%2Cuniversity%2Ccrossing&" + 
                    "keys=highway&" + 
                    "showMetadata=true&" + 
                    "time=2010-01-24&" + 
                    "values=pedestrian")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(246.0))
                .body("'metadata'.'description'", containsString("Total length of items in meters, aggregated on the tag."));
    }
    
    
    @Test
    public void test_372() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/key?" + 
                    "bboxes=wOKEK%3A8.695%2C49.4038%2C8.756%2C49.392&" + 
                    "format=json&" + 
                    "groupByKeys=lanes%3Abackward%2Clit%2Caddr%3Acity&" + 
                    "keys=highway&" + 
                    "showMetadata=yes&" + 
                    "time=2013-02-01&" + 
                    "timeout=92&" + 
                    "values=tertiary")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(241.0))
                .body("'metadata'.'description'", containsString("Total length of items in meters, aggregated on the key."));
    }
    
    
    @Test
    public void test_373() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density/groupBy/type?" + 
                    "bcircles=pQlGf%3A8.739%2C49.430115%2C1&" + 
                    "filter=foot%3D*+or+not+area%3A%281.0+..+1E6%29")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_374() throws Exception {
        
        given().accept("text/csv")
                .post(baseUrlOfSut + "/elements/length/density/groupBy/boundary/groupBy/tag?" + 
                    "bboxes=Zt%3A8.6817%2C49.427%2C8.7577%2C49.3875&" + 
                    "format=csv&" + 
                    "groupByKey=highway&" + 
                    "keys=highway&" + 
                    "showMetadata=no&" + 
                    "time=2017-04-01&" + 
                    "values=track")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_375() throws Exception {
        
        given().accept("text/csv")
                .post(baseUrlOfSut + "/elements/count/ratio?" + 
                    "bboxes=J%3A8.6551%2C49.4137%2C8.737936%2C49.3822&" + 
                    "format=csv&" + 
                    "keys=highway&" + 
                    "keys2=highway&" + 
                    "time=2009-07-25")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_376() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/tag?" + 
                    "bboxes=8.6857%2C49.426%2C8.704%2C49.396&" + 
                    "groupByKey=building&" + 
                    "keys=highway&" + 
                    "showMetadata=yes&" + 
                    "timeout=84&" + 
                    "values=stop_line")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(227.0))
                .body("'metadata'.'description'", containsString("Total count of items in absolute values, aggregated on the tag."));
    }
    
    
    @Test
    public void test_377() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/key?" + 
                    "bcircles=Xogm%3A8.711%2C49.43973%2C5&" + 
                    "groupByKeys=tracktype%2Caddr%3Apostcode&" + 
                    "keys=highway&" + 
                    "timeout=79&" + 
                    "values=give_way")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_378() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/density/groupBy/type?" + 
                    "bboxes=hZRwT%3A8.6737%2C49.401%2C8.711%2C49.3924&" + 
                    "filter=landuse%3D*+and+length%3A%28+..+100%29&" + 
                    "showMetadata=true&" + 
                    "time=2017-09-15")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(223.0))
                .body("'metadata'.'description'", containsString("Density of selected items (count of items in absolute values divided by the area in square kilometers), aggregated on the type."));
    }
    
    
    @Test
    public void test_379() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/density/groupBy/tag?" + 
                    "bboxes=azytf%3A8.676%2C49.425%2C8.743%2C49.389%7Co%3A8.673%2C49.428189%2C8.707447%2C49.388&" + 
                    "groupByKey=building&" + 
                    "time=2009-05-17")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_380() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/density/groupBy/boundary/groupBy/tag?" + 
                    "bboxes=JG%3A8.683%2C49.424346%2C8.720%2C49.391%7CH%3A8.662%2C49.407%2C8.712%2C49.397&" + 
                    "groupByKey=building&" + 
                    "groupByValues=secondary_link%2Cgive_way%2Cunclassified&" + 
                    "keys=highway&" + 
                    "showMetadata=false&" + 
                    "values=pedestrian")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_381() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/type?" + 
                    "bpolys=OVFDi%3A8.704561%2C49.403252%2C8.741%2C49.425990%2C8.746443%2C49.411%2C8.71683%2C49.40555%2C8.704561%2C49.403252&" + 
                    "filter=maxspeed%21%3D*+and+not+area%3A%281.0+..+1E6%29&" + 
                    "format=json")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_382() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/tag?" + 
                    "bboxes=sBsm%3A8.664%2C49.41053%2C8.71405%2C49.382%7CQe%3A8.680%2C49.408%2C8.702%2C49.387%7Ck%3A8.6811%2C49.41913%2C8.757%2C49.3924%7Ct%3A8.682%2C49.413%2C8.737%2C49.380625&" + 
                    "format=json&" + 
                    "groupByKey=building&" + 
                    "groupByValues=bus_stop%2Cship&" + 
                    "keys=highway&" + 
                    "values=pedestrian")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_383() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/key?" + 
                    "bboxes=8.6825%2C49.427%2C8.705%2C49.399&" + 
                    "format=json&" + 
                    "groupByKeys=landuse&" + 
                    "time=2013-03-10")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_384() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density/groupBy/type?" + 
                    "bcircles=G%3A8.713%2C49.417%2C7%7CD%3A8.7475%2C49.42817%2C2%7CmuFdB%3A8.73038%2C49.432%2C1&" + 
                    "keys=highway&" + 
                    "values=footway")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_385() throws Exception {
        
        given().accept("text/csv")
                .post(baseUrlOfSut + "/elements/area/density/groupBy/tag?" + 
                    "bcircles=8.730%2C49.400337%2C6%7C8.746%2C49.424%2C5&" + 
                    "filter=lit%3D*+or+area%3A%281.0+..+1E6%29&" + 
                    "format=csv&" + 
                    "groupByKey=highway")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_386() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density/groupBy/boundary/groupBy/tag?" + 
                    "bboxes=J%3A8.6604%2C49.4272%2C8.724%2C49.395&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=roof%2Csteps%2Cresidential&" + 
                    "keys=highway")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_387() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/ratio/groupBy/boundary?" + 
                    "bboxes=cy%3A8.6955%2C49.4032%2C8.71708%2C49.3961&" + 
                    "format=json&" + 
                    "keys=highway&" + 
                    "keys2=highway&" + 
                    "showMetadata=no")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_388() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=8.7377%2C49.409%2C1&" + 
                    "filter=ref%3D*+or+geometry%3Apolygon+or+length%3A%28+..+100%29&" + 
                    "format=geojson&" + 
                    "groupByKey=building&" + 
                    "time=2017-09-24&" + 
                    "timeout=50")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'type'", containsString("FeatureCollection"));
    }
    
    
    @Test
    public void test_389() throws Exception {
        
        given().accept("text/csv")
                .get(baseUrlOfSut + "/elements/perimeter/groupBy/boundary?" + 
                    "bcircles=wg%3A8.74845%2C49.422%2C5%7CVk%3A8.746%2C49.4092%2C40%7Cc%3A8.749%2C49.402%2C95%7CD%3A8.725913%2C49.438%2C9&" + 
                    "format=csv&" + 
                    "keys=highway&" + 
                    "time=2008-06-07")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_390() throws Exception {
        
        given().accept("text/csv")
                .get(baseUrlOfSut + "/elements/length?" + 
                    "bboxes=v%3A8.6966%2C49.418%2C8.753%2C49.384&" + 
                    "filter=lanes%3Abackward%21%3D*+and+type%3Anode&" + 
                    "format=csv&" + 
                    "showMetadata=yes&" + 
                    "timeout=43")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_391() throws Exception {
        
        given().accept("text/csv")
                .post(baseUrlOfSut + "/elements/count/ratio/groupBy/boundary?" + 
                    "bboxes=8.689%2C49.401601%2C8.745%2C49.3938%7C8.685%2C49.429%2C8.753%2C49.382%7C8.66625%2C49.400%2C8.7070%2C49.396&" + 
                    "filter=oneway%21%3D*+or+geometry%3Aline&" + 
                    "filter2=foot%21%3D*+and+id%3A%281+..+9999%29&" + 
                    "format=csv&" + 
                    "keys2=highway&" + 
                    "showMetadata=true&" + 
                    "time=2009-02-27&" + 
                    "types2=point%2Cother")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_392() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/boundary?" + 
                    "bcircles=z%3A8.72176%2C49.42866%2C74&" + 
                    "filter=highway+in+%28secondary%2Cpath%2Cunclassified%2Ctrack%2Cprimary%2Cresidential%2Ccycleway%2Cservice%2Cfootway%29&" + 
                    "format=json&" + 
                    "showMetadata=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(243.0))
                .body("'metadata'.'description'", containsString("Total area of items in square meters."));
    }
    
    
    @Test
    public void test_393() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/groupBy/type?" + 
                    "bboxes=8.669365%2C49.40220%2C8.751%2C49.3834&" + 
                    "keys=highway&" + 
                    "showMetadata=yes&" + 
                    "time=%2F%2FP3M27D&" + 
                    "timeout=32&" + 
                    "values=traffic_mirror")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(1215.0))
                .body("'metadata'.'description'", containsString("Number of distinct active users per time interval aggregated on the type."));
    }
    
    
    @Test
    public void test_394() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/boundary/groupBy/tag?" + 
                    "bboxes=8.689%2C49.4151%2C8.75315%2C49.393682&" + 
                    "groupByKey=building&" + 
                    "keys=highway&" + 
                    "values=tertiary")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_395() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter?" + 
                    "bboxes=Cy%3A8.651024%2C49.420823%2C8.701067%2C49.3982%7CmfM%3A8.685339%2C49.419%2C8.703%2C49.38620%7CE%3A8.692%2C49.403%2C8.755%2C49.39451&" + 
                    "keys=highway&" + 
                    "timeout=27&" + 
                    "values=living_street")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_396() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/ratio/groupBy/boundary?" + 
                    "bcircles=tt%3A8.745868%2C49.4122%2C80&" + 
                    "filter=maxspeed%3D*+or+type%3Away&" + 
                    "filter2=highway%3D*+or+not+area%3A%281.0+..+1E6%29&" + 
                    "showMetadata=yes&" + 
                    "timeout=37&" + 
                    "types2=polygon%2C")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(277.0))
                .body("'metadata'.'description'", containsString("Total length of items in meters satisfying types2, keys2, values2 parameters (= value2 output), as well as items selected by types, keys, values parameters (= value output) and ratio of value2:value, aggregated on the boundary objects."));
    }
    
    
    @Test
    public void test_397() throws Exception {
        
        given().accept("text/csv")
                .post(baseUrlOfSut + "/elements/length/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=rSRGi%3A8.704561%2C49.403252%2C8.7391%2C49.401%2C8.719%2C49.436%2C8.708%2C49.404902%2C8.704561%2C49.403252&" + 
                    "format=csv&" + 
                    "groupByKey=building&" + 
                    "groupByValues=university%2Cchapel&" + 
                    "showMetadata=no&" + 
                    "time=2015-08-14&" + 
                    "timeout=51")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_398() throws Exception {
        
        given().accept("text/csv")
                .post(baseUrlOfSut + "/elements/length/groupBy/boundary?" + 
                    "bcircles=uQ%3A8.738%2C49.412704%2C57%7CrUSdN%3A8.727%2C49.40908%2C2&" + 
                    "filter=surface%3D*+or+type%3Arelation+and+length%3A%28+..+100%29&" + 
                    "format=csv&" + 
                    "time=2017-05-08")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_399() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density/groupBy/boundary?" + 
                    "bboxes=TQ%3A8.6771%2C49.414%2C8.733%2C49.391%7Cv%3A8.694351%2C49.424%2C8.750%2C49.397%7CI%3A8.65944%2C49.4168%2C8.722750%2C49.3928&" + 
                    "time=2018-05-02&" + 
                    "timeout=88")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_400() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length?" + 
                    "bboxes=8.6650%2C49.428%2C8.708%2C49.385&" + 
                    "format=geojson&" + 
                    "keys=highway&" + 
                    "showMetadata=no")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_401() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/ratio/groupBy/boundary?" + 
                    "bboxes=fPneb%3A8.659%2C49.406%2C8.73842%2C49.386%7CA%3A8.6837%2C49.40966%2C8.732%2C49.3956%7CUW%3A8.659%2C49.423902%2C8.717%2C49.3890%7CL%3A8.66165%2C49.416022%2C8.7296%2C49.38994&" + 
                    "format=geojson&" + 
                    "keys=highway&" + 
                    "keys2=highway&" + 
                    "showMetadata=no&" + 
                    "timeout=43&" + 
                    "values2=track")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'type'", containsString("FeatureCollection"));
    }
    
    
    @Test
    public void test_402() throws Exception {
        
        given().accept("text/csv")
                .post(baseUrlOfSut + "/elements/count/ratio?" + 
                    "bboxes=rGpqZ%3A8.6506%2C49.4101%2C8.748%2C49.3822%7Cgw%3A8.676%2C49.422%2C8.733724%2C49.3914&" + 
                    "filter=network%21%3D*+and+area%3A%281.0+..+1E6%29&" + 
                    "filter2=landuse%3D*+or+id%3A%281+..+9999%29&" + 
                    "format=csv&" + 
                    "time=2008-08-01")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_403() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=Cq%3A8.739%2C49.40390%2C8&" + 
                    "filter=natural%3Dwood+or+area%3A%281.0+..+1E6%29&" + 
                    "groupByKey=highway")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_404() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/density/groupBy/boundary?" + 
                    "bboxes=q%3A8.655%2C49.4008%2C8.742%2C49.3938&" + 
                    "filter=highway%21%3D*+or+length%3A%28+..+100%29&" + 
                    "showMetadata=yes")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(1031.0))
                .body("'metadata'.'description'", containsString("Density of selected items (count of items in absolute values divided by the area in square kilometers)."));
    }
    
    
    @Test
    public void test_405() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/ratio/groupBy/boundary?" + 
                    "bcircles=8.707%2C49.426%2C1&" + 
                    "filter2=network%3D*+and+area%3A%281.0+..+1E6%29&" + 
                    "keys2=highway&" + 
                    "showMetadata=no&" + 
                    "timeout=24&" + 
                    "types2=node%2C")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_406() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/ratio?" + 
                    "bcircles=RK%3A8.743%2C49.432%2C4&" + 
                    "format=json&" + 
                    "keys=highway&" + 
                    "time=2007-12-22&" + 
                    "types2=node%2Cway%2Crelation")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_407() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density/groupBy/boundary?" + 
                    "bcircles=c%3A8.744%2C49.404763%2C8&" + 
                    "keys=highway&" + 
                    "time=2009-11-28")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_408() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area?" + 
                    "bcircles=8.7062%2C49.4277%2C5%7C8.702917%2C49.404%2C712%7C8.729%2C49.407124%2C4&" + 
                    "keys=highway&" + 
                    "showMetadata=yes")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(246.0))
                .body("'metadata'.'description'", containsString("Total area of items in square meters."));
    }
    
    
    @Test
    public void test_409() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/groupBy/key?" + 
                    "bcircles=Lsvxu%3A8.704%2C49.401%2C3&" + 
                    "filter=service%3Ddriveway+and+type%3Anode+and+not+id%3A%281+..+9999%29&" + 
                    "format=json&" + 
                    "groupByKeys=type")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_410() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/ratio/groupBy/boundary?" + 
                    "bcircles=nz%3A8.713%2C49.4034%2C5%7Czr%3A8.7138%2C49.4004%2C7%7Cj%3A8.738%2C49.4146%2C6%7CaDgtB%3A8.747483%2C49.41296%2C8&" + 
                    "filter2=tracktype%21%3D*&" + 
                    "keys=highway&" + 
                    "showMetadata=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_411() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/ratio/groupBy/boundary?" + 
                    "bcircles=8.730%2C49.406%2C7&" + 
                    "keys=highway&" + 
                    "keys2=highway&" + 
                    "timeout=59&" + 
                    "values2=service")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_412() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/ratio?" + 
                    "bboxes=V%3A8.675%2C49.42798%2C8.729%2C49.383&" + 
                    "keys=highway&" + 
                    "keys2=highway&" + 
                    "time=2014-03-01&" + 
                    "timeout=47&" + 
                    "values=path")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_413() throws Exception {
        
        given().accept("text/csv")
                .post(baseUrlOfSut + "/elements/area/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=e%3A8.704561%2C49.403252%2C8.7341%2C49.426%2C8.746%2C49.431%2C8.742%2C49.40663%2C8.704561%2C49.403252&" + 
                    "filter=highway+in+%28secondary%2Cpath%2Cunclassified%2Ctrack%2Cprimary%2Cresidential%2Ccycleway%2Cservice%2Cfootway%29&" + 
                    "format=csv&" + 
                    "groupByKey=building&" + 
                    "groupByValues=ship&" + 
                    "showMetadata=no&" + 
                    "time=2014-09-09")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_414() throws Exception {
        
        given().accept("text/csv")
                .get(baseUrlOfSut + "/elements/area?" + 
                    "bboxes=8.674%2C49.426%2C8.704%2C49.381%7C8.6776%2C49.428%2C8.720%2C49.3844&" + 
                    "format=csv&" + 
                    "keys=UiWlt%60&" + 
                    "showMetadata=yes&" + 
                    "time=2017-12%2F%2F&" + 
                    "timeout=70&" + 
                    "types=point%2Cpolygon")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_415() throws Exception {
        
        given().accept("text/csv")
                .post(baseUrlOfSut + "/elements/length/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=8.735668%2C49.425%2C4&" + 
                    "format=csv&" + 
                    "groupByKey=building&" + 
                    "keys=highway&" + 
                    "showMetadata=true&" + 
                    "time=2008-08-10&" + 
                    "values=path")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_416() throws Exception {
        
        given().accept("text/csv")
                .get(baseUrlOfSut + "/users/count/groupBy/key?" + 
                    "bboxes=8.67084%2C49.423%2C8.721%2C49.397%7C8.660%2C49.403%2C8.736%2C49.388%7C8.684%2C49.421%2C8.742%2C49.386&" + 
                    "filter=addr%3Ahousenumber%3D*&" + 
                    "format=csv&" + 
                    "groupByKeys=lit%2Clanduse")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_417() throws Exception {
        
        given().accept("text/csv")
                .get(baseUrlOfSut + "/users/count/groupBy/boundary?" + 
                    "bcircles=l%3A8.7356%2C49.439%2C65%7CqhA%3A8.743%2C49.431216%2C4%7CUb%3A8.730%2C49.436861%2C7%7Cwk%3A8.717187%2C49.402%2C8&" + 
                    "format=csv&" + 
                    "keys=highway&" + 
                    "showMetadata=no&" + 
                    "time=%2F%2FP5M18D&" + 
                    "timeout=37&" + 
                    "values=path")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_418() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/tag?" + 
                    "bboxes=Dt%3A8.651%2C49.4132%2C8.7362%2C49.3916%7CjPTEe%3A8.659%2C49.409%2C8.759153%2C49.396%7CbFv%3A8.678%2C49.403012%2C8.759%2C49.392&" + 
                    "groupByKey=highway&" + 
                    "keys=highway&" + 
                    "showMetadata=false&" + 
                    "time=2013-05-16&" + 
                    "timeout=80&" + 
                    "values=stop")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_419() throws Exception {
        
        given().accept("text/csv")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/tag?" + 
                    "bboxes=8.683%2C49.428%2C8.7452%2C49.392%7C8.668%2C49.424%2C8.70213%2C49.38208%7C8.671%2C49.42859%2C8.745%2C49.390&" + 
                    "format=csv&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=tertiary%2Cstop_line%2Celevator&" + 
                    "time=2012-10-18&" + 
                    "timeout=39")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_420() throws Exception {
        
        given().accept("text/csv")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/key?" + 
                    "bcircles=8.7152%2C49.4393%2C3%7C8.71189%2C49.404%2C3%7C8.728%2C49.430%2C77%7C8.726%2C49.42901%2C8&" + 
                    "format=csv&" + 
                    "groupByKeys=addr%3Acountry%2Caddr%3Astreet%2Cbuilding&" + 
                    "keys=highway&" + 
                    "values=traffic_signals")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_421() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density?" + 
                    "bcircles=8.705%2C49.41973%2C7%7C8.741%2C49.410281%2C772%7C8.743%2C49.43994%2C24%7C8.7395%2C49.4379%2C36&" + 
                    "keys=highway&" + 
                    "showMetadata=false&" + 
                    "time=2009-08-12&" + 
                    "timeout=20")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_422() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/boundary?" + 
                    "bboxes=8.665616%2C49.40770%2C8.742%2C49.393%7C8.675645%2C49.4020%2C8.7456%2C49.384&" + 
                    "filter=highway%3D*+and+length%3A%28+..+100%29&" + 
                    "time=2017-12-25")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_423() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/groupBy/type?" + 
                    "bboxes=qtpv%3A8.6626%2C49.419%2C8.7133%2C49.3843%7CSUkoR%3A8.69180%2C49.429576%2C8.7532%2C49.3944%7CW%3A8.695827%2C49.4204%2C8.746%2C49.3835&" + 
                    "format=json&" + 
                    "keys=highway&" + 
                    "time=%2F%2FP10M2D&" + 
                    "timeout=38")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_424() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/ratio/groupBy/boundary?" + 
                    "bboxes=n%3A8.689%2C49.402%2C8.735%2C49.390&" + 
                    "format=json&" + 
                    "keys=highway&" + 
                    "time=2009-09-23&" + 
                    "timeout=60&" + 
                    "types2=node%2Crelation")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_425() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/boundary?" + 
                    "bcircles=OPZTn%3A8.724%2C49.4122%2C6&" + 
                    "format=geojson&" + 
                    "keys=highway&" + 
                    "time=2010-11-06&" + 
                    "timeout=96")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'type'", containsString("FeatureCollection"));
    }
    
    
    @Test
    public void test_426() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/density?" + 
                    "bboxes=8.654%2C49.41069%2C8.747%2C49.396%7C8.694%2C49.401%2C8.730%2C49.3940&" + 
                    "format=json&" + 
                    "keys=highway&" + 
                    "timeout=45&" + 
                    "values=stop_line")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_427() throws Exception {
        
        given().accept("text/csv")
                .get(baseUrlOfSut + "/elements/length/ratio/groupBy/boundary?" + 
                    "bcircles=ByZJz%3A8.729%2C49.4319%2C69%7CksB%3A8.714%2C49.4254%2C3%7Cy%3A8.73574%2C49.439%2C9&" + 
                    "filter2=maxspeed%21%3D*+and+geometry%3Apoint&" + 
                    "format=csv&" + 
                    "keys=highway&" + 
                    "types2=relation")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_428() throws Exception {
        
        given().accept("text/csv")
                .post(baseUrlOfSut + "/elements/perimeter?" + 
                    "bcircles=UURQg%3A8.706%2C49.43854%2C8&" + 
                    "format=csv&" + 
                    "showMetadata=true&" + 
                    "time=2008-07-05&" + 
                    "timeout=30")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_429() throws Exception {
        
        given().accept("text/csv")
                .get(baseUrlOfSut + "/elements/count/ratio/groupBy/boundary?" + 
                    "bboxes=8.687701%2C49.4235%2C8.749993%2C49.3875%7C8.663%2C49.406%2C8.7497%2C49.386&" + 
                    "filter2=maxspeed%21%3D*+or+geometry%3Apolygon+or+not+area%3A%281.0+..+1E6%29&" + 
                    "format=csv&" + 
                    "keys=highway&" + 
                    "keys2=highway&" + 
                    "time=2015-09-10&" + 
                    "timeout=47&" + 
                    "types2=other&" + 
                    "values=street_lamp")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_430() throws Exception {
        
        given().accept("text/csv")
                .post(baseUrlOfSut + "/elements/area/density?" + 
                    "bboxes=o%3A8.694%2C49.423208%2C8.726%2C49.383&" + 
                    "format=csv&" + 
                    "keys=highway&" + 
                    "showMetadata=true&" + 
                    "time=2017-12-23&" + 
                    "timeout=65&" + 
                    "values=secondary_link")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_431() throws Exception {
        
        given().accept("text/csv")
                .get(baseUrlOfSut + "/users/count/groupBy/tag?" + 
                    "bboxes=Iczqs%3A8.6609%2C49.427%2C8.701344%2C49.389&" + 
                    "format=csv&" + 
                    "groupByKey=highway&" + 
                    "keys=highway&" + 
                    "showMetadata=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_432() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/groupBy/key?" + 
                    "bboxes=8.6796%2C49.4003%2C8.706%2C49.380&" + 
                    "filter=highway+in+%28secondary%2Cpath%2Cunclassified%2Ctrack%2Cprimary%2Cresidential%2Ccycleway%2Cservice%2Cfootway%29+and+not+area%3A%281.0+..+1E6%29&" + 
                    "format=geojson&" + 
                    "groupByKeys=addr%3Acity%2Cref&" + 
                    "time=%2F%2FP2M7D")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_433() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/groupBy/boundary?" + 
                    "bcircles=yJ%3A8.7150%2C49.411%2C3%7Cch%3A8.7050%2C49.426%2C4&" + 
                    "format=json&" + 
                    "keys=highway&" + 
                    "showMetadata=yes&" + 
                    "time=%2F%2FP2Y8M1D&" + 
                    "values=steps")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(541.0))
                .body("'metadata'.'description'", containsString("Number of distinct active users per time interval aggregated on the boundary."));
    }
    
    
    @Test
    public void test_434() throws Exception {
        
        given().accept("text/csv")
                .get(baseUrlOfSut + "/users/count/density?" + 
                    "bboxes=IUZpM%3A8.68591%2C49.400%2C8.703%2C49.385&" + 
                    "format=csv&" + 
                    "keys=highway&" + 
                    "showMetadata=true&" + 
                    "timeout=80&" + 
                    "values=residential")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_435() throws Exception {
        
        given().accept("text/csv")
                .post(baseUrlOfSut + "/elements/perimeter/density/groupBy/type?" + 
                    "bboxes=8.66390%2C49.40434%2C8.734%2C49.392&" + 
                    "format=csv&" + 
                    "showMetadata=false&" + 
                    "time=2013-07-22&" + 
                    "timeout=98")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_436() throws Exception {
        
        given().accept("text/csv")
                .get(baseUrlOfSut + "/elements/perimeter/ratio?" + 
                    "bcircles=8.746%2C49.4353%2C4%7C8.744208%2C49.402741%2C285%7C8.7030%2C49.436%2C40&" + 
                    "filter2=building%21%3D*+or+not+area%3A%281.0+..+1E6%29&" + 
                    "format=csv&" + 
                    "keys=highway&" + 
                    "keys2=highway&" + 
                    "time=2015-06-02&" + 
                    "timeout=54&" + 
                    "types2=point%2Cline%2Cpolygon%2C&" + 
                    "values=steps&" + 
                    "values2=bus_stop")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_437() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/groupBy/tag?" + 
                    "bcircles=t%3A8.734071%2C49.4033%2C6%7CIw%3A8.70741%2C49.400%2C71&" + 
                    "filter=bicycle%3D*+and+type%3Away&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=unclassified%2Chospital&" + 
                    "showMetadata=yes")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(157.0))
                .body("'metadata'.'description'", containsString("Number of distinct active users per time interval aggregated on the tag."));
    }
    
    
    @Test
    public void test_438() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/boundary/groupBy/tag?" + 
                    "bboxes=8.684%2C49.400%2C8.758%2C49.394%7C8.6508%2C49.408%2C8.722%2C49.396%7C8.6508%2C49.401%2C8.7028%2C49.3932%7C8.65679%2C49.417%2C8.7496%2C49.3824&" + 
                    "filter=ref%21%3D*+or+length%3A%28+..+100%29&" + 
                    "format=geojson&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=pedestrian%2Cliving_street%2Cbus_stop&" + 
                    "time=2017-09-05")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'type'", containsString("FeatureCollection"));
    }
    
    
    @Test
    public void test_439() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/type?" + 
                    "bboxes=kgwCq%3A8.681%2C49.4072%2C8.729586%2C49.382%7CsZEd%3A8.6667%2C49.421%2C8.7319%2C49.384731%7Cuaku%3A8.674%2C49.424%2C8.757%2C49.399&" + 
                    "format=geojson&" + 
                    "showMetadata=yes")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(1169.0))
                .body("'metadata'.'description'", containsString("Total perimeter of items in meters, aggregated on the type."));
    }
    
    
    @Test
    public void test_440() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/tag?" + 
                    "bcircles=8.734%2C49.404%2C67&" + 
                    "groupByKey=building&" + 
                    "groupByValues=university&" + 
                    "showMetadata=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(505.0))
                .body("'metadata'.'description'", containsString("Total perimeter of items in meters, aggregated on the tag."));
    }
    
    
    @Test
    public void test_441() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/ratio/groupBy/boundary?" + 
                    "bboxes=fMPuU%3A8.692%2C49.411%2C8.70613%2C49.3880%7Cde%3A8.671%2C49.407163%2C8.7028%2C49.39122%7CR%3A8.690%2C49.402%2C8.733%2C49.390&" + 
                    "keys=highway&" + 
                    "time=2018-01-24&" + 
                    "timeout=78&" + 
                    "types2=point%2Cline%2Cpolygon%2C&" + 
                    "values=stop")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_442() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/density/groupBy/type?" + 
                    "bboxes=nir%3A8.6973%2C49.425664%2C8.748863%2C49.3864%7CG%3A8.691%2C49.413%2C8.743%2C49.3938%7CF%3A8.676%2C49.41077%2C8.7136%2C49.380%7CLcoTo%3A8.669%2C49.4156%2C8.759%2C49.385304&" + 
                    "format=json&" + 
                    "keys=highway&" + 
                    "values=footway")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_443() throws Exception {
        
        given().accept("text/csv")
                .post(baseUrlOfSut + "/elements/perimeter/ratio/groupBy/boundary?" + 
                    "bcircles=8.7036%2C49.4367%2C840&" + 
                    "format=csv&" + 
                    "keys=highway&" + 
                    "keys2=highway&" + 
                    "showMetadata=true&" + 
                    "timeout=42&" + 
                    "types2=line%2Cpolygon%2Cother&" + 
                    "values=speed_camera&" + 
                    "values2=elevator")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_444() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/density/groupBy/boundary?" + 
                    "bboxes=8.662%2C49.402%2C8.72036%2C49.395%7C8.684938%2C49.411%2C8.753%2C49.387%7C8.6533%2C49.4002%2C8.7577%2C49.395&" + 
                    "keys=highway&" + 
                    "time=2014-03-28&" + 
                    "values=footway")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_445() throws Exception {
        
        given().accept("text/csv")
                .post(baseUrlOfSut + "/elements/perimeter/density?" + 
                    "bcircles=8.7057%2C49.436800%2C5&" + 
                    "format=csv&" + 
                    "keys=highway&" + 
                    "showMetadata=no&" + 
                    "time=2008-11-10&" + 
                    "timeout=74&" + 
                    "values=traffic_signals")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_446() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/tag?" + 
                    "bpolys=d%3A8.704561%2C49.403252%2C8.73603%2C49.419%2C8.70443%2C49.41294%2C8.703%2C49.428%2C8.704561%2C49.403252&" + 
                    "filter=oneway%3D*+and+length%3A%28+..+100%29&" + 
                    "groupByKey=building&" + 
                    "groupByValues=secondary_link%2Ctertiary&" + 
                    "showMetadata=false&" + 
                    "time=%2F%2FP1M12D")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_447() throws Exception {
        
        given().accept("text/csv")
                .get(baseUrlOfSut + "/elements/area?" + 
                    "bboxes=8.678%2C49.426%2C8.704%2C49.381%7C8.6776%2C49.428%2C8.720%2C49.3844&" + 
                    "format=csv&" + 
                    "keys=highway&" + 
                    "showMetadata=yes&" + 
                    "time=2017-10-20&" + 
                    "timeout=73&" + 
                    "types=point%2Cpolygon%2C&" + 
                    "values=steps")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_448() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/groupBy/type?" + 
                    "bcircles=8.736%2C49.4092%2C239%7C8.710%2C49.429%2C92&" + 
                    "format=geojson&" + 
                    "keys=highway&" + 
                    "showMetadata=true&" + 
                    "timeout=73&" + 
                    "values=turning_circle")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(1393.0))
                .body("'metadata'.'description'", containsString("Number of distinct active users per time interval aggregated on the type."));
    }
    
    
    @Test
    public void test_449() throws Exception {
        
        given().accept("text/csv")
                .post(baseUrlOfSut + "/users/count/density?" + 
                    "bpolys=eMzCC%3A8.704561%2C49.403252%2C8.7207%2C49.438%2C8.7047%2C49.4090%2C8.7044%2C49.408%2C8.704561%2C49.403252&" + 
                    "format=csv&" + 
                    "keys=highway&" + 
                    "showMetadata=no&" + 
                    "time=%2F%2FP1Y1D&" + 
                    "timeout=92")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_450() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area?" + 
                    "bcircles=fkere%3A8.7468%2C49.416%2C4&" + 
                    "keys=highway&" + 
                    "time=2014-03-10&" + 
                    "types=point%2Cline%2Cpolygon%2C&" + 
                    "values=residential")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_451() throws Exception {
        
        given().accept("text/csv")
                .post(baseUrlOfSut + "/elements/perimeter/ratio?" + 
                    "bcircles=eEgA%3A8.7034%2C49.416%2C60%7Cq%3A8.700%2C49.437%2C8%7CUya%3A8.720340%2C49.401%2C7%7CIxsHD%3A8.723%2C49.430%2C603&" + 
                    "filter2=destination%3D*+and+not+geometry%3Apoint+or+area%3A%281.0+..+1E6%29&" + 
                    "format=csv&" + 
                    "keys2=highway&" + 
                    "showMetadata=true&" + 
                    "values2=tertiary")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_452() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/density?" + 
                    "bcircles=u%3A8.7470%2C49.4110%2C7%7CQoxd%3A8.7246%2C49.437%2C1%7ChSuDT%3A8.729%2C49.43979%2C37%7CQmHNy%3A8.7323%2C49.412883%2C91&" + 
                    "filter=lit%21%3D*+or+geometry%3Aline+or+area%3A%281.0+..+1E6%29&" + 
                    "showMetadata=no")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_453() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/boundary?" + 
                    "bcircles=K%3A8.721%2C49.422%2C9&" + 
                    "keys=highway&" + 
                    "showMetadata=false&" + 
                    "time=%2F%2FP6M7D")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_454() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/density?" + 
                    "bboxes=PDLw%3A8.685%2C49.4051%2C8.738513%2C49.397%7CR%3A8.676%2C49.424%2C8.754%2C49.393%7Ch%3A8.6975%2C49.4228%2C8.751%2C49.3822%7CV%3A8.6664%2C49.400%2C8.757942%2C49.382&" + 
                    "keys=highway&" + 
                    "showMetadata=no&" + 
                    "values=residential")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_455() throws Exception {
        
        given().accept("text/csv")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/type?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22W%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7065%2C49.4095%5D%2C%5B8.704659%2C49.438%5D%2C%5B8.7088%2C49.4013%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "format=csv&" + 
                    "keys=highway&" + 
                    "time=2010-04-02")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_456() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/tag?" + 
                    "bboxes=u%3A8.69276%2C49.424%2C8.709398%2C49.396&" + 
                    "format=json&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=ship%2Cgarage%2Celevator&" + 
                    "keys=highway&" + 
                    "showMetadata=false&" + 
                    "time=%2F%2FP24D&" + 
                    "values=stop")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_457() throws Exception {
        
        given().accept("text/csv")
                .post(baseUrlOfSut + "/elements/perimeter/ratio/groupBy/boundary?" + 
                    "bcircles=8.709%2C49.424%2C21%7C8.744%2C49.42129%2C8%7C8.70086%2C49.427%2C4&" + 
                    "filter2=destination%21%3D*+and+not+type%3Away+or+not+id%3A%281+..+9999%29&" + 
                    "format=csv&" + 
                    "keys2=highway&" + 
                    "time=2017-08-29&" + 
                    "timeout=34&" + 
                    "types2=point%2Cpolygon%2Cother")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_458() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/type?" + 
                    "bboxes=8.6500%2C49.411%2C8.749%2C49.3820&" + 
                    "format=json&" + 
                    "keys=highway&" + 
                    "showMetadata=no&" + 
                    "values=track")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_459() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=8.7270%2C49.4033%2C60&" + 
                    "format=geojson&" + 
                    "groupByKey=highway&" + 
                    "keys=highway&" + 
                    "showMetadata=true&" + 
                    "timeout=38")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(222.0))
                .body("'metadata'.'description'", containsString("Total perimeter of items in meters, aggregated on the boundary and on the tag."))
                .body("'type'", containsString("FeatureCollection"));
    }
    
    
    @Test
    public void test_460() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/key?" + 
                    "bcircles=8.72401%2C49.4311%2C56&" + 
                    "groupByKeys=foot%2Clanes%3Aforward%2Cdestination&" + 
                    "keys=highway&" + 
                    "showMetadata=yes&" + 
                    "timeout=92&" + 
                    "values=track")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(235.0))
                .body("'metadata'.'description'", containsString("Total perimeter of items in meters, aggregated on the key."));
    }
    
    
    @Test
    public void test_461() throws Exception {
        
        given().accept("text/csv")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/boundary?" + 
                    "bboxes=z%3A8.657078%2C49.406%2C8.709%2C49.383%7CazAUi%3A8.66864%2C49.4152%2C8.70019%2C49.396&" + 
                    "filter=highway+in+%28secondary%2Cpath%2Cunclassified%2Ctrack%2Cprimary%2Cresidential%2Ccycleway%2Cservice%2Cfootway%29+and+not+id%3A%281+..+9999%29&" + 
                    "format=csv")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_462() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/ratio?" + 
                    "bboxes=V%3A8.668%2C49.4258%2C8.700%2C49.392&" + 
                    "filter2=maxspeed%21%3D*+or+not+area%3A%281.0+..+1E6%29&" + 
                    "format=geojson&" + 
                    "keys2=highway&" + 
                    "showMetadata=no&" + 
                    "values2=track")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_463() throws Exception {
        
        given().accept("text/csv")
                .post(baseUrlOfSut + "/users/count/groupBy/type?" + 
                    "bpolys=HgyNB%3A8.704561%2C49.403252%2C8.746%2C49.416%2C8.747%2C49.438064%2C8.7494%2C49.4026%2C8.704561%2C49.403252&" + 
                    "format=csv&" + 
                    "keys=highway&" + 
                    "showMetadata=yes&" + 
                    "time=%2F%2FP7M11D")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_464() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/tag?" + 
                    "bboxes=tAJQj%3A8.669%2C49.405%2C8.749%2C49.390%7CS%3A8.67559%2C49.4254%2C8.744%2C49.393&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=track%2Croof%2Cchurch&" + 
                    "keys=highway&" + 
                    "timeout=47")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_465() throws Exception {
        
        given().accept("text/csv")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=qhj%3A8.71576%2C49.422%2C2&" + 
                    "format=csv&" + 
                    "groupByKey=building&" + 
                    "time=2012-07-21")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_466() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/boundary?" + 
                    "bboxes=8.691%2C49.400%2C8.721411%2C49.382%7C8.6749%2C49.417%2C8.706%2C49.395%7C8.65496%2C49.41657%2C8.7113%2C49.390&" + 
                    "filter=addr%3Acity%3D*+and+not+geometry%3Aline+and+id%3A%281+..+9999%29&" + 
                    "showMetadata=true&" + 
                    "timeout=62")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(257.0))
                .body("'metadata'.'description'", containsString("Total perimeter of items in meters."));
    }
    
    
    @Test
    public void test_467() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/ratio/groupBy/boundary?" + 
                    "bboxes=hA%3A8.6842%2C49.408%2C8.728%2C49.386%7Cv%3A8.682%2C49.414%2C8.7280%2C49.3886&" + 
                    "format=geojson&" + 
                    "keys=highway&" + 
                    "keys2=highway&" + 
                    "timeout=55&" + 
                    "types2=line%2Cpolygon%2C&" + 
                    "values=speed_camera&" + 
                    "values2=give_way")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'type'", containsString("FeatureCollection"));
    }
    
    
    @Test
    public void test_468() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/ratio?" + 
                    "bpolys=K%3A8.704561%2C49.403252%2C8.702%2C49.4246%2C8.704%2C49.400%2C8.7435%2C49.428%2C8.704561%2C49.403252&" + 
                    "keys=highway&" + 
                    "keys2=highway&" + 
                    "showMetadata=false&" + 
                    "time=2014-10-13&" + 
                    "timeout=89&" + 
                    "values=primary_link")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_469() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/ratio/groupBy/boundary?" + 
                    "bboxes=YG%3A8.671298%2C49.401%2C8.7131%2C49.390&" + 
                    "filter=maxspeed%21%3D*+or+type%3Arelation&" + 
                    "filter2=ref%3D*&" + 
                    "keys2=highway&" + 
                    "time=2013-05-07&" + 
                    "timeout=74&" + 
                    "values2=emergency_access_point")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_470() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/ratio/groupBy/boundary?" + 
                    "bboxes=NBq%3A8.656%2C49.4055%2C8.73761%2C49.397&" + 
                    "keys=highway&" + 
                    "keys2=highway&" + 
                    "showMetadata=yes&" + 
                    "values=emergency_access_point&" + 
                    "values2=street_lamp")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(1562.0))
                .body("'metadata'.'description'", containsString("Total perimeter of items in meters satisfying types2, keys2, values2 parameters (= value2 output), as well as items selected by types, keys, values parameters (= value output) and ratio of value2:value, aggregated on the boundary objects."));
    }
    
    
    @Test
    public void test_471() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/type?" + 
                    "bcircles=VxPZ%3A8.749%2C49.413%2C1&" + 
                    "keys=highway&" + 
                    "showMetadata=true&" + 
                    "timeout=86&" + 
                    "values=turning_circle")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("�� OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(2107.0))
                .body("'metadata'.'description'", containsString("Number of distinct active users per time interval aggregated on the type."));
    }
    
    
    @Test
    public void test_472() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/groupBy/tag?" + 
                    "bcircles=t%3A8.734071%2C49.4033%2C6%7CIw%3A8.70741%2C49.400%2C71&" + 
                    "filter=bicycle%3D*+and+type%3Away&" + 
                    "groupByKey=highway&" + 
                    "keys=foo&" + 
                    "time=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_473() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/boundary?" + 
                    "bboxes=8.684384%2C49.409784%2C8.706%2C49.399%7C8.66208%2C49.424%2C8.727%2C49.386%7C8.696%2C49.427687%2C8.7269%2C49.385%7C8.6944%2C49.410%2C8.752%2C49.387663&" + 
                    "bcircles=z%3A8.7241%2C49.4131%2C743%7CM%3A8.704%2C49.432%2C39&" + 
                    "format=csv&" + 
                    "keys=highway&" + 
                    "showMetadata=no&" + 
                    "time=%2F%2FP3Y1M7D&" + 
                    "values=secondary_link")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_474() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/groupBy/boundary?" + 
                    "bboxes=CbcS%3A8.658%2C49.411%2C8.701%2C49.380&" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22ifmQ%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.707%2C49.404%5D%2C%5B8.719%2C49.432%5D%2C%5B8.724%2C49.439%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22MT%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7023%2C49.405%5D%2C%5B8.707%2C49.416%5D%2C%5B8.738%2C49.433%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=tracktype%3D*+and+id%3A%281+..+9999%29&" + 
                    "format=geojson&" + 
                    "time=%2F%2FP2M1D&" + 
                    "values=stop_line")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_475() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/density/groupBy/type?" + 
                    "bboxes=YD%3A8.682%2C49.402%2C8.741%2C49.390&" + 
                    "bcircles=ZbirN%3A8.717%2C49.410%2C36%7CpsEPL%3A8.748%2C49.405%2C4&" + 
                    "showMetadata=false&" + 
                    "timeout=26")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_476() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/density/groupBy/boundary?" + 
                    "bcircles=u%3A8.72447%2C49.4323%2C1&" + 
                    "keys=highway&" + 
                    "showMetadata=yes&" + 
                    "time=evomaster_82482_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_477() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/density/groupBy/boundary?" + 
                    "bcircles=dKyo%3A8.743094%2C49.406%2C3&" + 
                    "filter=natural%3Dwood+and+not+type%3Arelation+and+length%3A%28+..+100%29&" + 
                    "format=json&" + 
                    "keys=highway&" + 
                    "timeout=77&" + 
                    "values=living_street")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The keys, values and types parameters must be empty, when you set the filter parameter."));
    }
    
    
    @Test
    public void test_478() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/density?" + 
                    "bboxes=8.678%2C49.411%2C8.7379%2C49.385&" + 
                    "filter=addr%3Apostcode%3D*+and+id%3A%281+..+9999%29&" + 
                    "format=csv&" + 
                    "keys=highway&" + 
                    "time=%2F%2FP8M9D&" + 
                    "timeout=54&" + 
                    "values=emergency_access_point")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The keys, values and types parameters must be empty, when you set the filter parameter."));
    }
    
    
    @Test
    public void test_479() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count?" + 
                    "bcircles=ye%3A8.7333%2C49.409%2C9&" + 
                    "filter=foo&" + 
                    "values=living_street")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The keys, values and types parameters must be empty, when you set the filter parameter."));
    }
    
    
    @Test
    public void test_480() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count?" + 
                    "bboxes=8.68440%2C49.4014%2C8.712348%2C49.3961&" + 
                    "bcircles=QiWJf%3A8.712%2C49.422%2C40%7CeOtZG%3A8.714%2C49.409%2C51%7CeZcfO%3A8.7100%2C49.4399%2C6%7CkW%3A8.711%2C49.412%2C93&" + 
                    "bpolys=8.704561%2C49.403252%2C8.716%2C49.40233%2C8.7325%2C49.402%2C8.74826%2C49.425%2C8.704561%2C49.403252&" + 
                    "filter=sidewalk%3D*+and+geometry%3Aline&" + 
                    "format=geojson&" + 
                    "keys=highway&" + 
                    "values=platform")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_481() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/ratio/groupBy/boundary?" + 
                    "bcircles=8.7036%2C49.4367%2C840&" + 
                    "filter=foo&" + 
                    "format=csv&" + 
                    "keys=highway&" + 
                    "keys2=evomaster_2935_input&" + 
                    "showMetadata=true&" + 
                    "time=foo&" + 
                    "timeout=42&" + 
                    "types2=line%2Cpolygon%2Bother&" + 
                    "values2=elevator")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_482() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/ratio?" + 
                    "bcircles=8.746%2C49.4353%2C4%7C8.744208%2C49.402741%2C285%7C8.7030%2C49.436%2C40&" + 
                    "filter=foo&" + 
                    "filter2=evomaster_78751_input&" + 
                    "format=csv&" + 
                    "keys=highway&" + 
                    "keys2=highway&" + 
                    "showMetadata=foo&" + 
                    "time=evomaster_78752_input&" + 
                    "types2=point%2Cline%2Cpolygon%2C&" + 
                    "values=steps&" + 
                    "values2=evomaster_78753_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given parameter showMetadata can only contain the values 'true', 'yes', 'false', or 'no'."));
    }
    
    
    @Test
    public void test_483() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/type?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22W%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7065%2C49.4095%5D%2C%5B8.704659%2C49.438%5D%2C%5B8.7088%2C49.4013%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "format=evomaster_9185_input&" + 
                    "keys=highway&" + 
                    "time=2010-04-02&" + 
                    "types=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given 'format' parameter is invalid. Please choose between 'geojson'(only available for /groupBy/boundary and data extraction requests), 'json', or 'csv'."));
    }
    
    
    @Test
    public void test_484() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/groupBy/type?" + 
                    "bcircles=8.7278%2C49.433%2C1&" + 
                    "keys=evomaster_31926_input&" + 
                    "time=foo&" + 
                    "values=give_way")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_485() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/tag?" + 
                    "bboxes=rtjNqB&" + 
                    "bpolys=DVetM0lV3R&" + 
                    "format=nl05jAUhx&" + 
                    "groupByKey=S5qGpD2X&" + 
                    "groupByValues=X1s3C0_3MsFw&" + 
                    "keys=t&" + 
                    "time=IurAmsk2uIvd5S0&" + 
                    "types=mh6JIRi9WsHpk3&" + 
                    "values=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_486() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/groupBy/tag?" + 
                    "bboxes=fd%3A8.691905%2C49.4076%2C8.728%2C49.387%7CjmW%3A8.6910%2C49.418%2C8.700%2C49.38506&" + 
                    "bpolys=d%3A8.704561%2C49.403252%2C8.7041%2C49.401%2C8.700%2C49.405%2C8.703%2C49.403%2C8.704561%2C49.403252%7Ck%3A8.704561%2C49.403252%2C8.735%2C49.434%2C8.706897%2C49.420%2C8.7366%2C49.417%2C8.704561%2C49.403252%7Cf%3A8.704561%2C49.403252%2C8.71151%2C49.416%2C8.702%2C49.41762%2C8.70306%2C49.4234%2C8.704561%2C49.403252&" + 
                    "filter=turn%21%3D*&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=living_street%2Cgarage&" + 
                    "keys=highway&" + 
                    "showMetadata=false&" + 
                    "time=2013-02-12&" + 
                    "timeout=97&" + 
                    "values=primary")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_487() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/key?" + 
                    "bboxes=DSJ%3A8.6807%2C49.409%2C8.75272%2C49.398%7CSZ%3A8.677428%2C49.40574%2C8.7446%2C49.38710&" + 
                    "bcircles=yxo%3A8.720%2C49.4196%2C9%7CRVfC%3A8.742191%2C49.427%2C77%7CWAFV%3A8.740%2C49.421%2C7&" + 
                    "format=geojson&" + 
                    "groupByKeys=foo&" + 
                    "keys=highway&" + 
                    "time=2009-09-30&" + 
                    "timeout=63&" + 
                    "values=give_way")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_488() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/groupBy/key?" + 
                    "bboxes=V%3A8.679579%2C49.421727%2C8.719%2C49.398&" + 
                    "bcircles=jdCFF%3A8.713%2C49.436%2C4%7CKjphF%3A8.722768%2C49.424%2C59&" + 
                    "bpolys=VF%3A8.704561%2C49.403252%2C8.7446%2C49.4137%2C8.70451%2C49.415%2C8.7040%2C49.419%2C8.704561%2C49.403252&" + 
                    "filter=foot%3D*+and+id%3A%281+..+9999%29&" + 
                    "format=csv&" + 
                    "groupByKeys=foo&" + 
                    "showMetadata=true&" + 
                    "timeout=74")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_489() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=8.7270%2C49.4033%2C60&" + 
                    "filter=foo&" + 
                    "groupByKey=evomaster_138739_input&" + 
                    "groupByValues=foo&" + 
                    "showMetadata=true&" + 
                    "time=foo&" + 
                    "timeout=38&" + 
                    "values=evomaster_138741_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_490() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=s%3A8.7265%2C49.433%2C4%7CB%3A8.745%2C49.431042%2C39&" + 
                    "filter=bicycle%21%3D*&" + 
                    "groupByKey=foo&" + 
                    "groupByValues=secondary&" + 
                    "keys=highway&" + 
                    "timeout=70&" + 
                    "values=stop_line")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The keys, values and types parameters must be empty, when you set the filter parameter."));
    }
    
    
    @Test
    public void test_491() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/boundary?" + 
                    "bcircles=OPZTn%3A8.724%2C49.4122%2C6&" + 
                    "format=geojson&" + 
                    "keys=highway&" + 
                    "showMetadata=foo&" + 
                    "time=evomaster_33422_input&" + 
                    "timeout=96&" + 
                    "types=foo&" + 
                    "values=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given parameter showMetadata can only contain the values 'true', 'yes', 'false', or 'no'."));
    }
    
    
    @Test
    public void test_492() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/groupBy/boundary?" + 
                    "bpolys=pA%3A8.704561%2C49.403252%2C8.712%2C49.403%2C8.7490%2C49.407%2C8.704%2C49.425%2C8.704561%2C49.403252&" + 
                    "values=platform")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("There cannot be more input values in the values|values2 than in the keys|keys2 parameter, as values_n must fit to keys_n."));
    }
    
    
    @Test
    public void test_493() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/density/groupBy/type?" + 
                    "bpolys=Z&" + 
                    "filter=wZlgz&" + 
                    "keys=cx&" + 
                    "time=7hEtPkS&" + 
                    "timeout=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_494() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/density/groupBy/type?" + 
                    "bcircles=o%3A8.726%2C49.40742%2C2%7CJa%3A8.712%2C49.4320%2C65%7CUZm%3A8.733%2C49.41312%2C8&" + 
                    "filter=oneway%21%3D*+or+type%3Arelation+and+not+length%3A%28+..+100%29&" + 
                    "keys=highway&" + 
                    "time=2012-11-14&" + 
                    "timeout=56&" + 
                    "values=footway")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The keys, values and types parameters must be empty, when you set the filter parameter."));
    }
    
    
    @Test
    public void test_495() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/density/groupBy/tag?" + 
                    "bpolys=l&" + 
                    "filter=evomaster_12877_input&" + 
                    "format=LPH6&" + 
                    "groupByKey=_7Z&" + 
                    "groupByValues=QzY6BLg9Tl&" + 
                    "keys=nXSl9yEbLklzo&" + 
                    "showMetadata=4ozBnN4JbUme&" + 
                    "time=evomaster_12878_input&" + 
                    "types=Z1YaAi51yT3sW3Ae&" + 
                    "values=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_496() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/density/groupBy/tag?" + 
                    "bcircles=BAmJS%3A8.7128%2C49.438%2C6&" + 
                    "filter=destination%21%3D*+or+geometry%3Apolygon&" + 
                    "groupByKey=building&" + 
                    "values=footway")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The keys, values and types parameters must be empty, when you set the filter parameter."));
    }
    
    
    @Test
    public void test_497() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/density/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=K%3A8.7457%2C49.414%2C1%7Cwqpfk%3A8.7386%2C49.4191%2C416%7CJEP%3A8.7141%2C49.424%2C72%7CsQXs%3A8.715%2C49.4067%2C892&" + 
                    "filter=ref%21%3D*+or+length%3A%28+..+100%29&" + 
                    "format=csv&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=church%2Ctraffic_signals&" + 
                    "keys=highway&" + 
                    "time=2018-02-04")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The keys, values and types parameters must be empty, when you set the filter parameter."));
    }
    
    
    @Test
    public void test_498() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/density/groupBy/boundary/groupBy/tag?" + 
                    "bboxes=oMEmv%3A8.651%2C49.403%2C8.708%2C49.387&" + 
                    "bcircles=GTb%3A8.7336%2C49.4008%2C3&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=path%2Ccycleway%2Cpublic&" + 
                    "timeout=72")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_499() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/density/groupBy/boundary?" + 
                    "bcircles=tJ%3A8.738%2C49.4086%2C6&" + 
                    "filter=foot%3D*+or+length%3A%28+..+100%29&" + 
                    "showMetadata=foo&" + 
                    "time=2007-11-27&" + 
                    "timeout=64")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given parameter showMetadata can only contain the values 'true', 'yes', 'false', or 'no'."));
    }
    
    
    @Test
    public void test_500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/density?" + 
                    "bcircles=cjNJs%3A8.708934%2C49.404%2C6%7CXWVda%3A8.73245%2C49.400%2C2%7CPhlAE%3A8.739%2C49.427%2C3&" + 
                    "filter=foo&" + 
                    "keys=evomaster_31837_input&" + 
                    "showMetadata=true&" + 
                    "timeout=25&" + 
                    "types=foo&" + 
                    "values=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Parameter 'types' (and 'types2') can only have 'node' and/or 'way' and/or 'relation' OR 'point' and/or 'line' and/or 'polygon' and/or 'other'"));
    }
    
    
    @Test
    public void test_501() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter?" + 
                    "bpolys=F&" + 
                    "format=n1R5D1mvud46RC0&" + 
                    "keys=jsSPKmHH&" + 
                    "showMetadata=MhpN&" + 
                    "values=NdRO7_58kUA")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_502() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter?" + 
                    "bcircles=CKA%3A8.7207%2C49.4171%2C69%7Ci%3A8.7110%2C49.43896%2C88%7CWD%3A8.744%2C49.4043%2C5&" + 
                    "bpolys=l%3A8.704561%2C49.403252%2C8.7097%2C49.4059%2C8.70060%2C49.404%2C8.7427%2C49.42815%2C8.704561%2C49.403252&" + 
                    "filter=destination%21%3D*+and+geometry%3Apolygon+and+length%3A%28+..+100%29&" + 
                    "timeout=25&" + 
                    "values=cycleway")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_503() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/ratio/groupBy/boundary?" + 
                    "bcircles=wqDS%3A8.733%2C49.43067%2C75%7Cdne%3A8.7085%2C49.423957%2C35&" + 
                    "filter2=foo&" + 
                    "keys=foo&" + 
                    "keys2=evomaster_56263_input&" + 
                    "time=foo&" + 
                    "types2=point%2Cpolygon%2C&" + 
                    "values=foo&" + 
                    "values2=stop_line")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_504() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/ratio?" + 
                    "bcircles=E%3A8.72446%2C49.430%2C46%7CllX%3A8.71841%2C49.40563%2C5%7CJb%3A8.739220%2C49.4025%2C75%7CjTXyx%3A8.706792%2C49.413%2C2&" + 
                    "filter=foo&" + 
                    "filter2=foot%3D*+and+area%3A%281.0+..+1E6%29&" + 
                    "keys=highway&" + 
                    "keys2=highway&" + 
                    "time=2008-12-02&" + 
                    "timeout=69&" + 
                    "values=living_street")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The keys, values and types parameters must be empty, when you set the filter parameter."));
    }
    
    
    @Test
    public void test_505() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/ratio?" + 
                    "bcircles=8.733%2C49.420%2C8%7C8.747%2C49.41798%2C7%7C8.719134%2C49.4126%2C3&" + 
                    "filter=name%3D*+and+area%3A%281.0+..+1E6%29&" + 
                    "keys2=highway")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The filter2 parameter has to be defined when using a /ratio endpoint."));
    }
    
    
    @Test
    public void test_506() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/key?" + 
                    "bcircles=8.7231%2C49.40031%2C1%7C8.740%2C49.4250%2C6&" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22nkFyF%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.725%2C49.400%5D%2C%5B8.7079%2C49.400987%5D%2C%5B8.704128%2C49.41475%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22w%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7247%2C49.41695%5D%2C%5B8.731%2C49.4198%5D%2C%5B8.70420%2C49.42905%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22NYsm%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.729%2C49.4351%5D%2C%5B8.7298%2C49.427%5D%2C%5B8.7076%2C49.401%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "format=geojson&" + 
                    "groupByKeys=foo&" + 
                    "showMetadata=true&" + 
                    "timeout=86")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_507() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/groupBy/key?" + 
                    "bboxes=evomaster_476_input&" + 
                    "bcircles=foo&" + 
                    "bpolys=foo&" + 
                    "filter=evomaster_477_input&" + 
                    "format=foo&" + 
                    "groupByKeys=evomaster_478_input&" + 
                    "keys=foo&" + 
                    "showMetadata=evomaster_479_input&" + 
                    "timeout=100&" + 
                    "types=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_508() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=8.735668%2C49.425%2C4&" + 
                    "format=csv&" + 
                    "groupByKey=evomaster_1054_input&" + 
                    "keys=highway&" + 
                    "types=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Parameter 'types' (and 'types2') can only have 'node' and/or 'way' and/or 'relation' OR 'point' and/or 'line' and/or 'polygon' and/or 'other'"));
    }
    
    
    @Test
    public void test_509() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=8.71434%2C49.417%2C2%7C8.7433%2C49.407%2C738&" + 
                    "filter=bicycle%21%3D*+or+geometry%3Apolygon&" + 
                    "format=csv&" + 
                    "groupByKey=building&" + 
                    "groupByValues=ship%2Csynagogue&" + 
                    "keys=highway&" + 
                    "values=stop")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The keys, values and types parameters must be empty, when you set the filter parameter."));
    }
    
    
    @Test
    public void test_510() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/boundary?" + 
                    "bcircles=oaHeQ%3A8.703%2C49.43925%2C4&" + 
                    "filter=foo&" + 
                    "format=geojson&" + 
                    "time=foo&" + 
                    "timeout=41&" + 
                    "values=evomaster_440195_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_511() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/groupBy/boundary?" + 
                    "bcircles=mdguO%3A8.709%2C49.400%2C1%7CF%3A8.724430%2C49.416%2C8&" + 
                    "filter=foo&" + 
                    "format=json&" + 
                    "keys=highway&" + 
                    "time=foo&" + 
                    "timeout=48")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_512() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density/groupBy/type?" + 
                    "bcircles=DHN%3A8.7462%2C49.432%2C1&" + 
                    "showMetadata=no&" + 
                    "values=primary")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("There cannot be more input values in the values|values2 than in the keys|keys2 parameter, as values_n must fit to keys_n."));
    }
    
    
    @Test
    public void test_513() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/density/groupBy/type?" + 
                    "bpolys=J&" + 
                    "filter=RZJc5zuwh3hQ&" + 
                    "format=kQxjLDlBU&" + 
                    "types=KGqDX4EZF")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_514() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/density/groupBy/tag?" + 
                    "bboxes=q%3A8.656%2C49.40456%2C8.722%2C49.3889%7Ct%3A8.6653%2C49.419%2C8.7272%2C49.392&" + 
                    "bcircles=l%3A8.715622%2C49.427%2C8&" + 
                    "bpolys=SY%3A8.704561%2C49.403252%2C8.718504%2C49.437%2C8.70371%2C49.4220%2C8.7039%2C49.430%2C8.704561%2C49.403252%7CG%3A8.704561%2C49.403252%2C8.721%2C49.436076%2C8.744634%2C49.418%2C8.700%2C49.430%2C8.704561%2C49.403252%7Cn%3A8.704561%2C49.403252%2C8.7399%2C49.415%2C8.735%2C49.4103%2C8.704%2C49.4399%2C8.704561%2C49.403252&" + 
                    "filter=barrier%21%3D*+or+not+type%3Anode&" + 
                    "groupByKey=highway&" + 
                    "keys=highway&" + 
                    "time=2011-04-21&" + 
                    "timeout=72&" + 
                    "values=stop_line")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_515() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density/groupBy/boundary/groupBy/tag?" + 
                    "bboxes=8.655%2C49.425653%2C8.74560%2C49.380&" + 
                    "bpolys=8.704561%2C49.403252%2C8.713%2C49.407%2C8.70967%2C49.42878%2C8.743%2C49.405%2C8.704561%2C49.403252&" + 
                    "format=geojson&" + 
                    "groupByKey=foo&" + 
                    "showMetadata=false&" + 
                    "time=2013-08-10&" + 
                    "timeout=22&" + 
                    "values=steps")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_516() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/density/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=8.7315%2C49.405%2C5%7C8.7403%2C49.43894%2C5&" + 
                    "filter=highway%21%3D*+and+id%3A%281+..+9999%29&" + 
                    "groupByKey=foo&" + 
                    "groupByValues=station%2Csynagogue%2Cprimary_link&" + 
                    "keys=highway&" + 
                    "values=turning_circle")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The keys, values and types parameters must be empty, when you set the filter parameter."));
    }
    
    
    @Test
    public void test_517() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density/groupBy/boundary?" + 
                    "bboxes=oNttk%3A8.6786%2C49.419968%2C8.732%2C49.387&" + 
                    "filter=name%21%3D*+or+not+length%3A%28+..+100%29&" + 
                    "format=geojson&" + 
                    "keys=highway")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The keys, values and types parameters must be empty, when you set the filter parameter."));
    }
    
    
    @Test
    public void test_518() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/density/groupBy/boundary?" + 
                    "bcircles=pev%3A8.7465%2C49.404353%2C4&" + 
                    "filter=foo&" + 
                    "format=csv&" + 
                    "keys=highway&" + 
                    "showMetadata=false&" + 
                    "time=2017-09-10")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The keys, values and types parameters must be empty, when you set the filter parameter."));
    }
    
    
    @Test
    public void test_519() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density?" + 
                    "bcircles=8.705%2C49.41973%2C7%7C8.741%2C49.410281%2C772%7C8.743%2C49.43994%2C24%7C8.7395%2C49.4379%2C36&" + 
                    "filter=foo&" + 
                    "time=evomaster_15444_input&" + 
                    "timeout=20")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_520() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/density?" + 
                    "bcircles=mMSWO%3A8.746431%2C49.408%2C6&" + 
                    "filter=foo&" + 
                    "format=json&" + 
                    "keys=foo&" + 
                    "showMetadata=yes&" + 
                    "time=2007-10-29&" + 
                    "timeout=64&" + 
                    "values=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The keys, values and types parameters must be empty, when you set the filter parameter."));
    }
    
    
    @Test
    public void test_521() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length?" + 
                    "bboxes=OizuY%3A8.676349%2C49.4210%2C8.700%2C49.39034&" + 
                    "filter=building%3D*+or+id%3A%281+..+9999%29&" + 
                    "keys=highway&" + 
                    "showMetadata=false&" + 
                    "time=2013-04-20&" + 
                    "timeout=31")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The keys, values and types parameters must be empty, when you set the filter parameter."));
    }
    
    
    @Test
    public void test_522() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length?" + 
                    "bpolys=foo&" + 
                    "filter=foo&" + 
                    "keys=foo&" + 
                    "showMetadata=yes&" + 
                    "time=foo&" + 
                    "timeout=80&" + 
                    "types=foo&" + 
                    "values=crossing")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_523() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/ratio/groupBy/boundary?" + 
                    "bboxes=q%3A8.685296%2C49.410%2C8.746011%2C49.385&" + 
                    "filter=natural%3Dwood+or+geometry%3Aline&" + 
                    "timeout=39")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The filter2 parameter has to be defined when using a /ratio endpoint."));
    }
    
    
    @Test
    public void test_524() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/ratio/groupBy/boundary?" + 
                    "bcircles=8.716%2C49.40110%2C8%7C8.734%2C49.4276%2C7%7C8.746%2C49.43952%2C4&" + 
                    "filter=name%21%3D*+and+geometry%3Aline+and+id%3A%281+..+9999%29&" + 
                    "format=geojson&" + 
                    "showMetadata=yes&" + 
                    "timeout=25&" + 
                    "types2=line%2Cpolygon%2Cother")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The filter2 parameter has to be defined when using a /ratio endpoint."));
    }
    
    
    @Test
    public void test_525() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/ratio?" + 
                    "bboxes=J%3A8.6551%2C49.4137%2C8.737936%2C49.3822&" + 
                    "filter=foo&" + 
                    "filter2=foo&" + 
                    "format=csv&" + 
                    "keys=highway&" + 
                    "keys2=highway&" + 
                    "time=2009-07-25")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The keys, values and types parameters must be empty, when you set the filter parameter."));
    }
    
    
    @Test
    public void test_526() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/ratio?" + 
                    "bpolys=FV3j&" + 
                    "filter=qFEjTfMnRDosW&" + 
                    "format=VYnXCNsrema1dY&" + 
                    "keys=DzF2rFsF5pG&" + 
                    "keys2=Tsbc&" + 
                    "showMetadata=a3kfuloD2uz_X&" + 
                    "time=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_527() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/type?" + 
                    "bpolys=I&" + 
                    "filter=Fvhwv3_nt&" + 
                    "keys=_pqAG&" + 
                    "time=diJTcvXta&" + 
                    "types=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_528() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/groupBy/type?" + 
                    "filter=lit%21%3D*+or+type%3Arelation+and+length%3A%28+..+100%29&" + 
                    "showMetadata=yes&" + 
                    "timeout=55")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("You need to define one of the boundary parameters (bboxes, bcircles, bpolys)."));
    }
    
    
    @Test
    public void test_529() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/tag?" + 
                    "bcircles=8.720%2C49.4005%2C3&" + 
                    "filter=foo&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=evomaster_150301_input&" + 
                    "keys=evomaster_150302_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The keys, values and types parameters must be empty, when you set the filter parameter."));
    }
    
    
    @Test
    public void test_530() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/groupBy/tag?" + 
                    "filter=maxspeed%3D*+or+id%3A%281+..+9999%29&" + 
                    "format=json&" + 
                    "groupByKey=building&" + 
                    "timeout=98&" + 
                    "values=primary_link")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("You need to define one of the boundary parameters (bboxes, bcircles, bpolys)."));
    }
    
    
    @Test
    public void test_531() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/groupBy/key?" + 
                    "bboxes=u%3A8.6721%2C49.406274%2C8.700%2C49.388%7CZ%3A8.674%2C49.421%2C8.7134%2C49.396%7CmuwRc%3A8.691%2C49.415805%2C8.75976%2C49.386&" + 
                    "bcircles=w%3A8.719%2C49.409%2C5%7CJWXr%3A8.7015%2C49.401%2C1&" + 
                    "bpolys=8.704561%2C49.403252%2C8.719464%2C49.41352%2C8.7412%2C49.418%2C8.724%2C49.433%2C8.704561%2C49.403252&" + 
                    "groupByKeys=foo&" + 
                    "showMetadata=yes&" + 
                    "timeout=46")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_532() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/groupBy/boundary/groupBy/tag?" + 
                    "filter=K_YP&" + 
                    "format=YeZOUnwhfWG&" + 
                    "groupByKey=H9&" + 
                    "groupByValues=By&" + 
                    "showMetadata=DJ3qumGaUnuOZKTI&" + 
                    "time=rg1DM4obqu5tqW0&" + 
                    "types=2qMgy60HiEKj&" + 
                    "values=pPUn9YBvDo7PZa9")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("You need to define one of the boundary parameters (bboxes, bcircles, bpolys)."));
    }
    
    
    @Test
    public void test_533() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/boundary?" + 
                    "bcircles=mH%3A8.7355%2C49.431165%2C6&" + 
                    "format=geojson&" + 
                    "keys=highway&" + 
                    "time=foo&" + 
                    "values=stop")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_534() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/groupBy/boundary?" + 
                    "bboxes=BW%3A8.6523%2C49.406%2C8.7210%2C49.3912&" + 
                    "showMetadata=false&" + 
                    "values=path")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("There cannot be more input values in the values|values2 than in the keys|keys2 parameter, as values_n must fit to keys_n."));
    }
    
    
    @Test
    public void test_535() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/density/groupBy/type?" + 
                    "bcircles=awTA%3A8.749%2C49.431%2C7&" + 
                    "filter=foo&" + 
                    "format=json&" + 
                    "showMetadata=false&" + 
                    "time=2009-07-26&" + 
                    "types=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Parameter 'types' (and 'types2') can only have 'node' and/or 'way' and/or 'relation' OR 'point' and/or 'line' and/or 'polygon' and/or 'other'"));
    }
    
    
    @Test
    public void test_536() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/density/groupBy/type?" + 
                    "bboxes=8.664%2C49.4299%2C8.7054%2C49.395&" + 
                    "bcircles=Q%3A8.728%2C49.42187%2C1&" + 
                    "format=csv&" + 
                    "keys=highway&" + 
                    "timeout=78&" + 
                    "values=steps")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_537() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/density/groupBy/tag?" + 
                    "bboxes=D%3A8.684%2C49.425935%2C8.7205%2C49.387&" + 
                    "groupByKey=evomaster_498829_input&" + 
                    "groupByValues=evomaster_498830_input&" + 
                    "keys=highway&" + 
                    "time=2%2C07-11-23&" + 
                    "timeout=21&" + 
                    "values=fooA")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_538() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/density/groupBy/tag?" + 
                    "bcircles=qHtfJ%3A8.7246%2C49.421%2C2%7CkK%3A8.718%2C49.4398%2C3%7CtC%3A8.703%2C49.405%2C5&" + 
                    "filter=evomaster_15703_input&" + 
                    "groupByKey=evomaster_15704_input&" + 
                    "keys=evomaster_15705_input&" + 
                    "showMetadata=true&" + 
                    "time=foo&" + 
                    "values=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_539() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/density/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=d%3A8.7069%2C49.438%2C90&" + 
                    "bpolys=8.704561%2C49.403252%2C8.747%2C49.431146%2C8.749%2C49.403%2C8.7044%2C49.4361%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.70832%2C49.437%2C8.704%2C49.432%2C8.747398%2C49.430%2C8.704561%2C49.403252&" + 
                    "filter=natural%3Dwood&" + 
                    "format=geojson&" + 
                    "groupByKey=foo&" + 
                    "keys=highway&" + 
                    "showMetadata=false&" + 
                    "time=2013-10-17&" + 
                    "timeout=94")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_540() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/density/groupBy/boundary/groupBy/tag?" + 
                    "bboxes=TmCVk%3A8.686%2C49.415%2C8.746%2C49.3800%7CNmQZU%3A8.694%2C49.4112%2C8.722%2C49.380&" + 
                    "bcircles=8.701%2C49.411%2C7%7C8.749880%2C49.430%2C7&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=hut%2Cservice%2Csteps&" + 
                    "keys=highway&" + 
                    "showMetadata=no&" + 
                    "timeout=65&" + 
                    "values=platform")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_541() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/density/groupBy/boundary?" + 
                    "bcircles=8.723%2C49.4191%2C9%7C8.7167%2C49.40266%2C37&" + 
                    "format=geojson&" + 
                    "time=2015-12-17&" + 
                    "timeout=83&" + 
                    "values=secondary")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("There cannot be more input values in the values|values2 than in the keys|keys2 parameter, as values_n must fit to keys_n."));
    }
    
    
    @Test
    public void test_542() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/density/groupBy/boundary?" + 
                    "filter=sidewalk%21%3D*+and+id%3A%281+..+9999%29&" + 
                    "showMetadata=no&" + 
                    "timeout=83&" + 
                    "values=secondary_link")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("You need to define one of the boundary parameters (bboxes, bcircles, bpolys)."));
    }
    
    
    @Test
    public void test_543() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/density?" + 
                    "bboxes=b%3A8.653321%2C49.404%2C8.7246%2C49.387&" + 
                    "bcircles=Cq%3A8.725759%2C49.4298%2C82&" + 
                    "bpolys=jU%3A8.704561%2C49.403252%2C8.7448%2C49.437%2C8.737%2C49.421%2C8.7027%2C49.427514%2C8.704561%2C49.403252%7Cw%3A8.704561%2C49.403252%2C8.749%2C49.4013%2C8.705%2C49.417%2C8.7402%2C49.422%2C8.704561%2C49.403252&" + 
                    "filter=destination%21%3D*+and+not+id%3A%281+..+9999%29&" + 
                    "keys=highway&" + 
                    "timeout=29")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_544() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/density?" + 
                    "bpolys=qFRFR&" + 
                    "filter=UIWdgpyQu&" + 
                    "showMetadata=O4KFyWktdjoqxed&" + 
                    "time=&" + 
                    "timeout=&" + 
                    "types=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_545() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count?" + 
                    "bcircles=foo&" + 
                    "bpolys=evomaster_554_input&" + 
                    "format=foo&" + 
                    "keys=evomaster_555_input&" + 
                    "showMetadata=foo&" + 
                    "time=foo&" + 
                    "timeout=100&" + 
                    "types=foo&" + 
                    "values=pedestrian")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_546() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count?" + 
                    "bcircles=IhU%3A8.736%2C49.402%2C1&" + 
                    "bpolys=nk%3A8.704561%2C49.403252%2C8.723%2C49.4136%2C8.731052%2C49.4392%2C8.716%2C49.41520%2C8.704561%2C49.403252%7Cl%3A8.704561%2C49.403252%2C8.71570%2C49.43993%2C8.70226%2C49.418%2C8.740633%2C49.4204%2C8.704561%2C49.403252%7CEBP%3A8.704561%2C49.403252%2C8.731%2C49.43808%2C8.707%2C49.431%2C8.705%2C49.426%2C8.704561%2C49.403252&" + 
                    "filter=landuse%3D*+and+length%3A%28+..+100%29&" + 
                    "format=geojson&" + 
                    "keys=highway&" + 
                    "time=2015-02-09&" + 
                    "timeout=21")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_547() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/ratio/groupBy/boundary?" + 
                    "bcircles=C%3A8.726%2C49.4395%2C14%7CsROmz%3A8.70435%2C49.4038%2C2%7CBZ%3A8.7452%2C49.438%2C2%7CE%3A8.7364%2C49.4226%2C13&" + 
                    "filter=addr%3Acountry%3D*+or+geometry%3Aline&" + 
                    "format=geojson&" + 
                    "keys2=highway&" + 
                    "showMetadata=no&" + 
                    "time=2017-09-08&" + 
                    "types2=line%2Cother&" + 
                    "values2=turning_circle")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The filter2 parameter has to be defined when using a /ratio endpoint."));
    }
    
    
    @Test
    public void test_548() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/ratio/groupBy/boundary?" + 
                    "bpolys=DBZjW%3A8.704561%2C49.403252%2C8.716%2C49.417%2C8.739%2C49.4373%2C8.709%2C49.417%2C8.704561%2C49.403252&" + 
                    "filter=surface%21%3D*+or+length%3A%28+..+100%29&" + 
                    "format=csv&" + 
                    "time=2009-09-20")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The filter2 parameter has to be defined when using a /ratio endpoint."));
    }
    
    
    @Test
    public void test_549() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/ratio?" + 
                    "bcircles=RK%3A8.743%2C49.432%2C4&" + 
                    "filter=foo&" + 
                    "filter2=foo&" + 
                    "format=jsOn&" + 
                    "keys=evomaster_147470_input&" + 
                    "showMetadata=foo&" + 
                    "time=2007-12-22&" + 
                    "types=foo&" + 
                    "values=foo&" + 
                    "values2=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given parameter showMetadata can only contain the values 'true', 'yes', 'false', or 'no'."));
    }
    
    
    @Test
    public void test_550() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/ratio?" + 
                    "bboxes=Em%3A8.654225%2C49.405%2C8.735%2C49.394&" + 
                    "filter=highway%21%3D*&" + 
                    "format=geojson&" + 
                    "keys2=highway&" + 
                    "showMetadata=yes&" + 
                    "time=2017-07-02&" + 
                    "timeout=81&" + 
                    "values2=pedestrian")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The filter2 parameter has to be defined when using a /ratio endpoint."));
    }
    
    
    @Test
    public void test_551() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/type?" + 
                    "bcircles=T%3A8.728727%2C49.430%2C194&" + 
                    "filter=foo&" + 
                    "format=geojson&" + 
                    "keys=highway&" + 
                    "showMetadata=true&" + 
                    "timeout=76&" + 
                    "types=foo&" + 
                    "values=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Parameter 'types' (and 'types2') can only have 'node' and/or 'way' and/or 'relation' OR 'point' and/or 'line' and/or 'polygon' and/or 'other'"));
    }
    
    
    @Test
    public void test_552() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/tag?" + 
                    "filter=barrier%3D*+or+id%3A%281+..+9999%29&" + 
                    "format=csv&" + 
                    "groupByKey=highway&" + 
                    "showMetadata=false&" + 
                    "time=2011-12-10&" + 
                    "timeout=54")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("You need to define one of the boundary parameters (bboxes, bcircles, bpolys)."));
    }
    
    
    @Test
    public void test_553() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/key?" + 
                    "bboxes=d%3A8.673%2C49.419%2C8.7590%2C49.393668&" + 
                    "filter=foo&" + 
                    "groupByKeys=lanes%3Aforward%2Cturn%3Alanes&" + 
                    "keys=highway&" + 
                    "time=2011-08-24&" + 
                    "timeout=98&" + 
                    "values=track")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The keys, values and types parameters must be empty, when you set the filter parameter."));
    }
    
    
    @Test
    public void test_554() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/key?" + 
                    "bcircles=n%3A8.72000%2C49.406%2C4%7CTosms%3A8.731%2C49.416%2C53&" + 
                    "format=json&" + 
                    "groupByKeys=surface&" + 
                    "showMetadata=no&" + 
                    "time=2011-04-19&" + 
                    "timeout=86&" + 
                    "values=residential")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("There cannot be more input values in the values|values2 than in the keys|keys2 parameter, as values_n must fit to keys_n."));
    }
    
    
    @Test
    public void test_555() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/boundary/groupBy/tag?" + 
                    "bboxes=f&" + 
                    "filter=3uSAQVydLbLcfSO&" + 
                    "format=lDE4S2&" + 
                    "groupByKey=mmyxQovkBR&" + 
                    "time=eG0EVP131R0bMC60&" + 
                    "timeout=un0HsJpoXL&" + 
                    "types=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_556() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/boundary/groupBy/tag?" + 
                    "format=csv&" + 
                    "groupByKey=evomaster_176_input&" + 
                    "groupByValues=evomaster_177_input&" + 
                    "keys=foo&" + 
                    "showMetadata=foo&" + 
                    "time=2012-02-27&" + 
                    "timeout=96&" + 
                    "values=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("You need to define one of the boundary parameters (bboxes, bcircles, bpolys)."));
    }
    
    
    @Test
    public void test_557() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/boundary?" + 
                    "bcircles=sKvI%3A8.722%2C49.423%2C4&" + 
                    "format=json&" + 
                    "values=emergency_access_point")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("There cannot be more input values in the values|values2 than in the keys|keys2 parameter, as values_n must fit to keys_n."));
    }
    
    
    @Test
    public void test_558() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/boundary?" + 
                    "bcircles=8.728%2C49.4285%2C651&" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22iK%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.721%2C49.437%5D%2C%5B8.72043%2C49.422%5D%2C%5B8.724%2C49.409%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22x%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7297%2C49.434%5D%2C%5B8.702%2C49.439%5D%2C%5B8.746%2C49.410720%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22yZY%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.749%2C49.4348%5D%2C%5B8.700%2C49.415%5D%2C%5B8.746769%2C49.433%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=highway+in+%28secondary%2Cpath%2Cunclassified%2Ctrack%2Cprimary%2Cresidential%2Ccycleway%2Cservice%2Cfootway%29+and+area%3A%281.0+..+1E6%29&" + 
                    "keys=highway&" + 
                    "showMetadata=true&" + 
                    "time=2011-05-23&" + 
                    "timeout=49&" + 
                    "values=elevator")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_559() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/density/groupBy/type?" + 
                    "bcircles=i%3A8.744%2C49.403%2C439603064%7CU%3A8274467%2C49.4376%2C3%7CYO%3A8.70773%2C49.419%2C1&" + 
                    "filter=foo&" + 
                    "format=foo&" + 
                    "time=2016-07-31&" + 
                    "types=foo&" + 
                    "values=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Each bcircle must consist of a lon/lat coordinate pair plus a buffer in meters."));
    }
    
    
    @Test
    public void test_560() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density/groupBy/tag?" + 
                    "bboxes=oW%3A8.6923%2C49.405%2C8.746%2C49.3803%7CXJT%3A8.661981%2C49.4242%2C8.741%2C49.383&" + 
                    "bcircles=Fjcgl%3A8.71821%2C49.421%2C5027913424&" + 
                    "groupByKey=highway&" + 
                    "time=2013-08-16&" + 
                    "timeout=62&" + 
                    "values=traffic_signals")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_561() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/density/groupBy/tag?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22eG%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.70365%2C49.406%5D%2C%5B8.721648%2C49.429%5D%2C%5B8.732595%2C49.428%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=turn%21%3D*+and+id%3A%281+..+9999%29&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=stop_line%2Ccycleway&" + 
                    "keys=highway&" + 
                    "timeout=98")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The keys, values and types parameters must be empty, when you set the filter parameter."));
    }
    
    
    @Test
    public void test_562() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22mH%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.744%2C49.4045%5D%2C%5B8.702%2C49.402%5D%2C%5B8.70457%2C49.401%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22yGMLl%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22Soordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.704%2C49.423501%5D%2C%5B8.70876%2C49.406%5D%2C%5B8.73884%2C49.438%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "format=evomaster_110046_input&" + 
                    "groupByKey=evomaster%7F1745_input&" + 
                    "groupByValues=evomaster_7219_input&" + 
                    "types=evomaster_110047_input&" + 
                    "values=evomaster_49774_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided GeoJSON cannot be converted."));
    }
    
    
    @Test
    public void test_563() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/density/groupBy/boundary/groupBy/tag?" + 
                    "bboxes=Yt%3A8.692%2C49.4063%2C8.720712%2C49.390&" + 
                    "bcircles=BTa%3A8.71462%2C49.414%2C6%7CclfC%3A8.713%2C49.40531%2C817439706&" + 
                    "bpolys=8.704561%2C49.403252%2C8.732%2C49.421%2C8.7306%2C49.422%2C8.738784%2C49.4045%2C8.704561%2C49.403252&" + 
                    "filter=oneway%21%3D*+and+geometry%3Apoint+and+id%3A%281+..+9999%29&" + 
                    "format=json&" + 
                    "groupByKey=foo&" + 
                    "time=2012-12-22&" + 
                    "timeout=85")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_564() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density/groupBy/boundary?" + 
                    "bpolys=g&" + 
                    "filter=AHFgj0aQAIsChc_n&" + 
                    "format=evomaster_596923_input&" + 
                    "keys=ju3KCDRkl&" + 
                    "types=X0Sf9Cpf0NA")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_565() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/density/groupBy/boundary?" + 
                    "bcircles=8.7020%2C49.42806%2C87&" + 
                    "filter=building%21%3D*+and+not+type%3Arelation+or+not+area%3A%281.0+..+1E6%29&" + 
                    "format=json&" + 
                    "keys=highway&" + 
                    "timeout=99&" + 
                    "values=track")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The keys, values and types parameters must be empty, when you set the filter parameter."));
    }
    
    
    @Test
    public void test_566() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/density?" + 
                    "bcircles=h%3A8.733%2C49.409%2C8&" + 
                    "bpolys=8.704561%2C49.403252%2C8.738%2C49.431%2C8.742%2C49.410%2C8.728%2C49.432%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.716%2C49.4005%2C8.710%2C49.439%2C8.719%2C49.425%2C8.704561%2C49.403252&" + 
                    "keys=highway&" + 
                    "showMetadata=true&" + 
                    "timeout=42&" + 
                    "values=living_street")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_567() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area?" + 
                    "bcircles=iwSyu%3A8.748917%2C49.41333%2C2%7CtxCH%3A8.7333%2C49.4028%2C2%7Cd%3A8.713%2C49.43075%2C2%7CMOXB%3A8.70946%2C49.4290%2C52&" + 
                    "format=json&" + 
                    "values=turning_circle")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("There cannot be more input values in the values|values2 than in the keys|keys2 parameter, as values_n must fit to keys_n."));
    }
    
    
    @Test
    public void test_568() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/density/groupBy/tag?" + 
                    "bpolys=yaI%3A8.704561%2C49.403252%2C8.71422%2C49.410%2C8.704661%2C49.405%2C8.703%2C49.4280%2C8.704561%2C49.403252&" + 
                    "filter=foo&" + 
                    "format=json&" + 
                    "groupByKey=kqh&" + 
                    "groupByValues=evomaster_87756_input&" + 
                    "keys=evomaster_100229_input&" + 
                    "time=%2F%2FP11D&" + 
                    "timeout=55")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The keys, values and types parameters must be empty, when you set the filter parameter."));
    }
    
    
    @Test
    public void test_569() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/density/groupBy/boundary?" + 
                    "bpolys=0&" + 
                    "filter=q6UlHIVVPMF&" + 
                    "format=QutKFRKH&" + 
                    "showMetadata=v&" + 
                    "types=klvhVhTWuoA")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_570() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/type?" + 
                    "bpolys=_&" + 
                    "format=yuYnAov&" + 
                    "showMetadata=zdxZ1zSom7OLMke&" + 
                    "time=Vmg_m2&" + 
                    "timeout=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_571() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/groupBy/type?" + 
                    "bpolys=G&" + 
                    "filter=0dDDfzglfug_&" + 
                    "keys=JQXAiL_eUP&" + 
                    "time=189_JBN8j&" + 
                    "values=dEGlU_bNuFKXc9Ml")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_572() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/type?" + 
                    "bboxes=38&" + 
                    "bcircles=8.735%2C49.428%2C7%7C8.7468%2C49.404%2C2%7C8.7279%2C49.4272%2C8%7C8.7201%2C49.42489%2C2170652473&" + 
                    "bpolys=evomaster_529_input&" + 
                    "filter=evomaster_530_input&" + 
                    "format=geojson&" + 
                    "keys=foo&" + 
                    "showMetadata=&" + 
                    "timeout=38&" + 
                    "types=evomaster_531_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_573() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density/groupBy/type?" + 
                    "bpolys=o&" + 
                    "showMetadata=V73_o4CrqXVywtA")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_574() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density?" + 
                    "bpolys=lV&" + 
                    "keys=QAf3_RlXz&" + 
                    "showMetadata=fQ5EbKejse&" + 
                    "types=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_575() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/key?" + 
                    "bpolys=VlkZD%3A8.704561%2C49.403252%2C8.727%2C4%29.4000%2C8.7031%2C49.407838%2C8.713%2C49.402748%2C8.704561%2C49.40325&" + 
                    "filter=evomaster_62795_input&" + 
                    "format=foo&" + 
                    "groupByKeys=addr%3Acity%2Caddr%3Acountry%2Caddr%3Astreet&" + 
                    "time=evomaster_62796_input&" + 
                    "types=foo&" + 
                    "values=evomaster_62797_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The bpolys parameter must contain double-parseable values in form of lon/lat coordinate pairs."));
    }
    
    
    @Test
    public void test_576() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area?" + 
                    "bcircles=8.713%2C84.0%19%16%2C%3B&" + 
                    "format=geOjsON&" + 
                    "time=evomaster_242516_input&" + 
                    "types=evomaster_280331_input&" + 
                    "values=%7DPo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Each bcircle must consist of a lon/lat coordinate pair plus a buffer in meters."));
    }
    
    
    @Test
    public void test_577() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area?" + 
                    "bcircles=8.713%2C-80.00%2C8jh&" + 
                    "showMetadata=&" + 
                    "values=z_Maq")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Each bcircle must consist of a lon/lat coordinate pair plus a buffer in meters."));
    }
    
    
    @Test
    public void test_578() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/density?" + 
                    "bcircles=VSUZU%3A9.999%2C56.00F%2C0&" + 
                    "format=fson&" + 
                    "keys=hifduav1&" + 
                    "time=%2Fe3S1RVWWT7&" + 
                    "timeout=07&" + 
                    "types=foo&" + 
                    "values=gspUA")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given 'format' parameter is invalid. Please choose between 'geojson'(only available for /groupBy/boundary and data extraction requests), 'json', or 'csv'."));
    }
    
    
    @Test
    public void test_579() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area?" + 
                    "bcircles=8.713%2C-0.E01D%2C9e&" + 
                    "keys=secondary&" + 
                    "time=%2Fi&" + 
                    "types=poINt&" + 
                    "values=6hr6%7EZhRN")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Each bcircle must consist of a lon/lat coordinate pair plus a buffer in meters."));
    }
    
    
    @Test
    public void test_580() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area?" + 
                    "bcircles=%18-713%2C49.404%2C9&" + 
                    "filter=gH9MAZqL5wM6Ld48&" + 
                    "format=foo&" + 
                    "keys=evomaster_128822_input&" + 
                    "showMetadata=true&" + 
                    "time=DRh%5E5nzj7e&" + 
                    "timeout=80")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Each bcircle must consist of a lon/lat coordinate pair plus a buffer in meters."));
    }
    
    
    @Test
    public void test_581() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/groupBy/key?" + 
                    "bboxes=8.688%2C49.405%2C8.70150%2C49.389%7C8.6720%2C49.4172%2C8.75542%2C49.381%7C8.655572%2C49.4249%2C8.729%2C49.39827%7C8.652%2C49.41676%2C8.710607%2C49.381742&" + 
                    "bpolys=8.704561%2C49.403252%2C8.717%2C49.419%2C8.72914%2C49.434821%2C8.706%2C49.418%2C8.704561%2C49.403252&" + 
                    "filter=tracktype%21%3D*+or+geometry%3Apolygon+or+not+area%3A%281.0+..+1E6%29&" + 
                    "groupByKeys=foo&" + 
                    "showMetadata=no&" + 
                    "time=%2F%2FP6M1D&" + 
                    "values=steps")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_582() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/density/groupBy/tag?" + 
                    "bcircles=foo&" + 
                    "bpolys=yaI%3A8.704561%2C49.803252%2C8.71422%2C49.410%2C8.704661%2C49.405%2C8.703%2C49.4280%2C8.704561%2C49.423252&" + 
                    "filter=evomaster_95602_input&" + 
                    "groupByKey=evom_ster_94116_input&" + 
                    "groupByValues=evomaster_96593_input&" + 
                    "keys=W3vJovnAhFC&" + 
                    "time=Tg%2F&" + 
                    "timeout=55&" + 
                    "types=evolaster_94882_inpu")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_583() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/tag?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22FWP%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.738%2C49.41663%5D%2C%5B8.70892%2C49.416%5D%2C%5B8.7036%2C49.408%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "format=csv&" + 
                    "groupByKey=_STPaco7d4BElUc_&" + 
                    "groupByValues=evomaster_54484_inpu&" + 
                    "keys=evomaster_54275_input&" + 
                    "time=evomaster_414997_input&" + 
                    "types=wAY&" + 
                    "values=evomaster_54486_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_584() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area?" + 
                    "bcircles=8.713%2C-72.44%2C8&" + 
                    "showMetadata=&" + 
                    "time=Q%2FibF&" + 
                    "timeout=9+&" + 
                    "types=OThEr&" + 
                    "values=3krNJYhOsI")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_585() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area?" + 
                    "bcircles=8.713%2C49.804%2C9&" + 
                    "filter=evomaster_180475_input&" + 
                    "keys=evomaster_153770_input&" + 
                    "time=evomaster_153%2C94_input&" + 
                    "timeout=80")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_586() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area?" + 
                    "bcircles=%3A.000%2C75.996%2C%3BRx&" + 
                    "format=OCtEt-sTReAM&" + 
                    "keys=evomaster_482954_input&" + 
                    "values=ank6KaAbYuNc")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Each bcircle must consist of a lon/lat coordinate pair plus a buffer in meters."));
    }
    
    
    @Test
    public void test_587() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area?" + 
                    "bcircles=%3A%1242%15%2C75.977%2C%3BR&" + 
                    "filter=evomaster_1070903_input&" + 
                    "keys=evomaster_1073326_input&" + 
                    "showMetadata=evomaster_217288ginput&" + 
                    "time=evomaster_202021_input&" + 
                    "timeout=%184&" + 
                    "values=k")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Each bcircle must consist of a lon/lat coordinate pair plus a buffer in meters."));
    }
    
    
    @Test
    public void test_588() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area?" + 
                    "bcircles=8.7%3A3%2C63.076%2C%3B&" + 
                    "filter=evomaster_554949_hnput&" + 
                    "format=GeOjson&" + 
                    "keys=evomaster_242625_input&" + 
                    "showMetadata=evomaster_237129_i%7Epu&" + 
                    "timeout=88&" + 
                    "types=J%2CR")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Each bcircle must consist of a lon/lat coordinate pair plus a buffer in meters."));
    }
    
    
    @Test
    public void test_589() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area?" + 
                    "bcircles=0012.%2C63.9999%2CJ&" + 
                    "keys=%5C%3C%3A")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Each bcircle must consist of a lon/lat coordinate pair plus a buffer in meters."));
    }
    
    
    @Test
    public void test_590() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/density?" + 
                    "bboxes=T%3A8.69552%2C49.419%2C8.721%2C49.388&" + 
                    "filter=evomaster_51891_input&" + 
                    "time=O%2F%2BP6M1%2FD&" + 
                    "values=Un%5E")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_591() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/tag?" + 
                    "bcircles=RdZ%3A8.746718%2C49.403%2C66%7CL%3A8.74026%2C49.422489%2C679&" + 
                    "bpolys=tvkRZ%3A8.704561%2C49.403252%2C8.705%2C49.402%2C8.704518%2C49.410075%2C8.7040%2C49.410%2C8.704561%2C49.403252%7CQKTMu%3A8.704561%2C49.403252%2C8.71001%2C49.432%2C8.708%2C49.40684%2C8.709%2C49.418%2C8.704561%2C49.403252&" + 
                    "filter=highway+in+%28secondary%2Cpath%2Cunclassified%2Ctrack%2Cprimary%2Cresidential%2Ccycleway%2Cservice%2Cfootway%29+and+geometry%3Apoint+or+id%3A%281+..+9999%29&" + 
                    "groupByKey=building&" + 
                    "groupByValues=civic%2Cship%2Ccommercial&" + 
                    "values=residential")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_592() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area?" + 
                    "bcircles=8.713%2C-1.00D%2C9&" + 
                    "format=CsV&" + 
                    "keys=evomaster_170994_input&" + 
                    "time=Q&" + 
                    "timeout=8+&" + 
                    "types=evomaster_162507_input&" + 
                    "values=6hr6%7EZhRN")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Parameter 'types' (and 'types2') can only have 'node' and/or 'way' and/or 'relation' OR 'point' and/or 'line' and/or 'polygon' and/or 'other'"));
    }
    
    
    @Test
    public void test_593() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area?" + 
                    "bcircles=8.713%2C-1.02D%2C9&" + 
                    "filter=e%C2%96omaster_163667_imput&" + 
                    "format=Csv&" + 
                    "keys=evomaster_170994_input&" + 
                    "showMetadata=&" + 
                    "time=%2Fi")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_594() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/groupBy/tag?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22jd%22%3A%22J%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.739695%2C49.400%5D%2C%5B8.7321%2C49.439%5D%2C%5B8.700%2C49.4193%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "groupByKey=FIs82x7PM&" + 
                    "groupByValues=evomaster_5091_input&" + 
                    "keys=Ey&" + 
                    "showMetadata=foo&" + 
                    "time=evomaster_13099_input&" + 
                    "timeout=62&" + 
                    "types=evomaster_20523_input&" + 
                    "values=evomaster_13100_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given parameter showMetadata can only contain the values 'true', 'yes', 'false', or 'no'."));
    }
    
    
    @Test
    public void test_595() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/density/groupBy/type?" + 
                    "bcircles=q%3A8.730093%2C49.4303%2C35%7CXSy%3A8.749020%2C49.420%2C8%7CPg%3A8.705%2C49.4101%2C2%7Cvj%3A8.7217%2C49.407%2C4&" + 
                    "filter=type%21%3D*+or+type%3Away&" + 
                    "time=3%2FP8D&" + 
                    "values=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_596() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/density/groupBy/boundary?" + 
                    "bpolys=f%3A8.704561%2C49.403252%2C8.74445%2C49.413249%2C8.7045%2C49.4253%2C8.7010%2C49.4015%2C8.704561%2C49.403252&" + 
                    "filter=highway%3D*+or+not+type%3Anode+or+length%3A%28+..+100%29&" + 
                    "keys=highway&" + 
                    "showMetadata=false")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The keys, values and types parameters must be empty, when you set the filter parameter."));
    }
    
    
    @Test
    public void test_597() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area?" + 
                    "bcircles=8.713%2C49.804%2C9&" + 
                    "format=geoJSOn&" + 
                    "keys=evomaster_153124_ioput&" + 
                    "time=evomaster_153094_input&" + 
                    "types=&" + 
                    "values=kaSbSeO")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_598() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/ratio?" + 
                    "bboxes=8.697%2C49.4054%2C8.71975%2C49.394%7C8.6631%2C49.411%2C8.74615%2C49.393%7C8.670%2C49.423%2C8.749743%2C49.398&" + 
                    "filter2=foo&" + 
                    "keys=foo&" + 
                    "keys2=highway&" + 
                    "showMetadata=true&" + 
                    "types2=foo&" + 
                    "values=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Parameter 'types' (and 'types2') can only have 'node' and/or 'way' and/or 'relation' OR 'point' and/or 'line' and/or 'polygon' and/or 'other'"));
    }
    
    
    @Test
    public void test_599() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/key?" + 
                    "bboxes=&" + 
                    "bcircles=%3AMk&" + 
                    "filter=NwzXpQIx&" + 
                    "groupByKeys=evomaster_1870_input&" + 
                    "keys=evomaster_1871_input&" + 
                    "showMetadata=evomaster_1872_input&" + 
                    "types=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_600() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/groupBy/boundary?" + 
                    "bcircles=mdguO%3A8.709%2C49.400%2C1%7CF%3E8.724430%2C49.416%2C8&" + 
                    "filter=foo&" + 
                    "format=json&" + 
                    "showMetadata=foo&" + 
                    "timeout=48&" + 
                    "types=foo&" + 
                    "values=elevator")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_601() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/groupBy/tag?" + 
                    "bboxes=foo&" + 
                    "filter=evomaster_25564_input&" + 
                    "format=geojwon&" + 
                    "groupByKey=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22J%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.739695%2C49.400%5D%2C%5B8.7321%2C49.439%5D%2C%5B8.700%2C49.4193%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "keys=evomaster_25475_input&" + 
                    "timeout=62&" + 
                    "types=fopc")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("You need to give one groupByKey parameter, if you want to use groupBy/tag."));
    }
    
    
    @Test
    public void test_602() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/density/groupBy/tag?" + 
                    "bboxes=foo&" + 
                    "bpolys=yaI%3A8.704561%2C49.803252%2C8.71422%2C49.410%2C8.704661%2C49.405%2C8.703%2C49.4280%2C8.704561%2C49.42325&" + 
                    "filter=LyfRYIse389fBt8b&" + 
                    "format=evoiaster_95987_input&" + 
                    "groupByKey=yaI%3A8.704561%2C49.803252%2C8.71422%2C49.410%2C8.704661%2C49.405%2C8.703%2C49.4280%2C8.704561%2C49.42325&" + 
                    "keys=evoMaMtUU_UU738aiUUUU&" + 
                    "time=evomaster_97849_input&" + 
                    "timeout=55&" + 
                    "types=evomaster_97850_input&" + 
                    "values=evomaster_97739_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("You need to give one groupByKey parameter, if you want to use groupBy/tag."));
    }
    
    
    @Test
    public void test_603() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/density/groupBy/tag?" + 
                    "bpolys=yaIncm70Rj30U892803f52UXUUU422U49.U1U%2C8UU0U66U%2C%3C9U4054UUU0U%2CUU.4280UU.U04U%3A1U6UU42UU50&" + 
                    "filter=evomaster_95602_input&" + 
                    "format=Csv&" + 
                    "groupByKey=evom_ster_94116_input&" + 
                    "keys=evomaster_974%276_input&" + 
                    "showMetadata=evomaster_95988_input&" + 
                    "time=Tg1&" + 
                    "timeout=55&" + 
                    "types=evomaster_94882_inpu")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_604() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length?" + 
                    "bboxes=OizuY%3AU.6U6U47539UUU3U%2C8.70UUU7UUYUU4&" + 
                    "filter=&" + 
                    "keys=evomaster_157535_input&" + 
                    "showMetadata=false&" + 
                    "time=2013-04-28&" + 
                    "timeout=31&" + 
                    "values=evomaster_157536_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_605() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area?" + 
                    "bcircles=%3A%12%139%15%2C75.995%2C%3BR&" + 
                    "filter=evomaster_229593_input&" + 
                    "keys=evomasten_212198_input&" + 
                    "showMetadata=evomaster_330053_input&" + 
                    "time=Fwr786Re&" + 
                    "types=evomaster_217287_inpe&" + 
                    "values=evomaster_329868_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Each bcircle must consist of a lon/lat coordinate pair plus a buffer in meters."));
    }
    
    
    @Test
    public void test_606() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area?" + 
                    "bcircles=%3A%1221%15%2C75.997%2C%3BR&" + 
                    "filter=evomaster_229593_input&" + 
                    "format=e%C2%86omaster_1937%169_irput&" + 
                    "keys=evomaster_212998_input&" + 
                    "timeout=%184")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Each bcircle must consist of a lon/lat coordinate pair plus a buffer in meters."));
    }
    
    
    @Test
    public void test_607() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area?" + 
                    "bcircles=2.713%2C63.086%2C%3B&" + 
                    "keys=evomaster_208320_input&" + 
                    "showMetadata=evomaster_237129_i%7Epu&" + 
                    "time=evomaster_242516_input&" + 
                    "timeout=88&" + 
                    "values=%C2%89")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Each bcircle must consist of a lon/lat coordinate pair plus a buffer in meters."));
    }
    
    
    @Test
    public void test_608() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area?" + 
                    "bcircles=8.7e93%2C63.076%2C%3B&" + 
                    "filter=evomaster_554949_hnput&" + 
                    "format=gEOJsOn&" + 
                    "showMetadata=evomaster_237129_i%7Epu&" + 
                    "time=evomaster_242516_inpu&" + 
                    "values=yPo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Each bcircle must consist of a lon/lat coordinate pair plus a buffer in meters."));
    }
    
    
    @Test
    public void test_609() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/boundary/groupBy/tag?" + 
                    "bboxes=kiE6_&" + 
                    "bcircles=V&" + 
                    "bpolys=evomaster_318250_input&" + 
                    "filter=NK4EllUzFMc19e&" + 
                    "groupByKey=ndz%2CORoQqg5&" + 
                    "groupByValues=m6d4eslZTw3i&" + 
                    "keys=63q_&" + 
                    "timeout=mS9&" + 
                    "types=Ly&" + 
                    "values=wK81tNeS")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("You need to give one groupByKey parameter, if you want to use groupBy/tag."));
    }
    
    
    @Test
    public void test_610() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/density?" + 
                    "bboxes=T%3A8.69552%2C49.419%2C8.721%2C49.388&" + 
                    "filter=evomaster_51891_input&" + 
                    "keys=foo&" + 
                    "time=k%2F%2FP4M%2F7D&" + 
                    "values=ffU")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_611() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area?" + 
                    "bcircles=8.713%2C49.404%2C9&" + 
                    "filter=foo&" + 
                    "keys=evomaster_20319_input&" + 
                    "showMetadata=true&" + 
                    "time=2012%2F01-1%2F&" + 
                    "types=node%2C&" + 
                    "values=paph")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_612() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/density?" + 
                    "bboxes=TDA.%3DC55%3A%2C49.W19%2C8.7%401%2C09.388&" + 
                    "filter=&" + 
                    "format=evomaster_1262943_input&" + 
                    "showMetadata=foo&" + 
                    "time=%2F%2BP6M1%2FD&" + 
                    "values=fow")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_613() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/key?" + 
                    "format=csv&" + 
                    "groupByKeys=foo&" + 
                    "keys=highway&" + 
                    "showMetadata=no&" + 
                    "time=%2F%2FP3M28D&" + 
                    "timeout=29&" + 
                    "values=bus_stop")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("You need to define one of the boundary parameters (bboxes, bcircles, bpolys)."));
    }
    
    
    @Test
    public void test_614() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/density?" + 
                    "bcircles=z%3A8.73559%2C490421%2C80&" + 
                    "filter=foo&" + 
                    "format=foo&" + 
                    "keys=06&" + 
                    "showMetadata=foo&" + 
                    "time=%2F%2FP3M14D&" + 
                    "timeout=77&" + 
                    "values=secondary")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given parameter showMetadata can only contain the values 'true', 'yes', 'false', or 'no'."));
    }
    
    
    @Test
    public void test_615() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area?" + 
                    "bcircles=8.713%2C-5683D%2C9N&" + 
                    "filter=&" + 
                    "format=cSV&" + 
                    "keys=secondary&" + 
                    "showMetadata=&" + 
                    "values=6hr6%7EZlRN")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Each bcircle must consist of a lon/lat coordinate pair plus a buffer in meters."));
    }
    
    
    @Test
    public void test_616() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/ratio?" + 
                    "bboxes=J%3A8.6551%2C49.4133%2C8.737936%2C49.3822&" + 
                    "format=csv&" + 
                    "keys=higgwayPa&" + 
                    "keys2=UU&" + 
                    "time=2009-07%2F27&" + 
                    "types=J%3A8.6551%2C49.4137%2C8%2C737936%2C49%2F3816")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Parameter 'types' (and 'types2') cannot have more than 4 entries."));
    }
    
    
    @Test
    public void test_617() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/ratio/groupBy/boundary?" + 
                    "bpolys=8.704561%2C49.403252%2C8.7370%2C49.409%2C8.7487%2C49.427%2C8.744%2C49.436%2C8.704561%2C49.403252&" + 
                    "filter2=service%3Ddriveway+and+length%3A%28+..+100%29&" + 
                    "keys=highway&" + 
                    "timeout=34&" + 
                    "types2=way%2Crelation&" + 
                    "values=give_way&" + 
                    "values2=crossing")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("There cannot be more input values in the values|values2 than in the keys|keys2 parameter, as values_n must fit to keys_n."));
    }
    
    
    @Test
    public void test_618() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/density/groupBy/tag?" + 
                    "bpolys=yaI%3A8.704561%2C49.803252%2C8.71422%2C4%3A.410%2C8.704661%2C49.405%2C8.703%2C49.4280%2C8.704561%2C49.423252&" + 
                    "filter=evomaster_95602_input&" + 
                    "format=Csv&" + 
                    "groupByKey=evomaster_106749_input&" + 
                    "groupByValues=evomaster_97475_input&" + 
                    "time=Tg1&" + 
                    "timeout=55&" + 
                    "types=evomaster_94882_inpu&" + 
                    "values=primary_link")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_619() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/ratio?" + 
                    "bboxes=rUoUZ%3AU.65U6%2C74.4U0U%2C8UUU8%2C49.3822%7CgoU82UU%3E%2C49.422%2C8UU3372D%2C49UU%3B14&" + 
                    "keys2=foo&" + 
                    "types2=evomaster_415210_input&" + 
                    "values2=evomaster_415211_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("One or more boundary object(s) have a custom id (or at least a colon), whereas other(s) don't. You can either set custom ids for all your boundary objects, or for none."));
    }
    
    
    @Test
    public void test_620() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/density?" + 
                    "bboxes=GU%3A8.674%2C49.420%2C8.707166%2C49.3861%7Cj%3A8.69111%2C49.413999%2C8.7058%2C49.396%7CF%3A8.688535%2C49.4114%2C8.737%2C49.381&" + 
                    "filter=destination%21%3D*+and+geometry%3Aline+or+not+id%3A%281+..+9999%29&" + 
                    "format=foo&" + 
                    "time=2008-06-27&" + 
                    "timeout=51&" + 
                    "values=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given 'format' parameter is invalid. Please choose between 'geojson'(only available for /groupBy/boundary and data extraction requests), 'json', or 'csv'."));
    }
    
    
    @Test
    public void test_621() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area?" + 
                    "bcircles=8.713%2C49.404%2C9&" + 
                    "filter=foo&" + 
                    "keys=highway&" + 
                    "showMetadata=evomaster_1058_input&" + 
                    "time=2012-01-10&" + 
                    "timeout=80&" + 
                    "values=evomaster_1059_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given parameter showMetadata can only contain the values 'true', 'yes', 'false', or 'no'."));
    }
    
    
    @Test
    public void test_622() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/groupBy/tag?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollectgon%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22J%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704761%2C49.403252%5D%2C%5B8.739695%2C49.400%5D%2C%5B8.7321%2C49.439%5D%2C%5B8.700%2C49.4193%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=kpQq0hmYoj&" + 
                    "groupByKey=&" + 
                    "keys=evomaster_23911_input&" + 
                    "showMetadata=foo&" + 
                    "time=&" + 
                    "timeout=62&" + 
                    "values=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given GeoJSON has to be of the type 'FeatureCollection'."));
    }
    
    
    @Test
    public void test_623() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/key?" + 
                    "bpolys=U&" + 
                    "filter=H%5BZz7le%5EBPyqs&" + 
                    "format=%2C&" + 
                    "groupByKeys=%2C&" + 
                    "showMetadata=eovk_stfp_%2F9696-_no&" + 
                    "time=jumE%60&" + 
                    "types=O&" + 
                    "values=%3A")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("You need to give one groupByKeys parameter, if you want to use groupBy/key."));
    }
    
    
    @Test
    public void test_624() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/ratio/groupBy/boundary?" + 
                    "bcircles=yK%3A8.702%2C49.430%2C8&" + 
                    "keys2=highway&" + 
                    "timeout=32&" + 
                    "types2=node%2Cway%2C&" + 
                    "values2=turning_circle")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The filter2 parameter has to be defined when using a /ratio endpoint."));
    }
    
    
    @Test
    public void test_625() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/groupBy/tag?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22J%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704761%2C49.403252%5D%2C%5B8.739695%2C49.400%5D%2C%5B8.7321%2C49.439%5D%2C%5B8.700%2C49.4193%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=evomaster_23909_input&" + 
                    "groupByKey=evomaster_23910_input&" + 
                    "groupByValues=evomaster_5091_input&" + 
                    "keys=evomaster_23911_input&" + 
                    "showMetadata=foo&" + 
                    "time=evomaster_23912_input&" + 
                    "timeout=62&" + 
                    "values=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided GeoJSON cannot be converted."));
    }
    
    
    @Test
    public void test_626() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density/groupBy/tag?" + 
                    "bcircles=V%3A8.7091%2C49.403%2C94%7CNcZcv%3A8.701%2C49.434%2C7&" + 
                    "groupByKey=ahXcPkvA&" + 
                    "groupByValues=evomaster_536_input&" + 
                    "keys=highway&" + 
                    "time=foo&" + 
                    "timeout=79&" + 
                    "values=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_627() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22HMFES%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.704668%2C49.432473%5D%2C%5B8.734%2C49.43255%5D%2C%5B8.723%2C49.401%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22hgl%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.727%2C49.415%5D%2C%5B8.7052%2C49.435%5D%2C%5B8.7415%2C49.4007%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22xgEv%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3Ac%5B%5B8.704561%2C49.403252%5D%2C%5B8.706%2C49.4164%5D%2C%5B8.701%2C49.421%5D%2C%5B8.703032%2C49.4065%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=foo&" + 
                    "groupByKey=evomaster_4710_input&" + 
                    "groupByValues=foo&" + 
                    "showMetadata=true&" + 
                    "time=2016-06-30&" + 
                    "timeout=48&" + 
                    "types=foo&" + 
                    "values=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in reading of the given GeoJSON."));
    }
    
    
    @Test
    public void test_628() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/type?" + 
                    "bboxes=n4VbSO1VVLuE&" + 
                    "format=043&" + 
                    "showMetadata=xl1LI39sMSttb&" + 
                    "time=&" + 
                    "timeout=6fqbRRj")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_629() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density/groupBy/tag?" + 
                    "bpolys=czTN4j9BXVz%2CM_&" + 
                    "filter=ESIGGBy8h&" + 
                    "groupByKey=ET&" + 
                    "groupByValues=pd4HXJt&" + 
                    "showMetadata=1pCbYvQ_H&" + 
                    "time=HkcbGAtO&" + 
                    "values=5s9FJSrQkd")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The bpolys parameter must contain double-parseable values in form of lon/lat coordinate pairs."));
    }
    
    
    @Test
    public void test_630() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/density?" + 
                    "bboxes=8.678%2C49.41%2F%2C8.7379%2C49.385&" + 
                    "filter=evomaster_6055_input&" + 
                    "format=csv&" + 
                    "keys=highway&" + 
                    "showMetadata=foo&" + 
                    "timeout=54&" + 
                    "types=foo&" + 
                    "values=emergency_access_point")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Apart from the custom ids, the bboxeses array must contain double-parseable values in the following order: minLon, minLat, maxLon, maxLat."));
    }
    
    
    @Test
    public void test_631() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area?" + 
                    "bcircles=8%3E713%2C49.404%2C9&" + 
                    "format=foo&" + 
                    "keys=highway&" + 
                    "time=DRNS5nzo&" + 
                    "values=evomaster_11867_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Each bcircle must consist of a lon/lat coordinate pair plus a buffer in meters."));
    }
    
    
    @Test
    public void test_632() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/ratio/groupBy/boundary?" + 
                    "bpolys=DBZjW%3A8.704581%2C49.403252%2C8.716%2C49.417%2C8.7S9%2C49.4373%2C8.709%2C49.417%2C8.704561%2C49.403252&" + 
                    "filter=surface%21%3D*+or+length%3A%28+..+100%29&" + 
                    "filter2=foo&" + 
                    "format=csv&" + 
                    "keys=foo&" + 
                    "keys2=fo&" + 
                    "showMetadata=evomaster_53438_input&" + 
                    "types=fno&" + 
                    "types2=foo&" + 
                    "values2=evomaster_53439_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The bpolys parameter must contain double-parseable values in form of lon/lat coordinate pairs."));
    }
    
    
    @Test
    public void test_633() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/density/groupBy/tag?" + 
                    "bpolys=yaI%3A8.704561%2C49.403252%2C8.71422%2C49.410%2C8.704661%2C49.405%2C8.703%2C49.4280%2C8.704561%2C49.403252&" + 
                    "filter=foo&" + 
                    "format=json&" + 
                    "groupByKey=boo&" + 
                    "groupByValues=evomaster_113003_input&" + 
                    "keys=highway&" + 
                    "time=%2F%2FP11D4&" + 
                    "timeout=55&" + 
                    "values=primary_link")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The interval (period) of the provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_634() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area?" + 
                    "bcircles=9.919%2C75.996%2C%3BR&" + 
                    "filter=evomaster_284944_input&" + 
                    "format=OCtEt-sTReAM&" + 
                    "keys=evomaster_284945_input&" + 
                    "showMetadata=evomaster_284946_input&" + 
                    "time=ClAF1RWp9&" + 
                    "types=J%3DR")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Each bcircle must consist of a lon/lat coordinate pair plus a buffer in meters."));
    }
    
    
    @Test
    public void test_635() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area?" + 
                    "bcircles=%3A%1231%15%2C75.997%2C%3BR&" + 
                    "filter=evomaster_229593_input&" + 
                    "showMetadata=evomaster_217288_input&" + 
                    "time=evomaster_202021_input&" + 
                    "timeout=%184&" + 
                    "types=evomaster_217287_inpe&" + 
                    "values=yP%7B")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Each bcircle must consist of a lon/lat coordinate pair plus a buffer in meters."));
    }
    
    
    @Test
    public void test_636() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area?" + 
                    "bcircles=8.713%2C-1202D%2C9&" + 
                    "showMetadata=&" + 
                    "time=Q%2F&" + 
                    "types=POint")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_637() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/ratio/groupBy/boundary?" + 
                    "bboxes=j%3A8.6887%2C49.423412%2C8.714%2C49.39791&" + 
                    "filter=bicycle%21%3D*+and+geometry%3Apoint&" + 
                    "time=2013-07-20")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The filter2 parameter has to be defined when using a /ratio endpoint."));
    }
    
    
    @Test
    public void test_638() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/density?" + 
                    "bboxes=T%3A8.69552%2C49.419%2C8.721%2C49.388&" + 
                    "filter=evomaster_51891_input&" + 
                    "format=csv&" + 
                    "time=%2F%2FP6M1%2FD")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_639() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/density?" + 
                    "bboxes=T%3A8.69552%2C49.419%2C8.721%2C49.388&" + 
                    "keys=evomaster_1255271_input&" + 
                    "time=%2F%2BP6M1%2FD&" + 
                    "values=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_640() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area?" + 
                    "bcircles=8.713%2C69.804%2C%3B&" + 
                    "filter=evomaster_154949_hnput&" + 
                    "format=Csv&" + 
                    "time=evomaster_154333_input&" + 
                    "timeout=88&" + 
                    "types=JMR&" + 
                    "values=evomaster_153096_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Each bcircle must consist of a lon/lat coordinate pair plus a buffer in meters."));
    }
    
    
    @Test
    public void test_641() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/boundary?" + 
                    "bcircles=&" + 
                    "format=Nu9&" + 
                    "keys=o_o&" + 
                    "time=mAWDvn9RiVqL1JNi&" + 
                    "timeout=lOxP4dVWR&" + 
                    "types=rIl8gj")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/density/groupBy/boundary?" + 
                    "bboxes=RSdTcJ8Tb8E&" + 
                    "bcircles=Y&" + 
                    "bpolys=RsK3a2OqcNHKHed&" + 
                    "filter=R2DM3zdg0&" + 
                    "format=9&" + 
                    "keys=Hajm08SBX&" + 
                    "showMetadata=7Cn&" + 
                    "types=oED9Ki0RL")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/groupBy/type")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("You need to define one of the boundary parameters (bboxes, bcircles, bpolys)."));
    }
    
    
    @Test
    public void test_642() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/density?" + 
                    "bboxes=T%3A8.69552%2C49.419%2C8.721%2C49.388&" + 
                    "filter=evomaster_51891_input&" + 
                    "keys=foo&" + 
                    "time=k%2F%2FP6M17D")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_643() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/tag?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22%3BWP%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Lxlwiln%22%2C%22coordinates%22%3A%5B%5B%5B8.704569%2C49.403252%5D%2C%5B8.738%2C49.41663%5D%2C%5B8.70892%2C49.416%5D%2C%5B8.7036%2C49.408%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "format=csv&" + 
                    "groupByKey=rQS0PVIUw%C2%84zPK77&" + 
                    "groupByValues=f&" + 
                    "keys=evomaster_1459426_input&" + 
                    "showMetadata=&" + 
                    "time=mU%40b0Zf&" + 
                    "types=LOv")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given custom ids cannot contain semicolons, if you want to use csv as output format."));
    }
    
    
    @Test
    public void test_644() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area?" + 
                    "bcircles=%3A%1233%15%2C75.997%2C%3BR&" + 
                    "filter=evomaster_229593_input&" + 
                    "format=evomaster_193769_irput&" + 
                    "showMetadata=evomaster_217288_input&" + 
                    "timeout=%184&" + 
                    "types=evomaster_217287_inpe&" + 
                    "values=yP%7B")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Each bcircle must consist of a lon/lat coordinate pair plus a buffer in meters."));
    }
    
    
    @Test
    public void test_645() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/density?" + 
                    "bboxes=K%3A8.6586%2C49.418%2C8.751552%2C49.392%7Ch%3A8.6914%2C49.423%2C8.7270%2C49.380&" + 
                    "filter=evomaster_3878_input&" + 
                    "showMetadata=false&" + 
                    "time=%2F%2FP4D&" + 
                    "timeout=49")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Invalid filter syntax. Please look at the additional info and examples about the filter parameter at https://docs.ohsome.org/ohsome-api. Detailed error message: line 1, column 21: whitespaces, EQUALS (=), NOT_EQUALS (!=) or in expected, EOF encountered."));
    }
    
    
    @Test
    public void test_646() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area?" + 
                    "bcircles=8.713%2C11.804%2C9&" + 
                    "filter=foo&" + 
                    "format=Csv&" + 
                    "time=evomaster_163549_input&" + 
                    "timeout=80&" + 
                    "types=poiNt")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_647() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area?" + 
                    "bboxes=8.674%2C49.426%2C8.704%2C49.381%7C8.6776%2C49.428%2C8.720%2C49.3844&" + 
                    "filter=bmo&" + 
                    "format=csv&" + 
                    "keys=UiWlt_&" + 
                    "showMetadata=yes&" + 
                    "time=2017-12%2F%2FU&" + 
                    "timeout=70&" + 
                    "types=point%2Cpolygon&" + 
                    "values=steps")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The interval (period) of the provided time parameter is not ISO-8601 conform."));
    }
    
    
    @Test
    public void test_648() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter?" + 
                    "bboxes=J8qzjp_mHmmu&" + 
                    "bcircles=jTggqc4_WSkVo&" + 
                    "bpolys=Z8zY4iA2Edf&" + 
                    "timeout=240&" + 
                    "values=NDAAjMeEA")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout is too long. It has to be shorter than 100.0 seconds"));
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter?" + 
                    "bpolys=R1V7buU&" + 
                    "filter=stnE5wstwM67&" + 
                    "keys=P4Cg4GPxG&" + 
                    "time=OMn4JDi77e&" + 
                    "types=GCL0fqHg2yugFrMT")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter?" + 
                    "bboxes=63K2VxdKY&" + 
                    "bcircles=mGIFMUkVjIQh7INd&" + 
                    "bpolys=Of4RviX&" + 
                    "format=6fmuEzr&" + 
                    "showMetadata=8EhfEOd19dkh7&" + 
                    "time=cpkHoHjiWSQCwvgE&" + 
                    "timeout=9AMNcynlbTkvx&" + 
                    "types=LUqylwzdacLaEUc5")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter?" + 
                    "format=5HTjUoFi8TH4&" + 
                    "keys=pazqjt&" + 
                    "time=&" + 
                    "types=4Q7FOjR6sPd0sC")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("You need to define one of the boundary parameters (bboxes, bcircles, bpolys)."));
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter?" + 
                    "bcircles=MEFlkgZA&" + 
                    "filter=l&" + 
                    "values=aBm0upxfr4gTQx")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter?" + 
                    "format=aFhjnJpw9ruS&" + 
                    "keys=v5r&" + 
                    "values=C20SrP9i3Gx")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("You need to define one of the boundary parameters (bboxes, bcircles, bpolys)."));
    }
    
    
    @Test
    public void test_649() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/groupBy/type?" + 
                    "bboxes=6G5b8AA2IoVzC&" + 
                    "filter=ryfel4lvsTX&" + 
                    "format=Z9sw&" + 
                    "keys=2MT3uv")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_650() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/density/groupBy/tag?" + 
                    "bcircles=wgF&" + 
                    "filter=xOpK&" + 
                    "groupByKey=o8&" + 
                    "groupByValues=Mb3VVJ_e2adu&" + 
                    "keys=llP_O0A&" + 
                    "showMetadata=IXoruOakpl&" + 
                    "time=siuvz9&" + 
                    "types=V259W7QLT&" + 
                    "values=vXoph")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_651() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/tag?" + 
                    "bpolys=uoZ_pQm&" + 
                    "filter=WK9e&" + 
                    "groupByKey=cx4MPMGqYCDHwx&" + 
                    "groupByValues=XObbuBZU2uyFsGZ8&" + 
                    "time=n&" + 
                    "values=7nleAX")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_652() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/tag?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22FWP%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Lolygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704569%2C49.403252%5D%2C%5B8.738%2C49.41663%5D%2C%5B8.70892%2C49.416%5D%2C%5B8.7036%2C49.408%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=foo&" + 
                    "format=csv&" + 
                    "groupByKey=evomaster_458007_input&" + 
                    "groupByValues=evomaster_54484_input&" + 
                    "showMetadata=evomaster_54485ginput&" + 
                    "time=foo&" + 
                    "types=foo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The geometry of each feature in the GeoJSON has to be of type 'Polygon' or 'MultiPolygon'."));
    }
    
    
    @Test
    public void test_653() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area?" + 
                    "bcircles=%3A-100%2C75.996%2C%3BRx&" + 
                    "filter=k&" + 
                    "format=OCtEt-sTReAM&" + 
                    "showMetadata=evomaster_489663_input&" + 
                    "time=e%7Eomaster_483717Oinput&" + 
                    "types=l8aR1P&" + 
                    "values=ank6KaAbYuNc")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Each bcircle must consist of a lon/lat coordinate pair plus a buffer in meters."));
    }
    
    
    @Test
    public void test_654() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area?" + 
                    "bcircles=8.713%2C63.086%2C%3B&" + 
                    "filter=evomaster_554949_hnput&" + 
                    "format=gEOJson&" + 
                    "keys=evomaster_208320_input&" + 
                    "showMetadata=evomaster_237129_i%7Eput&" + 
                    "time=evomaster_242516_input&" + 
                    "timeout=88&" + 
                    "types=J%2CR&" + 
                    "values=yPo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Each bcircle must consist of a lon/lat coordinate pair plus a buffer in meters."));
    }
    
    
    @Test
    public void test_655() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area?" + 
                    "bcircles=8.713%2C-1.02D%2C9&" + 
                    "filter=evomaster_163667_imput&" + 
                    "format=Csv&" + 
                    "showMetadata=&" + 
                    "time=%2F&" + 
                    "types=poINt&" + 
                    "values=6hr6%7EZhRN")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The keys, values and types parameters must be empty, when you set the filter parameter."));
    }
    
    
    @Test
    public void test_656() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area?" + 
                    "bcircles=8.713%2C75.996%2C%3B&" + 
                    "format=json&" + 
                    "keys=YKY&" + 
                    "time=evomaster_202021_input&" + 
                    "values=yPo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Each bcircle must consist of a lon/lat coordinate pair plus a buffer in meters."));
    }
    
    
    @Test
    public void test_657() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/ratio?" + 
                    "bboxes=h%3A8.681%2C49.425%2C8.75909%2C49.3957%7CVr%3A8.65595%2C49.421%2C8.752289%2C49.385%7CK%3A8.694953%2C49.414%2C8.707%2C49.3922&" + 
                    "filter=network%21%3D*+or+type%3Away+and+not+length%3A%28+..+100%29&" + 
                    "keys2=highway&" + 
                    "values2=secondary_link")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The filter2 parameter has to be defined when using a /ratio endpoint."));
    }
    
    
    @Test
    public void test_658() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area?" + 
                    "bcircles=82717%2C75.996%2C%3BR&" + 
                    "filter=evomaster_554949_hnput&" + 
                    "format=evomaster_153769_irput&" + 
                    "keys=YKY&" + 
                    "timeout=88&" + 
                    "types=J%3DR&" + 
                    "values=yPo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Each bcircle must consist of a lon/lat coordinate pair plus a buffer in meters."));
    }
    
    
    @Test
    public void test_659() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/key?" + 
                    "bpolys=8.704561%2C49.403252%2C8.736%2C49.4348%2C8.712%2C49.4261%2C8.705%2C49.414%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.712%2C49.404%2C8.71461%2C49.420%2C8.717%2C49.402083%2C0.704561%2C49.403252&" + 
                    "filter=foo&" + 
                    "format=Csv&" + 
                    "groupByKeys=name%2Ctracktype%2Caddr%3Apostcode&" + 
                    "keys=foo&" + 
                    "showMetadata=foo&" + 
                    "values=evomaster_89983_input")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given parameter showMetadata can only contain the values 'true', 'yes', 'false', or 'no'."));
    }
    
    
    @Test
    public void test_660() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/type?" + 
                    "bboxes=YeK%3A8.694%2C49.424299%2C8.709%2C49.3834&" + 
                    "bcircles=z%3A8.722928%2C49.416%2C15%7CVo%3A8.7349%2C49.422286%2C1&" + 
                    "bpolys=nps%3A8.704561%2C49.403252%2C8.713%2C49.436%2C8.70256%2C49.40581%2C8.74993%2C49.439%2C8.704561%2C49.403252%7CAaoIc%3A8.704561%2C49.403252%2C8.7260%2C49.421%2C8.72369%2C49.4201%2C8.7094%2C49.414%2C8.704561%2C49.403252%7Cb%3A8.704561%2C49.403252%2C8.704%2C49.429%2C8.7418%2C49.437%2C8.741624%2C49.413859%2C8.704561%2C49.403252&" + 
                    "filter=turn%3D*+or+geometry%3Aline+or+not+length%3A%28+..+100%29&" + 
                    "format=geojson&" + 
                    "keys=highway&" + 
                    "timeout=72")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_661() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/density?" + 
                    "bboxes=K%3A8.6586%2C49.418%2C8.751552%2C49.392%7Ch%3A8.4914%2C49.423%2C8.7270%2C49.380&" + 
                    "format=foo&" + 
                    "showMetadata=evomaster_42004_input&" + 
                    "time=R&" + 
                    "timeout=49")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_662() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/groupBy/tag?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22J%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.739695%2C49.400%5D%2C%5B8.7321%2C49.439%5D%2C%5B8.300%2C49.4193%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=evomaster_13097_input&" + 
                    "format=geojson&" + 
                    "groupByKey=evomaster_13132_input&" + 
                    "keys=JCEvIhK5bNmR&" + 
                    "time=evomaster_13133_input&" + 
                    "timeout=62&" + 
                    "types=fop")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_663() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density?" + 
                    "bcircles=8.705%2C49.61973%2C7%7C8.741%2C49.410281%2C772%7C8.743%2C49.43994%2C24%7C8.7395%2C49.4379%2C36&" + 
                    "filter=evomaster_35913_input&" + 
                    "format=foo&" + 
                    "showMetadata=evomaster_16521_input&" + 
                    "time=EWXOwCNZtueY&" + 
                    "timeout=20&" + 
                    "types=evomaster_27693_input")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_664() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/ratio/groupBy/boundary?" + 
                    "bcircles=Y%3A8.7183%2C49.4364%2C7%7Cy%3A8.724%2C49.4042%2C5%7Cug%3A8.747712%2C49.600%2C2&" + 
                    "filter=foo&" + 
                    "filter2=landuse%3D*+and+id%3A%281+..+9999%29&" + 
                    "format=evomaster_34130_input&" + 
                    "keys2=evomaster_23810_input&" + 
                    "showMetadata=foo&" + 
                    "time=evomaster_34131_input&" + 
                    "timeout=71&" + 
                    "types=evomaster_23811_input&" + 
                    "types2=evomaster_34132_input&" + 
                    "values=evomaster_23812_input")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_665() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/density?" + 
                    "bboxes=T%3A8.59552%2C49.419%2C8.721%2C49.38&" + 
                    "filter=evomaster_1175383_input&" + 
                    "keys=evomaster_1175379_input&" + 
                    "time=k%2F3P6U17D&" + 
                    "types=foo&" + 
                    "values=")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_666() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/key?" + 
                    "bpolys=8.704561%2C49.403252%2C8.736%2C49.4348%2C8.712%2C49.4261%2C8.705%2C49.614%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.712%2C49.404%2C8.71461%2C49.420%2C8.717%2C49.402083%2C0.704561%2C49.403252&" + 
                    "filter=evomaster_92010_input&" + 
                    "format=cSV&" + 
                    "groupByKeys=evomaster_92011_input&" + 
                    "keys=evomaster_90988_input&" + 
                    "showMetadata=rGj&" + 
                    "time=WScBedG3TczFEOV5&" + 
                    "types=evomaster_92012_input")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_667() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length?" + 
                    "bboxes=OizuY%3A8.676349%2C49.4210%2C0.700%2C49.39034&" + 
                    "filter=cUB_lkp9B&" + 
                    "keys=evomaster_179846_input&" + 
                    "showMetadata=false&" + 
                    "time=2013-04-20&" + 
                    "timeout=31")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_668() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/ratio?" + 
                    "bboxes=8.697%2C49.4054%2C8.71975%2C49.394%7C8.6631%2C49.411%2C8.74615%2C49.593%7C8.670%2C49.423%2C8.749743%2C49.398&" + 
                    "filter=noo&" + 
                    "filter2=foo&" + 
                    "keys2=highway&" + 
                    "showMetadata=true&" + 
                    "time=evomaster_1691919_input&" + 
                    "types=fmo&" + 
                    "types2=foq&" + 
                    "values2=pathF")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_669() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/density/groupBy/type?" + 
                    "bcircles=q%3A8.730093%2C49.4303%2C35%7CXSy%3A8.749020%2C49.420%2C8%7CPg%3A8.705%2C49.4101%2C2%7Cvj%3A8.7217%2C49.607%2C4&" + 
                    "showMetadata=foo&" + 
                    "time=33P8D&" + 
                    "types=foo&" + 
                    "values=foo")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_670() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/groupBy/boundary?" + 
                    "bpolys=8.704561%2C49.403252%2C8.7477%2C49.413146%2C8.742881%2C49.433985%2C8.73263%2C49.430%2C8.704561%2C49.40325&" + 
                    "filter=foo&" + 
                    "format=evomaster_439097_input&" + 
                    "showMetadata=foo&" + 
                    "time=evomaster_439096_input&" + 
                    "values=primary_lenk")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_671() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/tag?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22FWP%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.738%2C49.41663%5D%2C%5B0.70892%2C49.416%5D%2C%5B8.7036%2C49.408%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=evomaster_456023_input&" + 
                    "format=cs&" + 
                    "groupByKey=xuLPHwXUI24&" + 
                    "groupByValues=evomaster_54484_input&" + 
                    "keys=evomaster_54235_input&" + 
                    "showMetadata=9theESI&" + 
                    "time=foo&" + 
                    "types=foo")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_672() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/density/groupBy/type?" + 
                    "bcircles=i%3A8.744%2C49.403%2C439603064%7CU%3A8.74467%2C59.4376%2C3%7CYO%3A8.70773%2C49.419%2C1&" + 
                    "filter=foo&" + 
                    "time=2016-07-31&" + 
                    "values=foo")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_673() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/ratio/groupBy/boundary?" + 
                    "bboxes=q%3A8.685296%2C49.810%2C8.746011%2C49.385&" + 
                    "timeout=39&" + 
                    "types=foo&" + 
                    "types2=foo&" + 
                    "values2=foo")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_674() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/ratio/groupBy/boundary?" + 
                    "bboxes=8.656%2C49.421%2C8.7576%2C49.385%7C8.691%2C49.4039%2C8.755%2C49.396&" + 
                    "filter=ref%3D*+and+type%3Away+or+not+length%3A%28+..+100%29&" + 
                    "filter2=foo&" + 
                    "format=csv&" + 
                    "keys=foo&" + 
                    "showMetadata=true&" + 
                    "time=2001-12-27&" + 
                    "types2=ref%3D*+and+type%3Away+or+not+length%3A%28+..+100%29&" + 
                    "values2=foo")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The given time parameter is not completely within the timeframe (2007-10-07 to 2018-05-10T"));
    }
    
    
    @Test
    public void test_675() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/density?" + 
                    "bcircles=cjNJs%3A8.708934%2C49.004%2C6%7CXWVda%3A8.73245%2C49.400%2C2%7CPhlAE%3A8.739%2C49.427%2C3&" + 
                    "filter=foo&" + 
                    "format=fo&" + 
                    "keys=highway&" + 
                    "showMetadata=evomaster_684336_input&" + 
                    "time=foo&" + 
                    "timeout=25")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_676() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/groupBy/tag?" + 
                    "bboxes=nn%3A8.699%2C49.4081%2C8.734%2C49.390%7CwSl%3A8.490155%2C49.40805%2C8.718084%2C49.397&" + 
                    "format=foo&" + 
                    "groupByKey=bujlding&" + 
                    "groupByValues=service%2Cyes&" + 
                    "showMetadata=yes&" + 
                    "time=foo&" + 
                    "types=foo")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_677() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/ratio/groupBy/boundary?" + 
                    "bboxes=8.274%2C49.4203%2C8.705150%2C49.383%7C8.689%2C49.413%2C8.711%2C49.390&" + 
                    "keys2=evomaster_1119495_input&" + 
                    "showMetadata=foo&" + 
                    "time=2015-10-03&" + 
                    "types2=foo&" + 
                    "values2=stepsR")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_678() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/density/groupBy/type?" + 
                    "bpolys=LNJSl%3A8.704561%2C49.403252%2C8.7264%2C49.438755%2C8.705%2C49.41987%2C8.7055%2C49.4253%2C8.704561%2C49.40325&" + 
                    "filter=highway%21%3D*+and+length%3A%28+..+100%29&" + 
                    "format=foo&" + 
                    "keys=foo&" + 
                    "showMetadata=Kd24eEZvca26oa8l&" + 
                    "timeout=6")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_679() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/ratio?" + 
                    "bboxes=J%3A8.6550%2C4924137%2C8.737936%2C49.3822&" + 
                    "format=csv&" + 
                    "keys=higgwa%7BPaW&" + 
                    "keys2=emU&" + 
                    "time=2%2F%2B9307%2F27A&" + 
                    "types2=fok%3A")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_680() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/density/groupBy/tag?" + 
                    "bboxes=D%3A8.684%2C49.325935%2C8.7205%2C49.387&" + 
                    "filter=doU&" + 
                    "format=foo&" + 
                    "groupByKey=evomaster_498829_input&" + 
                    "groupByValues=srfiuGxkFAJ30&" + 
                    "keys=evomaster_1759875_input&" + 
                    "time=4%2C07-11-23&" + 
                    "timeout=21&" + 
                    "types=foo&" + 
                    "values=highwa%7B")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_681() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=d%3A8.704561%2C49.403252%2C8.728199%2C49.4012%2C8.70853%2C49.4218%2C8.709%2C49.4154%2C8.704561%2C49.40325&" + 
                    "format=csv&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=foo&" + 
                    "showMetadata=fko&" + 
                    "time=foo&" + 
                    "values=foo")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_682() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22aFDFI%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.719%2C49.026766%5D%2C%5B8.704770%2C49.435279%5D%2C%5B8.7431%2C49.434591%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "groupByKey=fighway&" + 
                    "groupByValues=foo&" + 
                    "keys=highway&" + 
                    "showMetadata=false&" + 
                    "time=2012-03-27&" + 
                    "types=foo")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_683() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/density/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=O%3A8.704561%2C49.403252%2C8.705%2C49.4092%2C8.732%2C49.429%2C8.702%2C49.417%2C8.704561%2C49.40325&" + 
                    "filter=foo&" + 
                    "format=fUn&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=foo&" + 
                    "showMetadata=foo&" + 
                    "timeout=0.4228463597361206&" + 
                    "types=foo&" + 
                    "values=fooC")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_684() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/density/groupBy/boundary?" + 
                    "bpolys=qh%3A8.704561%2C49.404252%2C8.743%2C49.426%2C8.72159%2C49.433%2C8.701%2C49.4097%2C8.704561%2C49.403252&" + 
                    "filter=smoothness%3D*+and+type%3Away&" + 
                    "format=csv&" + 
                    "keys=foo&" + 
                    "showMetadata=foo&" + 
                    "timeout=92&" + 
                    "values=YuphwlIgP7yGA")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_685() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/ratio/groupBy/boundary?" + 
                    "bboxes=U%3A8.694742%2C49.4030%2C8.72168%2C49.387%7CUXgfc%3A8.63964%2C49.417289%2C8.741%2C49.38824&" + 
                    "filter=foo&" + 
                    "keys=highway&" + 
                    "keys2=highway&" + 
                    "time=foo&" + 
                    "types=foo&" + 
                    "types2=foo&" + 
                    "values=foo&" + 
                    "values2=foo")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_686() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/density?" + 
                    "bboxes=yysoI%3A8.69666%2C49.411%2C8.749%2C492387&" + 
                    "filter=p34T20&" + 
                    "format=foo&" + 
                    "keys=highway&" + 
                    "showMetadata=evomaster_1571587_input&" + 
                    "types=foo&" + 
                    "values=servicd")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_687() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/ratio/groupBy/boundary?" + 
                    "bcircles=8.711%2C49.6116%2C5%7C8.716%2C49.4086%2C1&" + 
                    "filter=desthnation%3D*+or+geometry%3Aline&" + 
                    "filter2=ref%21%3D*+and+not+id%3A%281+..+9999%27&" + 
                    "format=foo&" + 
                    "keys2=evomaster_173133%2C_inpu&" + 
                    "showMetadata=evomaster_1731413_input&" + 
                    "time=fo&" + 
                    "types=foo&" + 
                    "types2=line%2Cother&" + 
                    "values=fmU")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_688() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/density/groupBy/boundary?" + 
                    "bcircles=Kznr%3A8.700%2C49.649%2C3&" + 
                    "filter=&" + 
                    "format=csv&" + 
                    "keys=highwdm&" + 
                    "showMetadata=false&" + 
                    "time=2018-12-23")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The given time parameter is not completely within the timeframe (2007-10-07 to 2018-05-10T"));
    }
    
    
    @Test
    public void test_689() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/density/groupBy/type?" + 
                    "bcircles=awTA%3A8.749%2C49.831%2C7&" + 
                    "filter=foo&" + 
                    "format=json&" + 
                    "keys=highway&" + 
                    "showMetadata=false&" + 
                    "time=6009-07-28")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The given time parameter is not completely within the timeframe (2007-10-07 to 2018-05-10T"));
    }
    
    
    @Test
    public void test_690() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/density/groupBy/tag?" + 
                    "bpolys=yaI%3A8.704561%2C49.403252%2C8.71422%2C49.410%2C8.704661%2C49.405%2C8.703%2C49.4280%2C8.704561%2C49.80325&" + 
                    "filter=foo&" + 
                    "format=json&" + 
                    "groupByKey=bok&" + 
                    "keys=highway&" + 
                    "time=evomaster_140219_input&" + 
                    "timeout=55")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_691() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/density/groupBy/tag?" + 
                    "bpolys=yaI%3A8.704561%2C49.803252%2C8.71422%2C49.410%2C8.704661%2C49.405%2C8.703%2C49.4280%2C8.704561%2C49.403252&" + 
                    "filter=evomaster_94115_input&" + 
                    "format=jsov&" + 
                    "groupByKey=evomaster_94116_input&" + 
                    "groupByValues=foo&" + 
                    "showMetadata=foo&" + 
                    "time=evomaster_93507_input&" + 
                    "types=foo")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_692() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area?" + 
                    "bcircles=8.713%2C49.404%2C9&" + 
                    "filter=foo&" + 
                    "keys=evomaster_3403_input&" + 
                    "showMetadata=true&" + 
                    "time=2812-01-10&" + 
                    "timeout=80&" + 
                    "types=node%2C&" + 
                    "values=path")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The given time parameter is not completely within the timeframe (2007-10-07 to 2018-05-10T"));
    }
    
    
    @Test
    public void test_693() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/density?" + 
                    "bcircles=mMSWO%3A8.746431%2C49.408%2C6&" + 
                    "filter=foo&" + 
                    "format=json&" + 
                    "keys=foo&" + 
                    "showMetadata=yes&" + 
                    "time=1007-10-29&" + 
                    "timeout=64&" + 
                    "values=foo")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The given time parameter is not completely within the timeframe (2007-10-07 to 2018-05-10T"));
    }
    
    
    @Test
    public void test_694() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/ratio/groupBy/boundary?" + 
                    "bpolys=DBZjW%3A8.704581%2C49.403252%2C8.716%2C49.417%2C8.739%2C49.4373%2C8.709%2C49.417%2C8.704561%2C49.403252&" + 
                    "filter=surface%21%3D*+or+length%3A%28+..+100%29&" + 
                    "filter2=foo&" + 
                    "keys=foo&" + 
                    "keys2=foo&" + 
                    "time=2009-09-20&" + 
                    "types=foo&" + 
                    "types2=foo&" + 
                    "values=foo&" + 
                    "values2=foo")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("The provided boundary parameter does not lie completely within the underlying data-extract polygon."));
    }
    
    
    @Test
    public void test_695() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area?" + 
                    "bcircles=8.713%2C11.004%2C9&" + 
                    "keys=3ESQParOsVs&" + 
                    "showMetadata=&" + 
                    "timeout=00")
                .then()
                .statusCode(413)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(413.0))
                .body("'message'", containsString("The given query is too large in respect to the given timeout. Please use a smaller region and/or coarser time period."));
    }
    
    
    @Test
    public void test_696() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/density/groupBy/boundary?" + 
                    "bcircles=Lzot%3A5.720%2C78.879%2C3&" + 
                    "bpolys=&" + 
                    "filter=&" + 
                    "keys=qpPba%5Dv0U&" + 
                    "timeout=-838.4504833474272&" + 
                    "types=")
                .then()
                .statusCode(413)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(413.0))
                .body("'message'", containsString("The given query is too large in respect to the given timeout. Please use a smaller region and/or coarser time period."));
    }
    
    
    @Test
    public void test_697() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/density/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=O%3A8.704561%2C49.403252%2C8.705%2C49.4092%2C8.732%2C49.429%2C8.702%2C49.417%2C8.704561%2C49.403252&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=foo&" + 
                    "timeout=0.2301134052659881")
                .then()
                .statusCode(413)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(413.0))
                .body("'message'", containsString("The given query is too large in respect to the given timeout. Please use a smaller region and/or coarser time period."));
    }
    
    
    @Test
    public void test_698() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/ratio/groupBy/boundary?" + 
                    "bcircles=8.719%2C49.449996%2C2%7C8.766%2C49.424%2C7&" + 
                    "keys=fkov&" + 
                    "keys2=f&" + 
                    "showMetadata=yes&" + 
                    "time=2013-12-11&" + 
                    "timeout=0")
                .then()
                .statusCode(413)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(413.0))
                .body("'message'", containsString("The given query is too large in respect to the given timeout. Please use a smaller region and/or coarser time period."));
    }


}
