package old;

import org.heigit.ohsome.ohsomeapi.EMDriver;
import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.controller.api.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import static org.evomaster.client.java.controller.db.dsl.SqlDsl.sql;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto;
import  java.util.List;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
 * This file was automatically generated by EvoMaster on 2020-11-19T13:58:41.476+01:00[Europe/Paris]
 * <br>
 * The generated test suite contains 234 tests
 * <br>
 * Covered targets: 4754
 * <br>
 * Used time: 0h 0m 45s
 * <br>
 * Needed budget for current results: 100%
 * <br>
 * 
 */
public class EvoMasterTest_eval_244_seed_122 {

    
    private static final SutHandler controller = new EMDriver();
    private static String baseUrlOfSut;
    
    
    @BeforeClass
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    @AfterClass
    public static void tearDown() {
        controller.stopSut();
    }
    
    
    @Before
    public void initTest() {
        controller.resetStateOfSUT();
    }
    
    
    
    
    @Test
    public void test_0_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/groupBy/key?" + 
                    "bpolys=yQF%3A8.704561%2C49.403252%2C8.74609%2C49.411%2C8.705%2C49.4044%2C8.704954%2C49.412554%2C8.704561%2C49.403252%7CL%3A8.704561%2C49.403252%2C8.713486%2C49.434%2C8.74871%2C49.401%2C8.720%2C49.4039%2C8.704561%2C49.403252%7CmV%3A8.704561%2C49.403252%2C8.734%2C49.425%2C8.72634%2C49.409%2C8.702%2C49.41086%2C8.704561%2C49.403252&" + 
                    "format=json&" + 
                    "groupByKeys=source%3Amaxspeed%2Caddr%3Apostcode%2Cturn&" + 
                    "keys=highway&" + 
                    "showMetadata=false&" + 
                    "timeout=87&" + 
                    "values=unclassified")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.74609 49.411 ) and LINESTRING ( 8.72 49.4039, 8.704561 49.403252 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/users/count/groupBy/key"));
    }
    
    
    @Test
    public void test_1_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count?" + 
                    "bpolys=iNUKc%3A8.704561%2C49.403252%2C8.739631%2C49.439%2C8.704%2C49.4194%2C8.73218%2C49.423%2C8.704561%2C49.403252&" + 
                    "keys=highway&" + 
                    "showMetadata=yes&" + 
                    "timeout=33")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.739631 49.439 ) and LINESTRING ( 8.704 49.4194, 8.73218 49.423 ) [ (8.722752997142205, 49.42179569871228, NaN) ]"))
                .body("'path'", containsString("/users/count"));
    }
    
    
    @Test
    public void test_2_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/density/groupBy/tag?" + 
                    "bcircles=8.7414%2C49.4198%2C6%7C8.701%2C49.405%2C5%7C8.732%2C49.434%2C815478014&" + 
                    "filter=lanes%3Abackward%21%3D*+or+type%3Arelation&" + 
                    "format=geojson&" + 
                    "groupByKey=building&" + 
                    "groupByValues=give_way%2Csynagogue%2Cstation&" + 
                    "time=2014-09-19&" + 
                    "timeout=22")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El Ã¡ngulo 2.109.395.394.355.041.280 es demasiado grande."))
                .body("'path'", containsString("/elements/perimeter/density/groupBy/tag"));
    }
    
    
    @Test
    public void test_3_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/density/groupBy/boundary?" + 
                    "bpolys=d%3A8.704561%2C49.403252%2C8.722%2C49.439187%2C8.712%2C49.404%2C8.709%2C49.413%2C8.704561%2C49.403252&" + 
                    "keys=highway&" + 
                    "showMetadata=yes&" + 
                    "time=2008-08-23&" + 
                    "values=platform")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.722 49.439187 ) and LINESTRING ( 8.712 49.404, 8.709 49.413 ) [ (8.709118749796037, 49.412643750611885, NaN) ]"))
                .body("'path'", containsString("/elements/perimeter/density/groupBy/boundary"));
    }
    
    
    @Test
    public void test_4_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22kxT%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.710333%2C49.408%5D%2C%5B8.73070%2C49.410%5D%2C%5B8.741%2C49.438%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22u%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.734994%2C49.404162%5D%2C%5B8.70753%2C49.427%5D%2C%5B8.73998%2C49.434%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=addr%3Ahousenumber%3D*+and+geometry%3Apoint+or+area%3A%281.0+..+1E6%29&" + 
                    "groupByKey=building&" + 
                    "groupByValues=office&" + 
                    "timeout=97")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.72826143820654 49.40976053794928, 8.719247066835127 49.417256540475506 ) and LINESTRING ( 8.73931677354822 49.43342423877186, 8.704561 49.403252 ) [ (8.719985585865656, 49.416642416618124, NaN) ]"))
                .body("'path'", containsString("/elements/length/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_5_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/density/groupBy/tag?" + 
                    "bpolys=F%3A8.704561%2C49.403252%2C8.743%2C49.4105%2C8.70417%2C49.428417%2C8.7043%2C49.438870%2C8.704561%2C49.403252&" + 
                    "groupByKey=building&" + 
                    "keys=highway&" + 
                    "showMetadata=yes")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.743 49.4105, 8.70417 49.428417 ) and LINESTRING ( 8.7043 49.43887, 8.704561 49.403252 ) [ (8.7043772979422, 49.42832134825572, NaN) ]"))
                .body("'path'", containsString("/elements/length/density/groupBy/tag"));
    }
    
    
    @Test
    public void test_6_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/density/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=8.704561%2C49.403252%2C8.701%2C49.401187%2C8.726%2C49.408%2C8.7048%2C49.424%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.702%2C49.41388%2C8.709%2C49.4342%2C8.7436%2C49.400811%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.73963%2C49.410%2C8.7049%2C49.41469%2C8.73838%2C49.421%2C8.704561%2C49.403252&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=station%2Croof%2Cspeed_camera&" + 
                    "keys=highway&" + 
                    "showMetadata=no&" + 
                    "time=2008-12-31&" + 
                    "timeout=33")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.701 49.401187 ) and LINESTRING ( 8.704561 49.403252, 8.702 49.41388 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/length/density/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_7_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/density?" + 
                    "bpolys=F%3A8.704561%2C49.403252%2C8.745%2C49.430%2C8.7050%2C49.42913%2C8.741%2C49.415%2C8.704561%2C49.403252&" + 
                    "filter=landuse%21%3D*+or+length%3A%28+..+100%29&" + 
                    "time=2012-06-17&" + 
                    "timeout=47")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.745 49.43 ) and LINESTRING ( 8.705 49.42913, 8.741 49.415 ) [ (8.72927805266304, 49.41960086432976, NaN) ]"))
                .body("'path'", containsString("/elements/length/density"));
    }
    
    
    @Test
    public void test_8_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/groupBy/type?" + 
                    "bpolys=Q%3A8.704561%2C49.403252%2C8.735048%2C49.422%2C8.704%2C49.4136%2C8.708%2C49.4065%2C8.704561%2C49.403252%7Cbe%3A8.704561%2C49.403252%2C8.711%2C49.439%2C8.732%2C49.414206%2C8.702%2C49.414%2C8.704561%2C49.403252%7Cl%3A8.704561%2C49.403252%2C8.725%2C49.407%2C8.7003%2C49.412%2C8.7493%2C49.42869%2C8.704561%2C49.403252&" + 
                    "showMetadata=true&" + 
                    "time=2017-09-14&" + 
                    "timeout=21")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.735048 49.422 ) and LINESTRING ( 8.708 49.4065, 8.704561 49.403252 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/count/groupBy/type"));
    }
    
    
    @Test
    public void test_9_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/groupBy/key?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22Ly%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.735831%2C49.421%5D%2C%5B8.703%2C49.419%5D%2C%5B8.7277%2C49.4012%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22IlA%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.744%2C49.405132%5D%2C%5B8.704926%2C49.413%5D%2C%5B8.72729%2C49.414%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22I%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7369%2C49.4085%5D%2C%5B8.702%2C49.4009%5D%2C%5B8.700%2C49.4192%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "groupByKeys=lanes%3Abackward%2Csidewalk%2Cturn&" + 
                    "keys=highway&" + 
                    "showMetadata=true&" + 
                    "time=2016-03-30&" + 
                    "values=unclassified")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.735831 49.421 ) and LINESTRING ( 8.703 49.419, 8.721123005862523 49.40593969618005 ) [ (8.715912370765048, 49.409694728760414, NaN) ]"))
                .body("'path'", containsString("/elements/count/groupBy/key"));
    }
    
    
    @Test
    public void test_10_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/density/groupBy/type?" + 
                    "bpolys=qxHTl%3A8.704561%2C49.403252%2C8.7472%2C49.406%2C8.70788%2C49.420%2C8.70168%2C49.424%2C8.704561%2C49.403252%7CN%3A8.704561%2C49.403252%2C8.7112%2C49.417670%2C8.70491%2C49.41857%2C8.708%2C49.4120%2C8.704561%2C49.403252%7CnPp%3A8.704561%2C49.403252%2C8.7303%2C49.406%2C8.719%2C49.4340%2C8.74269%2C49.408%2C8.704561%2C49.403252&" + 
                    "format=json&" + 
                    "showMetadata=no&" + 
                    "time=2015-07-26")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.7472 49.406 ) and LINESTRING ( 8.708 49.412, 8.704561 49.403252 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/count/density/groupBy/type"));
    }
    
    
    @Test
    public void test_11_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/density?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22VM%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7486%2C49.42087%5D%2C%5B8.725%2C49.437%5D%2C%5B8.729%2C49.4082%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22bZk%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.71279%2C49.404%5D%2C%5B8.722%2C49.4155%5D%2C%5B8.71949%2C49.4165%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22SlY%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.745%2C49.4338%5D%2C%5B8.700%2C49.4217%5D%2C%5B8.7324%2C49.413751%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "timeout=93")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.727301350786798 49.420430274335054 ) and LINESTRING ( 8.7 49.4217, 8.72808188842192 49.41481040336216 ) [ (8.721877038735173, 49.416332698120186, NaN) ]"))
                .body("'path'", containsString("/elements/count/density"));
    }
    
    
    @Test
    public void test_12_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count?" + 
                    "bpolys=vq%3A8.704561%2C49.403252%2C8.745%2C49.428%2C8.702%2C49.427%2C8.73360%2C49.433%2C8.704561%2C49.403252%7Cc%3A8.704561%2C49.403252%2C8.7367%2C49.401%2C8.729%2C49.408077%2C8.743%2C49.417%2C8.704561%2C49.403252&" + 
                    "filter=oneway%3D*+or+geometry%3Aline&" + 
                    "format=csv")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.745 49.428 ) and LINESTRING ( 8.704561 49.403252, 8.7367 49.401 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/count"));
    }
    
    
    @Test
    public void test_13_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/ratio/groupBy/boundary?" + 
                    "bcircles=HYtIG%3A8.70975%2C49.4216%2C2%7CK%3A8.729%2C49.421%2C93%7Ch%3A8.732%2C49.422%2C4%7Ca%3A8.712774%2C49.421%2C732410139182&" + 
                    "keys2=highway&" + 
                    "time=2016-07-16&" + 
                    "timeout=91&" + 
                    "types2=point%2Cpolygon%2C&" + 
                    "values2=bus_stop")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El Ã¡ngulo 891.439.051.368.790.400.000.000.000.000.000.000.000.000 es demasiado grande."))
                .body("'path'", containsString("/elements/area/ratio/groupBy/boundary"));
    }
    
    
    @Test
    public void test_14_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/ratio?" + 
                    "bpolys=JWbtF%3A8.704561%2C49.403252%2C8.723%2C49.425%2C8.704567%2C49.4158%2C8.7238%2C49.407%2C8.704561%2C49.403252&" + 
                    "filter=tracktype%3D*&" + 
                    "filter2=addr%3Acity%21%3D*+and+not+length%3A%28+..+100%29&" + 
                    "format=csv&" + 
                    "keys2=highway&" + 
                    "time=2014-01-03&" + 
                    "types2=line%2C&" + 
                    "values2=elevator")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.723 49.425 ) and LINESTRING ( 8.704567 49.4158, 8.7238 49.407 ) [ (8.712227901870484, 49.41229477790983, NaN) ]"))
                .body("'path'", containsString("/elements/area/ratio"));
    }
    
    
    @Test
    public void test_15_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area?" + 
                    "bpolys=PUoFQ%3A8.704561%2C49.403252%2C8.7411%2C49.4357%2C8.701%2C49.418%2C8.702%2C49.4225%2C8.704561%2C49.403252%7CQG%3A8.704561%2C49.403252%2C8.748%2C49.42822%2C8.70085%2C49.4307%2C8.734%2C49.422702%2C8.704561%2C49.403252%7CAIEqU%3A8.704561%2C49.403252%2C8.7322%2C49.415111%2C8.70613%2C49.42344%2C8.7359%2C49.424%2C8.704561%2C49.403252&" + 
                    "time=2010-04-10")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.7411 49.4357 ) and LINESTRING ( 8.704561 49.403252, 8.7322 49.415111 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/area"));
    }
    
    
    @Test
    public void test_16_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/ratio?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22Iw%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7346%2C49.411538%5D%2C%5B8.70457%2C49.410578%5D%2C%5B8.705%2C49.42926%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter2=type%3D*+or+geometry%3Aline+and+id%3A%281+..+9999%29&" + 
                    "keys=highway&" + 
                    "keys2=highway&" + 
                    "showMetadata=false&" + 
                    "timeout=44&" + 
                    "types2=line%2Cpolygon%2Cother&" + 
                    "values=traffic_mirror&" + 
                    "values2=service")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.7346 49.411538, 8.70457 49.410578 ) and LINESTRING ( 8.705 49.42926, 8.704561 49.403252 ) [ (8.704684720546918, 49.41058166739011, NaN) ]"))
                .body("'path'", containsString("/elements/length/ratio"));
    }
    
    
    @Test
    public void test_17_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/tag?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22Y%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.732%2C49.4059%5D%2C%5B8.700%2C49.4212%5D%2C%5B8.703%2C49.431%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=service%2Cprimary_link%2Celevator&" + 
                    "keys=highway&" + 
                    "showMetadata=true&" + 
                    "time=2008-02-20&" + 
                    "values=path")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.732 49.4059, 8.7 49.4212 ) and LINESTRING ( 8.703 49.431, 8.704561 49.403252 ) [ (8.703649473695297, 49.41945509538944, NaN) ]"))
                .body("'path'", containsString("/elements/length/groupBy/tag"));
    }
    
    
    @Test
    public void test_18_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/key?" + 
                    "bpolys=UeK%3A8.704561%2C49.403252%2C8.71963%2C49.414%2C8.716%2C49.4308%2C8.7023%2C49.42997%2C8.704561%2C49.403252%7Cv%3A8.704561%2C49.403252%2C8.706%2C49.400%2C8.728%2C49.422%2C8.733%2C49.408%2C8.704561%2C49.403252&" + 
                    "format=csv&" + 
                    "groupByKeys=lit%2Clanduse%2Caddr%3Apostcode&" + 
                    "keys=highway&" + 
                    "time=2010-06-03&" + 
                    "timeout=69&" + 
                    "values=primary")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.71963 49.414 ) and LINESTRING ( 8.7023 49.42997, 8.704561 49.403252 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/length/groupBy/key"));
    }
    
    
    @Test
    public void test_19_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/density/groupBy/type?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22M%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.72322%2C49.426%5D%2C%5B8.708%2C49.439%5D%2C%5B8.716%2C49.437%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "format=json&" + 
                    "keys=highway&" + 
                    "timeout=22&" + 
                    "values=tertiary")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.72322 49.426, 8.708 49.439 ) and LINESTRING ( 8.716 49.437, 8.704561 49.403252 ) [ (8.714729597858877, 49.43325198606009, NaN) ]"))
                .body("'path'", containsString("/elements/count/density/groupBy/type"));
    }
    
    
    @Test
    public void test_20_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/ratio?" + 
                    "bpolys=jSG%3A8.704561%2C49.403252%2C8.714%2C49.417%2C8.713%2C49.409471%2C8.70748%2C49.4377%2C8.704561%2C49.403252%7Cd%3A8.704561%2C49.403252%2C8.7334%2C49.433%2C8.70008%2C49.409%2C8.749307%2C49.4106%2C8.704561%2C49.403252%7CD%3A8.704561%2C49.403252%2C8.7410%2C49.438426%2C8.7427%2C49.415%2C8.7060%2C49.404%2C8.704561%2C49.403252&" + 
                    "filter=name%3D*+and+not+area%3A%281.0+..+1E6%29&" + 
                    "keys2=highway&" + 
                    "values2=traffic_signals")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.714 49.417 ) and LINESTRING ( 8.70748 49.4377, 8.704561 49.403252 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/area/ratio"));
    }
    
    
    @Test
    public void test_21_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/type?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22UjM%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.73346%2C49.421%5D%2C%5B8.7027%2C49.424%5D%2C%5B8.705268%2C49.41186%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22q%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7037%2C49.4154%5D%2C%5B8.726%2C49.415%5D%2C%5B8.727%2C49.418679%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "keys=highway&" + 
                    "showMetadata=true&" + 
                    "timeout=62&" + 
                    "values=track")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704522296314204 49.41538525029033, 8.723755770570037 49.41504025523641 ) and LINESTRING ( 8.727 49.418679, 8.704561 49.403252 ) [ (8.721759429576174, 49.415076064043475, NaN) ]"))
                .body("'path'", containsString("/elements/area/groupBy/type"));
    }
    
    
    @Test
    public void test_22_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22J%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.724%2C49.412297%5D%2C%5B8.707%2C49.420%5D%2C%5B8.718%2C49.413%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22yj%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.714%2C49.407%5D%2C%5B8.704023%2C49.4247%5D%2C%5B8.72944%2C49.430%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22n%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.74334%2C49.423%5D%2C%5B8.701%2C49.41019%5D%2C%5B8.7045%2C49.4084%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "groupByKey=building&" + 
                    "keys=highway&" + 
                    "showMetadata=yes&" + 
                    "time=2010-03-04&" + 
                    "timeout=93&" + 
                    "values=primary")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.713536307519638 49.40782262773403, 8.710569848197045 49.4130853650308 ) and LINESTRING ( 8.714935922764951 49.41440632429426, 8.704561 49.403252 ) [ (8.711753726415688, 49.41098506990502, NaN) ]"))
                .body("'path'", containsString("/elements/area/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_23_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/density/groupBy/type?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22Ke%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.70355%2C49.401466%5D%2C%5B8.714%2C49.4337%5D%2C%5B8.704025%2C49.42922%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22V%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.711%2C49.43341%5D%2C%5B8.740%2C49.4146%5D%2C%5B8.716%2C49.43481%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22BGe%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.738%2C49.41309%5D%2C%5B8.706%2C49.401%5D%2C%5B8.704600%2C49.421%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "keys=highway&" + 
                    "timeout=91")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.70355 49.401466, 8.705394320495408 49.407154978645835 ) and LINESTRING ( 8.704025 49.42922, 8.704561 49.403252 ) [ (8.704535141996018, 49.40450476240188, NaN) ]"))
                .body("'path'", containsString("/users/count/density/groupBy/type"));
    }
    
    
    @Test
    public void test_24_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/density/groupBy/type?" + 
                    "bcircles=8.709%2C49.411%2C981%7C8.74226%2C49.420%2C2389507382%7C8.7188%2C49.405%2C809423663&" + 
                    "keys=highway&" + 
                    "timeout=57&" + 
                    "values=pedestrian")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El Ã¡ngulo 11.439.822.330.073.760.000.000 es demasiado grande."))
                .body("'path'", containsString("/users/count/density/groupBy/type"));
    }
    
    
    @Test
    public void test_25_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/density/groupBy/boundary?" + 
                    "bpolys=vaeZA%3A8.704561%2C49.403252%2C8.739%2C49.4231%2C8.7128%2C49.408521%2C8.7048%2C49.4338%2C8.704561%2C49.403252%7CS%3A8.704561%2C49.403252%2C8.7287%2C49.4084%2C8.74763%2C49.435%2C8.705055%2C49.433%2C8.704561%2C49.403252&" + 
                    "keys=highway&" + 
                    "showMetadata=no&" + 
                    "time=2011-07-09&" + 
                    "values=unclassified")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.739 49.4231 ) and LINESTRING ( 8.7048 49.4338, 8.704561 49.403252 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/perimeter/density/groupBy/boundary"));
    }
    
    
    @Test
    public void test_26_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22NsIfQ%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.70733%2C49.4043%5D%2C%5B8.7043%2C49.4160%5D%2C%5B8.715286%2C49.412747%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22eu%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7220%2C49.4044%5D%2C%5B8.738342%2C49.4301%5D%2C%5B8.706%2C49.4262%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22L%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.7380%2C49.4125%5D%2C%5B8.706%2C49.4140%5D%2C%5B8.70194%2C49.406227%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "showMetadata=false&" + 
                    "time=2012-09-20")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_303_unifyPolys
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.70733 49.4043, 8.705153681714009 49.412703605262735 ) and LINESTRING ( 8.715286 49.412747, 8.704561 49.403252 ) [ (8.707034334354388, 49.40544167922563, NaN) ]"))
                .body("'path'", containsString("/elements/perimeter"));
    }
    
    
    @Test
    public void test_27_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/boundary?" + 
                    "bpolys=iC%3A8.704561%2C49.403252%2C8.7297%2C49.4019%2C8.7495%2C49.427%2C8.722%2C49.435%2C8.704561%2C49.403252%7Cu%3A8.704561%2C49.403252%2C8.725%2C49.405%2C8.7350%2C49.424%2C8.701492%2C49.401192%2C8.704561%2C49.403252%7Cs%3A8.704561%2C49.403252%2C8.7365%2C49.4331%2C8.726%2C49.41956%2C8.720%2C49.425%2C8.704561%2C49.403252&" + 
                    "filter=oneway%21%3D*+and+geometry%3Aline+and+length%3A%28+..+100%29&" + 
                    "time=2011-03-03")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.7297 49.4019 ) and LINESTRING ( 8.722 49.435, 8.704561 49.403252 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/count/groupBy/boundary"));
    }
    
    
    @Test
    public void test_28_with500() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/groupBy/key?" + 
                    "bpolys=8.704561%2C49.403252%2C8.748603%2C49.41964%2C8.731%2C49.42598%2C8.701%2C49.404%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.7366%2C49.417%2C8.7043%2C49.403%2C8.7093%2C49.4112%2C8.704561%2C49.403252&" + 
                    "format=geojson&" + 
                    "groupByKeys=maxspeed%2Cnetwork%2Csmoothness&" + 
                    "keys=highway&" + 
                    "timeout=59&" + 
                    "values=speed_camera")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.748603 49.41964 ) and LINESTRING ( 8.701 49.404, 8.704561 49.403252 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/perimeter/groupBy/key"));
    }
    
    
    @Test
    public void test_29_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/density?" + 
                    "bcircles=8.745%2C49.40886%2C3%7C8.739%2C49.410%2C2%7C8.709%2C49.406558%2C402%7C8.719%2C49.4095%2C6751804620&" + 
                    "format=geojson&" + 
                    "showMetadata=no")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El Ã¡ngulo 46.408.581.106.118.180.000.000.000 es demasiado grande."))
                .body("'path'", containsString("/users/count/density"));
    }
    
    
    @Test
    public void test_30_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/type?" + 
                    "bcircles=Qd%3A8.7197%2C49.43469%2C8%7Cj%3A8.708648%2C49.410%2C86%7CBng%3A8.737029%2C49.4084%2C6%7Cky%3A8.738%2C49.41452%2C770898518668&" + 
                    "filter=destination%3D*+and+geometry%3Apolygon&" + 
                    "format=json")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El Ã¡ngulo 1.341.455.697.441.097.200.000.000.000.000.000.000.000.000 es demasiado grande."))
                .body("'path'", containsString("/elements/perimeter/groupBy/type"));
    }
    
    
    @Test
    public void test_31_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/key?" + 
                    "bcircles=8.743571%2C49.430%2C3%7C8.71664%2C49.434%2C6%7C8.726%2C49.422013%2C1%7C8.7050%2C49.41506%2C9225008069&" + 
                    "filter=name%3D*+and+length%3A%28+..+100%29&" + 
                    "groupByKeys=addr%3Acountry%2Clit&" + 
                    "time=2018-01-28")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder_121_createCircularPolygons
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("El Ã¡ngulo 564.115.377.583.130.550.000.000.000 es demasiado grande."))
                .body("'path'", containsString("/elements/perimeter/groupBy/key"));
    }
    
    
    @Test
    public void test_32_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=Ifl%3A8.704561%2C49.403252%2C8.7127%2C49.401%2C8.706392%2C49.4026%2C8.73467%2C49.438%2C8.704561%2C49.403252%7Ci%3A8.704561%2C49.403252%2C8.70222%2C49.43013%2C8.70443%2C49.402%2C8.74746%2C49.416%2C8.704561%2C49.403252%7Cb%3A8.704561%2C49.403252%2C8.74977%2C49.421034%2C8.70995%2C49.43990%2C8.704%2C49.433%2C8.704561%2C49.403252&" + 
                    "format=csv&" + 
                    "groupByKey=building&" + 
                    "keys=highway&" + 
                    "timeout=63&" + 
                    "values=secondary")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.7127 49.401 ) and LINESTRING ( 8.704561 49.403252, 8.70222 49.43013 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/perimeter/groupBy/boundary/groupBy/tag"));
    }
    
    
    @Test
    public void test_33_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/ratio?" + 
                    "bpolys=j%3A8.704561%2C49.403252%2C8.721%2C49.42988%2C8.709%2C49.4307%2C8.72765%2C49.40688%2C8.704561%2C49.403252%7CkPM%3A8.704561%2C49.403252%2C8.735%2C49.431%2C8.7466%2C49.406%2C8.729%2C49.432%2C8.704561%2C49.403252%7CBz%3A8.704561%2C49.403252%2C8.7105%2C49.43269%2C8.73841%2C49.4067%2C8.7029%2C49.4385%2C8.704561%2C49.403252&" + 
                    "filter2=source%3Amaxspeed%21%3D*+or+not+area%3A%281.0+..+1E6%29&" + 
                    "format=json&" + 
                    "keys=highway&" + 
                    "keys2=highway&" + 
                    "timeout=53&" + 
                    "types2=point%2Cline%2Cother&" + 
                    "values=secondary_link&" + 
                    "values2=traffic_signals")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.721 49.42988 ) and LINESTRING ( 8.72765 49.40688, 8.704561 49.403252 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/perimeter/ratio"));
    }
    
    
    @Test
    public void test_34_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/boundary?" + 
                    "bpolys=8.704561%2C49.403252%2C8.725934%2C49.422%2C8.711%2C49.425%2C8.723%2C49.43229%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.738%2C49.41136%2C8.723%2C49.429%2C8.7045%2C49.4106%2C8.704561%2C49.403252&" + 
                    "filter=building%21%3D*+and+length%3A%28+..+100%29&" + 
                    "time=2008-12-16&" + 
                    "timeout=76")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.725934 49.422 ) and LINESTRING ( 8.723 49.43229, 8.704561 49.403252 ) [ (8.704561, 49.403252, NaN) ]"))
                .body("'path'", containsString("/elements/perimeter/groupBy/boundary"));
    }
    
    
    @Test
    public void test_35_with500() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/ratio/groupBy/boundary?" + 
                    "bpolys=8.704561%2C49.403252%2C8.714%2C49.4222%2C8.705%2C49.422926%2C8.732%2C49.424%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.7313%2C49.434%2C8.715%2C49.400%2C8.7008%2C49.4376%2C8.704561%2C49.403252%7C8.704561%2C49.403252%2C8.740%2C49.428722%2C8.74359%2C49.4204%2C8.705507%2C49.4309%2C8.704561%2C49.403252&" + 
                    "keys=highway&" + 
                    "showMetadata=false&" + 
                    "timeout=35&" + 
                    "types2=point%2Cline%2Cpolygon%2C&" + 
                    "values=cycleway")
                .then()
                .statusCode(500) // org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor_224_processParameters
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("found non-noded intersection between LINESTRING ( 8.704561 49.403252, 8.714 49.4222 ) and LINESTRING ( 8.715 49.4, 8.7008 49.4376 ) [ (8.709800034681265, 49.41376892225242, NaN) ]"))
                .body("'path'", containsString("/elements/count/ratio/groupBy/boundary"));
    }
    
    
    @Test
    public void test_36() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/density/groupBy/type?" + 
                    "bboxes=F%3A8.6623%2C49.4036%2C8.707%2C49.380%7CIMNY%3A8.650%2C49.409%2C8.751%2C49.3917%7CSx%3A8.667526%2C49.41475%2C8.7400%2C49.384%7CG%3A8.662%2C49.401114%2C8.730%2C49.396&" + 
                    "showMetadata=no")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_37() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/density/groupBy/boundary/groupBy/tag?" + 
                    "bboxes=DLPK%3A8.6878%2C49.42269%2C8.7330%2C49.396%7CO%3A8.6866%2C49.408%2C8.731%2C49.3812&" + 
                    "filter=foot%21%3D*+and+area%3A%281.0+..+1E6%29&" + 
                    "groupByKey=building&" + 
                    "groupByValues=garage&" + 
                    "timeout=74")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_38() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/density/groupBy/boundary?" + 
                    "bboxes=Pct%3A8.6893%2C49.410683%2C8.749%2C49.3840&" + 
                    "showMetadata=false&" + 
                    "timeout=79")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_39() throws Exception {
        
        given().accept("text/csv")
                .get(baseUrlOfSut + "/elements/length?" + 
                    "bboxes=o%3A8.658%2C49.423393%2C8.7383%2C49.380&" + 
                    "format=csv&" + 
                    "timeout=96")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_40() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/groupBy/tag?" + 
                    "bboxes=WM%3A8.688%2C49.4204%2C8.7557%2C49.387%7CXaMCX%3A8.6613%2C49.40937%2C8.7229%2C49.38669&" + 
                    "filter=foot%3D*+or+not+area%3A%281.0+..+1E6%29&" + 
                    "groupByKey=building&" + 
                    "groupByValues=living_street%2Cresidential%2Cuniversity&" + 
                    "time=2017-11-30&" + 
                    "timeout=32")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_41() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=bND%3A8.715%2C49.413%2C6&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=secondary_link&" + 
                    "keys=highway&" + 
                    "values=primary_link")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_42() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/density/groupBy/boundary?" + 
                    "bcircles=s%3A8.7376%2C49.4269%2C4&" + 
                    "format=geojson&" + 
                    "keys=highway&" + 
                    "time=2011-12-03&" + 
                    "timeout=68&" + 
                    "values=track")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'type'", containsString("FeatureCollection"));
    }
    
    
    @Test
    public void test_43() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/tag?" + 
                    "bpolys=8.704561%2C49.403252%2C8.722%2C49.423%2C8.702119%2C49.424944%2C8.7110%2C49.416%2C8.704561%2C49.403252&" + 
                    "format=json&" + 
                    "groupByKey=building&" + 
                    "time=2008-01-26")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_44() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/boundary?" + 
                    "bcircles=MU%3A8.715134%2C49.402%2C2&" + 
                    "keys=highway&" + 
                    "time=2017-04-12&" + 
                    "timeout=89&" + 
                    "values=residential")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_45() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/density/groupBy/type?" + 
                    "bcircles=Xlhcq%3A8.72804%2C49.419289%2C2%7CYg%3A8.748%2C49.407%2C19%7CQ%3A8.741%2C49.430%2C5&" + 
                    "showMetadata=no&" + 
                    "time=2010-08-14")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_46() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/density/groupBy/tag?" + 
                    "bboxes=8.672563%2C49.414%2C8.710509%2C49.3954%7C8.6877%2C49.400%2C8.724%2C49.397&" + 
                    "groupByKey=building&" + 
                    "keys=highway")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_47() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/density/groupBy/boundary?" + 
                    "bpolys=lV%3A8.704561%2C49.403252%2C8.734%2C49.419%2C8.709%2C49.410%2C8.704%2C49.4079%2C8.704561%2C49.403252&" + 
                    "format=json&" + 
                    "showMetadata=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_48() throws Exception {
        
        given().accept("text/csv")
                .get(baseUrlOfSut + "/elements/area/density?" + 
                    "bcircles=amj%3A8.72837%2C49.408158%2C7%7CufSu%3A8.7248%2C49.433%2C7&" + 
                    "format=csv&" + 
                    "keys=highway&" + 
                    "showMetadata=no&" + 
                    "timeout=97&" + 
                    "values=tertiary")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_49() throws Exception {
        
        given().accept("text/csv")
                .get(baseUrlOfSut + "/elements/area/density/groupBy/boundary/groupBy/tag?" + 
                    "bboxes=8.6842%2C49.421%2C8.7131%2C49.382&" + 
                    "format=csv&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=primary_link%2Cfootway%2Ccommercial&" + 
                    "time=2008-01-27")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_50() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/groupBy/boundary?" + 
                    "bcircles=tUZyk%3A8.736%2C49.436271%2C92&" + 
                    "format=json&" + 
                    "showMetadata=no&" + 
                    "time=2018-04-30")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_51() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter?" + 
                    "bcircles=8.748%2C49.407%2C46&" + 
                    "filter=oneway%21%3D*+or+not+area%3A%281.0+..+1E6%29&" + 
                    "format=json&" + 
                    "time=2013-01-25")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_52() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/density/groupBy/tag?" + 
                    "bcircles=jzo%3A8.735278%2C49.425805%2C6&" + 
                    "format=json&" + 
                    "groupByKey=building&" + 
                    "keys=highway&" + 
                    "showMetadata=yes&" + 
                    "time=2010-10-16&" + 
                    "values=street_lamp")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(222.0))
                .body("'metadata'.'description'", containsString("Density of selected items (count of items in absolute values divided by the area in square kilometers), aggregated on the tag."))
                .body("'groupByResult'", hasItems());
    }
    
    
    @Test
    public void test_53() throws Exception {
        
        given().accept("text/csv")
                .get(baseUrlOfSut + "/elements/length/density/groupBy/type?" + 
                    "bpolys=8.704561%2C49.403252%2C8.705%2C49.417%2C8.711%2C49.407%2C8.72649%2C49.405909%2C8.704561%2C49.403252&" + 
                    "format=csv&" + 
                    "showMetadata=no&" + 
                    "time=2012-02-13")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_54() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/groupBy/tag?" + 
                    "bcircles=Hyx%3A8.742%2C49.4297%2C7&" + 
                    "format=json&" + 
                    "groupByKey=highway&" + 
                    "keys=highway&" + 
                    "timeout=57")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'groupByResult'", hasItems());
    }
    
    
    @Test
    public void test_55() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/density/groupBy/tag?" + 
                    "bcircles=8.7304%2C49.407376%2C2&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=give_way%2Croof%2Cprimary&" + 
                    "keys=highway&" + 
                    "showMetadata=false&" + 
                    "time=2016-08-08&" + 
                    "timeout=99&" + 
                    "values=track")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_56() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/type?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22UU%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.719%2C49.431011%5D%2C%5B8.748%2C49.404%5D%2C%5B8.724%2C49.4009%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "keys=highway")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_57() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density/groupBy/type?" + 
                    "bboxes=8.674%2C49.41240%2C8.709%2C49.381&" + 
                    "time=2010-10-12")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_58() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=KqHvN%3A8.704561%2C49.403252%2C8.728%2C49.428%2C8.73892%2C49.413%2C8.727%2C49.406%2C8.704561%2C49.403252&" + 
                    "groupByKey=highway&" + 
                    "keys=highway&" + 
                    "timeout=45&" + 
                    "values=pedestrian")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_59() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/type?" + 
                    "bcircles=8.7047%2C49.435%2C8%7C8.736%2C49.433%2C9%7C8.70991%2C49.41940%2C4&" + 
                    "filter=barrier%21%3D*+or+geometry%3Aline+or+not+id%3A%281+..+9999%29&" + 
                    "format=geojson")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_60() throws Exception {
        
        given().accept("text/csv")
                .post(baseUrlOfSut + "/elements/count/groupBy/tag?" + 
                    "bboxes=O%3A8.679%2C49.406%2C8.728%2C49.397%7CyVbXd%3A8.664107%2C49.400%2C8.704%2C49.386&" + 
                    "format=csv&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=garage%2Cgive_way&" + 
                    "keys=highway&" + 
                    "showMetadata=no&" + 
                    "timeout=45&" + 
                    "values=emergency_access_point")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_61() throws Exception {
        
        given().accept("text/csv")
                .post(baseUrlOfSut + "/elements/count/density/groupBy/tag?" + 
                    "bboxes=NOTXH%3A8.686%2C49.4298%2C8.7211%2C49.388&" + 
                    "format=csv&" + 
                    "groupByKey=building&" + 
                    "groupByValues=service%2Coffice%2Cpublic&" + 
                    "keys=highway")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_62() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/density/groupBy/boundary/groupBy/tag?" + 
                    "bboxes=8.680%2C49.410%2C8.736%2C49.397&" + 
                    "format=json&" + 
                    "groupByKey=highway&" + 
                    "keys=highway&" + 
                    "time=2016-08-30&" + 
                    "timeout=64&" + 
                    "values=turning_circle")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_63() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/tag?" + 
                    "bcircles=Njg%3A8.742983%2C49.427%2C45&" + 
                    "format=geojson&" + 
                    "groupByKey=building&" + 
                    "keys=highway&" + 
                    "showMetadata=no&" + 
                    "time=2010-09-18")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_64() throws Exception {
        
        given().accept("text/csv")
                .post(baseUrlOfSut + "/elements/area/density/groupBy/type?" + 
                    "bboxes=8.6669%2C49.40337%2C8.72412%2C49.389%7C8.670%2C49.41950%2C8.7234%2C49.392&" + 
                    "format=csv")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_65() throws Exception {
        
        given().accept("text/csv")
                .post(baseUrlOfSut + "/elements/area/density/groupBy/tag?" + 
                    "bpolys=QJ%3A8.704561%2C49.403252%2C8.7096%2C49.404%2C8.733%2C49.415%2C8.73844%2C49.4320%2C8.704561%2C49.403252&" + 
                    "format=csv&" + 
                    "groupByKey=highway&" + 
                    "showMetadata=no&" + 
                    "time=2009-02-23")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_66() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=Av%3A8.724%2C49.4257%2C8&" + 
                    "groupByKey=building&" + 
                    "keys=highway&" + 
                    "time=2015-01-05&" + 
                    "timeout=78&" + 
                    "values=footway")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'groupByResult'", hasItems());
    }
    
    
    @Test
    public void test_67() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/density?" + 
                    "bcircles=rYecy%3A8.727%2C49.4112%2C625%7CTcpOr%3A8.747%2C49.422%2C6%7CQazrH%3A8.733918%2C49.4071%2C79%7CvpuYp%3A8.7118%2C49.410%2C27&" + 
                    "showMetadata=false&" + 
                    "time=2009-12-31")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_68() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/key?" + 
                    "bcircles=8.70153%2C49.405%2C99&" + 
                    "filter=surface%3D*&" + 
                    "format=geojson&" + 
                    "groupByKeys=highway%2Cref%2Clanes%3Aforward&" + 
                    "time=2017-04-17&" + 
                    "timeout=71")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_69() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/groupBy/boundary?" + 
                    "bboxes=O%3A8.690%2C49.4238%2C8.71790%2C49.3903&" + 
                    "keys=highway&" + 
                    "showMetadata=yes&" + 
                    "timeout=95&" + 
                    "values=speed_camera")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(267.0))
                .body("'metadata'.'description'", containsString("Total count of items in absolute values."));
    }
    
    
    @Test
    public void test_70() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count?" + 
                    "bboxes=id%3A8.69508%2C49.402%2C8.7524%2C49.381&" + 
                    "showMetadata=yes&" + 
                    "time=2015-09-01&" + 
                    "timeout=59")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(679.0))
                .body("'metadata'.'description'", containsString("Total count of items in absolute values."));
    }
    
    
    @Test
    public void test_71() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/type?" + 
                    "bcircles=uG%3A8.749%2C49.4061%2C8&" + 
                    "format=json&" + 
                    "keys=highway")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_72() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=8.704561%2C49.403252%2C8.719%2C49.425%2C8.747%2C49.436%2C8.704868%2C49.4199%2C8.704561%2C49.403252&" + 
                    "groupByKey=building&" + 
                    "groupByValues=construction%2Cemergency_access_point%2Cstreet_lamp&" + 
                    "keys=highway&" + 
                    "time=2016-05-23&" + 
                    "timeout=37")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_73() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density/groupBy/boundary?" + 
                    "bboxes=w%3A8.689%2C49.4283%2C8.7405%2C49.39066%7CHXfjv%3A8.668369%2C49.426952%2C8.7475%2C49.397%7Cho%3A8.675607%2C49.407%2C8.754%2C49.3991%7CQyi%3A8.672%2C49.417%2C8.741%2C49.38959&" + 
                    "filter=oneway%21%3D*+or+geometry%3Aline+or+not+length%3A%28+..+100%29&" + 
                    "format=json&" + 
                    "showMetadata=no&" + 
                    "time=2009-09-30&" + 
                    "timeout=83")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_74() throws Exception {
        
        given().accept("text/csv")
                .post(baseUrlOfSut + "/elements/area?" + 
                    "bpolys=aU%3A8.704561%2C49.403252%2C8.720%2C49.401%2C8.7107%2C49.433815%2C8.70959%2C49.4361%2C8.704561%2C49.403252&" + 
                    "format=csv&" + 
                    "keys=highway&" + 
                    "showMetadata=no&" + 
                    "time=2015-06-09")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_75() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/boundary/groupBy/tag?" + 
                    "bboxes=BAghT%3A8.66770%2C49.429809%2C8.754125%2C49.384%7Cj%3A8.68924%2C49.421%2C8.75828%2C49.396%7CEhxlK%3A8.67678%2C49.42157%2C8.755566%2C49.384%7CsIBCc%3A8.6757%2C49.401%2C8.70117%2C49.3869&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=tower%2Cschool&" + 
                    "keys=highway&" + 
                    "showMetadata=false&" + 
                    "timeout=44&" + 
                    "values=footway")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_76() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/boundary?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22iX%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.728%2C49.413%5D%2C%5B8.720%2C49.435%5D%2C%5B8.7397%2C49.407%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "time=2016-06-27&" + 
                    "timeout=63")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_77() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/groupBy/tag?" + 
                    "bboxes=XNc%3A8.6745%2C49.427%2C8.70508%2C49.399%7CceH%3A8.6623%2C49.414%2C8.734%2C49.384%7CvAXfQ%3A8.651%2C49.42921%2C8.700%2C49.381&" + 
                    "groupByKey=building&" + 
                    "showMetadata=no")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_78() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/key?" + 
                    "bboxes=GgtQ%3A8.6791%2C49.4294%2C8.745%2C49.3837%7CL%3A8.65875%2C49.420%2C8.722%2C49.398%7CPJoiQ%3A8.6955%2C49.42856%2C8.71371%2C49.380&" + 
                    "format=json&" + 
                    "groupByKeys=surface%2Clanes%3Aforward%2Cbicycle&" + 
                    "keys=highway&" + 
                    "values=street_lamp")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_79() throws Exception {
        
        given().accept("text/csv")
                .post(baseUrlOfSut + "/elements/length/density/groupBy/tag?" + 
                    "bcircles=S%3A8.719%2C49.40253%2C7%7CzD%3A8.718%2C49.4352%2C9&" + 
                    "filter=foot%21%3D*+and+length%3A%28+..+100%29&" + 
                    "format=csv&" + 
                    "groupByKey=building&" + 
                    "groupByValues=traffic_mirror%2Cstreet_lamp&" + 
                    "time=2012-09-14")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_80() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/boundary/groupBy/tag?" + 
                    "bboxes=hJS%3A8.689%2C49.4238%2C8.7513%2C49.397&" + 
                    "filter=highway%21%3D*+and+geometry%3Apolygon&" + 
                    "groupByKey=highway&" + 
                    "showMetadata=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_81() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/density?" + 
                    "bboxes=8.6846%2C49.421%2C8.741615%2C49.3964&" + 
                    "showMetadata=no&" + 
                    "timeout=26")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_82() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density?" + 
                    "bcircles=PZ%3A8.731029%2C49.4126%2C26%7CHzFQU%3A8.721%2C49.410%2C6&" + 
                    "keys=highway&" + 
                    "values=speed_camera")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_83() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density?" + 
                    "bboxes=sW%3A8.673%2C49.4047%2C8.7133%2C49.3962&" + 
                    "keys=highway&" + 
                    "timeout=65")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_84() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length?" + 
                    "bcircles=8.746%2C49.42615%2C140&" + 
                    "format=json&" + 
                    "keys=highway&" + 
                    "showMetadata=true&" + 
                    "time=2013-09-21")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(234.0))
                .body("'metadata'.'description'", containsString("Total length of items in meters."));
    }
    
    
    @Test
    public void test_85() throws Exception {
        
        given().accept("text/csv")
                .get(baseUrlOfSut + "/elements/count/density/groupBy/boundary/groupBy/tag?" + 
                    "bboxes=vSi%3A8.660%2C49.409%2C8.752%2C49.3813%7CF%3A8.66819%2C49.407184%2C8.752%2C49.392%7CADF%3A8.6862%2C49.422%2C8.75483%2C49.39437&" + 
                    "format=csv&" + 
                    "groupByKey=highway&" + 
                    "time=2016-04-21&" + 
                    "timeout=75")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_86() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/density/groupBy/type?" + 
                    "bcircles=rOqm%3A8.711880%2C49.402022%2C91&" + 
                    "filter=highway%3D*&" + 
                    "timeout=63")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_87() throws Exception {
        
        given().accept("text/csv")
                .post(baseUrlOfSut + "/elements/count/density/groupBy/boundary?" + 
                    "bcircles=8.711%2C49.438%2C7&" + 
                    "format=csv&" + 
                    "showMetadata=true&" + 
                    "timeout=62")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_88() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/key?" + 
                    "bboxes=lWKr%3A8.672%2C49.407%2C8.717%2C49.3897&" + 
                    "filter=smoothness%3D*+or+type%3Arelation+or+not+area%3A%281.0+..+1E6%29&" + 
                    "groupByKeys=oneway%2Ctracktype&" + 
                    "showMetadata=true&" + 
                    "time=2008-02-26")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(915.0))
                .body("'metadata'.'description'", containsString("Total area of items in square meters, aggregated on the key."));
    }
    
    
    @Test
    public void test_89() throws Exception {
        
        given().accept("text/csv")
                .post(baseUrlOfSut + "/users/count?" + 
                    "bcircles=8.7110%2C49.414897%2C1%7C8.70254%2C49.437%2C77%7C8.736%2C49.43428%2C7%7C8.720%2C49.42843%2C2&" + 
                    "format=csv&" + 
                    "keys=highway&" + 
                    "values=path")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_90() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/density/groupBy/boundary/groupBy/tag?" + 
                    "bboxes=8.6894%2C49.4278%2C8.70424%2C49.395%7C8.688%2C49.4029%2C8.701416%2C49.388%7C8.67867%2C49.4077%2C8.709%2C49.382&" + 
                    "filter=turn%3D*+or+id%3A%281+..+9999%29&" + 
                    "format=json&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=cycleway&" + 
                    "showMetadata=yes&" + 
                    "time=2015-11-22")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(547.0))
                .body("'metadata'.'description'", containsString("Density of selected items (perimeter of items in meters divided by the area in square kilometers), aggregated on the boundary and on the tag."));
    }
    
    
    @Test
    public void test_91() throws Exception {
        
        given().accept("text/csv")
                .get(baseUrlOfSut + "/elements/length/groupBy/type?" + 
                    "bboxes=DG%3A8.698%2C49.416587%2C8.722%2C49.389%7CzWUTj%3A8.668%2C49.420%2C8.744%2C49.389&" + 
                    "format=csv&" + 
                    "keys=highway&" + 
                    "time=2009-12-24&" + 
                    "timeout=55&" + 
                    "values=bus_stop")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_92() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/ratio?" + 
                    "bcircles=8.7360%2C49.422%2C1%7C8.71804%2C49.404%2C2&" + 
                    "format=json&" + 
                    "keys=highway&" + 
                    "showMetadata=true&" + 
                    "types2=point%2C")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(582.0))
                .body("'metadata'.'description'", containsString("Total count of items in absolute values satisfying types2, keys2, values2 parameters (= value2 output), as well as items selected by types, keys, values parameters (= value output) and ratio of value2:value."));
    }
    
    
    @Test
    public void test_93() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/density?" + 
                    "bpolys=O%3A8.704561%2C49.403252%2C8.742%2C49.4257%2C8.7140%2C49.437613%2C8.721%2C49.4202%2C8.704561%2C49.403252&" + 
                    "format=geojson&" + 
                    "keys=highway&" + 
                    "values=path")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_94() throws Exception {
        
        given().accept("text/csv")
                .get(baseUrlOfSut + "/elements/length/groupBy/key?" + 
                    "bcircles=TFW%3A8.73417%2C49.429%2C6&" + 
                    "filter=oneway%21%3D*+and+id%3A%281+..+9999%29&" + 
                    "format=csv&" + 
                    "groupByKeys=addr%3Acity%2Cdestination&" + 
                    "showMetadata=no&" + 
                    "time=2013-02-06&" + 
                    "timeout=36")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_95() throws Exception {
        
        given().accept("text/csv")
                .post(baseUrlOfSut + "/elements/length/groupBy/boundary?" + 
                    "bboxes=ZTV%3A8.6958%2C49.400985%2C8.700%2C49.393%7Cou%3A8.6729%2C49.4075%2C8.7037%2C49.382%7Cp%3A8.679749%2C49.416%2C8.740%2C49.389%7CBESY%3A8.67660%2C49.428%2C8.705%2C49.390764&" + 
                    "filter=landuse%3D*+and+geometry%3Apoint&" + 
                    "format=csv&" + 
                    "time=2011-06-02")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_96() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density/groupBy/boundary?" + 
                    "bboxes=xG%3A8.696%2C49.4072%2C8.70783%2C49.394&" + 
                    "filter=maxspeed%3D*+and+not+geometry%3Aline&" + 
                    "format=geojson&" + 
                    "showMetadata=false&" + 
                    "time=2008-07-03&" + 
                    "timeout=22")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'type'", containsString("FeatureCollection"));
    }
    
    
    @Test
    public void test_97() throws Exception {
        
        given().accept("text/csv")
                .post(baseUrlOfSut + "/elements/perimeter/density?" + 
                    "bcircles=8.737%2C49.423%2C8%7C8.737%2C49.409%2C725%7C8.732%2C49.422799%2C6&" + 
                    "format=csv&" + 
                    "keys=highway&" + 
                    "time=2012-05-01&" + 
                    "timeout=62&" + 
                    "values=platform")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_98() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/groupBy/type?" + 
                    "bcircles=nFCcd%3A8.719%2C49.4224%2C56&" + 
                    "filter=maxspeed%3D*+and+not+id%3A%281+..+9999%29&" + 
                    "time=2009-02-21&" + 
                    "timeout=29")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_99() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/groupBy/boundary/groupBy/tag?" + 
                    "bboxes=8.68289%2C49.401%2C8.719%2C49.395%7C8.68557%2C49.419%2C8.7380%2C49.382%7C8.68908%2C49.416%2C8.737%2C49.391&" + 
                    "groupByKey=building&" + 
                    "keys=highway&" + 
                    "time=2013-10-26&" + 
                    "timeout=94&" + 
                    "values=elevator")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_100() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/groupBy/boundary?" + 
                    "bboxes=wK%3A8.663%2C49.422%2C8.743%2C49.380&" + 
                    "filter=foot%3D*+or+type%3Away+or+length%3A%28+..+100%29&" + 
                    "time=2012-08-05&" + 
                    "timeout=72")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_101() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/tag?" + 
                    "bboxes=xALJ%3A8.682%2C49.418248%2C8.746%2C49.3869%7CWlJ%3A8.654%2C49.4275%2C8.741511%2C49.397%7CWs%3A8.696%2C49.4005%2C8.742%2C49.3899&" + 
                    "groupByKey=highway&" + 
                    "groupByValues=speed_camera%2Cpedestrian%2Ctrack&" + 
                    "keys=highway&" + 
                    "showMetadata=true&" + 
                    "time=2010-03-08")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(389.0))
                .body("'metadata'.'description'", containsString("Total perimeter of items in meters, aggregated on the tag."));
    }
    
    
    @Test
    public void test_102() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/ratio?" + 
                    "bcircles=g%3A8.7269%2C49.411%2C33&" + 
                    "filter=building%3D*&" + 
                    "filter2=maxspeed%3D*+and+geometry%3Apolygon+and+id%3A%281+..+9999%29&" + 
                    "format=geojson")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"));
    }
    
    
    @Test
    public void test_103() throws Exception {
        
        given().accept("text/csv")
                .get(baseUrlOfSut + "/users/count/groupBy/type?" + 
                    "bcircles=f%3A8.746%2C49.41001%2C7%7CN%3A8.701%2C49.426929%2C2%7CtK%3A8.71113%2C49.408%2C96&" + 
                    "format=csv&" + 
                    "keys=highway&" + 
                    "timeout=99&" + 
                    "values=traffic_mirror")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_104() throws Exception {
        
        given().accept("text/csv")
                .post(baseUrlOfSut + "/users/count/groupBy/boundary?" + 
                    "bpolys=%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22id%22%3A%22IhVhb%22%7D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B8.704561%2C49.403252%5D%2C%5B8.705%2C49.417842%5D%2C%5B8.728186%2C49.42663%5D%2C%5B8.70615%2C49.41821%5D%2C%5B8.704561%2C49.403252%5D%5D%5D%7D%7D%5D%7D&" + 
                    "filter=highway+in+%28secondary%2Cpath%2Cunclassified%2Ctrack%2Cprimary%2Cresidential%2Ccycleway%2Cservice%2Cfootway%29+and+id%3A%281+..+9999%29&" + 
                    "format=csv&" + 
                    "timeout=40")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_105() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/ratio/groupBy/boundary?" + 
                    "bboxes=y%3A8.677445%2C49.429%2C8.729%2C49.386&" + 
                    "filter=addr%3Astreet%21%3D*+and+id%3A%281+..+9999%29&" + 
                    "filter2=lit%21%3D*+and+not+length%3A%28+..+100%29&" + 
                    "keys2=highway&" + 
                    "showMetadata=true&" + 
                    "values2=track")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'attribution'.'url'", containsString("https://ohsome.org/copyrights"))
                .body("'attribution'.'text'", containsString("ï¿½ï¿½ OpenStreetMap contributors"))
                .body("'apiVersion'", containsString("1.3.0-SNAPSHOT"))
                .body("'metadata'.'executionTime'", numberMatches(699.0))
                .body("'metadata'.'description'", containsString("Total perimeter of items in meters satisfying types2, keys2, values2 parameters (= value2 output), as well as items selected by types, keys, values parameters (= value output) and ratio of value2:value, aggregated on the boundary objects."));
    }
    
    
    @Test
    public void test_106() throws Exception {
        
        given().accept("text/csv")
                .post(baseUrlOfSut + "/users/count/groupBy/tag?" + 
                    "bpolys=SjdNH%3A8.704561%2C49.403252%2C8.709%2C49.434%2C8.704%2C49.4263%2C8.704562%2C49.400183%2C8.704561%2C49.403252&" + 
                    "format=csv&" + 
                    "groupByKey=building&" + 
                    "keys=highway&" + 
                    "showMetadata=yes&" + 
                    "timeout=61")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_107() throws Exception {
        
        given().accept("text/csv")
                .post(baseUrlOfSut + "/elements/count/ratio?" + 
                    "bboxes=C%3A8.6910%2C49.4247%2C8.743%2C49.398&" + 
                    "filter2=maxspeed%3D*+and+geometry%3Apoint+and+id%3A%281+..+9999%29&" + 
                    "format=csv&" + 
                    "keys=highway&" + 
                    "showMetadata=true&" + 
                    "timeout=78")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/csv");
    }
    
    
    @Test
    public void test_108() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/groupBy/boundary?" + 
                    "bboxes=s%3A8.663%2C49.40747%2C8.744%2C49.386&" + 
                    "filter=smoothness%21%3D*+and+type%3Anode+and+length%3A%28+..+100%29&" + 
                    "format=csv&" + 
                    "time=2015-11-30")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("You need to give at least two timestamps or a time interval for this resource."));
    }
    
    
    @Test
    public void test_109() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/density/groupBy/boundary?" + 
                    "bpolys=v%3A8.704561%2C49.403252%2C8.7161%2C49.4214%2C8.708%2C49.424%2C8.704566%2C49.4041%2C8.704561%2C49.403252&" + 
                    "keys=highway&" + 
                    "showMetadata=no&" + 
                    "time=2010-10-31&" + 
                    "timeout=69&" + 
                    "values=track")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("You need to give at least two timestamps or a time interval for this resource."));
    }
    
    
    @Test
    public void test_110() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/ratio/groupBy/boundary?" + 
                    "bcircles=8.709%2C49.4351%2C4&" + 
                    "filter=smoothness%3D*+or+not+id%3A%281+..+9999%29&" + 
                    "keys2=highway&" + 
                    "showMetadata=false")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The filter2 parameter has to be defined when using a /ratio endpoint."));
    }
    
    
    @Test
    public void test_111() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/ratio/groupBy/boundary?" + 
                    "bboxes=8.65557%2C49.423%2C8.748%2C49.391%7C8.661%2C49.410341%2C8.73633%2C49.3907%7C8.675%2C49.4072%2C8.733%2C49.3807&" + 
                    "filter=oneway%3D*+or+geometry%3Aline&" + 
                    "format=json&" + 
                    "showMetadata=yes")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The filter2 parameter has to be defined when using a /ratio endpoint."));
    }
    
    
    @Test
    public void test_112() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/groupBy/key?" + 
                    "bboxes=k&" + 
                    "bpolys=N_6&" + 
                    "groupByKeys=JTzl7Bjbb&" + 
                    "keys=pBS6QEfAqUB&" + 
                    "timeout=ZLG4UaRxusNBL")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_113() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/boundary?" + 
                    "bboxes=Ax_uWznV4QIJjNV&" + 
                    "bcircles=Q3hQChAC3&" + 
                    "bpolys=TFxXUd_AqB0Z3h&" + 
                    "format=lk8dqTAOD9&" + 
                    "showMetadata=owObAg5dNgu5fJ&" + 
                    "timeout=Pl6kzn2E&" + 
                    "values=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_114() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/density/groupBy/type?" + 
                    "bboxes=QIl5M0TEWPKOC&" + 
                    "bpolys=5GEBtDx&" + 
                    "filter=K3B7m0X&" + 
                    "keys=Vui4LwIabr18B&" + 
                    "time=xKt2sV3KXdvpo&" + 
                    "timeout=93FxkJavJT6j1&" + 
                    "values=CVNqx_JUrGTiKre")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_115() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/density?" + 
                    "format=Y4S1J9OIFREeL&" + 
                    "showMetadata=fzhHhpf7K&" + 
                    "time=CTtgOAgCr8BTPvb&" + 
                    "timeout=pAzGr1BBBihnC_CM&" + 
                    "values=TAIzzY")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_116() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/density?" + 
                    "bcircles=32i3gs3TdJnneT&" + 
                    "time=&" + 
                    "values=9OlaoUj2btZLoUj")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_117() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count?" + 
                    "bboxes=9JVvvBHJsO&" + 
                    "bcircles=&" + 
                    "bpolys=FgZHN7B&" + 
                    "filter=4NM2Gew2h4q2&" + 
                    "format=mjv8xv48K&" + 
                    "keys=U3h82gQXCGZO&" + 
                    "time=fsNb74Z2FYfIBoi&" + 
                    "timeout=XQhP4iu&" + 
                    "values=q9bS")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_118() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count?" + 
                    "bboxes=Nv1u5i1pf&" + 
                    "bcircles=qSDw&" + 
                    "bpolys=0OYhkr&" + 
                    "format=7b0pMMpKWip_wq&" + 
                    "keys=noXAJ&" + 
                    "showMetadata=R&" + 
                    "time=i_OeiORUlE5&" + 
                    "types=5HXcBn")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_119() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/ratio/groupBy/boundary?" + 
                    "bboxes=laZBY&" + 
                    "filter=d6wD_&" + 
                    "showMetadata=KE7ie&" + 
                    "timeout=SxCB&" + 
                    "values=JQe")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_120() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/ratio?" + 
                    "bboxes=DWsRpmJXYpb&" + 
                    "keys=MzaUWVFHmHxN&" + 
                    "keys2=&" + 
                    "showMetadata=PkzXVHwcaFNL948&" + 
                    "time=7&" + 
                    "timeout=w0I4_BU&" + 
                    "types2=fZNQUpU4K9W_vwk")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_121() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/type?" + 
                    "bboxes=TaZCMIuEEdQC500&" + 
                    "filter=Qrf7xLUsHU1OyaTN&" + 
                    "keys=x7CmwGL&" + 
                    "showMetadata=s49H&" + 
                    "time=zNLiFrAymSi3c3ll&" + 
                    "types=cUmZFpNT8mgiqf6n")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_122() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/groupBy/type?" + 
                    "bboxes=RX10VuTAx9TJ&" + 
                    "bcircles=rex&" + 
                    "bpolys=SliODhW_SmT3&" + 
                    "keys=JEu5jUbXAF&" + 
                    "timeout=pRA")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_123() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/tag?" + 
                    "bcircles=&" + 
                    "filter=oNXa1f&" + 
                    "groupByKey=W70aEM&" + 
                    "time=Gj&" + 
                    "timeout=U1lQkoI&" + 
                    "types=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_124() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/groupBy/tag?" + 
                    "bpolys=KgQyDNY5OWCh&" + 
                    "groupByKey=LqkqvOfA&" + 
                    "groupByValues=z46hYTcub_1yKOV&" + 
                    "keys=2xsM6pNv5uvwRJYx&" + 
                    "time=VHvFTpip&" + 
                    "timeout=LqQWB8OYAqoIGf&" + 
                    "values=hf0x7_3S_0DlA")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_125() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/groupBy/key?" + 
                    "bboxes=_NamhbcD&" + 
                    "filter=thc&" + 
                    "groupByKeys=DiUaxfN_GrbPx&" + 
                    "keys=S&" + 
                    "showMetadata=GVa6X88E9MDxoyrz&" + 
                    "time=J&" + 
                    "types=NcrMk")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_126() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=Hatt0MJRXnRszW&" + 
                    "bpolys=Fk2Ks8IbWE1uvQ&" + 
                    "filter=pDOz1gbApkc&" + 
                    "groupByKey=Zh2PV&" + 
                    "groupByValues=yIFzLdFoU&" + 
                    "keys=CCBeB2K_QyZOaz&" + 
                    "timeout=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_127() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/groupBy/boundary/groupBy/tag?" + 
                    "bboxes=5I2&" + 
                    "bpolys=2BEfbB0GtCIQ&" + 
                    "filter=6RlWyMBbr&" + 
                    "format=7ITnm9l_IG&" + 
                    "groupByKey=onkVEXVuUyJXy&" + 
                    "groupByValues=qZ49r5YjZ9I&" + 
                    "keys=Yowz4zlKMRAGpZA&" + 
                    "time=m_tB&" + 
                    "timeout=GqHCT41SNY")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_128() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/boundary?" + 
                    "bboxes=Aj5iPLqVGD82eggZ&" + 
                    "bcircles=NPyQZAuE1oB9&" + 
                    "keys=k&" + 
                    "time=A6EPF9yyC&" + 
                    "values=aVENgHR6UsIOCJ")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_129() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/groupBy/boundary?" + 
                    "bboxes=PM&" + 
                    "bpolys=Ky4BC14nz&" + 
                    "keys=6FbVtnryi_VHViMS&" + 
                    "types=00YQsrxrRvF&" + 
                    "values=KXOWrrl")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_130() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/density/groupBy/type?" + 
                    "bboxes=5_AM&" + 
                    "bcircles=Ytd28fu3&" + 
                    "filter=&" + 
                    "showMetadata=Xlfi6&" + 
                    "time=TwT&" + 
                    "types=TOjQXWPjp3uQlb")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_131() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/density/groupBy/tag?" + 
                    "bcircles=yhY3k9JFtbCkT&" + 
                    "groupByKey=AbI5YulGkOx_PY&" + 
                    "time=GB&" + 
                    "timeout=mOiD3ViF&" + 
                    "values=h_V0a")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_132() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/density/groupBy/tag?" + 
                    "format=KZlX43LyvF3K2n6c&" + 
                    "groupByKey=E__6mdjiQQ_&" + 
                    "groupByValues=ei_9wxu&" + 
                    "showMetadata=MCwD6MWZiVH2kg&" + 
                    "time=Vsv2Y4NVz_&" + 
                    "values=GoEyF41oVw")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("You need to define one of the boundary parameters (bboxes, bcircles, bpolys)."));
    }
    
    
    @Test
    public void test_133() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/density/groupBy/boundary/groupBy/tag?" + 
                    "bboxes=1rcHk&" + 
                    "bcircles=oVTOixvE4ck&" + 
                    "bpolys=0p81kb_q3OaP8zr&" + 
                    "format=NlIrrjFdhgHs&" + 
                    "groupByKey=ad4VnCg7&" + 
                    "groupByValues=GJ5PwRJw7gbvr&" + 
                    "keys=K_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_134() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/density/groupBy/boundary/groupBy/tag?" + 
                    "filter=&" + 
                    "groupByKey=aGisO&" + 
                    "time=D9lMvGQVUa&" + 
                    "timeout=&" + 
                    "values=xwWMIo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("You need to define one of the boundary parameters (bboxes, bcircles, bpolys)."));
    }
    
    
    @Test
    public void test_135() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/density/groupBy/boundary?showMetadata=cQWP_UnWbSEHr")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("You need to define one of the boundary parameters (bboxes, bcircles, bpolys)."));
    }
    
    
    @Test
    public void test_136() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/density/groupBy/boundary?" + 
                    "showMetadata=8RI2&" + 
                    "time=3WwSVTb&" + 
                    "types=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("You need to define one of the boundary parameters (bboxes, bcircles, bpolys)."));
    }
    
    
    @Test
    public void test_137() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/density?" + 
                    "bboxes=gMCZt_WnAFl&" + 
                    "format=j9XjZXfQCCrj&" + 
                    "keys=muLfk&" + 
                    "showMetadata=2TjUma10x&" + 
                    "types=UlaxnMu62ax&" + 
                    "values=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_138() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/density?" + 
                    "bboxes=9nYMSzEwut49fR&" + 
                    "bcircles=1Xfx83uRsub&" + 
                    "filter=&" + 
                    "showMetadata=_YrfjgA&" + 
                    "timeout=8lF")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_139() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter?" + 
                    "bcircles=2IZ_SXfJl&" + 
                    "bpolys=FJgINj9ZMPPs&" + 
                    "format=I9Eyiges&" + 
                    "keys=ZqDWQ10t3EPI&" + 
                    "time=Uq7aTTnheYi&" + 
                    "timeout=WgjAWfhKpzWs&" + 
                    "types=aOlErSfUEG&" + 
                    "values=_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_140() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter?" + 
                    "filter=UC74FSpNLf1agO&" + 
                    "time=Ns2HpS_NPV6&" + 
                    "timeout=RWnT5QknLua&" + 
                    "values=RVf4tKJfv")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_141() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/ratio?" + 
                    "bcircles=_GWQ&" + 
                    "filter2=dN7_kSJ9rHig5&" + 
                    "format=AqzTn7jsnJ&" + 
                    "keys=j3MpuIIZMO&" + 
                    "keys2=Mgh0KhzdqF5&" + 
                    "showMetadata=pKRU9jed&" + 
                    "timeout=oy1J&" + 
                    "types=G32aB&" + 
                    "values=cLC")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_142() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/ratio?" + 
                    "bboxes=6C7fUs1y62XA5gDf&" + 
                    "bcircles=l9H0R9Zrdhwqyri&" + 
                    "bpolys=BVj&" + 
                    "filter2=s&" + 
                    "format=tE_zN7R&" + 
                    "keys2=JMHMlLH3&" + 
                    "showMetadata=8LzETDT&" + 
                    "time=6woYS3&" + 
                    "types=eZ2StOmdIuypHy&" + 
                    "values=l&" + 
                    "values2=NOWi1ERYEq1Ua9Bi")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_143() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/type?" + 
                    "bpolys=y8YU_ZgqKrtyP&" + 
                    "filter=Nv&" + 
                    "keys=AOgXZ_Z&" + 
                    "timeout=w8ztEtqyh0lQ&" + 
                    "values=2Ogr7yH")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_144() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/groupBy/type?" + 
                    "bpolys=sgtcjS3Pzfg&" + 
                    "filter=R0Vp&" + 
                    "format=sJZPEfR&" + 
                    "showMetadata=&" + 
                    "types=jqcxCMRezPHbM_PO")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_145() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/tag?" + 
                    "groupByKey=DO34Zmd&" + 
                    "time=Qtbw6IJq&" + 
                    "timeout=&" + 
                    "types=nVW6HrchwL8C2nn")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("You need to define one of the boundary parameters (bboxes, bcircles, bpolys)."));
    }
    
    
    @Test
    public void test_146() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/groupBy/tag?" + 
                    "bboxes=TysFS4&" + 
                    "bcircles=H9isSaVdEs2ek&" + 
                    "format=2hJa&" + 
                    "groupByKey=7WdHX3wB3kB0BI&" + 
                    "keys=4JT_6h6&" + 
                    "time=HeaedwcimnBe0XH")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_147() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/key?" + 
                    "bpolys=q_Em&" + 
                    "filter=h3SoXkq8E&" + 
                    "format=XNT5pK&" + 
                    "groupByKeys=DMy6IwGdIcMF&" + 
                    "keys=ZXqXr&" + 
                    "showMetadata=aNiWx&" + 
                    "time=ZoSqeh&" + 
                    "values=cjY30Hb")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_148() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/groupBy/key?" + 
                    "groupByKeys=Mb&" + 
                    "keys=V2Z1KNc&" + 
                    "showMetadata=7awHMI2cF1gcafo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("You need to define one of the boundary parameters (bboxes, bcircles, bpolys)."));
    }
    
    
    @Test
    public void test_149() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/boundary/groupBy/tag?" + 
                    "bboxes=9fw&" + 
                    "groupByKey=bwNQYtKwcEXG3BU&" + 
                    "showMetadata=F&" + 
                    "time=RBsuhYjVhbHFp3&" + 
                    "values=Q")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_150() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/groupBy/boundary/groupBy/tag?" + 
                    "bboxes=lz8x0YTbJBa1_W&" + 
                    "groupByKey=mXPxCLa9p&" + 
                    "groupByValues=WVh3ohfoZtHtyNy&" + 
                    "keys=TKbdb0&" + 
                    "showMetadata=acw7flJCD4M&" + 
                    "timeout=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_151() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/groupBy/boundary?" + 
                    "bboxes=_OEkJSF1&" + 
                    "bcircles=9yCB6vblltfrOuoG&" + 
                    "format=1E3ZECLs3ur&" + 
                    "keys=hZuO0&" + 
                    "showMetadata=Bn4Wtur9brd&" + 
                    "time=z0hhoeIzi4aX&" + 
                    "types=d7qIfWwO4tkh&" + 
                    "values=SDxuYM")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_152() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/groupBy/boundary?" + 
                    "bboxes=UVj8M&" + 
                    "filter=ozExb6&" + 
                    "format=MF&" + 
                    "keys=wHOSv&" + 
                    "showMetadata=tORZm8C_hfLLP_r&" + 
                    "time=fhK9t75")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_153() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density/groupBy/type?" + 
                    "bboxes=VQu0bB6pihh&" + 
                    "showMetadata=iy0Ch4Kmb&" + 
                    "values=D5Uoo7l5ku965")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_154() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/density/groupBy/type?" + 
                    "bpolys=0ziZ7k3zSPh&" + 
                    "filter=TftcR&" + 
                    "showMetadata=0T8dnDEePoheiUS&" + 
                    "time=mNGlA0i9&" + 
                    "timeout=sV92ExSLwUso&" + 
                    "types=Ps2eYfz89&" + 
                    "values=U")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_155() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density/groupBy/tag?" + 
                    "filter=U&" + 
                    "format=Ad4_H1hr&" + 
                    "groupByKey=hCV3KlmCx1fiKq&" + 
                    "keys=h&" + 
                    "time=8b_&" + 
                    "timeout=w&" + 
                    "values=7")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_156() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/density/groupBy/tag?" + 
                    "bcircles=Dv6oMAU&" + 
                    "format=&" + 
                    "groupByKey=EqlZdlRB&" + 
                    "keys=3ppM&" + 
                    "time=R3oF4FATt&" + 
                    "timeout=uPcKcb_KqPctZa&" + 
                    "types=&" + 
                    "values=llXNJ")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_157() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density/groupBy/boundary/groupBy/tag?" + 
                    "bboxes=86tm3JXh5wbp&" + 
                    "bcircles=MdEQ&" + 
                    "bpolys=8nmmR9&" + 
                    "filter=diQhm3YLR&" + 
                    "groupByKey=F_TaA3o6BtQnQ&" + 
                    "time=b&" + 
                    "types=oCxH3&" + 
                    "values=j_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_158() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/density/groupBy/boundary/groupBy/tag?" + 
                    "bcircles=Zz17HfqHi&" + 
                    "groupByKey=NzJrOPv&" + 
                    "groupByValues=SLVEyvqEqvw&" + 
                    "time=37kuoQgspB&" + 
                    "timeout=YkeTD97y57qDwAg")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_159() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density/groupBy/boundary?" + 
                    "bcircles=HYXMZeBGmb_4h&" + 
                    "keys=mFDaFgj&" + 
                    "showMetadata=PsDyTtw&" + 
                    "time=KwgaxtJa16m&" + 
                    "timeout=tLPCD2&" + 
                    "values=b")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_160() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/density/groupBy/boundary?" + 
                    "format=tJ&" + 
                    "showMetadata=3Xt&" + 
                    "types=Mu")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("You need to define one of the boundary parameters (bboxes, bcircles, bpolys)."));
    }
    
    
    @Test
    public void test_161() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/density?" + 
                    "bcircles=0YwBMOs&" + 
                    "bpolys=fmFy_aA9&" + 
                    "filter=8Hq_30LwDzPz_&" + 
                    "format=dmL2lBOS6OQdqHZ&" + 
                    "time=3KQ8h&" + 
                    "types=a4FMTQS0In6&" + 
                    "values=pMOTGSBSJA")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_162() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length/density?" + 
                    "bboxes=_2zQytjdEd8kAXTV&" + 
                    "bcircles=8RBzYOCCFBsQif&" + 
                    "format=sPFp6D&" + 
                    "showMetadata=njIfju&" + 
                    "types=XfdxVMYv9_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_163() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length?" + 
                    "bcircles=DCU&" + 
                    "format=wsp&" + 
                    "keys=xmNK&" + 
                    "showMetadata=ZYSDzixwMtGNnlUq&" + 
                    "time=T4FHY&" + 
                    "timeout=mwS1bkViv&" + 
                    "types=ZaS7DL5rMaYst")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_164() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/length?" + 
                    "bcircles=WTdK1lcxGeLR&" + 
                    "bpolys=qswc8&" + 
                    "filter=L9o&" + 
                    "format=Gb&" + 
                    "keys=85QZP7Qi2wZ_x&" + 
                    "time=SVXE1_E_fqrHsc&" + 
                    "types=VUy6pP12FrnlzKS")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_165() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/ratio/groupBy/boundary?" + 
                    "bcircles=00Z7HGWn4&" + 
                    "bpolys=dnLs&" + 
                    "filter=&" + 
                    "filter2=D2Ncpgc&" + 
                    "format=0_W&" + 
                    "keys=J7x3hl2&" + 
                    "time=zMms&" + 
                    "timeout=l&" + 
                    "types=QNKJtku66q6l&" + 
                    "values=nQisk1N&" + 
                    "values2=MmzHEsqz")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_166() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/ratio?" + 
                    "bboxes=doLgf&" + 
                    "bpolys=ZO&" + 
                    "filter=ruDTHhSg1G1jvJ7W&" + 
                    "keys2=J3HqYKLWZfnph&" + 
                    "time=dH&" + 
                    "types=UxtlCAyp2y&" + 
                    "types2=CMcTKwUr&" + 
                    "values=a&" + 
                    "values2=wsK")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_167() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/ratio?" + 
                    "filter2=zRET7hkrH1&" + 
                    "keys2=uPlFdqvHya&" + 
                    "time=&" + 
                    "timeout=9KRoGZzS&" + 
                    "values=2DIMrPqIUa")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_168() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/type?" + 
                    "filter=mw387YCpq&" + 
                    "showMetadata=ipDEPQPQ&" + 
                    "timeout=mam938hZ33")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_169() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/groupBy/type?" + 
                    "bcircles=QT&" + 
                    "filter=MMmh0yXh752m8ML&" + 
                    "keys=EF&" + 
                    "showMetadata=&" + 
                    "time=P2E&" + 
                    "timeout=WMOwOw1L")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_170() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/tag?" + 
                    "groupByKey=PpOyoZA5jQ3io7Q&" + 
                    "groupByValues=n&" + 
                    "showMetadata=zgyS2WI&" + 
                    "timeout=z8edibDi6")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_171() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/groupBy/tag?" + 
                    "bboxes=Myb4JfeYtslFQ2D&" + 
                    "bcircles=Q&" + 
                    "filter=nt&" + 
                    "groupByKey=CZwTbwHT_7sWrsI&" + 
                    "groupByValues=qF0FACiz8")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_172() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/key?" + 
                    "bboxes=QMqO6&" + 
                    "bpolys=FEevIg5qgD3eM&" + 
                    "format=QJGWC35fq3brmV&" + 
                    "groupByKeys=4LHkp&" + 
                    "showMetadata=iJiHWLbhFSxnJOvj&" + 
                    "time=_B4RBxLegeYoQ&" + 
                    "types=bSEip")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_173() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/groupBy/key?" + 
                    "bpolys=4vKZIrWY1C&" + 
                    "groupByKeys=_g1uZfEEo76g&" + 
                    "showMetadata=07i1zB5vNBtAWRQa&" + 
                    "timeout=uLZCBD&" + 
                    "values=DI86K4GGBjwK0")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_174() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/boundary/groupBy/tag?" + 
                    "bboxes=2yQdvL6&" + 
                    "bpolys=8LLcTwx1WxmY&" + 
                    "filter=EQ&" + 
                    "format=m9iP_J7&" + 
                    "groupByKey=UyoEdf&" + 
                    "groupByValues=Tm&" + 
                    "showMetadata=5SFIpr&" + 
                    "time=BD1j&" + 
                    "values=U")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_175() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=AzkWF9Z5XGyoBpG&" + 
                    "filter=oLMgYPfzqgI&" + 
                    "format=89bNGKa62r&" + 
                    "groupByKey=dQCgumLhHYBS&" + 
                    "groupByValues=UFHPdXvJ&" + 
                    "keys=lyo&" + 
                    "values=t02xKCU")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_176() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/groupBy/boundary?" + 
                    "bcircles=ncZHA2eobaxrePd&" + 
                    "filter=7rewPvGCqm&" + 
                    "format=QEa3S6J0&" + 
                    "time=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_177() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/groupBy/boundary?" + 
                    "bboxes=FMy&" + 
                    "bpolys=p4n2eTPe&" + 
                    "filter=md3pM0&" + 
                    "keys=&" + 
                    "showMetadata=SZLwVNR&" + 
                    "time=6II&" + 
                    "types=05w5cm&" + 
                    "values=gmEEaO")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_178() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/density/groupBy/type?" + 
                    "bboxes=E2lJYs&" + 
                    "filter=nIeI&" + 
                    "format=GaF12Xii2jBVDy&" + 
                    "keys=Lsiwzu&" + 
                    "showMetadata=&" + 
                    "time=WepNNGj&" + 
                    "timeout=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_179() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/density/groupBy/type?" + 
                    "bboxes=4SgkB0GtWqmsf&" + 
                    "bcircles=&" + 
                    "keys=f8yLsDXdGHTEYWKA&" + 
                    "showMetadata=lmagQ_u7Y&" + 
                    "time=1cfN&" + 
                    "values=CxCWZxooQa4dw")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_180() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/density/groupBy/tag?" + 
                    "bboxes=P8Hx_E&" + 
                    "format=RZ&" + 
                    "groupByKey=TdYbmu2im&" + 
                    "groupByValues=4Dkbhxaf1X8&" + 
                    "showMetadata=EgRJrIK&" + 
                    "time=m")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_181() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/density/groupBy/tag?" + 
                    "format=f&" + 
                    "groupByKey=2sL_qEIhz84_Y&" + 
                    "groupByValues=uKNcrTlj9jX&" + 
                    "showMetadata=TVV&" + 
                    "types=iFAYeH5qMU8GEX")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("You need to define one of the boundary parameters (bboxes, bcircles, bpolys)."));
    }
    
    
    @Test
    public void test_182() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/density/groupBy/boundary/groupBy/tag?" + 
                    "bboxes=&" + 
                    "filter=JTMvRtGZYrL&" + 
                    "groupByKey=pRiIHqT&" + 
                    "groupByValues=1Vk&" + 
                    "keys=y&" + 
                    "showMetadata=udU&" + 
                    "time=jrIqs8QA6sPugE&" + 
                    "types=NsONaSDqj5&" + 
                    "values=WL5Ik8kW")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("You need to define one of the boundary parameters (bboxes, bcircles, bpolys)."));
    }
    
    
    @Test
    public void test_183() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/density/groupBy/boundary/groupBy/tag?" + 
                    "bboxes=N&" + 
                    "bcircles=nJ345OEZouIhS5fv&" + 
                    "filter=CMd6DmuRlTDp&" + 
                    "format=dXZksZvTMYG&" + 
                    "groupByKey=9llUFPh&" + 
                    "groupByValues=&" + 
                    "keys=fsQ7RNWBS")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_184() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/density/groupBy/boundary?" + 
                    "bboxes=gLUG2iFCSS&" + 
                    "bcircles=t4C3&" + 
                    "bpolys=PI&" + 
                    "types=fg&" + 
                    "values=9i0ILXBZ")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_185() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/density/groupBy/boundary?" + 
                    "filter=QRRdY8IbsOBiK&" + 
                    "format=JBCqaSfTLiz7E&" + 
                    "showMetadata=a7Xdhx&" + 
                    "types=a_OvGcHS0BdGodQ&" + 
                    "values=yJTSVuN9fUo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("You need to define one of the boundary parameters (bboxes, bcircles, bpolys)."));
    }
    
    
    @Test
    public void test_186() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count/density?" + 
                    "bboxes=j&" + 
                    "bpolys=r&" + 
                    "format=XB&" + 
                    "keys=&" + 
                    "types=9uzlHOs&" + 
                    "values=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_187() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count/density?" + 
                    "bboxes=C5g5bUmOE&" + 
                    "bcircles=qD&" + 
                    "bpolys=hzWd9I43sGv&" + 
                    "filter=3ZvUKl2Lk&" + 
                    "keys=a45vy6oSfn069rT&" + 
                    "timeout=YDPzT5cMX6A&" + 
                    "types=ELghS7AuZWjJ&" + 
                    "values=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_188() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/count?" + 
                    "bpolys=rKct7&" + 
                    "format=CGRKNqXlb6n&" + 
                    "timeout=PjzQWQw&" + 
                    "types=&" + 
                    "values=5bXg8GBM")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_189() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/count?" + 
                    "bcircles=bokt&" + 
                    "filter=0r6FP&" + 
                    "format=6jKa0ue&" + 
                    "showMetadata=bkDfC5AI3hnvE0G&" + 
                    "timeout=LdBhHp_0EX&" + 
                    "types=0")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_190() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/ratio/groupBy/boundary?" + 
                    "keys2=QnUHM&" + 
                    "showMetadata=Wgyz&" + 
                    "types=QzCKycc&" + 
                    "types2=wCgmh1PmO9BdBSjv")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("You need to define one of the boundary parameters (bboxes, bcircles, bpolys)."));
    }
    
    
    @Test
    public void test_191() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/ratio?" + 
                    "bpolys=hPpHzrNwgHXyjn&" + 
                    "format=qr1dPNDQ&" + 
                    "keys=eP52G3T&" + 
                    "showMetadata=po&" + 
                    "timeout=Barj9w&" + 
                    "values=FgpfyJr6")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_192() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/ratio?" + 
                    "bboxes=qtQ&" + 
                    "bcircles=QotdArJ5Syf124&" + 
                    "filter=O&" + 
                    "format=VC&" + 
                    "keys=EU&" + 
                    "timeout=PuVlTvFtfnMSGe&" + 
                    "values=MgORH731tCrDgZ&" + 
                    "values2=8buh7s9Qcii2")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_193() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/type?" + 
                    "bcircles=wxlwWM2S&" + 
                    "types=sx7wHdFzIaf7a")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_194() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/type?" + 
                    "bcircles=uGxyxerOg&" + 
                    "filter=8VXeXxiYgAosR&" + 
                    "keys=gVW8ChtTsiGZSBzt&" + 
                    "showMetadata=LyoT5vTGFgsPS661&" + 
                    "time=EdQ8Uj48AOm&" + 
                    "timeout=I_&" + 
                    "values=9TWsm8p57fNhWuo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_195() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/tag?" + 
                    "bcircles=kwcr28Ezg2Q5_&" + 
                    "bpolys=fcHi&" + 
                    "filter=uGVKTO7Df_zO9&" + 
                    "groupByKey=lUH5q44bCVWZjg&" + 
                    "groupByValues=jlf42lIzTBsao&" + 
                    "keys=zrFu7xZReM&" + 
                    "showMetadata=c86V&" + 
                    "timeout=_a&" + 
                    "types=&" + 
                    "values=Gb3OVlVDkqgEhkaR")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_196() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/tag?" + 
                    "bboxes=wfBA3wNsgfEGW&" + 
                    "bcircles=WGwYbmC&" + 
                    "format=Qk5UE8&" + 
                    "groupByKey=HOG0bhnndpqH&" + 
                    "groupByValues=My9t&" + 
                    "keys=1D6X7v5qrPIH&" + 
                    "showMetadata=4CTIbh278&" + 
                    "time=ihFT0wtaf&" + 
                    "types=gZ&" + 
                    "values=gGSrqUi36esL")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_197() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/key?" + 
                    "bpolys=RAi4303DI3fYFH&" + 
                    "filter=cHbm9fB&" + 
                    "format=E8em5kwF6y4&" + 
                    "groupByKeys=sdEWJbhqdT&" + 
                    "showMetadata=RUCLs&" + 
                    "timeout=fsJIPEN1&" + 
                    "types=6nh&" + 
                    "values=Gz3wcOu")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_198() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/key?" + 
                    "bcircles=zq2S7sDr9LvB&" + 
                    "filter=czdvQgeym5wgA04&" + 
                    "groupByKeys=zSy&" + 
                    "keys=T292yJ981El&" + 
                    "showMetadata=n0vI4bZ8X&" + 
                    "time=roauX")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_199() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/boundary/groupBy/tag?" + 
                    "bpolys=bWMLSkuH8B&" + 
                    "groupByKey=0&" + 
                    "groupByValues=JFHWOsUSI&" + 
                    "keys=uCfPpre3oGRTTk1&" + 
                    "timeout=ZkJ25a&" + 
                    "values=HSQDV8A")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_200() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/boundary/groupBy/tag?" + 
                    "filter=QTk2fjJXogCoRz6&" + 
                    "format=6DxEpH0ud1fHsQ6&" + 
                    "groupByKey=WK7o&" + 
                    "groupByValues=&" + 
                    "keys=Xb&" + 
                    "showMetadata=UrFMGCLZYKxpvqZK&" + 
                    "timeout=_BM&" + 
                    "types=fE4rMo32YR&" + 
                    "values=xK03nX78iE1qdE")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_201() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/groupBy/boundary?" + 
                    "bboxes=M1JkNk_k4&" + 
                    "keys=rxx4Ek&" + 
                    "values=OMxx")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_202() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/groupBy/boundary?" + 
                    "bboxes=kojO46Aafsr&" + 
                    "bpolys=I8ACDTu4&" + 
                    "format=NMP9&" + 
                    "keys=O9u4Z_&" + 
                    "timeout=Onrq8PlX&" + 
                    "values=HE")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_203() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density/groupBy/type?" + 
                    "bboxes=RKYh&" + 
                    "filter=xlW7Dpw8&" + 
                    "format=69WD4i0PLIq3R&" + 
                    "keys=c2UblqRtv&" + 
                    "showMetadata=2jgqdgf2VJQKLJo&" + 
                    "time=5ebnD&" + 
                    "values=jXExCt")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_204() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/density/groupBy/type?" + 
                    "bboxes=6A4sD85&" + 
                    "bpolys=p&" + 
                    "keys=&" + 
                    "timeout=tbRfqJtf7MkdZ7Im&" + 
                    "types=zMCTi76CHo&" + 
                    "values=CqI2YHCwxDB")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_205() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density/groupBy/tag?" + 
                    "bcircles=sg5uGavRi6B0&" + 
                    "bpolys=uB7LJt9BQ&" + 
                    "filter=c_c0M2&" + 
                    "format=7CB&" + 
                    "groupByKey=49y&" + 
                    "groupByValues=ABLNGwTs8r&" + 
                    "keys=WrwF5&" + 
                    "values=4xQqZ")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_206() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/density/groupBy/tag?" + 
                    "bpolys=GlH_orjLNUWu&" + 
                    "format=5hJIb3&" + 
                    "groupByKey=BpIIxXMfoQAQ&" + 
                    "time=e0Gw4C")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_207() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density/groupBy/boundary/groupBy/tag?" + 
                    "filter=8Es4u0kn&" + 
                    "groupByKey=Cz6EKmvAkfvY8&" + 
                    "groupByValues=iaP&" + 
                    "timeout=WgosSjB&" + 
                    "types=EmCopSyCZROs")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_208() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/density/groupBy/boundary/groupBy/tag?" + 
                    "bboxes=tSX8bBcfUgSqb&" + 
                    "filter=WfAJH5lG&" + 
                    "groupByKey=3x289V1_Z5vjV&" + 
                    "keys=qAq7wau0_H&" + 
                    "types=A8Ub45&" + 
                    "values=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_209() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density/groupBy/boundary?" + 
                    "bpolys=rMt&" + 
                    "filter=sYpwSKRP_Cv0W&" + 
                    "types=h2")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_210() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/density/groupBy/boundary?" + 
                    "bcircles=io5ZB&" + 
                    "filter=b3R_4rxGN&" + 
                    "showMetadata=E4uIlQvn&" + 
                    "timeout=HCa")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_211() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/density?" + 
                    "bcircles=&" + 
                    "bpolys=C&" + 
                    "format=xmlFZZbcWIHzrd&" + 
                    "time=I0GRGLACn&" + 
                    "timeout=Yh0Ul4H607TKCv")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_212() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area/density?" + 
                    "bboxes=tXgMCrUTqE1WwSb&" + 
                    "bcircles=2Ff3NBX_GYX0UjW&" + 
                    "bpolys=haiFKlLW&" + 
                    "filter=bh&" + 
                    "format=&" + 
                    "keys=kGjAc6p9W&" + 
                    "time=VY&" + 
                    "timeout=4wHcGIJzSMp9Jn4")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_213() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area?" + 
                    "bcircles=t&" + 
                    "format=I917hS0lnu&" + 
                    "keys=OyLB&" + 
                    "values=CBQvn")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_214() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/area?" + 
                    "filter=GOT3gQg2pa&" + 
                    "keys=T1pXK&" + 
                    "time=kGGyJ8a&" + 
                    "types=XQZQGuI")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("You need to define one of the boundary parameters (bboxes, bcircles, bpolys)."));
    }
    
    
    @Test
    public void test_215() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/ratio?" + 
                    "bboxes=x&" + 
                    "bpolys=Jt1&" + 
                    "filter=S_z&" + 
                    "format=lV8gzDqE_y&" + 
                    "keys=yJFDdLlwiCnElKv&" + 
                    "time=p&" + 
                    "types2=AT&" + 
                    "values2=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_216() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/density/groupBy/boundary?" + 
                    "bcircles=e%3A8.7020%2C49.431005%2C2%7CGQAJ%3A8.717%2C49.402%2C34%7CBS%3A8.74691%2C49.4047%2C7&" + 
                    "filter=addr%3Acity%3D*+and+type%3Arelation+and+id%3A%281+..+9999%29&" + 
                    "format=json&" + 
                    "time=2017-12-08")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("You need to give at least two timestamps or a time interval for this resource."));
    }
    
    
    @Test
    public void test_217() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/density/groupBy/type?" + 
                    "bpolys=mzZSNHK6LM&" + 
                    "filter=tdR6zDOFtZERpm1B&" + 
                    "format=TnPBcV&" + 
                    "values=u")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_218() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/groupBy/key?" + 
                    "bcircles=cHQklrdK&" + 
                    "bpolys=oEQIdeQyg&" + 
                    "format=SwT2V6i7VenKgP&" + 
                    "groupByKeys=LuRl&" + 
                    "showMetadata=xynP6wGkW8&" + 
                    "timeout=&" + 
                    "values=oxGclXALAu")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_219() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/density/groupBy/tag?" + 
                    "filter=ljJ7jXUmG7x&" + 
                    "format=Cpy2_V&" + 
                    "groupByKey=yneDakcfTe_Og&" + 
                    "groupByValues=EfqFaWqDB8&" + 
                    "time=egNtB")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("You need to define one of the boundary parameters (bboxes, bcircles, bpolys)."));
    }
    
    
    @Test
    public void test_220() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/length/ratio/groupBy/boundary?" + 
                    "bboxes=WGie%3A8.672%2C49.4271%2C8.755%2C49.380%7CfSF%3A8.673%2C49.40364%2C8.7370%2C49.3822&" + 
                    "filter=tracktype%3D*+or+area%3A%281.0+..+1E6%29&" + 
                    "showMetadata=false&" + 
                    "types2=line%2C")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The filter2 parameter has to be defined when using a /ratio endpoint."));
    }
    
    
    @Test
    public void test_221() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/area/ratio/groupBy/boundary?" + 
                    "bcircles=s%3A8.7136%2C49.423%2C1&" + 
                    "filter=destination%3D*+or+not+type%3Away+and+length%3A%28+..+100%29&" + 
                    "format=csv&" + 
                    "keys2=highway&" + 
                    "showMetadata=yes&" + 
                    "timeout=58&" + 
                    "values2=emergency_access_point")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The filter2 parameter has to be defined when using a /ratio endpoint."));
    }
    
    
    @Test
    public void test_222() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/tag?" + 
                    "bcircles=dA&" + 
                    "filter=eF4jLcMJ9YpmcwK&" + 
                    "format=MbTWK7s45QBC9&" + 
                    "groupByKey=p_QB8&" + 
                    "groupByValues=LJZMA87Lug&" + 
                    "showMetadata=t9t2JrI&" + 
                    "time=&" + 
                    "timeout=JtFl9u&" + 
                    "types=qDI_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The given timeout does not fit to its format. Please give one value in seconds and use a point as the decimal delimiter, if needed."));
    }
    
    
    @Test
    public void test_223() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/groupBy/type?" + 
                    "bboxes=S5n&" + 
                    "bcircles=cTvW&" + 
                    "bpolys=HeSLh0_Mf&" + 
                    "filter=tDKCw7UJZj&" + 
                    "format=UplGlqMCT6ppbcZs&" + 
                    "keys=UYO89&" + 
                    "time=bYS5L6nN4Rd44f&" + 
                    "values=gMiUFlA4JLRuRgqs")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter."));
    }
    
    
    @Test
    public void test_224() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/type?" + 
                    "bpolys=X&" + 
                    "filter=UUzxMaMDJJD&" + 
                    "format=3YDjZ&" + 
                    "showMetadata=&" + 
                    "time=36crDs7vmdRXXZ")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_225() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/groupBy/boundary?" + 
                    "bcircles=N1Gr&" + 
                    "showMetadata=8F&" + 
                    "time=2WSIwZSyt&" + 
                    "types=3t_O2XNTsJmi4")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_226() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/density/groupBy/type?" + 
                    "bboxes=eDgn4fsKD&" + 
                    "bcircles=&" + 
                    "filter=E8X4_V&" + 
                    "time=alTfzb1fcHG&" + 
                    "timeout=&" + 
                    "types=VZdt")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a semicolon, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon."));
    }
    
    
    @Test
    public void test_227() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/density/groupBy/tag?" + 
                    "bboxes=8.66738%2C49.410%2C8.751%2C49.3842%7C8.658%2C49.406%2C8.745%2C49.385%7C8.679%2C49.418401%2C8.741%2C49.386%7C8.656%2C49.402%2C8.722881%2C49.385&" + 
                    "format=csv&" + 
                    "groupByKey=building&" + 
                    "groupByValues=secondary_link&" + 
                    "keys=highway&" + 
                    "showMetadata=yes&" + 
                    "time=2017-01-21")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("You need to give at least two timestamps or a time interval for this resource."));
    }
    
    
    @Test
    public void test_228() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/density/groupBy/tag?" + 
                    "bboxes=M%3A8.655%2C49.400774%2C8.751%2C49.3912%7CJ%3A8.671734%2C49.403%2C8.736%2C49.397%7CRYR%3A8.675%2C49.417%2C8.719668%2C49.395%7CP%3A8.67550%2C49.427682%2C8.7156%2C49.396&" + 
                    "format=geojson&" + 
                    "groupByKey=highway&" + 
                    "keys=highway&" + 
                    "showMetadata=no&" + 
                    "time=2016-11-22&" + 
                    "values=cycleway")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("You need to give at least two timestamps or a time interval for this resource."));
    }
    
    
    @Test
    public void test_229() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/elements/perimeter/ratio?" + 
                    "bboxes=8.676%2C49.400%2C8.748%2C49.381%7C8.663%2C49.4134%2C8.7395%2C49.3932&" + 
                    "filter=lit%3D*+or+type%3Anode&" + 
                    "keys2=highway&" + 
                    "showMetadata=yes&" + 
                    "types2=way%2C")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The filter2 parameter has to be defined when using a /ratio endpoint."));
    }
    
    
    @Test
    public void test_230() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/key?" + 
                    "bboxes=8.661%2C49.4293%2C8.70910%2C49.381&" + 
                    "filter=turn%3D*+or+area%3A%281.0+..+1E6%29&" + 
                    "format=json&" + 
                    "groupByKeys=type%2Clanes%3Abackward&" + 
                    "time=2010-09-29&" + 
                    "timeout=59")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("You need to give at least two timestamps or a time interval for this resource."));
    }
    
    
    @Test
    public void test_231() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/elements/perimeter/ratio/groupBy/boundary?" + 
                    "bcircles=WY%3A8.704%2C49.406%2C2&" + 
                    "filter=oneway%3D*+or+not+geometry%3Aline+and+length%3A%28+..+100%29&" + 
                    "keys2=highway&" + 
                    "time=2016-09-20&" + 
                    "types2=polygon%2Cother&" + 
                    "values2=stop")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("The filter2 parameter has to be defined when using a /ratio endpoint."));
    }
    
    
    @Test
    public void test_232() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/users/count/groupBy/tag?" + 
                    "bboxes=VG%3A8.695%2C49.4033%2C8.74969%2C49.391&" + 
                    "groupByKey=building&" + 
                    "groupByValues=church%2Csynagogue&" + 
                    "keys=highway&" + 
                    "showMetadata=false&" + 
                    "time=2013-10-11&" + 
                    "values=emergency_access_point")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("You need to give at least two timestamps or a time interval for this resource."));
    }
    
    
    @Test
    public void test_233() throws Exception {
        
        given().accept("application/json")
                .post(baseUrlOfSut + "/users/count/groupBy/type?" + 
                    "bcircles=OW%3A8.7179%2C49.426%2C6%7Cne%3A8.711%2C49.427%2C6&" + 
                    "keys=highway&" + 
                    "showMetadata=false&" + 
                    "time=2016-09-20&" + 
                    "timeout=61")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("You need to give at least two timestamps or a time interval for this resource."));
    }


}
